{"root":"0:0:1680","crate_version":"1.9.1","includes_private":false,"index":{"5:9139:61058":{"id":"5:9139:61058","crate_id":5,"name":"ceil","span":null,"visibility":"default","docs":"Returns the smallest integer greater than or equal to each lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13822:3894":{"id":"1:13822:3894","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3752:1887":{"id":"1:3752:1887","crate_id":1,"name":"start_bound","span":null,"visibility":"default","docs":"Start index bound.\n\nReturns the start value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((..10).start_bound(), Unbounded);\nassert_eq!((3..10).start_bound(), Included(&3));\n# }\n```","links":{},"attrs":["#[stable(feature = \"collections_range\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"1:46260:1878","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3382:225-0:1174:2496":{"id":"a:1:3382:225-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:664:802":{"id":"0:664:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1051,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:649:667":{"id":"0:649:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1023,4],"end":[1026,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1444:502":{"id":"0:1444:502","crate_id":0,"name":"count","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14536:2800":{"id":"1:14536:2800","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14537:55549","1:14538:55550","1:14539:55551","1:14540:2258","1:14541:55552","1:14542:55553","1:14543:3223"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13347:3436":{"id":"1:13347:3436","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13349:3459","1:13350:932","1:13351:55490","1:13352:55491"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1154":{"id":"0:1154","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[965,0],"end":[974,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}},"items":["0:1158:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3626:384":{"id":"1:3626:384","crate_id":1,"name":"call_mut","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"1:8912:3215":{"id":"1:8912:3215","crate_id":1,"name":"skip_while","span":null,"visibility":"default","docs":"Creates an iterator that [`skip`]s elements based on a predicate.\n\n[`skip`]: Iterator::skip\n\n`skip_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and ignore elements\nuntil it returns `false`.\n\nAfter `false` is returned, `skip_while()`'s job is over, and the\nrest of the elements are yielded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `skip_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure argument is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\n\n// while this would have been false, since we already got a false,\n// skip_while() isn't used any more\nassert_eq!(iter.next(), Some(&-2));\n\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::skip":"1:8919:1329"},"attrs":["#[doc(alias = \"drop_while\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SkipWhile","id":"1:47037:2958","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1383:1817":{"id":"0:1383:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9043:2323":{"id":"1:9043:2323","crate_id":1,"name":"min","span":null,"visibility":"default","docs":"Returns the minimum element of an iterator.\n\nIf several elements are equally minimum, the first element is returned.\nIf the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::min)\n        .unwrap(),\n    1.3\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().min(), Some(&1));\nassert_eq!(b.iter().min(), None);\n```","links":{"`f32`":"5:15886:2663","`Iterator::reduce`":"1:8983:3231","`Ord`":"1:2956:180","`f64`":"5:15887:2664","`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5429:60688":{"id":"5:5429:60688","crate_id":5,"name":"from_vec","span":null,"visibility":"default","docs":"Creates an [`OsString`] from a byte vector.\n\nSee the module documentation for an example.","links":{"`OsString`":"5:2651:183"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"4:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9532:3068-0:724:2087":{"id":"a:1:9532:3068-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1108":{"id":"0:1108","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[870,0],"end":[870,41]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3454:2842":{"id":"1:3454:2842","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3456:184","1:3457:565"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9042:2908":{"id":"1:9042:2908","crate_id":1,"name":"max","span":null,"visibility":"default","docs":"Returns the maximum element of an iterator.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::max)\n        .unwrap(),\n    2.4\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().max(), Some(&3));\nassert_eq!(b.iter().max(), None);\n```","links":{"`Iterator::reduce`":"1:8983:3231","`None`":"1:47773:177","`f32`":"5:15886:2663","`f64`":"5:15887:2664","`Ord`":"1:2956:180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5532:61080":{"id":"5:5532:61080","crate_id":5,"name":"atime_nsec","span":null,"visibility":"default","docs":"Returns the last access time of the file, in nanoseconds since [`atime`].\n\n[`atime`]: MetadataExt::atime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_access_time = meta.atime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::atime":"5:5531:61079"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6471:7303":{"id":"5:6471:7303","crate_id":5,"name":"st_atime_nsec","span":null,"visibility":"default","docs":"Returns the last access time of the file, in nanoseconds since [`st_atime`].\n\n[`st_atime`]: Self::st_atime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_atime":"5:6470:7302"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3500:184":{"id":"1:3500:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `&` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:5511:60718":{"id":"5:5511:60718","crate_id":5,"name":"from_mode","span":null,"visibility":"default","docs":"Creates a new instance of `Permissions` from the given set of Unix\npermission bits.\n\n# Examples\n\n```\nuse std::fs::Permissions;\nuse std::os::unix::fs::PermissionsExt;\n\n// Read/write for owner and read for others.\nlet permissions = Permissions::from_mode(0o644);\nassert_eq!(permissions.mode(), 0o644);\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3375:1844":{"id":"1:3375:1844","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:8676-0:576:1964":{"id":"b:1:8676-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:8676-0:1096:1990":{"id":"b:1:8676-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[147,0],"end":[250,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:956:1945","0:957:1946","0:958:1951","0:959:1953","0:960:802","0:961:1956","0:962:788","0:963:1975","0:964:1978","0:965:1989","0:967:1996"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9056:2909":{"id":"1:9056:2909","crate_id":1,"name":"max_by","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value with respect to the\nspecified comparison function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"iter_max_by\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:312:1909":{"id":"b:1:2865-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5556:4085":{"id":"5:5556:4085","crate_id":5,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5557:60669","5:5558:60670","5:5559:60671","5:5560:60672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3207-0:598:1966":{"id":"b:1:3207-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8971:3230":{"id":"1:8971:3230","crate_id":1,"name":"try_for_each","span":null,"visibility":"default","docs":"An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error.\n\nThis can also be thought of as the fallible form of [`for_each()`]\nor as the stateless version of [`try_fold()`].\n\n[`for_each()`]: Iterator::for_each\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\n```\nuse std::fs::rename;\nuse std::io::{stdout, Write};\nuse std::path::Path;\n\nlet data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n\nlet res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\nassert!(res.is_ok());\n\nlet mut it = data.iter().cloned();\nlet res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\nassert!(res.is_err());\n// It short-circuited, so the remaining items are still in the iterator:\nassert_eq!(it.next(), Some(\"stale_bread.json\"));\n```\n\nThe [`ControlFlow`] type can be used with this method for the situations\nin which you'd use `break` and `continue` in a normal loop:\n\n```\nuse std::ops::ControlFlow;\n\nlet r = (2..100).try_for_each(|x| {\n    if 323 % x == 0 {\n        return ControlFlow::Break(x)\n    }\n\n    ControlFlow::Continue(())\n});\nassert_eq!(r, ControlFlow::Break(17));\n```","links":{"Iterator::for_each":"1:8898:2220","Iterator::try_fold":"1:8967:3229","`ControlFlow`":"1:46060:2870"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1419:1817":{"id":"0:1419:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13744:2413":{"id":"1:13744:2413","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656","`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:409:1654":{"id":"a:1:9532:3068-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:4421:3223":{"id":"5:4421:3223","crate_id":5,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adaptor for this instance of `Read`.\n\nThe returned adapter also implements `Read` and will simply borrow this\ncurrent reader.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n    let mut other_buffer = Vec::new();\n\n    {\n        let reference = f.by_ref();\n\n        // read at most 5 bytes\n        reference.take(5).read_to_end(&mut buffer)?;\n\n    } // drop our &mut reference so we can use f again\n\n    // original file still usable, read the rest\n    f.read_to_end(&mut other_buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"5:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:303:1798":{"id":"0:303:1798","crate_id":0,"name":"insert","span":{"filename":"src/map/core.rs","begin":[603,4],"end":[605,5]},"visibility":"public","docs":"Sets the value of the entry to `value`, and returns the entry's old value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:539:2104":{"id":"0:539:2104","crate_id":0,"name":"get_index_mut","span":{"filename":"src/map.rs","begin":[790,4],"end":[792,5]},"visibility":"public","docs":"Get a key-value pair by index\n\nValid indices are *0 <= index < self.len()*\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:1075:1900":{"id":"b:1:3207-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"4:846:54880":{"id":"4:846:54880","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":"Creates owned data from borrowed data, usually by cloning.\n\n# Examples\n\nBasic usage:\n\n```\nlet s: &str = \"a\";\nlet ss: String = s.to_owned();\n\nlet v: &[i32] = &[1, 2];\nlet vv: Vec<i32> = v.to_owned();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1384:1819":{"id":"0:1384:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1197:415":{"id":"0:1197:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1073,4],"end":[1078,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:558":{"id":"0:558","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[886,0],"end":[888,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1368:1818","0:1369:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2868-0:746:1990":{"id":"b:1:2868-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23033:55650":{"id":"1:23033:55650","crate_id":1,"name":"copysign","span":null,"visibility":"default","docs":"Returns each lane with the magnitude of `self` and the sign of `sign`.\n\nFor any lane containing a `NAN`, a `NAN` with the sign of `sign` is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["sign",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:513:2073":{"id":"0:513:2073","crate_id":0,"name":"sort_keys","span":{"filename":"src/map.rs","begin":[680,4],"end":[687,5]},"visibility":"public","docs":"Sort the map’s key-value pairs by the default ordering of the keys.\n\nSee [`sort_by`](Self::sort_by) for details.","links":{"Self::sort_by":"0:516:2074"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1428:1817":{"id":"0:1428:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3173:312":{"id":"1:3173:312","crate_id":1,"name":"as_ref","span":null,"visibility":"default","docs":"Converts this type into a shared reference of the (usually inferred) input type.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:292:2289":{"id":"0:292:2289","crate_id":0,"name":"or_default","span":{"filename":"src/map/core.rs","begin":[578,4],"end":[586,5]},"visibility":"public","docs":"Inserts a default-constructed value in the entry if it is vacant and returns a mutable\nreference to it. Otherwise a mutable reference to an already existent value is returned.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8668:137":{"id":"1:8668:137","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8670:691"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3203-0:1059:2087":{"id":"b:1:3203-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:63:1873":{"id":"0:63:1873","crate_id":0,"name":"__private_marker","span":{"filename":"src/mutable_keys.rs","begin":[72,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PrivateMarker","id":"0:44:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3283:55054":{"id":"1:3283:55054","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":"Provides type based access to context intended for error reports.\n\nUsed in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\nreferences to member variables from `dyn Error` trait objects.\n\n# Example\n\n```rust\n#![feature(provide_any)]\n#![feature(error_generic_member_access)]\nuse core::fmt;\nuse core::any::Demand;\n\n#[derive(Debug)]\nstruct MyBacktrace {\n    // ...\n}\n\nimpl MyBacktrace {\n    fn new() -> MyBacktrace {\n        // ...\n        # MyBacktrace {}\n    }\n}\n\n#[derive(Debug)]\nstruct SourceError {\n    // ...\n}\n\nimpl fmt::Display for SourceError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Source Error\")\n    }\n}\n\nimpl std::error::Error for SourceError {}\n\n#[derive(Debug)]\nstruct Error {\n    source: SourceError,\n    backtrace: MyBacktrace,\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Error\")\n    }\n}\n\nimpl std::error::Error for Error {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand\n            .provide_ref::<MyBacktrace>(&self.backtrace)\n            .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n    }\n}\n\nfn main() {\n    let backtrace = MyBacktrace::new();\n    let source = SourceError {};\n    let error = Error { source, backtrace };\n    let dyn_error = &error as &dyn std::error::Error;\n    let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n\n    assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n}\n```","links":{"`Demand::provide_ref`":"1:4181:68557","`Demand::provide_value`":"1:4176:68555"},"attrs":["#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]","#[allow(unused_variables)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:4168:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:598:1966":{"id":"0:598:1966","crate_id":0,"name":"Values","span":{"filename":"src/map.rs","begin":[956,0],"end":[958,1]},"visibility":"public","docs":"An iterator over the values of a `IndexMap`.\n\nThis `struct` is created by the [`values`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`values`]: struct.IndexMap.html#method.values\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:598:1966","a:1:9532:3068-0:598:1966","a:1:3382:225-0:598:1966","a:1:3411:3178-0:598:1966","a:1:9533:3067-0:598:1966","b:1:4104-0:598:1966","b:1:3218-0:598:1966","b:1:3213-0:598:1966","b:1:3203-0:598:1966","b:1:3207-0:598:1966","b:1:2865-0:598:1966","b:1:2868-0:598:1966","b:1:8676-0:598:1966","b:4:848-0:598:1966","0:603","0:608","0:611","0:615","0:618","0:622"]}},"a:1:3370:216-0:1269:2509":{"id":"a:1:3370:216-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[319,0],"end":[773,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:467:1999","0:468:2002","0:469:2003","0:472:1798","0:473:2017","0:474:2023","0:475:2026","0:477:1659","0:479:2033","0:481:2035","0:483:2027","0:485:2037","0:487:2038","0:491:2044","0:493:2049","0:495:2045","0:497:2050","0:499:2055","0:501:2061","0:503:2063","0:505:2062","0:507:2066","0:508:2067","0:513:2073","0:516:2074","0:520:2086","0:523:2091","0:526:2092","0:530:2097","0:533:2100"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6834:4103":{"id":"5:6834:4103","crate_id":5,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6835:59722","5:6836:59723"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3521:184":{"id":"1:3521:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `>>` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3493:962":{"id":"1:3493:962","crate_id":1,"name":"not","span":null,"visibility":"default","docs":"Performs the unary `!` operation.\n\n# Examples\n\n```\nassert_eq!(!true, false);\nassert_eq!(!false, true);\nassert_eq!(!1u8, 254);\nassert_eq!(!0u8, 255);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Not","id":"1:3491:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1242:932":{"id":"0:1242:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1184,4],"end":[1186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[81,0],"end":[98,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:419:415","0:420:417"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:4104-0:1059:2087":{"id":"b:1:4104-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3370:216-0:672:1900":{"id":"a:1:3370:216-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:542:1817":{"id":"0:542:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[811,4],"end":[813,5]},"visibility":"public","docs":"Get the last key-value pair\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23084:55080":{"id":"1:23084:55080","crate_id":1,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3207-0:1269:2509":{"id":"b:1:3207-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3382:225-0:598:1966":{"id":"a:1:3382:225-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3218-0:724:2087":{"id":"b:1:3218-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3491:2851":{"id":"1:3491:2851","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3492:184","1:3493:962"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6475:7307":{"id":"5:6475:7307","crate_id":5,"name":"st_ctime_nsec","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n\n[`st_ctime`]: Self::st_ctime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_ctime":"5:6474:7306"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10810:147":{"id":"1:10810:147","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10811:659","1:10812:2411","1:10813:3348","1:10814:3349","1:10815:3350","1:10816:3351","1:10817:3352","1:10818:3353","1:10819:3354","1:10820:3355","1:10821:3356","1:10822:3357","1:10823:3358","1:10824:3359","1:10825:3360","1:10826:1558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9009:3233":{"id":"1:9009:3233","crate_id":1,"name":"find_map","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first non-none result.\n\n`iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n\n# Examples\n\n```\nlet a = [\"lol\", \"NaN\", \"2\", \"5\"];\n\nlet first_number = a.iter().find_map(|s| s.parse().ok());\n\nassert_eq!(first_number, Some(2));\n```","links":{},"attrs":["#[stable(feature = \"iterator_find_map\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13791:56906":{"id":"1:13791:56906","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:1230:2502":{"id":"b:1:3218-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:9533:3067-0:672:1900":{"id":"a:1:9533:3067-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3213-0:927:1655":{"id":"b:1:3213-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:22:1653":{"id":"0:22:1653","crate_id":0,"name":"Equivalent","span":{"filename":"src/equivalent.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"Key equivalence trait.\n\nThis trait allows hash table lookup to be customized.\nIt has one blanket implementation that uses the regular `Borrow` solution,\njust like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup\ninto a map with `String` keys and so on.\n\n# Contract\n\nThe implementor **must** hash like `K`, if it is hashable.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:24:1645"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:25"]}},"1:23732:1288":{"id":"1:23732:1288","crate_id":1,"name":"simd_gt","span":null,"visibility":"default","docs":"Test if each lane is greater than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1429:1819":{"id":"0:1429:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1136:688":{"id":"0:1136:688","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"# Examples\n\n```\nuse indexmap::IndexSet;\n\nlet set1 = IndexSet::from([1, 2, 3, 4]);\nlet set2: IndexSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:635:1813":{"id":"0:635:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1005,4],"end":[1005,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}}},"0:738:802":{"id":"0:738:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1167,4],"end":[1169,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3444:2439":{"id":"1:3444:2439","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3446:184","1:3447:1376"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2868-0:672:1900":{"id":"b:1:2868-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:501:2061":{"id":"0:501:2061","crate_id":0,"name":"shift_remove","span":{"filename":"src/map.rs","begin":[600,4],"end":[605,5]},"visibility":"public","docs":"Remove the key-value pair equivalent to `key` and return\nits value.\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3370:216":{"id":"1:3370:216","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3533:2856":{"id":"1:3533:2856","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3535:364"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:968":{"id":"0:968","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[252,0],"end":[651,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:971:1999","0:972:2002","0:973:2003","0:974:1798","0:975:2017","0:977:2495","0:980:2501","0:983:2505","0:986:62","0:989:2266","0:991:1659","0:994:2035","0:997:2027","0:999:2305","0:1000:2517","0:1002:2044","0:1004:2045","0:1006:2061","0:1008:2261","0:1010:2530","0:1013:2532","0:1016:2055","0:1019:2062","0:1022:2066","0:1024:2067","0:1027:2537","0:1028:2074","0:1031:2086","0:1034:2543","0:1035:2092","0:1038:2097","0:1041:2100"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6639:59535":{"id":"5:6639:59535","crate_id":5,"name":"as_raw_fd","span":null,"visibility":"default","docs":"Extracts the raw file descriptor.\n\nThis function is typically used to **borrow** an owned file descriptor.\nWhen used in this way, this method does **not** pass ownership of the\nraw file descriptor to the caller, and the file descriptor is only\nguaranteed to be valid while the original object has not yet been\ndestroyed.\n\nHowever, borrowing is not strictly required. See [`AsFd::as_fd`]\nfor an API which strictly borrows a file descriptor.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{AsRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{AsRawFd, RawFd};\n\nlet mut f = File::open(\"foo.txt\")?;\n// Note that `raw_fd` is only valid as long as `f` exists.\n#[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.as_raw_fd();\n# Ok::<(), io::Error>(())\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8670:691":{"id":"1:8670:691","crate_id":1,"name":"from_iter","span":null,"visibility":"default","docs":"Creates a value from an iterator.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```","links":{"crate::iter":"1:5752:788"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:709:1813":{"id":"0:709:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1121,4],"end":[1121,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"1:13356:56312":{"id":"1:13356:56312","crate_id":1,"name":"next_match_back","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"SearchStep::Match":"1:50133:3344","ReverseSearcher::next_back":"1:13355:1818"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:1230:2502":{"id":"b:1:8676-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:134:1908":{"id":"0:134:1908","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/map/core/raw.rs","begin":[108,0],"end":[112,1]},"visibility":"public","docs":"A view into an occupied entry in a `IndexMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:144","0:300","a:1:3370:216-0:134:1908","a:1:9532:3068-0:134:1908","a:1:3411:3178-0:134:1908","a:1:9533:3067-0:134:1908","b:1:4104-0:134:1908","b:1:3218-0:134:1908","b:1:3213-0:134:1908","b:1:3203-0:134:1908","b:1:3207-0:134:1908","b:1:2865-0:134:1908","b:1:2868-0:134:1908","0:141","0:308"]}},"1:13779:2680":{"id":"1:13779:2680","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13328:3437","`DoubleEndedIterator`":"1:8716:121","str::matches":"1:13779:2680","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49956:3716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9083:3236":{"id":"1:9083:3236","crate_id":1,"name":"unzip","span":null,"visibility":"default","docs":"Converts an iterator of pairs into a pair of containers.\n\n`unzip()` consumes an entire iterator of pairs, producing two\ncollections: one from the left elements of the pairs, and one\nfrom the right elements.\n\nThis function is, in some sense, the opposite of [`zip`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [(1, 2), (3, 4), (5, 6)];\n\nlet (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n\nassert_eq!(left, [1, 3, 5]);\nassert_eq!(right, [2, 4, 6]);\n\n// you can also unzip multiple nested tuples at once\nlet a = [(1, (2, 3)), (4, (5, 6))];\n\nlet (x, (y, z)): (Vec<_>, (Vec<_>, Vec<_>)) = a.iter().cloned().unzip();\nassert_eq!(x, [1, 4]);\nassert_eq!(y, [2, 5]);\nassert_eq!(z, [3, 6]);\n```","links":{"Iterator::zip":"1:8890:2257"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"FromA"},{"kind":"generic","inner":"FromB"}]},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromA","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromB","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"FromA"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"FromB"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[161,0],"end":[317,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:445:1945","0:446:1946","0:447:1951","0:448:1953","0:449:802","0:450:1956","0:451:788","0:452:1958","0:453:1960","0:454:1963","0:455:1524","0:456:1969","0:457:1972","0:458:1975","0:459:1978","0:460:1989","0:462:1996"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1002:2044":{"id":"0:1002:2044","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[438,4],"end":[443,5]},"visibility":"public","docs":"Remove the value from the set, and return `true` if it was present.\n\n**NOTE:** This is equivalent to `.swap_remove(value)`, if you want\nto preserve the order of the values in the set, use `.shift_remove(value)`.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8880:502":{"id":"1:8880:502","crate_id":1,"name":"count","span":null,"visibility":"default","docs":"Consumes the iterator, counting the number of iterations and returning it.\n\nThis method will call [`next`] repeatedly until [`None`] is encountered,\nreturning the number of times it saw [`Some`]. Note that [`next`] has to be\ncalled at least once even if the iterator does not have any elements.\n\n[`next`]: Iterator::next\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so counting elements of\nan iterator with more than [`usize::MAX`] elements either produces the\nwrong result or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than [`usize::MAX`]\nelements.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().count(), 3);\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().count(), 5);\n```","links":{"`None`":"1:47773:177","`usize::MAX`":"1:32311:2262","`Some`":"1:47775:220","Iterator::next":"1:8875:932"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23113:55080":{"id":"1:23113:55080","crate_id":1,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3542:2858":{"id":"1:3542:2858","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3544:1253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[589,0],"end":[596,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:296:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1004:2045":{"id":"0:1004:2045","crate_id":0,"name":"swap_remove","span":{"filename":"src/set.rs","begin":[454,4],"end":[459,5]},"visibility":"public","docs":"Remove the value from the set, and return `true` if it was present.\n\nLike `Vec::swap_remove`, the value is removed by swapping it with the\nlast element of the set and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `false` if `value` was not in the set.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:477:1659":{"id":"0:477:1659","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[409,4],"end":[419,5]},"visibility":"public","docs":"Return a reference to the value stored for `key`, if it is present,\nelse `None`.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:699:667":{"id":"0:699:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1104,4],"end":[1106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6212:4066":{"id":"5:6212:4066","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6213:4346","5:6214:4347","5:6215:7999","5:6216:59623","5:6218:59627","5:6220:59624","5:6221:59625","5:6223:59626"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8742:802":{"id":"1:8742:802","crate_id":1,"name":"len","span":null,"visibility":"default","docs":"Returns the exact remaining length of the iterator.\n\nThe implementation ensures that the iterator will return exactly `len()`\nmore times a [`Some(T)`] value, before returning [`None`].\nThis method has a default implementation, so you usually should not\nimplement it directly. However, if you can provide a more efficient\nimplementation, you can do so. See the [trait-level] docs for an\nexample.\n\nThis function has the same safety guarantees as the\n[`Iterator::size_hint`] function.\n\n[trait-level]: ExactSizeIterator\n[`Some(T)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\n// a finite range knows exactly how many times it will iterate\nlet mut range = 0..5;\n\nassert_eq!(5, range.len());\nlet _ = range.next();\nassert_eq!(4, range.len());\n```","links":{"`None`":"1:47773:177","Some":"1:47775:220","ExactSizeIterator":"1:8741:2131","`Iterator::size_hint`":"1:8879:1814"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4418:59577":{"id":"5:4418:59577","crate_id":5,"name":"read_buf","span":null,"visibility":"default","docs":"Pull some bytes from this source into the specified buffer.\n\nThis is equivalent to the [`read`](Read::read) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to allow use\nwith uninitialized buffers. The new data will be appended to any existing contents of `buf`.\n\nThe default implementation delegates to `read`.","links":{"Read::read":"5:4411:2408","`BorrowedCursor`":"5:10895:4053"},"attrs":["#[unstable(feature = \"read_buf\", issue = \"78485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"resolved_path","inner":{"name":"BorrowedCursor","id":"5:10895:4053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3209:688":{"id":"1:3209:688","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:608":{"id":"0:608","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[966,0],"end":[968,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1386:1818","0:1387:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9533:3067-0:598:1966":{"id":"a:1:9533:3067-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:5920:17940":{"id":"4:5920:17940","crate_id":4,"name":"join","span":null,"visibility":"default","docs":"Implementation of [`[T]::join`](slice::join)","links":{"slice::join":"4:5906:17940"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Join","id":"4:5917:3898","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1020,0],"end":[1020,51]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3213-0:269:1673":{"id":"b:1:3213-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3439:2841":{"id":"1:3439:2841","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3441:184","1:3442:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9095:3237":{"id":"1:9095:3237","crate_id":1,"name":"array_chunks","span":null,"visibility":"default","docs":"Returns an iterator over `N` elements of the iterator at a time.\n\nThe chunks do not overlap. If `N` does not divide the length of the\niterator, then the last up to `N-1` elements will be omitted and can be\nretrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\nfunction of the iterator.\n\n# Panics\n\nPanics if `N` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_array_chunks)]\n\nlet mut iter = \"lorem\".chars().array_chunks();\nassert_eq!(iter.next(), Some(['l', 'o']));\nassert_eq!(iter.next(), Some(['r', 'e']));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.into_remainder().unwrap().as_slice(), &['m']);\n```\n\n```\n#![feature(iter_array_chunks)]\n\nlet data = [1, 1, 2, -2, 6, 0, 3, 1];\n//          ^-----^  ^------^\nfor [x, y, z] in data.iter().array_chunks() {\n    assert_eq!(x + y + z, 4);\n}\n```","links":{"ArrayChunks::into_remainder":"1:5995:68495"},"attrs":["#[track_caller]","#[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue =\n\"100450\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArrayChunks","id":"1:46841:2936","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1130,0],"end":[1134,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:716:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9153:1897":{"id":"1:9153:1897","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8983:3231":{"id":"1:8983:3231","crate_id":1,"name":"reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one, by repeatedly applying a reducing\noperation.\n\nIf the iterator is empty, returns [`None`]; otherwise, returns the\nresult of the reduction.\n\nThe reducing function is a closure with two arguments: an 'accumulator', and an element.\nFor iterators with at least one element, this is the same as [`fold()`]\nwith the first element of the iterator as the initial accumulator value, folding\nevery subsequent element into it.\n\n[`fold()`]: Iterator::fold\n\n# Example\n\nFind the maximum value:\n\n```\nfn find_max<I>(iter: I) -> Option<I::Item>\n    where I: Iterator,\n          I::Item: Ord,\n{\n    iter.reduce(|accum, item| {\n        if accum >= item { accum } else { item }\n    })\n}\nlet a = [10, 20, 5, -23, 0];\nlet b: [u32; 0] = [];\n\nassert_eq!(find_max(a.iter()), Some(&20));\nassert_eq!(find_max(b.iter()), None);\n```","links":{"`None`":"1:47773:177","Iterator::fold":"1:8980:2599"},"attrs":["#[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10580:667":{"id":"1:10580:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"pointer_trait_fmt\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:12770:2137":{"id":"1:12770:2137","crate_id":1,"name":"as_slice","span":null,"visibility":"default","docs":"Currently, the consumers of `SlicePattern` need a slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SlicePattern","id":"1:12768:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1065":{"id":"0:1065","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[781,0],"end":[783,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1449:1818","0:1450:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3411:3178-0:269:1673":{"id":"a:1:3411:3178-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5500:4081":{"id":"5:5500:4081","crate_id":5,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5501:60150","5:5502:60152","5:5503:60151","5:5504:60153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13748:3204":{"id":"1:13748:3204","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"5:15876:2656","`None`":"1:47773:177","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4468:2411":{"id":"5:4468:2411","crate_id":5,"name":"write","span":null,"visibility":"default","docs":"Write a buffer into this writer, returning how many bytes were written.\n\nThis function will attempt to write the entire contents of `buf`, but\nthe entire write might not succeed, or the write may also generate an\nerror. A call to `write` represents *at most one* attempt to write to\nany wrapped object.\n\nCalls to `write` are not guaranteed to block waiting for data to be\nwritten, and a write which would otherwise block can be indicated through\nan [`Err`] variant.\n\nIf the return value is [`Ok(n)`] then it must be guaranteed that\n`n <= buf.len()`. A return value of `0` typically means that the\nunderlying object is no longer able to accept bytes and will likely not\nbe able to in the future as well, or that the buffer provided is empty.\n\n# Errors\n\nEach call to `write` may generate an I/O error indicating that the\noperation could not be completed. If an error is returned then no bytes\nin the buffer were written to this writer.\n\nIt is **not** considered an error if the entire buffer could not be\nwritten to this writer.\n\nAn error of the [`ErrorKind::Interrupted`] kind is non-fatal and the\nwrite operation should be retried if there is nothing else to do.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write(b\"some bytes\")?;\n    Ok(())\n}\n```\n\n[`Ok(n)`]: Ok","links":{"`ErrorKind::Interrupted`":"5:10863:7479","Ok":"1:47899:178","`Err`":"1:47902:127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:822":{"id":"0:822","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1425,0],"end":[1441,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"RandomState","id":"5:10510:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:827:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:14541:55552":{"id":"1:14541:55552","crate_id":1,"name":"grow_zeroed","span":null,"visibility":"default","docs":"Behaves like `grow`, but also ensures that the new contents are set to zero before being\nreturned.\n\nThe memory block will contain the following contents after a successful call to\n`grow_zeroed`:\n  * Bytes `0..old_layout.size()` are preserved from the original allocation.\n  * Bytes `old_layout.size()..old_size` will either be preserved or zeroed, depending on\n    the allocator implementation. `old_size` refers to the size of the memory block prior\n    to the `grow_zeroed` call, which may be larger than the size that was originally\n    requested when it was allocated.\n  * Bytes `old_size..new_size` are zeroed. `new_size` refers to the size of the memory\n    block returned by the `grow_zeroed` call.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50740:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3624:132":{"id":"1:3624:132","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3626:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2974:720":{"id":"1:2974:720","crate_id":1,"name":"gt","span":null,"visibility":"default","docs":"This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n\n# Examples\n\n```\nlet result = 1.0 > 2.0;\nassert_eq!(result, false);\n\nlet result = 2.0 > 2.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8724:2600":{"id":"1:8724:2600","crate_id":1,"name":"rfold","span":null,"visibility":"default","docs":"An iterator method that reduces the iterator's elements to a single,\nfinal value, starting from the back.\n\nThis is the reverse version of [`Iterator::fold()`]: it takes elements\nstarting from the back of the iterator.\n\n`rfold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `rfold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `rfold()` combines elements in a *right-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *left-associative* version of `rfold()`, see [`Iterator::fold()`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of a\nlet sum = a.iter()\n           .rfold(0, |acc, &x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nThis example demonstrates the right-associative nature of `rfold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the back until the front:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().rfold(zero, |acc, &x| {\n    format!(\"({x} + {acc})\")\n});\n\nassert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n```","links":{"`Iterator::fold()`":"1:8980:2599"},"attrs":["#[doc(alias = \"foldr\")]","#[stable(feature = \"iter_rfold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1119:777":{"id":"0:1119:777","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[883,4],"end":[885,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8672:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8673:1813":{"id":"1:8673:1813","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1113":{"id":"0:1113","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[879,0],"end":[886,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}},"items":["0:1117:1813","0:1118:2087","0:1119:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5559:60671":{"id":"5:5559:60671","crate_id":5,"name":"is_fifo","span":null,"visibility":"default","docs":"Returns `true` if this file type is a fifo.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"fifo_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_fifo());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:468:2002":{"id":"0:468:2002","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/map.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Shrink the capacity of the map as much as possible.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11204:1659":{"id":"1:11204:1659","crate_id":1,"name":"get","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2958:2908":{"id":"1:2958:2908","crate_id":1,"name":"max","span":null,"visibility":"default","docs":"Compares and returns the maximum of two values.\n\nReturns the second argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(2, 1.max(2));\nassert_eq!(2, 2.max(2));\n```","links":{},"attrs":["#[stable(feature = \"ord_max_min\", since = \"1.21.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:746:1990":{"id":"b:1:3218-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2868-0:312:1909":{"id":"b:1:2868-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:4:848-0:1202:2506":{"id":"b:4:848-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1408:502":{"id":"0:1408:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3531:361":{"id":"1:3531:361","crate_id":1,"name":"bitor_assign","span":null,"visibility":"default","docs":"Performs the `|=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx |= false;\nassert_eq!(x, true);\n\nlet mut x = false;\nx |= false;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx |= 1;\nassert_eq!(x, 5);\n\nlet mut x: u8 = 5;\nx |= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9119:917":{"id":"1:9119:917","crate_id":1,"name":"ne","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are unequal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().ne([1].iter()), false);\nassert_eq!([1].iter().ne([1, 2].iter()), true);\n```","links":{"`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3185:128":{"id":"1:3185:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:6466:7296":{"id":"5:6466:7296","crate_id":5,"name":"st_uid","span":null,"visibility":"default","docs":"Returns the user ID of the file owner.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_uid());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13712:56888":{"id":"1:13712:56888","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13350:932":{"id":"1:13350:932","crate_id":1,"name":"next","span":null,"visibility":"default","docs":"Performs the next search step starting from the front.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]` matches\n  the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]` can\n  not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack has\n  been visited.\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`","links":{"SearchStep::Match":"1:50133:3344","SearchStep::Reject":"1:50137:7678","SearchStep::Done":"1:50141:6461"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"1:50132:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1148:2207":{"id":"0:1148:2207","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[947,4],"end":[950,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iterable",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1411:1819":{"id":"0:1411:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9138:3245":{"id":"1:9138:3245","crate_id":1,"name":"is_sorted_by_key","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given key extraction\nfunction.\n\nInstead of comparing the iterator's elements directly, this function compares the keys of\nthe elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\nits documentation for more information.\n\n[`is_sorted`]: Iterator::is_sorted\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\nassert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n```","links":{"Iterator::is_sorted":"1:9129:3243"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:672:1900":{"id":"b:1:3207-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1201:667":{"id":"0:1201:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1086,4],"end":[1088,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:9141:61060":{"id":"5:9141:61060","crate_id":5,"name":"round","span":null,"visibility":"default","docs":"Rounds to the nearest integer value. Ties round toward zero.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3468:923":{"id":"1:3468:923","crate_id":1,"name":"neg","span":null,"visibility":"default","docs":"Performs the unary `-` operation.\n\n# Example\n\n```\nlet x: i32 = 12;\nassert_eq!(-x, -12);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Neg","id":"1:3466:2844","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23077:55168":{"id":"1:23077:55168","crate_id":1,"name":"is_negative","span":null,"visibility":"default","docs":"Returns true for each negative lane and false if it is zero or positive.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1410:1817":{"id":"0:1410:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5558:60670":{"id":"5:5558:60670","crate_id":5,"name":"is_char_device","span":null,"visibility":"default","docs":"Returns `true` if this file type is a char device.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"char_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_char_device());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9533:3067":{"id":"1:9533:3067","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:1034:57581":{"id":"5:1034:57581","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"default","docs":"Makes a copy of the value in its ASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`str::to_uppercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`make_ascii_uppercase`]: AsciiExt::make_ascii_uppercase","links":{"`str::to_uppercase`":"4:6190:57579","AsciiExt::make_ascii_uppercase":"5:1037:56918"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsciiExt","id":"5:1031:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4474:60892":{"id":"5:4474:60892","crate_id":5,"name":"write_all_vectored","span":null,"visibility":"default","docs":"Attempts to write multiple buffers into this writer.\n\nThis method will continuously call [`write_vectored`] until there is no\nmore data to be written or an error of non-[`ErrorKind::Interrupted`]\nkind is returned. This method will not return until all buffers have\nbeen successfully written or such an error occurs. The first error that\nis not of [`ErrorKind::Interrupted`] kind generated from this method\nwill be returned.\n\nIf the buffer contains no data, this will never call [`write_vectored`].\n\n# Notes\n\nUnlike [`write_vectored`], this takes a *mutable* reference to\na slice of [`IoSlice`]s, not an immutable one. That's because we need to\nmodify the slice to keep track of the bytes already written.\n\nOnce this function returns, the contents of `bufs` are unspecified, as\nthis depends on how many calls to [`write_vectored`] were necessary. It is\nbest to understand this function as taking ownership of `bufs` and to\nnot use `bufs` afterwards. The underlying buffers, to which the\n[`IoSlice`]s point (but not the [`IoSlice`]s themselves), are unchanged and\ncan be reused.\n\n[`write_vectored`]: Write::write_vectored\n\n# Examples\n\n```\n#![feature(write_all_vectored)]\n# fn main() -> std::io::Result<()> {\n\nuse std::io::{Write, IoSlice};\n\nlet mut writer = Vec::new();\nlet bufs = &mut [\n    IoSlice::new(&[1]),\n    IoSlice::new(&[2, 3]),\n    IoSlice::new(&[4, 5, 6]),\n];\n\nwriter.write_all_vectored(bufs)?;\n// Note: the contents of `bufs` is now undefined, see the Notes section.\n\nassert_eq!(writer, &[1, 2, 3, 4, 5, 6]);\n# Ok(()) }\n```","links":{"Write::write_vectored":"5:4469:60889","`IoSlice`":"5:10923:4026","`ErrorKind::Interrupted`":"5:10863:7479"},"attrs":["#[unstable(feature = \"write_all_vectored\", issue = \"70436\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"5:10923:4026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4414:60515":{"id":"5:4414:60515","crate_id":5,"name":"is_read_vectored","span":null,"visibility":"default","docs":"Determines if this `Read`er has an efficient `read_vectored`\nimplementation.\n\nIf a `Read`er does not override the default `read_vectored`\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.","links":{},"attrs":["#[unstable(feature = \"can_vector\", issue = \"69941\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2957:422":{"id":"1:2957:422","crate_id":1,"name":"cmp","span":null,"visibility":"default","docs":"This method returns an [`Ordering`] between `self` and `other`.\n\nBy convention, `self.cmp(&other)` returns the ordering matching the expression\n`self <operator> other` if true.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(5.cmp(&10), Ordering::Less);\nassert_eq!(10.cmp(&5), Ordering::Greater);\nassert_eq!(5.cmp(&5), Ordering::Equal);\n```","links":{"`Ordering`":"1:37894:181"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1399:502":{"id":"0:1399:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13357:56313":{"id":"1:13357:56313","crate_id":1,"name":"next_reject_back","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"ReverseSearcher::next_back":"1:13355:1818","SearchStep::Reject":"1:50137:7678"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2867:1836":{"id":"1:2867:1836","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:1230:2502":{"id":"a:1:9533:3067-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1440:1818":{"id":"0:1440:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1199,4],"end":[1199,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1244:2599":{"id":"0:1244:2599","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1192,4],"end":[1197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13719:55312":{"id":"1:13719:55312","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:852:54881":{"id":"4:852:54881","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13346:55009":{"id":"1:13346:55009","crate_id":1,"name":"strip_suffix_of","span":null,"visibility":"default","docs":"Removes the pattern from the back of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13808:56913":{"id":"1:13808:56913","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8886:1815":{"id":"1:8886:1815","crate_id":1,"name":"nth","span":null,"visibility":"default","docs":"Returns the `n`th element of the iterator.\n\nLike most indexing operations, the count starts from zero, so `nth(0)`\nreturns the first value, `nth(1)` the second, and so on.\n\nNote that all preceding elements, as well as the returned element, will be\nconsumed from the iterator. That means that the preceding elements will be\ndiscarded, and also that calling `nth(0)` multiple times on the same iterator\nwill return different elements.\n\n`nth()` will return [`None`] if `n` is greater than or equal to the length of the\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(1), Some(&2));\n```\n\nCalling `nth()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth(1), Some(&2));\nassert_eq!(iter.nth(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(10), None);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:724:2087":{"id":"b:1:4104-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3492:184":{"id":"1:3492:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `!` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"a:1:9533:3067-0:1059:2087":{"id":"a:1:9533:3067-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3213-0:312:1909":{"id":"b:1:3213-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1424:932":{"id":"0:1424:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1449:1818":{"id":"0:1449:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[782,4],"end":[782,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:1096:1990":{"id":"b:1:3203-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3218-0:576:1964":{"id":"b:1:3218-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10803:3248":{"id":"1:10803:3248","crate_id":1,"name":"hash_slice","span":null,"visibility":"default","docs":"Feeds a slice of this type into the given [`Hasher`].\n\nThis method is meant as a convenience, but its implementation is\nalso explicitly left unspecified. It isn't guaranteed to be\nequivalent to repeated calls of [`hash`] and implementations of\n[`Hash`] should keep that in mind and call [`hash`] themselves\nif the slice isn't treated as a whole unit in the [`PartialEq`]\nimplementation.\n\nFor example, a [`VecDeque`] implementation might naïvely call\n[`as_slices`] and then [`hash_slice`] on each slice, but this\nis wrong since the two slices can change with a call to\n[`make_contiguous`] without affecting the [`PartialEq`]\nresult. Since these slices aren't treated as singular\nunits, and instead part of a larger deque, this method cannot\nbe used.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nlet numbers = [6, 28, 496, 8128];\nHash::hash_slice(&numbers, &mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`VecDeque`]: ../../std/collections/struct.VecDeque.html\n[`as_slices`]: ../../std/collections/struct.VecDeque.html#method.as_slices\n[`make_contiguous`]: ../../std/collections/struct.VecDeque.html#method.make_contiguous\n[`hash`]: Hash::hash\n[`hash_slice`]: Hash::hash_slice","links":{"`PartialEq`":"1:2920:186","`Hasher`":"1:10810:147","Hash::hash":"1:10801:722","Hash::hash_slice":"1:10803:3248"},"attrs":["#[stable(feature = \"hash_slice\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["data",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8988:283":{"id":"1:8988:283","crate_id":1,"name":"all","span":null,"visibility":"default","docs":"Tests if every element of the iterator matches a predicate.\n\n`all()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if they all return\n`true`, then so does `all()`. If any of them return `false`, it\nreturns `false`.\n\n`all()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `false`, given that no matter what else happens,\nthe result will also be `false`.\n\nAn empty iterator returns `true`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().all(|&x| x > 0));\n\nassert!(!a.iter().all(|&x| x > 2));\n```\n\nStopping at the first `false`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(!iter.all(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23108:55075":{"id":"1:23108:55075","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:275:1567":{"id":"0:275:1567","crate_id":0,"name":"0","span":{"filename":"src/map/core.rs","begin":[494,13],"end":[494,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}},"0:791:777":{"id":"0:791:777","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[1236,4],"end":[1240,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8672:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:1202:2506":{"id":"b:1:3218-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/equivalent.rs","begin":[18,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:18:1645","path":"::equivalent"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"for":{"kind":"generic","inner":"Q"},"items":["0:28:1645"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8685:3205":{"id":"1:8685:3205","crate_id":1,"name":"extend_one","span":null,"visibility":"default","docs":"Extends a collection with exactly one element.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6461:61006":{"id":"5:6461:61006","crate_id":5,"name":"as_raw_stat","span":null,"visibility":"default","docs":"Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.\n\nThe contents of the returned [`stat`] are **not** consistent across\nUnix platforms. The `os::unix::fs::MetadataExt` trait contains the\ncross-Unix abstractions contained within the raw stat.\n\n[`stat`]: struct@crate::os::linux::raw::stat\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let stat = meta.as_raw_stat();\n    Ok(())\n}\n```","links":{"struct@crate::os::linux::raw::stat":"5:11285:7291"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]","#[deprecated(since = \"1.8.0\", note =\n\"other methods of this trait are now preferred\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.8.0","note":"other methods of this trait are now preferred"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"stat","id":"5:11285:7291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1436:1815":{"id":"0:1436:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:927:1655":{"id":"b:1:2868-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1388:932":{"id":"0:1388:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:2280":{"id":"0:273:2280","crate_id":0,"name":"Occupied","span":{"filename":"src/map/core.rs","begin":[494,4],"end":[494,37]},"visibility":"default","docs":"Existing slot with equivalent key.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:275:1567"]}},"1:3189:128":{"id":"1:3189:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3836:138":{"id":"1:3836:138","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3838:694"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6332:4096":{"id":"5:6332:4096","crate_id":5,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6333:60794","5:6334:60795"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3218-0:700:1902":{"id":"b:1:3218-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8196:2917":{"id":"1:8196:2917","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8197:55249","1:8198:55250","1:8199:55247","1:8200:55243","1:8201:55251","1:8202:55248","1:8203:55246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3833:2863":{"id":"1:3833:2863","crate_id":1,"name":"Residual","span":null,"visibility":"default","docs":"The type of the value passed to [`FromResidual::from_residual`]\nas part of `?` when short-circuiting.\n\nThis represents the possible values of the `Self` type which are *not*\nrepresented by the `Output` type.\n\n# Note to Implementors\n\nThe choice of this type is critical to interconversion.\nUnlike the `Output` type, which will often be a raw generic type,\nthis type is typically a newtype of some sort to \"color\" the type\nso that it's distinguishable from the residuals of other types.\n\nThis is why `Result<T, E>::Residual` is not `E`, but `Result<Infallible, E>`.\nThat way it's distinct from `ControlFlow<E>::Residual`, for example,\nand thus `?` on `ControlFlow` cannot be used in a method returning `Result`.\n\nIf you're making a generic type `Foo<T>` that implements `Try<Output = T>`,\nthen typically you can use `Foo<std::convert::Infallible>` as its `Residual`\ntype: that type will have a \"hole\" in the correct place, and will maintain the\n\"foo-ness\" of the residual so other types need to opt-in to interconversion.","links":{"`FromResidual::from_residual`":"1:3838:694"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8197:55249":{"id":"1:8197:55249","crate_id":1,"name":"steps_between","span":null,"visibility":"default","docs":"Returns the number of *successor* steps required to get from `start` to `end`.\n\nReturns `None` if the number of steps would overflow `usize`\n(or is infinite, or if `end` would never be reached).\n\n# Invariants\n\nFor any `a`, `b`, and `n`:\n\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::forward_checked(&a, n) == Some(b)`\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&b, n) == Some(a)`\n* `steps_between(&a, &b) == Some(n)` only if `a <= b`\n  * Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\n  * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;\n    this is the case when it would require more than `usize::MAX` steps to get to `b`\n* `steps_between(&a, &b) == None` if `a > b`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["end",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:4104-0:672:1900":{"id":"b:1:4104-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5522:4084":{"id":"5:5522:4084","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5523:6946","5:5524:59614","5:5525:5463","5:5526:61077","5:5527:4346","5:5528:4347","5:5529:61078","5:5530:1325","5:5531:61079","5:5532:61080","5:5533:61081","5:5534:61082","5:5535:61083","5:5536:61084","5:5537:61085","5:5538:61086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:435:667":{"id":"0:435:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[131,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:1075:1900":{"id":"a:1:9532:3068-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1447:1819":{"id":"0:1447:1819","crate_id":0,"name":"collect","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1198":{"id":"0:1198","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1081,0],"end":[1089,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1201:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:58:1860":{"id":"0:58:1860","crate_id":0,"name":"Value","span":{"filename":"src/mutable_keys.rs","begin":[57,4],"end":[57,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"0:1402:1819":{"id":"0:1402:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1274":{"id":"0:1274","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1256,0],"end":[1277,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1278:1813","0:1279:932","0:1280:1814","0:1281:2599"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1433:932":{"id":"0:1433:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23017:55074":{"id":"1:23017:55074","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13715:1659":{"id":"1:13715:1659","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:700:1902":{"id":"b:1:2865-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8933:1819":{"id":"1:8933:1819","crate_id":1,"name":"collect","span":null,"visibility":"default","docs":"Transforms an iterator into a collection.\n\n`collect()` can take anything iterable, and turn it into a relevant\ncollection. This is one of the more powerful methods in the standard\nlibrary, used in a variety of contexts.\n\nThe most basic pattern in which `collect()` is used is to turn one\ncollection into another. You take a collection, call [`iter`] on it,\ndo a bunch of transformations, and then `collect()` at the end.\n\n`collect()` can also create instances of types that are not typical\ncollections. For example, a [`String`] can be built from [`char`]s,\nand an iterator of [`Result<T, E>`][`Result`] items can be collected\ninto `Result<Collection<T>, E>`. See the examples below for more.\n\nBecause `collect()` is so general, it can cause problems with type\ninference. As such, `collect()` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which collection\nyou're trying to collect into.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled: Vec<i32> = a.iter()\n                         .map(|&x| x * 2)\n                         .collect();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nNote that we needed the `: Vec<i32>` on the left-hand side. This is because\nwe could collect into, for example, a [`VecDeque<T>`] instead:\n\n[`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n\n```\nuse std::collections::VecDeque;\n\nlet a = [1, 2, 3];\n\nlet doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n\nassert_eq!(2, doubled[0]);\nassert_eq!(4, doubled[1]);\nassert_eq!(6, doubled[2]);\n```\n\nUsing the 'turbofish' instead of annotating `doubled`:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nBecause `collect()` only cares about what you're collecting into, you can\nstill use a partial type hint, `_`, with the turbofish:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nUsing `collect()` to make a [`String`]:\n\n```\nlet chars = ['g', 'd', 'k', 'k', 'n'];\n\nlet hello: String = chars.iter()\n    .map(|&x| x as u8)\n    .map(|x| (x + 1) as char)\n    .collect();\n\nassert_eq!(\"hello\", hello);\n```\n\nIf you have a list of [`Result<T, E>`][`Result`]s, you can use `collect()` to\nsee if any of them failed:\n\n```\nlet results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the first error\nassert_eq!(Err(\"nope\"), result);\n\nlet results = [Ok(1), Ok(3)];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the list of answers\nassert_eq!(Ok(vec![1, 3]), result);\n```\n\n[`iter`]: Iterator::next\n[`String`]: ../../std/string/struct.String.html\n[`char`]: type@char","links":{"type@char":"5:15876:2656","`Result`":"1:47896:208","Iterator::next":"1:8875:932"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5435:5055":{"id":"5:5435:5055","crate_id":5,"name":"from_bytes","span":null,"visibility":"default","docs":"Creates an [`OsStr`] from a byte slice.\n\nSee the module documentation for an example.","links":{"`OsStr`":"5:2654:182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:576:1964":{"id":"b:1:3203-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:323:1663":{"id":"0:323:1663","crate_id":0,"name":"key","span":{"filename":"src/map/core.rs","begin":[665,4],"end":[667,5]},"visibility":"public","docs":"Gets a reference to the key that was used to find the entry.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13703:802":{"id":"1:13703:802","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6473:7305":{"id":"5:6473:7305","crate_id":5,"name":"st_mtime_nsec","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n\n[`st_mtime`]: Self::st_mtime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime_nsec());\n    Ok(())\n}\n```","links":{"Self::st_mtime":"5:6472:7304"},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3442:271":{"id":"1:3442:271","crate_id":1,"name":"add","span":null,"visibility":"default","docs":"Performs the `+` operation.\n\n# Example\n\n```\nassert_eq!(12 + 1, 13);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Add","id":"1:3439:2841","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:59:1862":{"id":"0:59:1862","crate_id":0,"name":"get_full_mut2","span":{"filename":"src/mutable_keys.rs","begin":[58,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4472:4522":{"id":"5:4472:4522","crate_id":5,"name":"flush","span":null,"visibility":"default","docs":"Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.\n\n# Errors\n\nIt is considered an error if not all bytes could be written due to\nI/O errors or EOF being reached.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n\n    buffer.write_all(b\"some bytes\")?;\n    buffer.flush()?;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1213:932":{"id":"0:1213:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1110,4],"end":[1117,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1165:2585":{"id":"0:1165:2585","crate_id":0,"name":"is_disjoint","span":{"filename":"src/set.rs","begin":[989,4],"end":[998,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14054:184":{"id":"1:14054:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The type of value produced on completion.","links":{},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:742":{"id":"0:742","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1174,0],"end":[1179,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:745:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:8676-0:672:1900":{"id":"b:1:8676-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:3282:56334":{"id":"1:3282:56334","crate_id":1,"name":"cause","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note =\n\"replaced by Error::source, which can support downcasting\")]","#[allow(missing_docs)]"],"deprecation":{"since":"1.33.0","note":"replaced by Error::source, which can support downcasting"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:306:2061":{"id":"0:306:2061","crate_id":0,"name":"shift_remove","span":{"filename":"src/map/core.rs","begin":[632,4],"end":[634,5]},"visibility":"public","docs":"Remove the key, value pair stored in the map for this entry, and return the value.\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:269:1673":{"id":"a:1:3382:225-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8898:2220":{"id":"1:8898:2220","crate_id":1,"name":"for_each","span":null,"visibility":"default","docs":"Calls a closure on each element of an iterator.\n\nThis is equivalent to using a [`for`] loop on the iterator, although\n`break` and `continue` are not possible from a closure. It's generally\nmore idiomatic to use a `for` loop, but `for_each` may be more legible\nwhen processing items at the end of longer iterator chains. In some\ncases `for_each` may also be faster than a loop, because it will use\ninternal iteration on adapters like `Chain`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n# Examples\n\nBasic usage:\n\n```\nuse std::sync::mpsc::channel;\n\nlet (tx, rx) = channel();\n(0..5).map(|x| x * 2 + 1)\n      .for_each(move |x| tx.send(x).unwrap());\n\nlet v: Vec<_> =  rx.iter().collect();\nassert_eq!(v, vec![1, 3, 5, 7, 9]);\n```\n\nFor such a small example, a `for` loop may be cleaner, but `for_each`\nmight be preferable to keep a functional style with longer iterators:\n\n```\n(0..5).flat_map(|x| x * 100 .. x * 110)\n      .enumerate()\n      .filter(|&(i, x)| (i + x) % 3 == 0)\n      .for_each(|(i, x)| println!(\"{i}:{x}\"));\n```","links":{},"attrs":["#[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:957:1946":{"id":"0:957:1946","crate_id":0,"name":"with_hasher","span":{"filename":"src/set.rs","begin":[162,4],"end":[166,5]},"visibility":"public","docs":"Create a new set with `hash_builder`.\n\nThis function is `const`, so it\ncan be called in `static` contexts.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:1230:2502":{"id":"a:1:9532:3068-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2971:1008":{"id":"1:2971:1008","crate_id":1,"name":"partial_cmp","span":null,"visibility":"default","docs":"This method returns an ordering between `self` and `other` values if one exists.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nlet result = 1.0.partial_cmp(&2.0);\nassert_eq!(result, Some(Ordering::Less));\n\nlet result = 1.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Equal));\n\nlet result = 2.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Greater));\n```\n\nWhen comparison is impossible:\n\n```\nlet result = f64::NAN.partial_cmp(&1.0);\nassert_eq!(result, None);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:9137:61056":{"id":"5:9137:61056","crate_id":5,"name":"mul_add","span":null,"visibility":"default","docs":"Fused multiply-add.  Computes `(self * a) + b` with only one rounding error,\nyielding a more accurate result than an unfused multiply-add.\n\nUsing `mul_add` *may* be more performant than an unfused multiply-add if the target\narchitecture has a dedicated `fma` CPU instruction.  However, this is not always\ntrue, and will be heavily dependent on designing algorithms with specific target\nhardware in mind.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["a",{"kind":"generic","inner":"Self"}],["b",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5535:61083":{"id":"5:5535:61083","crate_id":5,"name":"ctime","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_status_change_time = meta.ctime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8874:1813":{"id":"1:8874:1813","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1088":{"id":"0:1088","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[827,0],"end":[827,40]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13738:56893":{"id":"1:13738:56893","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:598:1966":{"id":"b:1:4104-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:4410:4010":{"id":"5:4410:4010","crate_id":5,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4411:2408","5:4412:60514","5:4414:60515","5:4415:60516","5:4416:4024","5:4417:60517","5:4418:59577","5:4420:60518","5:4421:3223","5:4422:3909","5:4423:2503","5:4425:2261"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8201:55251":{"id":"1:8201:55251","crate_id":1,"name":"backward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`\n\nFor any `a` and `n`:\n\n* `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(&x, 1))`\n  * Corollary: `Step::backward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5436:56887":{"id":"5:5436:56887","crate_id":5,"name":"as_bytes","span":null,"visibility":"default","docs":"Gets the underlying byte view of the [`OsStr`] slice.\n\nSee the module documentation for an example.","links":{"`OsStr`":"5:2654:182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:705":{"id":"0:705","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1120,0],"end":[1124,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:709:1813","0:1415:932","0:1416:1814","0:1417:502","0:1418:1815","0:1419:1817","0:1420:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:149:1659":{"id":"0:149:1659","crate_id":0,"name":"get","span":{"filename":"src/map/core/raw.rs","begin":[130,4],"end":[132,5]},"visibility":"public","docs":"Gets a reference to the entry's value in the map.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1313:360":{"id":"0:1313:360","crate_id":0,"name":"bitor","span":{"filename":"src/set.rs","begin":[1349,4],"end":[1351,5]},"visibility":"default","docs":"Returns the set union, cloned into a new set.\n\nValues from `self` are collected in their original order, followed by\nvalues that are unique to `other` in their original order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:3503:2437","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9091:2606":{"id":"1:9091:2606","crate_id":1,"name":"cloned","span":null,"visibility":"default","docs":"Creates an iterator which [`clone`]s all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\nThere is no guarantee whatsoever about the `clone` method actually\nbeing called *or* optimized away. So code should not depend on\neither.\n\n[`clone`]: Clone::clone\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_cloned: Vec<_> = a.iter().cloned().collect();\n\n// cloned is the same as .map(|&x| x), for integers\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_cloned, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```\n\nTo get the best performance, try to clone late:\n\n```\nlet a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n// don't do this:\nlet slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\nassert_eq!(&[vec![23]], &slower[..]);\n// instead call `cloned` late\nlet faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\nassert_eq!(&[vec![23]], &faster[..]);\n```","links":{"Clone::clone":"1:2885:415"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cloned","id":"1:46879:2938","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3535:364":{"id":"1:3535:364","crate_id":1,"name":"bitxor_assign","span":null,"visibility":"default","docs":"Performs the `^=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx ^= false;\nassert_eq!(x, true);\n\nlet mut x = true;\nx ^= true;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx ^= 1;\nassert_eq!(x, 4);\n\nlet mut x: u8 = 5;\nx ^= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1226":{"id":"0:1226","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1155,0],"end":[1163,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1229:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13741:56894":{"id":"1:13741:56894","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:2055":{"id":"0:499:2055","crate_id":0,"name":"swap_remove_full","span":{"filename":"src/map.rs","begin":[579,4],"end":[588,5]},"visibility":"public","docs":"Remove the key-value pair equivalent to `key` and return it and\nthe index it had.\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:583:1813":{"id":"0:583:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[925,4],"end":[925,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"K"}}},"0:1417:502":{"id":"0:1417:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1172:2588":{"id":"0:1172:2588","crate_id":0,"name":"is_superset","span":{"filename":"src/set.rs","begin":[1009,4],"end":[1014,5]},"visibility":"public","docs":"Returns `true` if all elements of `other` are contained in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1406:932":{"id":"0:1406:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:1813":{"id":"0:782:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1226,4],"end":[1226,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"1:23104:3400":{"id":"1:23104:3400","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23105:55074","1:23106:1243","1:23107:1244","1:23108:55075","1:23109:55076","1:23110:55077","1:23111:55078","1:23112:55079","1:23113:55080","1:23114:55081"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23117:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3382:225-0:1075:1900":{"id":"a:1:3382:225-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:10563:667":{"id":"1:10563:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Debug for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_tuple(\"\")\n         .field(&self.longitude)\n         .field(&self.latitude)\n         .finish()\n    }\n}\n\nlet position = Position { longitude: 1.987, latitude: 2.983 };\nassert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n\nassert_eq!(format!(\"{position:#?}\"), \"(\n    1.987,\n    2.983,\n)\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:5916:440":{"id":"4:5916:440","crate_id":4,"name":"concat","span":null,"visibility":"default","docs":"Implementation of [`[T]::concat`](slice::concat)","links":{"slice::concat":"4:5904:440"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Concat","id":"4:5913:3900","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13799:56911":{"id":"1:13799:56911","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13358:3441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:520:2086":{"id":"0:520:2086","crate_id":0,"name":"sorted_by","span":{"filename":"src/map.rs","begin":[710,4],"end":[719,5]},"visibility":"public","docs":"Sort the key-value pairs of the map and return a by-value iterator of\nthe key-value pairs with the result.\n\nThe sort is stable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6472:7304":{"id":"5:6472:7304","crate_id":5,"name":"st_mtime","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mtime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3207-0:409:1654":{"id":"b:1:3207-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13358:3441":{"id":"1:13358:3441","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3213-0:700:1902":{"id":"b:1:3213-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2865-0:650:1973":{"id":"b:1:2865-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5538:61086":{"id":"5:5538:61086","crate_id":5,"name":"blocks","span":null,"visibility":"default","docs":"Returns the number of blocks allocated to the file, in 512-byte units.\n\nPlease note that this may be smaller than `st_size / 512` when the file has holes.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let blocks = meta.blocks();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13735:2266":{"id":"1:13735:2266","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8717:1818":{"id":"1:8717:1818","crate_id":1,"name":"next_back","span":null,"visibility":"default","docs":"Removes and returns an element from the end of the iterator.\n\nReturns `None` when there are no more elements.\n\nThe [trait-level] docs contain more details.\n\n[trait-level]: DoubleEndedIterator\n\n# Examples\n\nBasic usage:\n\n```\nlet numbers = vec![1, 2, 3, 4, 5, 6];\n\nlet mut iter = numbers.iter();\n\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&6), iter.next_back());\nassert_eq!(Some(&5), iter.next_back());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\nassert_eq!(Some(&4), iter.next());\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next_back());\n```\n\n# Remarks\n\nThe elements yielded by `DoubleEndedIterator`'s methods may differ from\nthe ones yielded by [`Iterator`]'s methods:\n\n```\nlet vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\nlet uniq_by_fst_comp = || {\n    let mut seen = std::collections::HashSet::new();\n    vec.iter().copied().filter(move |x| seen.insert(x.0))\n};\n\nassert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));\nassert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));\n\nassert_eq!(\n    uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(1, 'a'), (2, 'a')]\n);\nassert_eq!(\n    uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(2, 'b'), (1, 'c')]\n);\n```","links":{"DoubleEndedIterator":"1:8716:121","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13711:56887":{"id":"1:13711:56887","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12792:3862"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:278:1567":{"id":"0:278:1567","crate_id":0,"name":"0","span":{"filename":"src/map/core.rs","begin":[496,11],"end":[496,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}},"0:1057:184":{"id":"0:1057:184","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[753,4],"end":[753,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:3832:184":{"id":"1:3832:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The type of the value produced by `?` when *not* short-circuiting.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:971:1999":{"id":"0:971:1999","crate_id":0,"name":"reserve","span":{"filename":"src/set.rs","begin":[260,4],"end":[262,5]},"visibility":"public","docs":"Reserve capacity for `additional` more values.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13704:1956":{"id":"1:13704:1956","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6236:7370":{"id":"5:6236:7370","crate_id":5,"name":"signal","span":null,"visibility":"default","docs":"If the process was terminated by a signal, returns that signal.\n\nIn other words, if `WIFSIGNALED`, this returns `WTERMSIG`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1243:1814":{"id":"0:1243:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1188,4],"end":[1190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8885:3208":{"id":"1:8885:3208","crate_id":1,"name":"advance_by","span":null,"visibility":"default","docs":"Advances the iterator by `n` elements.\n\nThis method will eagerly skip `n` elements by calling [`next`] up to `n`\ntimes until [`None`] is encountered.\n\n`advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n`n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\nof elements the iterator is advanced by before running out of elements (i.e. the\nlength of the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_by(0)` can do meaningful work, for example [`Flatten`]\ncan advance its outer iterator until it finds an inner iterator that is not empty, which\nthen often allows it to return a more accurate `size_hint()` than in its initial state.\n\n[`Flatten`]: crate::iter::Flatten\n[`next`]: Iterator::next\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_by(2), Ok(()));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.advance_by(0), Ok(()));\nassert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n```","links":{"Ok":"1:47899:178","crate::iter::Flatten":"1:6716:2940","Iterator::next":"1:8875:932","Err":"1:47902:127","`None`":"1:47773:177"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1392:1817":{"id":"0:1392:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5504:60153":{"id":"5:5504:60153","crate_id":5,"name":"write_all_at","span":null,"visibility":"default","docs":"Attempts to write an entire buffer starting from a given offset.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nThis method will continuously call [`write_at`] until there is no more data\nto be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of [`io::ErrorKind::Interrupted`] kind generated from this method will be\nreturned.\n\n# Errors\n\nThis function will return the first error of\nnon-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n\n[`write_at`]: FileExt::write_at\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::io;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foo.txt\")?;\n\n    // We now write at the offset 10.\n    file.write_all_at(b\"sushi\", 10)?;\n    Ok(())\n}\n```","links":{"`io::ErrorKind::Interrupted`":"5:10863:7479","FileExt::write_at":"5:5503:60151"},"attrs":["#[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1329":{"id":"0:1329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::map::IndexMap","name":"IndexMap","id":"0:409:1654","glob":false}},"b:1:2865-0:672:1900":{"id":"b:1:2865-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23030:55648":{"id":"1:23030:55648","crate_id":1,"name":"is_subnormal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is subnormal.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3180:136":{"id":"1:3180:136","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3182:688"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:850:3897":{"id":"4:850:3897","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:3466:2844":{"id":"1:3466:2844","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3467:184","1:3468:923"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:547:2124":{"id":"0:547:2124","crate_id":0,"name":"swap_indices","span":{"filename":"src/map.rs","begin":[864,4],"end":[866,5]},"visibility":"public","docs":"Swaps the position of two key-value pairs in the map.\n\n***Panics*** if `a` or `b` are out of bounds.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["a",{"kind":"primitive","inner":"usize"}],["b",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6170":{"id":"4:6170","crate_id":4,"name":null,"span":null,"visibility":{"restricted":{"parent":"4:5983:1361","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["4:6171:57576","4:6172:2305","4:6175:57577","4:6178:57578","4:6190:57579","4:6191:57580","4:6192:2925","4:6193:57581","4:6194:57582"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13829:56921":{"id":"1:13829:56921","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5450:56921"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50069:3725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:952:1797":{"id":"0:952:1797","crate_id":0,"name":"with_capacity","span":{"filename":"src/set.rs","begin":[140,4],"end":[144,5]},"visibility":"public","docs":"Create a new set with capacity for `n` elements.\n(Does not allocate if `n` is zero.)\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4488:60805":{"id":"5:4488:60805","crate_id":5,"name":"stream_len","span":null,"visibility":"default","docs":"Returns the length of this stream (in bytes).\n\nThis method is implemented using up to three seek operations. If this\nmethod returns successfully, the seek position is unchanged (i.e. the\nposition before calling this method is the same as afterwards).\nHowever, if this method returns an error, the seek position is\nunspecified.\n\nIf you need to obtain the length of *many* streams and you don't care\nabout the seek position afterwards, you can reduce the number of seek\noperations by simply calling `seek(SeekFrom::End(0))` and using its\nreturn value (it is also the stream length).\n\nNote that length of a stream can change over time (for example, when\ndata is appended to a file). So calling this method multiple times does\nnot necessarily return the same length each time.\n\n# Example\n\n```no_run\n#![feature(seek_stream_len)]\nuse std::{\n    io::{self, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n\n    let len = f.stream_len()?;\n    println!(\"The file is currently {len} bytes long\");\n    Ok(())\n}\n```","links":{},"attrs":["#[unstable(feature = \"seek_stream_len\", issue = \"59359\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6836:59723":{"id":"5:6836:59723","crate_id":5,"name":"quickack","span":null,"visibility":"default","docs":"Gets the value of the `TCP_QUICKACK` option on this socket.\n\nFor more information about this option, see [`TcpStreamExt::set_quickack`].\n\n# Examples\n\n```no_run\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\nassert_eq!(stream.quickack().unwrap_or(false), true);\n```","links":{"`TcpStreamExt::set_quickack`":"5:6835:59722"},"attrs":["#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10577:3266":{"id":"1:10577:3266","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10578:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3382:225-0:626:1970":{"id":"a:1:3382:225-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1364:1815":{"id":"0:1364:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12768:2989":{"id":"1:12768:2989","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12769:1813","1:12770:2137"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2868-0:650:1973":{"id":"b:1:2868-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6470:7302":{"id":"5:6470:7302","crate_id":5,"name":"st_atime","span":null,"visibility":"default","docs":"Returns the last access time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_atime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1124:2087":{"id":"0:1124:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[890,4],"end":[890,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"1:8888:2503":{"id":"1:8888:2503","crate_id":1,"name":"chain","span":null,"visibility":"default","docs":"Takes two iterators and creates a new iterator over both in sequence.\n\n`chain()` will return a new iterator which will first iterate over\nvalues from the first iterator and then over values from the second\niterator.\n\nIn other words, it links two iterators together, in a chain. 🔗\n\n[`once`] is commonly used to adapt a single value into a chain of\nother kinds of iteration.\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().chain(a2.iter());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `chain()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `chain()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().chain(s2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nIf you work with Windows API, you may wish to convert [`OsStr`] to `Vec<u16>`:\n\n```\n#[cfg(windows)]\nfn os_str_to_utf16(s: &std::ffi::OsStr) -> Vec<u16> {\n    use std::os::windows::ffi::OsStrExt;\n    s.encode_wide().chain(std::iter::once(0)).collect()\n}\n```\n\n[`once`]: crate::iter::once\n[`OsStr`]: ../../std/ffi/struct.OsStr.html","links":{"crate::iter::once":"1:8448:2921","`IntoIterator`":"1:8672:152","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"1:46866:2435","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23083:55079":{"id":"1:23083:55079","crate_id":1,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:324:2396":{"id":"0:324:2396","crate_id":0,"name":"into_key","span":{"filename":"src/map/core.rs","begin":[670,4],"end":[672,5]},"visibility":"public","docs":"Takes ownership of the key, leaving the entry vacant.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:723:667":{"id":"0:723:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1139,4],"end":[1142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1191":{"id":"0:1191","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1065,0],"end":[1070,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1035:2092":{"id":"0:1035:2092","crate_id":0,"name":"sort_unstable_by","span":{"filename":"src/set.rs","begin":[625,4],"end":[630,5]},"visibility":"public","docs":"Sort the set's values in place using the comparison funtion `cmp`.\n\nComputes in **O(n log n)** time. The sort is unstable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cmp",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1117:1813":{"id":"0:1117:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[880,4],"end":[880,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:448:1953":{"id":"0:448:1953","crate_id":0,"name":"hasher","span":{"filename":"src/map.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Return a reference to the map's `BuildHasher`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3511:363":{"id":"1:3511:363","crate_id":1,"name":"bitxor","span":null,"visibility":"default","docs":"Performs the `^` operation.\n\n# Examples\n\n```\nassert_eq!(true ^ false, true);\nassert_eq!(true ^ true, false);\nassert_eq!(5u8 ^ 1u8, 4);\nassert_eq!(5u8 ^ 2u8, 7);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitXor","id":"1:3508:2438","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2868-0:576:1964":{"id":"b:1:2868-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:735":{"id":"0:735","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1166,0],"end":[1170,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:738:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13344:55008":{"id":"1:13344:55008","crate_id":1,"name":"is_suffix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the back of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3441:184":{"id":"1:3441:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `+` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:1031:4100":{"id":"5:1031:4100","crate_id":5,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:1032:3897","5:1033:3894","5:1034:57581","5:1035:57582","5:1036:56917","5:1037:56918","5:1038:56919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:689":{"id":"0:689","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1092,0],"end":[1092,46]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13268:127":{"id":"1:13268:127","crate_id":1,"name":"Err","span":null,"visibility":"default","docs":"The associated error which can be returned from parsing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:4417:60517":{"id":"5:4417:60517","crate_id":5,"name":"read_exact","span":null,"visibility":"default","docs":"Read the exact number of bytes required to fill `buf`.\n\nThis function reads as many bytes as necessary to completely fill the\nspecified buffer `buf`.\n\nNo guarantees are provided about the contents of `buf` when this\nfunction is called, implementations cannot rely on any property of the\ncontents of `buf` being true. It is recommended that implementations\nonly write data to `buf` instead of reading its contents. The\ndocumentation on [`read`] has a more detailed explanation on this\nsubject.\n\n# Errors\n\nIf this function encounters an error of the kind\n[`ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf this function encounters an \"end of file\" before completely filling\nthe buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\nThe contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately\nreturns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`read`]: Read::read\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read exactly 10 bytes\n    f.read_exact(&mut buffer)?;\n    Ok(())\n}\n```","links":{"Read::read":"5:4411:2408","`ErrorKind::UnexpectedEof`":"5:10867:6352","crate::fs::File":"5:2909:129","`ErrorKind::Interrupted`":"5:10863:7479"},"attrs":["#[stable(feature = \"read_exact\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:1075:1900":{"id":"b:1:2865-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9125:720":{"id":"1:9125:720","crate_id":1,"name":"gt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().gt([1].iter()), false);\nassert_eq!([1].iter().gt([1, 2].iter()), false);\nassert_eq!([1, 2].iter().gt([1].iter()), true);\nassert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23354:5286":{"id":"1:23354:5286","crate_id":1,"name":"BitMask","span":null,"visibility":"default","docs":"The integer bitmask type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8910:2239":{"id":"1:8910:2239","crate_id":1,"name":"enumerate","span":null,"visibility":"default","docs":"Creates an iterator which gives the current iteration count as well as\nthe next value.\n\nThe iterator returned yields pairs `(i, val)`, where `i` is the\ncurrent index of iteration and `val` is the value returned by the\niterator.\n\n`enumerate()` keeps its count as a [`usize`]. If you want to count by a\ndifferent sized integer, the [`zip`] function provides similar\nfunctionality.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so enumerating more than\n[`usize::MAX`] elements either produces the wrong result or panics. If\ndebug assertions are enabled, a panic is guaranteed.\n\n# Panics\n\nThe returned iterator might panic if the to-be-returned index would\noverflow a [`usize`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\n```\nlet a = ['a', 'b', 'c'];\n\nlet mut iter = a.iter().enumerate();\n\nassert_eq!(iter.next(), Some((0, &'a')));\nassert_eq!(iter.next(), Some((1, &'b')));\nassert_eq!(iter.next(), Some((2, &'c')));\nassert_eq!(iter.next(), None);\n```","links":{"`usize`":"5:15899:2676","Iterator::zip":"1:8890:2257","`usize::MAX`":"1:32311:2262"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Enumerate","id":"1:46907:2947","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:672:1900":{"id":"b:1:3213-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13727:3743":{"id":"1:13727:3743","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49722:3703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:409:1654":{"id":"a:1:3382:225-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11208:761":{"id":"1:11208:761","crate_id":1,"name":"index","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3278:128":{"id":"1:3278:128","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3279:3797","1:3281:56333","1:3282:56334","1:3283:55054"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:805":{"id":"0:805","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1352,0],"end":[1363,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":"Access `IndexMap` values at indexed positions.\n\n# Examples\n\n```\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nfor word in \"Lorem ipsum dolor sit amet\".split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_uppercase());\n}\nassert_eq!(map[0], \"LOREM\");\nassert_eq!(map[1], \"IPSUM\");\nmap.reverse();\nassert_eq!(map[0], \"AMET\");\nassert_eq!(map[1], \"SIT\");\nmap.sort_keys();\nassert_eq!(map[0], \"AMET\");\nassert_eq!(map[1], \"DOLOR\");\n```\n\n```should_panic\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nmap.insert(\"foo\", 1);\nprintln!(\"{:?}\", map[10]); // panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:809:184","0:810:761"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13732:4589":{"id":"1:13732:4589","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50006:3718","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:541:2108":{"id":"0:541:2108","crate_id":0,"name":"first_mut","span":{"filename":"src/map.rs","begin":[804,4],"end":[806,5]},"visibility":"public","docs":"Get the first key-value pair, with mutable access to the value\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1280:1814":{"id":"0:1280:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1267,4],"end":[1269,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453:1960":{"id":"0:453:1960","crate_id":0,"name":"keys","span":{"filename":"src/map.rs","begin":[230,4],"end":[234,5]},"visibility":"public","docs":"Return an iterator over the keys of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1058,0],"end":[1063,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:671:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5915:184":{"id":"4:5915:184","crate_id":4,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:447:1951":{"id":"0:447:1951","crate_id":0,"name":"capacity","span":{"filename":"src/map.rs","begin":[190,4],"end":[192,5]},"visibility":"public","docs":"Computes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13767:56899":{"id":"1:13767:56899","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:13770:56900","self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49856:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6190:57579":{"id":"4:6190:57579","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9018:3234":{"id":"1:9018:3234","crate_id":1,"name":"try_find","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first true result or the first error.\n\nThe return type of this method depends on the return type of the closure.\nIf you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\nIf you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n\n# Examples\n\n```\n#![feature(try_find)]\n\nlet a = [\"1\", \"2\", \"lol\", \"NaN\", \"5\"];\n\nlet is_my_num = |s: &str, search: i32| -> Result<bool, std::num::ParseIntError> {\n    Ok(s.parse::<i32>()?  == search)\n};\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 2));\nassert_eq!(result, Ok(Some(&\"2\")));\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 5));\nassert!(result.is_err());\n```\n\nThis also supports other types which implement `Try`, not just `Result`.\n```\n#![feature(try_find)]\n\nuse std::num::NonZeroU32;\nlet a = [3, 5, 7, 4, 9, 0, 11];\nlet result = a.iter().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(Some(&4)));\nlet result = a.iter().take(3).try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(None));\nlet result = a.iter().rev().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, None);\n```","links":{},"attrs":["#[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"bool"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13755:17426":{"id":"1:13755:17426","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:13120:3014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23040:55078":{"id":"1:23040:55078","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 7.]);\nassert_eq!(v.reduce_min(), 3.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_min(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_min().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[144,0],"end":[159,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:439:930","0:440:1797"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23029:55647":{"id":"1:23029:55647","crate_id":1,"name":"is_finite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither infinite nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:61:1868":{"id":"0:61:1868","crate_id":0,"name":"retain2","span":{"filename":"src/mutable_keys.rs","begin":[65,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["keep",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1041:2100":{"id":"0:1041:2100","crate_id":0,"name":"reverse","span":{"filename":"src/set.rs","begin":[648,4],"end":[650,5]},"visibility":"public","docs":"Reverses the order of the set’s values in place.\n\nComputes in **O(n)** time and **O(1)** space.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1370:932":{"id":"0:1370:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5531:61079":{"id":"5:5531:61079","crate_id":5,"name":"atime","span":null,"visibility":"default","docs":"Returns the last access time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_access_time = meta.atime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1379:932":{"id":"0:1379:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:927:1655":{"id":"a:1:3370:216-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:450:1956":{"id":"0:450:1956","crate_id":0,"name":"is_empty","span":{"filename":"src/map.rs","begin":[211,4],"end":[213,5]},"visibility":"public","docs":"Returns true if the map contains no elements.\n\nComputes in **O(1)** time.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10575:3265":{"id":"1:10575:3265","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10576:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3370:216-0:746:1990":{"id":"a:1:3370:216-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:724:2087":{"id":"0:724:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[1152,0],"end":[1154,1]},"visibility":"public","docs":"An owning iterator over the entries of a `IndexMap`.\n\nThis `struct` is created by the [`into_iter`] method on [`IndexMap`]\n(provided by the `IntoIterator` trait). See its documentation for more.\n\n[`into_iter`]: struct.IndexMap.html#method.into_iter\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:724:2087","a:1:9532:3068-0:724:2087","a:1:3382:225-0:724:2087","a:1:3411:3178-0:724:2087","a:1:9533:3067-0:724:2087","b:1:4104-0:724:2087","b:1:3218-0:724:2087","b:1:3213-0:724:2087","b:1:3203-0:724:2087","b:1:3207-0:724:2087","b:1:2865-0:724:2087","b:1:2868-0:724:2087","b:1:8676-0:724:2087","0:728","0:732","0:735","0:739","0:742"]}},"1:2975:703":{"id":"1:2975:703","crate_id":1,"name":"ge","span":null,"visibility":"default","docs":"This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.\n\n# Examples\n\n```\nlet result = 2.0 >= 1.0;\nassert_eq!(result, true);\n\nlet result = 2.0 >= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:134:1908":{"id":"a:1:9532:3068-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:769":{"id":"0:769","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1217,0],"end":[1223,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}},"items":["0:774:1813","0:775:2087","0:776:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3281:56333":{"id":"1:3281:56333","crate_id":1,"name":"description","span":null,"visibility":"default","docs":"```\nif let Err(e) = \"xc\".parse::<u32>() {\n    // Print `e` itself, no need for description().\n    eprintln!(\"Error: {e}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]"],"deprecation":{"since":"1.42.0","note":"use the Display impl or to_string()"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[934,0],"end":[938,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:590:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:4412:60514":{"id":"5:4412:60514","crate_id":5,"name":"read_vectored","span":null,"visibility":"default","docs":"Like `read`, except that it reads into a slice of buffers.\n\nData is copied to fill each buffer in order, with the final buffer\nwritten to possibly being only partially filled. This method must\nbehave equivalently to a single call to `read` with concatenated\nbuffers.\n\nThe default implementation calls `read` with either the first nonempty\nbuffer provided, or an empty one if none exists.","links":{},"attrs":["#[stable(feature = \"iovec\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"5:4428:4025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13802:56912":{"id":"1:13802:56912","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23109:55076":{"id":"1:23109:55076","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1050,0],"end":[1063,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1190:1818"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8940:3226":{"id":"1:8940:3226","crate_id":1,"name":"partition","span":null,"visibility":"default","docs":"Consumes an iterator, creating two collections from it.\n\nThe predicate passed to `partition()` can return `true`, or `false`.\n`partition()` returns a pair, all of the elements for which it returned\n`true`, and all of the elements for which it returned `false`.\n\nSee also [`is_partitioned()`] and [`partition_in_place()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet (even, odd): (Vec<_>, Vec<_>) = a\n    .into_iter()\n    .partition(|n| n % 2 == 0);\n\nassert_eq!(even, vec![2]);\nassert_eq!(odd, vec![1, 3]);\n```","links":{"Iterator::partition_in_place":"1:8950:3227","Iterator::is_partitioned":"1:8965:3228"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493:2049":{"id":"0:493:2049","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[526,4],"end":[531,5]},"visibility":"public","docs":"Remove and return the key-value pair equivalent to `key`.\n\n**NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to\npreserve the order of the keys in the map, use `.shift_remove_entry(key)`\ninstead.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6216:59623":{"id":"5:6216:59623","crate_id":5,"name":"pre_exec","span":null,"visibility":"default","docs":"Schedules a closure to be run just before the `exec` function is\ninvoked.\n\nThe closure is allowed to return an I/O error whose OS error code will\nbe communicated back to the parent and returned as an error from when\nthe spawn was requested.\n\nMultiple closures can be registered and they will be called in order of\ntheir registration. If a closure returns `Err` then no further closures\nwill be called and the spawn operation will immediately return with a\nfailure.\n\n# Notes and Safety\n\nThis closure will be run in the context of the child process after a\n`fork`. This primarily means that any modifications made to memory on\nbehalf of this closure will **not** be visible to the parent process.\nThis is often a very constrained environment where normal operations\nlike `malloc`, accessing environment variables through [`std::env`]\nor acquiring a mutex are not guaranteed to work (due to\nother threads perhaps still running when the `fork` was run).\n\nFor further details refer to the [POSIX fork() specification]\nand the equivalent documentation for any targeted\nplatform, especially the requirements around *async-signal-safety*.\n\nThis also means that all resources such as file descriptors and\nmemory-mapped regions got duplicated. It is your responsibility to make\nsure that the closure does not violate library invariants by making\ninvalid use of these duplicates.\n\nPanicking in the closure is safe only if all the format arguments for the\npanic message can be safely formatted; this is because although\n`Command` calls [`std::panic::always_abort`](crate::panic::always_abort)\nbefore calling the pre_exec hook, panic will still try to format the\npanic message.\n\nWhen this closure is run, aspects such as the stdio file descriptors and\nworking directory have successfully been changed, so output to these\nlocations might not appear where intended.\n\n[POSIX fork() specification]:\n    https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html\n[`std::env`]: mod@crate::env","links":{"mod@crate::env":"5:2326:607","crate::panic::always_abort":"5:6917:3055"},"attrs":["#[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:945":{"id":"0:945","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[113,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:948:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23081:55077":{"id":"1:23081:55077","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_max(), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3506:360":{"id":"1:3506:360","crate_id":1,"name":"bitor","span":null,"visibility":"default","docs":"Performs the `|` operation.\n\n# Examples\n\n```\nassert_eq!(true | false, true);\nassert_eq!(false | false, false);\nassert_eq!(5u8 | 1u8, 5);\nassert_eq!(5u8 | 2u8, 7);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitOr","id":"1:3503:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:934:415":{"id":"0:934:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[76,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:134:1908":{"id":"b:1:2868-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:965:1989":{"id":"0:965:1989","crate_id":0,"name":"drain","span":{"filename":"src/set.rs","begin":[226,4],"end":[233,5]},"visibility":"public","docs":"Clears the `IndexSet` in the given index range, returning those values\nas a drain iterator.\n\nThe range may be any type that implements `RangeBounds<usize>`,\nincluding all of the `std::ops::Range*` types, or even a tuple pair of\n`Bound` start and end values. To drain the set entirely, use `RangeFull`\nlike `set.drain(..)`.\n\nThis shifts down all entries following the drained range to fill the\ngap, and keeps the allocated memory for reuse.\n\n***Panics*** if the starting point is greater than the end point or if\nthe end point is greater than the length of the set.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3750:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:972:2002":{"id":"0:972:2002","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/set.rs","begin":[267,4],"end":[269,5]},"visibility":"public","docs":"Shrink the capacity of the set as much as possible.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13785:56904":{"id":"1:13785:56904","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656","str::rmatch_indices":"1:13788:56905","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49902:3713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5567:59614":{"id":"5:5567:59614","crate_id":5,"name":"ino","span":null,"visibility":"default","docs":"Returns the underlying `d_ino` field in the contained `dirent`\nstructure.\n\n# Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::DirEntryExt;\n\nif let Ok(entries) = fs::read_dir(\".\") {\n    for entry in entries {\n        if let Ok(entry) = entry {\n            // Here, `entry` is a `DirEntry`.\n            println!(\"{:?}: {}\", entry.file_name(), entry.ino());\n        }\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5428:4127":{"id":"5:5428:4127","crate_id":5,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5429:60688","5:5430:3949"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:2865-0:576:1964":{"id":"b:1:2865-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2920:186":{"id":"1:2920:186","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2922:611","1:2923:917"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:326:1798":{"id":"0:326:1798","crate_id":0,"name":"insert","span":{"filename":"src/map/core.rs","begin":[681,4],"end":[684,5]},"visibility":"public","docs":"Inserts the entry's key and the given value into the map, and returns a mutable reference\nto the value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:548:1961":{"id":"0:548:1961","crate_id":0,"name":"Keys","span":{"filename":"src/map.rs","begin":[876,0],"end":[878,1]},"visibility":"public","docs":"An iterator over the keys of a `IndexMap`.\n\nThis `struct` is created by the [`keys`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`keys`]: struct.IndexMap.html#method.keys\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:548:1961","a:1:9532:3068-0:548:1961","a:1:3382:225-0:548:1961","a:1:3411:3178-0:548:1961","a:1:9533:3067-0:548:1961","b:1:4104-0:548:1961","b:1:3218-0:548:1961","b:1:3213-0:548:1961","b:1:3203-0:548:1961","b:1:3207-0:548:1961","b:1:2865-0:548:1961","b:1:2868-0:548:1961","b:1:8676-0:548:1961","b:4:848-0:548:1961","0:553","0:558","0:561","0:565","0:568","0:572"]}},"b:1:2868-0:1269:2509":{"id":"b:1:2868-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1058:761":{"id":"0:1058:761","crate_id":0,"name":"index","span":{"filename":"src/set.rs","begin":[758,4],"end":[761,5]},"visibility":"default","docs":"Returns a reference to the value at the supplied `index`.\n\n***Panics*** if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1222":{"id":"0:1222","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1146,0],"end":[1153,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1225:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2956:180":{"id":"1:2956:180","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2957:422","1:2958:2908","1:2959:2323","1:2960:3201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3537:2857":{"id":"1:3537:2857","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3539:1250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:4104-0:626:1970":{"id":"b:1:4104-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[970,0],"end":[974,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:614:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10820:3355":{"id":"1:10820:3355","crate_id":1,"name":"write_i16","span":null,"visibility":"default","docs":"Writes a single `i16` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13353:3440":{"id":"1:13353:3440","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13355:1818","1:13356:56312","1:13357:56313"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13347:3436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1401:1817":{"id":"0:1401:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:495:2045":{"id":"0:495:2045","crate_id":0,"name":"swap_remove","span":{"filename":"src/map.rs","begin":[543,4],"end":[548,5]},"visibility":"public","docs":"Remove the key-value pair equivalent to `key` and return\nits value.\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:1059:2087":{"id":"b:1:3218-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3370:216-0:1075:1900":{"id":"a:1:3370:216-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:9533:3067-0:312:1909":{"id":"a:1:9533:3067-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:9142:32238":{"id":"5:9142:32238","crate_id":5,"name":"trunc","span":null,"visibility":"default","docs":"Returns the floating point's integer value, with its fractional part removed.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10847:2007":{"id":"1:10847:2007","crate_id":1,"name":"build_hasher","span":null,"visibility":"default","docs":"Creates a new hasher.\n\nEach call to `build_hasher` on the same instance should produce identical\n[`Hasher`]s.\n\n# Examples\n\n```\nuse std::collections::hash_map::RandomState;\nuse std::hash::BuildHasher;\n\nlet s = RandomState::new();\nlet new_s = s.build_hasher();\n```","links":{"`Hasher`":"1:10810:147"},"attrs":["#[stable(since = \"1.7.0\", feature = \"build_hasher\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Hasher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3218-0:409:1654":{"id":"b:1:3218-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23731:1290":{"id":"1:23731:1290","crate_id":1,"name":"simd_le","span":null,"visibility":"default","docs":"Test if each lane is less than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1296,0],"end":[1301,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46:1859":{"id":"0:46:1859","crate_id":0,"name":"Key","span":{"filename":"src/mutable_keys.rs","begin":[20,4],"end":[20,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3378:223":{"id":"1:3378:223","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1374:1817":{"id":"0:1374:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1212:1813":{"id":"0:1212:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1108,4],"end":[1108,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"1:9127:703":{"id":"1:9127:703","crate_id":1,"name":"ge","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().ge([1].iter()), true);\nassert_eq!([1].iter().ge([1, 2].iter()), false);\nassert_eq!([1, 2].iter().ge([1].iter()), true);\nassert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1075:1900":{"id":"0:1075:1900","crate_id":0,"name":"Iter","span":{"filename":"src/set.rs","begin":[807,0],"end":[809,1]},"visibility":"public","docs":"An iterator over the items of a `IndexSet`.\n\nThis `struct` is created by the [`iter`] method on [`IndexSet`].\nSee its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`iter`]: struct.IndexSet.html#method.iter","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1075:1900","a:1:9532:3068-0:1075:1900","a:1:3382:225-0:1075:1900","a:1:3411:3178-0:1075:1900","a:1:9533:3067-0:1075:1900","b:1:4104-0:1075:1900","b:1:3218-0:1075:1900","b:1:3213-0:1075:1900","b:1:3203-0:1075:1900","b:1:3207-0:1075:1900","b:1:2865-0:1075:1900","b:1:2868-0:1075:1900","b:1:8676-0:1075:1900","b:4:848-0:1075:1900","0:1079","0:1083","0:1085","0:1088","0:1090","0:1093"]}},"0:762":{"id":"0:762","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1208,0],"end":[1208,47]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5516:4083":{"id":"5:5516:4083","crate_id":5,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5517:5463","5:5518:7525"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1092:415":{"id":"0:1092:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[830,4],"end":[834,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:597:667":{"id":"0:597:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[943,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10814:3349":{"id":"1:10814:3349","crate_id":1,"name":"write_u16","span":null,"visibility":"default","docs":"Writes a single `u16` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1107:802":{"id":"0:1107:802","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[865,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:312:1909":{"id":"0:312:1909","crate_id":0,"name":"VacantEntry","span":{"filename":"src/map/core.rs","begin":[657,0],"end":[661,1]},"visibility":"public","docs":"A view into a vacant entry in a `IndexMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:319","a:1:3370:216-0:312:1909","a:1:9532:3068-0:312:1909","a:1:3382:225-0:312:1909","a:1:3411:3178-0:312:1909","a:1:9533:3067-0:312:1909","b:1:4104-0:312:1909","b:1:3218-0:312:1909","b:1:3213-0:312:1909","b:1:3203-0:312:1909","b:1:3207-0:312:1909","b:1:2865-0:312:1909","b:1:2868-0:312:1909","0:327"]}},"0:1369:1821":{"id":"0:1369:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[887,4],"end":[887,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8920:2261":{"id":"1:8920:2261","crate_id":1,"name":"take","span":null,"visibility":"default","docs":"Creates an iterator that yields the first `n` elements, or fewer\nif the underlying iterator ends sooner.\n\n`take(n)` yields elements until `n` elements are yielded or the end of\nthe iterator is reached (whichever happens first).\nThe returned iterator is a prefix of length `n` if the original iterator\ncontains at least `n` elements, otherwise it contains all of the\n(fewer than `n`) elements of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().take(2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\n`take()` is often used with an infinite iterator, to make it finite:\n\n```\nlet mut iter = (0..).take(3);\n\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```\n\nIf less than `n` elements are available,\n`take` will limit itself to the size of the underlying iterator:\n\n```\nlet v = [1, 2];\nlet mut iter = v.into_iter().take(5);\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"1:47058:2959","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9130:3244":{"id":"1:9130:3244","crate_id":1,"name":"is_sorted_by","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given comparator function.\n\nInstead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\nfunction to determine the ordering of two elements. Apart from that, it's equivalent to\n[`is_sorted`]; see its documentation for more information.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n```\n\n[`is_sorted`]: Iterator::is_sorted","links":{"Iterator::is_sorted":"1:9129:3243"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6738:4068":{"id":"5:6738:4068","crate_id":5,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6739:60295"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6334:60795":{"id":"5:6334:60795","crate_id":5,"name":"into_pthread_t","span":null,"visibility":"default","docs":"Consumes the thread, returning the raw pthread_t\n\nThis function **transfers ownership** of the underlying pthread_t to\nthe caller. Callers are then the unique owners of the pthread_t and\nmust either detach or join the pthread_t once it's no longer needed.","links":{},"attrs":["#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5536:61084":{"id":"5:5536:61084","crate_id":5,"name":"ctime_nsec","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in nanoseconds since [`ctime`].\n\n[`ctime`]: MetadataExt::ctime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_status_change_time = meta.ctime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::ctime":"5:5535:61083"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:557:1813":{"id":"0:557:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[881,4],"end":[881,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}},"b:1:8676-0:1202:2506":{"id":"b:1:8676-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1219":{"id":"0:1219","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1139,0],"end":[1144,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:4425:2261":{"id":"5:4425:2261","crate_id":5,"name":"take","span":null,"visibility":"default","docs":"Creates an adapter which will read at most `limit` bytes from it.\n\nThis function returns a new instance of `Read` which will read at most\n`limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\nread errors will not count towards the number of bytes read and future\ncalls to [`read()`] may succeed.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n[`Ok(0)`]: Ok\n[`read()`]: Read::read\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 5];\n\n    // read at most five bytes\n    let mut handle = f.take(5);\n\n    handle.read(&mut buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"5:2909:129","Ok":"1:47899:178","Read::read":"5:4411:2408"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["limit",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"5:10966:2959","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3627:133":{"id":"1:3627:133","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3629:184","1:3630:385"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[913,0],"end":[929,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"RandomState","id":"5:10510:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1136:688"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10800:143":{"id":"1:10800:143","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10801:722","1:10803:3248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[987,0],"end":[991,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:625:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1226,0],"end":[1232,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["0:1263:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1185:932":{"id":"0:1185:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1036,4],"end":[1043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5430:3949":{"id":"5:5430:3949","crate_id":5,"name":"into_vec","span":null,"visibility":"default","docs":"Yields the underlying byte vector of this [`OsString`].\n\nSee the module documentation for an example.","links":{"`OsString`":"5:2651:183"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:789:1813":{"id":"0:789:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1234,4],"end":[1234,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:1016:2055":{"id":"0:1016:2055","crate_id":0,"name":"swap_remove_full","span":{"filename":"src/set.rs","begin":[533,4],"end":[538,5]},"visibility":"public","docs":"Remove the value from the set return it and the index it had.\n\nLike `Vec::swap_remove`, the value is removed by swapping it with the\nlast element of the set and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `None` if `value` was not in the set.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1174:2496":{"id":"0:1174:2496","crate_id":0,"name":"Difference","span":{"filename":"src/set.rs","begin":[1024,0],"end":[1027,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `IndexSet`s.\n\nThis `struct` is created by the [`difference`] method on [`IndexSet`].\nSee its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`difference`]: struct.IndexSet.html#method.difference","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1174:2496","a:1:9532:3068-0:1174:2496","a:1:3382:225-0:1174:2496","a:1:3411:3178-0:1174:2496","a:1:9533:3067-0:1174:2496","b:1:4104-0:1174:2496","b:1:3218-0:1174:2496","b:1:3213-0:1174:2496","b:1:3203-0:1174:2496","b:1:3207-0:1174:2496","b:1:2865-0:1174:2496","b:1:2868-0:1174:2496","b:1:8676-0:1174:2496","b:4:848-0:1174:2496","0:1180","0:1187","0:1191","0:1194","0:1198"]}},"1:8907:3213":{"id":"1:8907:3213","crate_id":1,"name":"filter_map","span":null,"visibility":"default","docs":"Creates an iterator that both filters and maps.\n\nThe returned iterator yields only the `value`s for which the supplied\nclosure returns `Some(value)`.\n\n`filter_map` can be used to make chains of [`filter`] and [`map`] more\nconcise. The example below shows how a `map().filter().map()` can be\nshortened to a single call to `filter_map`.\n\n[`filter`]: Iterator::filter\n[`map`]: Iterator::map\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n\nlet mut iter = a.iter().filter_map(|s| s.parse().ok());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`filter`] and [`map`]:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\nlet mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::map":"1:8895:851","Iterator::filter":"1:8905:3212"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FilterMap","id":"1:46926:2949","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:849":{"id":"0:849","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1500,0],"end":[1515,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V2"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V1"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}},"items":["0:855:611"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10581:3267":{"id":"1:10581:3267","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10582:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1365:1817":{"id":"0:1365:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3382:225":{"id":"1:3382:225","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:330:667":{"id":"0:330:667","crate_id":0,"name":"fmt","span":{"filename":"src/map/core.rs","begin":[688,4],"end":[692,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8911:3214":{"id":"1:8911:3214","crate_id":1,"name":"peekable","span":null,"visibility":"default","docs":"Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information.\n\nNote that the underlying iterator is still advanced when [`peek`] or\n[`peek_mut`] are called for the first time: In order to retrieve the\nnext element, [`next`] is called on the underlying iterator, hence any\nside effects (i.e. anything other than fetching the next value) of\nthe [`next`] method will occur.\n\n\n# Examples\n\nBasic usage:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// peek() lets us see into the future\nassert_eq!(iter.peek(), Some(&&1));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), Some(&2));\n\n// we can peek() multiple times, the iterator won't advance\nassert_eq!(iter.peek(), Some(&&3));\nassert_eq!(iter.peek(), Some(&&3));\n\nassert_eq!(iter.next(), Some(&3));\n\n// after the iterator is finished, so is peek()\nassert_eq!(iter.peek(), None);\nassert_eq!(iter.next(), None);\n```\n\nUsing [`peek_mut`] to mutate the next item without advancing the\niterator:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// `peek_mut()` lets us see into the future\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.next(), Some(&1));\n\nif let Some(mut p) = iter.peek_mut() {\n    assert_eq!(*p, &2);\n    // put a value into the iterator\n    *p = &1000;\n}\n\n// The value reappears as the iterator continues\nassert_eq!(iter.collect::<Vec<_>>(), vec![&1000, &3]);\n```\n[`peek`]: Peekable::peek\n[`peek_mut`]: Peekable::peek_mut\n[`next`]: Iterator::next","links":{"Iterator::next":"1:8875:932","Peekable::peek":"1:7416:68473","Peekable::peek_mut":"1:7418:68474"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Peekable","id":"1:46996:2954","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1028:2074":{"id":"0:1028:2074","crate_id":0,"name":"sort_by","span":{"filename":"src/set.rs","begin":[590,4],"end":[595,5]},"visibility":"public","docs":"Sort the set’s values in place using the comparison function `cmp`.\n\nComputes in **O(n log n)** time and **O(n)** space. The sort is stable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cmp",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8935:3224":{"id":"1:8935:3224","crate_id":1,"name":"try_collect","span":null,"visibility":"default","docs":"Fallibly transforms an iterator into a collection, short circuiting if\na failure is encountered.\n\n`try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\nconversions during collection. Its main use case is simplifying conversions from\niterators yielding [`Option<T>`][`Option`] into `Option<Collection<T>>`, or similarly for other [`Try`]\ntypes (e.g. [`Result`]).\n\nImportantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\nonly the inner type produced on `Try::Output` must implement it. Concretely,\nthis means that collecting into `ControlFlow<_, Vec<i32>>` is valid because `Vec<i32>` implements\n[`FromIterator`], even though [`ControlFlow`] doesn't.\n\nAlso, if a failure is encountered during `try_collect()`, the iterator is still valid and\nmay continue to be used, in which case it will continue iterating starting after the element that\ntriggered the failure. See the last example below for an example of how this works.\n\n# Examples\nSuccessfully collecting an iterator of `Option<i32>` into `Option<Vec<i32>>`:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Some(vec![1, 2, 3]));\n```\n\nFailing to collect in the same way:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), None, Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, None);\n```\n\nA similar example, but with `Result`:\n```\n#![feature(iterator_try_collect)]\n\nlet u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Ok(vec![1, 2, 3]));\n\nlet u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Err(()));\n```\n\nFinally, even [`ControlFlow`] works, despite the fact that it\ndoesn't implement [`FromIterator`]. Note also that the iterator can\ncontinue to be used, even if a failure is encountered:\n\n```\n#![feature(iterator_try_collect)]\n\nuse core::ops::ControlFlow::{Break, Continue};\n\nlet u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\nlet mut it = u.into_iter();\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Break(3));\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Continue(vec![4, 5]));\n```\n\n[`collect`]: Iterator::collect","links":{"`Try`":"1:3831:230","`Option`":"1:47771:179","`Result`":"1:47896:208","Iterator::collect":"1:8933:1819","`FromIterator`":"1:8668:137","`ControlFlow`":"1:46060:2870"},"attrs":["#[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6193:57581":{"id":"4:6193:57581","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13824:56918"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1027:2537":{"id":"0:1027:2537","crate_id":0,"name":"sort","span":{"filename":"src/set.rs","begin":[580,4],"end":[585,5]},"visibility":"public","docs":"Sort the set’s values by their default ordering.\n\nSee [`sort_by`](Self::sort_by) for details.","links":{"Self::sort_by":"0:1028:2074"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1456:1819":{"id":"0:1456:1819","crate_id":0,"name":"collect","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8681:2212":{"id":"1:8681:2212","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8683:2207","1:8685:3205","1:8686:3206"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:4104-0:548:1961":{"id":"b:1:4104-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3207-0:312:1909":{"id":"b:1:3207-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8905:3212":{"id":"1:8905:3212","crate_id":1,"name":"filter","span":null,"visibility":"default","docs":"Creates an iterator which uses a closure to determine if an element\nshould be yielded.\n\nGiven an element the closure must return `true` or `false`. The returned\niterator will yield only the elements for which the closure returns\ntrue.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0i32, 1, 2];\n\nlet mut iter = a.iter().filter(|x| x.is_positive());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `filter()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nIt's common to instead use destructuring on the argument to strip away\none:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nor both:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&&x| x > 1); // two &s\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nof these layers.\n\nNote that `iter.filter(f).next()` is equivalent to `iter.find(f)`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Filter","id":"1:46917:2948","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[880,0],"end":[884,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:557:1813","0:1361:932","0:1362:1814","0:1363:502","0:1364:1815","0:1365:1817","0:1366:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1074:667":{"id":"0:1074:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[794,4],"end":[797,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13811:56914":{"id":"1:13811:56914","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:626:1970":{"id":"0:626:1970","crate_id":0,"name":"ValuesMut","span":{"filename":"src/map.rs","begin":[1000,0],"end":[1002,1]},"visibility":"public","docs":"A mutable iterator over the values of a `IndexMap`.\n\nThis `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: struct.IndexMap.html#method.values_mut\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:626:1970","a:1:9532:3068-0:626:1970","a:1:3382:225-0:626:1970","a:1:3411:3178-0:626:1970","a:1:9533:3067-0:626:1970","b:1:4104-0:626:1970","b:1:3218-0:626:1970","b:1:3213-0:626:1970","b:1:3203-0:626:1970","b:1:3207-0:626:1970","b:1:2865-0:626:1970","b:1:2868-0:626:1970","b:1:8676-0:626:1970","0:631","0:636","0:639","0:643","0:646"]}},"b:1:3203-0:312:1909":{"id":"b:1:3203-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5571:60786":{"id":"5:5571:60786","crate_id":5,"name":"file_name_ref","span":null,"visibility":"default","docs":"Returns a reference to the underlying `OsStr` of this entry's filename.\n\n# Examples\n\n```\n#![feature(dir_entry_ext2)]\nuse std::os::unix::fs::DirEntryExt2;\nuse std::{fs, io};\n\nfn main() -> io::Result<()> {\n    let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n    entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n\n    for p in entries {\n        println!(\"{p:?}\");\n    }\n\n    Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"5:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3370:216-0:598:1966":{"id":"a:1:3370:216-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8916:3217":{"id":"1:8916:3217","crate_id":1,"name":"map_while","span":null,"visibility":"default","docs":"Creates an iterator that both yields elements based on a predicate and maps.\n\n`map_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns [`Some(_)`][`Some`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`take_while`] and [`map`]:\n\n[`take_while`]: Iterator::take_while\n[`map`]: Iterator::map\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter()\n                .map(|x| 16i32.checked_div(*x))\n                .take_while(|x| x.is_some())\n                .map(|x| x.unwrap());\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial [`None`]:\n\n```\nlet a = [0, 1, 2, -3, 4, 5, -6];\n\nlet iter = a.iter().map_while(|x| u32::try_from(*x).ok());\nlet vec = iter.collect::<Vec<_>>();\n\n// We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n// (as the `predicate` returned `None`) and `collect` stops at the first `None` encountered.\nassert_eq!(vec, vec![0, 1, 2]);\n```\n\nBecause `map_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, -3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<u32> = iter.by_ref()\n                           .map_while(|n| u32::try_from(*n).ok())\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `-3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.\n\nNote that unlike [`take_while`] this iterator is **not** fused.\nIt is also not specified what this iterator returns after the first [`None`] is returned.\nIf you need fused iterator, use [`fuse`].\n\n[`fuse`]: Iterator::fuse","links":{"Iterator::map":"1:8895:851","Iterator::take_while":"1:8914:3216","`Some`":"1:47775:220","`None`":"1:47773:177","Iterator::fuse":"1:8929:3221"},"attrs":["#[stable(feature = \"iter_map_while\", since = \"1.57.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MapWhile","id":"1:46987:2941","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1083":{"id":"0:1083","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[817,0],"end":[819,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1458:1818","0:1459:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:420:417":{"id":"0:420:417","crate_id":0,"name":"clone_from","span":{"filename":"src/map.rs","begin":[94,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3508:2438":{"id":"1:3508:2438","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3510:184","1:3511:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1318:184":{"id":"0:1318:184","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1360,4],"end":[1360,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"0:751":{"id":"0:751","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1192,0],"end":[1196,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:754:1813","0:1433:932","0:1434:1814","0:1435:502","0:1436:1815","0:1437:1817","0:1438:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3682:761":{"id":"1:3682:761","crate_id":1,"name":"index","span":null,"visibility":"default","docs":"Performs the indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5068:1900":{"id":"5:5068:1900","crate_id":5,"name":"Iter","span":null,"visibility":"default","docs":"Returned iterator over socket addresses which this type may correspond\nto.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToSocketAddrs","id":"5:5067:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"5:11134:4111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:3462:184":{"id":"1:3462:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `%` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:57:1859":{"id":"0:57:1859","crate_id":0,"name":"Key","span":{"filename":"src/mutable_keys.rs","begin":[56,4],"end":[56,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"K"}}},"1:13764:56898":{"id":"1:13764:56898","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:13752:56895","prim@char":"5:15876:2656","str::split_terminator":"1:13761:56897","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49820:3710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:1230:2502":{"id":"b:1:3207-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8199:55247":{"id":"1:8199:55247","crate_id":1,"name":"forward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_checked(a, n) == Some(Step::forward(a, n))`\n* `Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))`\n  * Corollary: `Step::forward(a, 0) == a`\n* `Step::forward(a, n) >= a`\n* `Step::backward(Step::forward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13355:1818":{"id":"1:13355:1818","crate_id":1,"name":"next_back","span":null,"visibility":"default","docs":"Performs the next search step starting from the back.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]`\n  matches the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]`\n  can not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack\n  has been visited\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.","links":{"SearchStep::Done":"1:50141:6461","SearchStep::Match":"1:50133:3344","SearchStep::Reject":"1:50137:7678"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"1:50132:3439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5537:61085":{"id":"5:5537:61085","crate_id":5,"name":"blksize","span":null,"visibility":"default","docs":"Returns the block size for filesystem I/O.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let block_size = meta.blksize();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:665":{"id":"0:665","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1056,0],"end":[1056,48]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1437:1817":{"id":"0:1437:1817","crate_id":0,"name":"last","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:1036:56917":{"id":"5:1036:56917","crate_id":5,"name":"eq_ignore_ascii_case","span":null,"visibility":"default","docs":"Checks that two values are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:1230:2502":{"id":"a:1:3411:3178-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:81:851":{"id":"0:81:851","crate_id":0,"name":"map","span":{"filename":"src/map.rs","begin":[1,0],"end":[1947,1]},"visibility":"public","docs":"`IndexMap` is a hash table where the iteration order of the key-value\npairs is independent of the hash values of the keys.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:331","0:400","0:403","0:406","0:409:1654","0:548:1961","0:576:1964","0:598:1966","0:626:1970","0:650:1973","0:672:1900","0:700:1902","0:724:2087","0:746:1990"],"is_stripped":false}},"0:439:930":{"id":"0:439:930","crate_id":0,"name":"new","span":{"filename":"src/map.rs","begin":[147,4],"end":[149,5]},"visibility":"public","docs":"Create a new map. (Does not allocate.)","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3519:2853":{"id":"1:3519:2853","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3521:184","1:3522:1252"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3213-0:548:1961":{"id":"b:1:3213-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1287:1818":{"id":"0:1287:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[1284,4],"end":[1286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:467:1999":{"id":"0:467:1999","crate_id":0,"name":"reserve","span":{"filename":"src/map.rs","begin":[327,4],"end":[329,5]},"visibility":"public","docs":"Reserve capacity for `additional` more key-value pairs.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:1075:1900":{"id":"b:1:3218-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:959:1953":{"id":"0:959:1953","crate_id":0,"name":"hasher","span":{"filename":"src/set.rs","begin":[174,4],"end":[176,5]},"visibility":"public","docs":"Return a reference to the set's `BuildHasher`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[27,43],"end":[27,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::core::VacantEntry","name":"VacantEntry","id":"0:312:1909","glob":false}},"0:545:2114":{"id":"0:545:2114","crate_id":0,"name":"shift_remove_index","span":{"filename":"src/map.rs","begin":[844,4],"end":[846,5]},"visibility":"public","docs":"Remove the key-value pair by index\n\nValid indices are *0 <= index < self.len()*\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23735:55652":{"id":"1:23735:55652","crate_id":1,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the lane-wise maximum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23355:55069":{"id":"1:23355:55069","crate_id":1,"name":"to_bitmask","span":null,"visibility":"default","docs":"Converts a mask to a bitmask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"1:23353:31848","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3623:383":{"id":"1:3623:383","crate_id":1,"name":"call","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"5:6215:7999":{"id":"5:6215:7999","crate_id":5,"name":"groups","span":null,"visibility":"default","docs":"Sets the supplementary group IDs for the calling process. Translates to\na `setgroups` call in the child process.","links":{},"attrs":["#[unstable(feature = \"setgroups\", issue = \"90747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["groups",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2923:917":{"id":"1:2923:917","crate_id":1,"name":"ne","span":null,"visibility":"default","docs":"This method tests for `!=`. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23112:55079":{"id":"1:23112:55079","crate_id":1,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3608:552":{"id":"1:3608:552","crate_id":1,"name":"deref_mut","span":null,"visibility":"default","docs":"Mutably dereferences the value.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"1:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:847:54881":{"id":"4:847:54881","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":"Uses borrowed data to replace owned data, usually by cloning.\n\nThis is borrow-generalized version of [`Clone::clone_from`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s: String = String::new();\n\"hello\".clone_into(&mut s);\n\nlet mut v: Vec<i32> = Vec::new();\n[1, 2][..].clone_into(&mut v);\n```","links":{"`Clone::clone_from`":"1:2886:417"},"attrs":["#[stable(feature = \"toowned_clone_into\", since = \"1.63.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:1174:2496":{"id":"a:1:9532:3068-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13341:55004":{"id":"1:13341:55004","crate_id":1,"name":"into_searcher","span":null,"visibility":"default","docs":"Constructs the associated searcher from\n`self` and the `haystack` to search in.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:927:1655":{"id":"0:927:1655","crate_id":0,"name":"IndexSet","span":{"filename":"src/set.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"A hash set where the iteration order of the values is independent of their\nhash values.\n\nThe interface is closely compatible with the standard `HashSet`, but also\nhas additional features.\n\n# Order\n\nThe values have a consistent order that is determined by the sequence of\ninsertion and removal calls on the set. The order does not depend on the\nvalues or the hash function at all. Note that insertion order and value\nare not affected if a re-insertion is attempted once an element is\nalready present.\n\nAll iterators traverse the set *in order*.  Set operation iterators like\n`union` produce a concatenated order, as do their matching \"bitwise\"\noperators.  See their documentation for specifics.\n\nThe insertion order is preserved, with **notable exceptions** like the\n`.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of\ncourse result in a new order, depending on the sorting order.\n\n# Indices\n\nThe values are indexed in a compact range without holes in the range\n`0..self.len()`. For example, the method `.get_full` looks up the index for\na value, and the method `.get_index` looks up the value by index.\n\n# Examples\n\n```\nuse indexmap::IndexSet;\n\n// Collects which letters appear in a sentence.\nlet letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();\n\nassert!(letters.contains(&'s'));\nassert!(letters.contains(&'t'));\nassert!(letters.contains(&'u'));\nassert!(!letters.contains(&'y'));\n```","links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RandomState","id":"5:10510:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:949","0:953","0:968","0:1042","0:1162","a:1:3370:216-0:927:1655","a:1:9532:3068-0:927:1655","a:1:3382:225-0:927:1655","a:1:3411:3178-0:927:1655","a:1:9533:3067-0:927:1655","b:1:4104-0:927:1655","b:1:3218-0:927:1655","b:1:3213-0:927:1655","b:1:3203-0:927:1655","b:1:3207-0:927:1655","b:1:2865-0:927:1655","b:1:2868-0:927:1655","b:4:848-0:927:1655","0:931","0:945","0:1054","0:1113","0:1120","0:1126","0:1132","0:1138","0:1144","0:1150","0:1154","0:1159","0:1302","0:1308","0:1314","0:1320"]}},"1:8718:3202":{"id":"1:8718:3202","crate_id":1,"name":"advance_back_by","span":null,"visibility":"default","docs":"Advances the iterator from the back by `n` elements.\n\n`advance_back_by` is the reverse version of [`advance_by`]. This method will\neagerly skip `n` elements starting from the back by calling [`next_back`] up\nto `n` times until [`None`] is encountered.\n\n`advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n`n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\nelements the iterator is advanced by before running out of elements (i.e. the length\nof the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\nouter iterator until it finds an inner iterator that is not empty, which then often\nallows it to return a more accurate `size_hint()` than in its initial state.\n\n[`advance_by`]: Iterator::advance_by\n[`Flatten`]: crate::iter::Flatten\n[`next_back`]: DoubleEndedIterator::next_back\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [3, 4, 5, 6];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_back_by(2), Ok(()));\nassert_eq!(iter.next_back(), Some(&4));\nassert_eq!(iter.advance_back_by(0), Ok(()));\nassert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n```\n\n[`Ok(())`]: Ok\n[`Err(k)`]: Err","links":{"Iterator::advance_by":"1:8885:3208","DoubleEndedIterator::next_back":"1:8717:1818","Err":"1:47902:127","crate::iter::Flatten":"1:6716:2940","Ok":"1:47899:178","`None`":"1:47773:177"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3447:1376":{"id":"1:3447:1376","crate_id":1,"name":"sub","span":null,"visibility":"default","docs":"Performs the `-` operation.\n\n# Example\n\n```\nassert_eq!(12 - 1, 11);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Sub","id":"1:3444:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:974:1798":{"id":"0:974:1798","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[286,4],"end":[288,5]},"visibility":"public","docs":"Insert the value into the set.\n\nIf an equivalent item already exists in the set, it returns\n`false` leaving the original value in the set and without\naltering its insertion order. Otherwise, it inserts the new\nitem and returns `true`.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:677":{"id":"0:677","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1076,0],"end":[1080,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:681:1813","0:1406:932","0:1407:1814","0:1408:502","0:1409:1815","0:1410:1817","0:1411:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13340:3436":{"id":"1:13340:3436","crate_id":1,"name":"Searcher","span":null,"visibility":"default","docs":"Associated searcher for this pattern","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13347:3436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"5:5517:5463":{"id":"5:5517:5463","crate_id":5,"name":"mode","span":null,"visibility":"default","docs":"Sets the mode bits that a new file will be created with.\n\nIf a new file is created as part of an `OpenOptions::open` call then this\nspecified `mode` will be used as the permission bits for the new file.\nIf no `mode` is set, the default of `0o666` will be used.\nThe operating system masks out bits with the system's `umask`, to produce\nthe final permissions.\n\n# Examples\n\n```no_run\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\n# fn main() {\nlet mut options = OpenOptions::new();\noptions.mode(0o644); // Give read/write for owner and read for others.\nlet file = options.open(\"foo.txt\");\n# }\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23020:55639":{"id":"1:23020:55639","crate_id":1,"name":"from_bits","span":null,"visibility":"default","docs":"Raw transmutation from an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3218-0:312:1909":{"id":"b:1:3218-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:538:2103":{"id":"0:538:2103","crate_id":0,"name":"get_index","span":{"filename":"src/map.rs","begin":[781,4],"end":[783,5]},"visibility":"public","docs":"Get a key-value pair by index\n\nValid indices are *0 <= index < self.len()*\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6638:4069":{"id":"5:6638:4069","crate_id":5,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6639:59535"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3186:1439":{"id":"1:3186:1439","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5527:4346":{"id":"5:5527:4346","crate_id":5,"name":"uid","span":null,"visibility":"default","docs":"Returns the user ID of the owner of this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let user_id = meta.uid();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:1059:2087":{"id":"a:1:3411:3178-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:1037:56918":{"id":"5:1037:56918","crate_id":5,"name":"make_ascii_uppercase","span":null,"visibility":"default","docs":"Converts this type to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`to_ascii_uppercase`]: AsciiExt::to_ascii_uppercase","links":{"AsciiExt::to_ascii_uppercase":"5:1034:57581"},"attrs":["#[stable(feature = \"ascii\", since = \"1.9.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1377:1818":{"id":"0:1377:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[931,4],"end":[931,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8727:3204":{"id":"1:8727:3204","crate_id":1,"name":"rfind","span":null,"visibility":"default","docs":"Searches for an element of an iterator from the back that satisfies a predicate.\n\n`rfind()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting at the end, and if any\nof them return `true`, then `rfind()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`rfind()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `rfind()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().rfind(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next_back(), Some(&1));\n```","links":{"`None`":"1:47773:177","Some":"1:47775:220"},"attrs":["#[stable(feature = \"iter_rfind\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1455:1817":{"id":"0:1455:1817","crate_id":0,"name":"last","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:1269:2509":{"id":"b:1:2865-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1427:1815":{"id":"0:1427:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:700:1902":{"id":"b:1:2868-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1324:184":{"id":"0:1324:184","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1377,4],"end":[1377,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"0:1432:1821":{"id":"0:1432:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1163,4],"end":[1163,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:1202:2506":{"id":"a:1:9533:3067-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13795:56908":{"id":"1:13795:56908","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8719:1821":{"id":"1:8719:1821","crate_id":1,"name":"nth_back","span":null,"visibility":"default","docs":"Returns the `n`th element from the end of the iterator.\n\nThis is essentially the reversed version of [`Iterator::nth()`].\nAlthough like most indexing operations, the count starts from zero, so\n`nth_back(0)` returns the first value from the end, `nth_back(1)` the\nsecond, and so on.\n\nNote that all elements between the end and the returned element will be\nconsumed, including the returned element. This also means that calling\n`nth_back(0)` multiple times on the same iterator will return different\nelements.\n\n`nth_back()` will return [`None`] if `n` is greater than or equal to the\nlength of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(2), Some(&1));\n```\n\nCalling `nth_back()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth_back(1), Some(&2));\nassert_eq!(iter.nth_back(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(10), None);\n```","links":{"`None`":"1:47773:177","`Iterator::nth()`":"1:8886:1815"},"attrs":["#[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1022:2066":{"id":"0:1022:2066","crate_id":0,"name":"pop","span":{"filename":"src/set.rs","begin":[559,4],"end":[561,5]},"visibility":"public","docs":"Remove the last value\n\nThis preserves the order of the remaining elements.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1218:1818":{"id":"0:1218:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[1129,4],"end":[1136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8198:55250":{"id":"1:8198:55250","crate_id":1,"name":"forward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`\n\nFor any `a`, `n`, and `m` where `n + m` does not overflow:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, n + m)`\n\nFor any `a` and `n`:\n\n* `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\n  * Corollary: `Step::forward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1310,0],"end":[1322,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":"Access `IndexMap` values corresponding to a key.\n\nMutable indexing allows changing / updating values of key-value\npairs that are already present.\n\nYou can **not** insert new pairs with index syntax, use `.insert()`.\n\n# Examples\n\n```\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nfor word in \"Lorem ipsum dolor sit amet\".split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_string());\n}\nlet lorem = &mut map[\"lorem\"];\nassert_eq!(lorem, \"Lorem\");\nlorem.retain(char::is_lowercase);\nassert_eq!(map[\"lorem\"], \"orem\");\n```\n\n```should_panic\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nmap.insert(\"foo\", 1);\nmap[\"bar\"] = 1; // panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3683:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:804:762"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8741:2131":{"id":"1:8741:2131","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8742:802","1:8743:1956"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13714:56889":{"id":"1:13714:56889","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:15893:2670"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9028:1025":{"id":"1:9028:1025","crate_id":1,"name":"position","span":null,"visibility":"default","docs":"Searches for an element in an iterator, returning its index.\n\n`position()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if one of them\nreturns `true`, then `position()` returns [`Some(index)`]. If all of\nthem return `false`, it returns [`None`].\n\n`position()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so if there are more\nthan [`usize::MAX`] non-matching elements, it either produces the wrong\nresult or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than `usize::MAX`\nnon-matching elements.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().position(|&x| x == 2), Some(1));\n\nassert_eq!(a.iter().position(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3, 4];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.position(|&x| x >= 2), Some(1));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n\n// The returned index depends on iterator state\nassert_eq!(iter.position(|&x| x == 4), Some(0));\n\n```","links":{"`None`":"1:47773:177","`usize::MAX`":"1:32311:2262","Some":"1:47775:220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1129:691":{"id":"0:1129:691","crate_id":0,"name":"from_iter","span":{"filename":"src/set.rs","begin":[904,4],"end":[909,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:983:2505":{"id":"0:983:2505","crate_id":0,"name":"intersection","span":{"filename":"src/set.rs","begin":[345,4],"end":[353,5]},"visibility":"public","docs":"Return an iterator over the values that are in both `self` and `other`.\n\nValues are produced in the same order that they appear in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785":{"id":"0:785","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1233,0],"end":[1241,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:789:1813","0:790:2087","0:791:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:276:2281":{"id":"0:276:2281","crate_id":0,"name":"Vacant","span":{"filename":"src/map/core.rs","begin":[496,4],"end":[496,33]},"visibility":"default","docs":"Vacant slot (no equivalent key in the map).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:278:1567"]}},"1:23022:55640":{"id":"1:23022:55640","crate_id":1,"name":"recip","span":null,"visibility":"default","docs":"Takes the reciprocal (inverse) of each lane, `1/x`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23031:55649":{"id":"1:23031:55649","crate_id":1,"name":"is_normal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither zero, infinite,\nsubnormal, nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2868-0:1230:2502":{"id":"b:1:2868-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:739":{"id":"0:739","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1172,0],"end":[1172,46]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:508:2067":{"id":"0:508:2067","crate_id":0,"name":"retain","span":{"filename":"src/map.rs","begin":[663,4],"end":[668,5]},"visibility":"public","docs":"Scan through each key-value pair in the map and keep those where the\nclosure `keep` returns `true`.\n\nThe elements are visited in order, and remaining elements keep their\norder.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["keep",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1422:1818":{"id":"0:1422:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1127,4],"end":[1127,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1064:1813":{"id":"0:1064:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[776,4],"end":[776,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:3218-0:269:1673":{"id":"b:1:3218-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1241:1813":{"id":"0:1241:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1182,4],"end":[1182,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:1395:1818":{"id":"0:1395:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1011,4],"end":[1011,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6333:60794":{"id":"5:6333:60794","crate_id":5,"name":"as_pthread_t","span":null,"visibility":"default","docs":"Extracts the raw pthread_t without taking ownership","links":{},"attrs":["#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3460:2845":{"id":"1:3460:2845","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3462:184","1:3463:1114"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9533:3067-0:746:1990":{"id":"a:1:9533:3067-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:452:1958":{"id":"0:452:1958","crate_id":0,"name":"iter_mut","span":{"filename":"src/map.rs","begin":[223,4],"end":[227,5]},"visibility":"public","docs":"Return an iterator over the key-value pairs of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3753:1893":{"id":"1:3753:1893","crate_id":1,"name":"end_bound","span":null,"visibility":"default","docs":"End index bound.\n\nReturns the end value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((3..).end_bound(), Unbounded);\nassert_eq!((3..10).end_bound(), Excluded(&10));\n# }\n```","links":{},"attrs":["#[stable(feature = \"collections_range\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"1:46260:1878","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:1075:1900":{"id":"a:1:3411:3178-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13342:55005":{"id":"1:13342:55005","crate_id":1,"name":"is_contained_in","span":null,"visibility":"default","docs":"Checks whether the pattern matches anywhere in the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:650:1973":{"id":"a:1:3382:225-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:3370:216-0:1202:2506":{"id":"a:1:3370:216-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3474:2850":{"id":"1:3474:2850","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3476:1377"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:4473:60891":{"id":"5:4473:60891","crate_id":5,"name":"write_all","span":null,"visibility":"default","docs":"Attempts to write an entire buffer into this writer.\n\nThis method will continuously call [`write`] until there is no more data\nto be written or an error of non-[`ErrorKind::Interrupted`] kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of [`ErrorKind::Interrupted`] kind generated from this method will be\nreturned.\n\nIf the buffer contains no data, this will never call [`write`].\n\n# Errors\n\nThis function will return the first error of\nnon-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n\n[`write`]: Write::write\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    buffer.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```","links":{"`ErrorKind::Interrupted`":"5:10863:7479","Write::write":"5:4468:2411"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:681:1813":{"id":"0:681:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1077,4],"end":[1077,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"0:1031:2086":{"id":"0:1031:2086","crate_id":0,"name":"sorted_by","span":{"filename":"src/set.rs","begin":[601,4],"end":[610,5]},"visibility":"public","docs":"Sort the values of the set and return a by-value iterator of\nthe values with the result.\n\nThe sort is stable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1022,0],"end":[1027,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:649:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:4469:60889":{"id":"5:4469:60889","crate_id":5,"name":"write_vectored","span":null,"visibility":"default","docs":"Like [`write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\n# Examples\n\n```no_run\nuse std::io::IoSlice;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let data1 = [1; 8];\n    let data2 = [15; 8];\n    let io_slice1 = IoSlice::new(&data1);\n    let io_slice2 = IoSlice::new(&data2);\n\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write_vectored(&[io_slice1, io_slice2])?;\n    Ok(())\n}\n```\n\n[`write`]: Write::write","links":{"Write::write":"5:4468:2411"},"attrs":["#[stable(feature = \"iovec\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"5:10923:4026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23730:1291":{"id":"1:23730:1291","crate_id":1,"name":"simd_lt","span":null,"visibility":"default","docs":"Test if each lane is less than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5560:60672":{"id":"5:5560:60672","crate_id":5,"name":"is_socket","span":null,"visibility":"default","docs":"Returns `true` if this file type is a socket.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"unix.socket\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_socket());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13734:17845":{"id":"1:13734:17845","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50044:3722","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:816":{"id":"0:816","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1405,0],"end":[1422,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:820:691"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2865-0:746:1990":{"id":"b:1:2865-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:682":{"id":"0:682","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1082,0],"end":[1084,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1413:1818","0:1414:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8672:152":{"id":"1:8672:152","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8673:1813","1:8674:2087","1:8675:777"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13773:56901":{"id":"1:13773:56901","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8965:3228":{"id":"1:8965:3228","crate_id":1,"name":"is_partitioned","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\n\nSee also [`partition()`] and [`partition_in_place()`].\n\n[`partition()`]: Iterator::partition\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\n```\n#![feature(iter_is_partitioned)]\n\nassert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\nassert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n```","links":{"Iterator::partition":"1:8940:3226","Iterator::partition_in_place":"1:8950:3227"},"attrs":["#[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue =\n\"62544\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10578:667":{"id":"1:10578:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1169:2583":{"id":"0:1169:2583","crate_id":0,"name":"is_subset","span":{"filename":"src/set.rs","begin":[1001,4],"end":[1006,5]},"visibility":"public","docs":"Returns `true` if all elements of `self` are contained in `other`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3254:116":{"id":"1:3254:116","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3255:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3207-0:927:1655":{"id":"b:1:3207-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23204:3383":{"id":"1:23204:3383","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23194:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:289:761":{"id":"0:289:761","crate_id":0,"name":"index","span":{"filename":"src/map/core.rs","begin":[553,4],"end":[558,5]},"visibility":"public","docs":"Return the index where the key-value pair exists or will be inserted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1372:502":{"id":"0:1372:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:951:930":{"id":"0:951:930","crate_id":0,"name":"new","span":{"filename":"src/set.rs","begin":[130,4],"end":[134,5]},"visibility":"public","docs":"Create a new set. (Does not allocate.)","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11209:762":{"id":"1:11209:762","crate_id":1,"name":"index_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:986:62":{"id":"0:986:62","crate_id":0,"name":"union","span":{"filename":"src/set.rs","begin":[359,4],"end":[366,5]},"visibility":"public","docs":"Return an iterator over all values that are in `self` or `other`.\n\nValues from `self` are produced in their original order, followed by\nvalues that are unique to `other` in their original order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1450:1821":{"id":"0:1450:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/set.rs","begin":[782,4],"end":[782,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:746:1990":{"id":"b:1:3207-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"4:6178:57578":{"id":"4:6178:57578","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5570:4087":{"id":"5:5570:4087","crate_id":5,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5571:60786"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10818:3353":{"id":"1:10818:3353","crate_id":1,"name":"write_usize","span":null,"visibility":"default","docs":"Writes a single `usize` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1415:932":{"id":"0:1415:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[899,0],"end":[905,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:571:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13267:3506":{"id":"1:13267:3506","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13268:127","1:13269:55984"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:657:1813":{"id":"0:657:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1041,4],"end":[1041,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"5:4494:59396":{"id":"5:4494:59396","crate_id":5,"name":"consume","span":null,"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.\n\nThis function is a lower-level call. It needs to be paired with the\n[`fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`fill_buf`].\n\n# Examples\n\nSince `consume()` is meant to be used with [`fill_buf`],\nthat method's example includes an example of `consume()`.\n\n[`fill_buf`]: BufRead::fill_buf","links":{"BufRead::fill_buf":"5:4493:59395"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4411:2408":{"id":"5:4411:2408","crate_id":5,"name":"read","span":null,"visibility":"default","docs":"Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.\n\nThis function does not provide any guarantees about whether it blocks\nwaiting for data, but if an object needs to block for a read and cannot,\nit will typically signal this via an [`Err`] return value.\n\nIf the return value of this method is [`Ok(n)`], then implementations must\nguarantee that `0 <= n <= buf.len()`. A nonzero `n` value indicates\nthat the buffer `buf` has been filled in with `n` bytes of data from this\nsource. If `n` is `0`, then it can indicate one of two scenarios:\n\n1. This reader has reached its \"end of file\" and will likely no longer\n   be able to produce bytes. Note that this does not mean that the\n   reader will *always* no longer be able to produce bytes. As an example,\n   on Linux, this method will call the `recv` syscall for a [`TcpStream`],\n   where returning zero indicates the connection was shut down correctly. While\n   for [`File`], it is possible to reach the end of file and get zero as result,\n   but if more data is appended to the file, future calls to `read` will return\n   more data.\n2. The buffer specified was 0 bytes in length.\n\nIt is not an error if the returned value `n` is smaller than the buffer size,\neven when the reader is not at the end of the stream yet.\nThis may happen for example because fewer bytes are actually available right now\n(e. g. being close to end-of-file) or because read() was interrupted by a signal.\n\nAs this trait is safe to implement, callers cannot rely on `n <= buf.len()` for safety.\nExtra care needs to be taken when `unsafe` functions are used to access the read bytes.\nCallers have to ensure that no unchecked out-of-bounds accesses are possible even if\n`n > buf.len()`.\n\nNo guarantees are provided about the contents of `buf` when this\nfunction is called, implementations cannot rely on any property of the\ncontents of `buf` being true. It is recommended that *implementations*\nonly write data to `buf` instead of reading its contents.\n\nCorrespondingly, however, *callers* of this method must not assume any guarantees\nabout how the implementation uses `buf`. The trait is safe to implement,\nso it is possible that the code that's supposed to write to the buffer might also read\nfrom it. It is your responsibility to make sure that `buf` is initialized\nbefore calling `read`. Calling `read` with an uninitialized `buf` (of the kind one\nobtains via [`MaybeUninit<T>`]) is not safe, and can lead to undefined behavior.\n\n[`MaybeUninit<T>`]: crate::mem::MaybeUninit\n\n# Errors\n\nIf this function encounters any form of I/O or other error, an error\nvariant will be returned. If an error is returned then it must be\nguaranteed that no bytes were read.\n\nAn error of the [`ErrorKind::Interrupted`] kind is non-fatal and the read\noperation should be retried if there is nothing else to do.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`Ok(n)`]: Ok\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer[..])?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```","links":{"Ok":"1:47899:178","crate::mem::MaybeUninit":"1:32592:2798","`ErrorKind::Interrupted`":"5:10863:7479","crate::net::TcpStream":"5:5154:4323","`Err`":"1:47902:127","crate::fs::File":"5:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1397:932":{"id":"0:1397:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:963:1975":{"id":"0:963:1975","crate_id":0,"name":"clear","span":{"filename":"src/set.rs","begin":[202,4],"end":[204,5]},"visibility":"public","docs":"Remove all elements in the set, while preserving its capacity.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1409:1815":{"id":"0:1409:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2862:98":{"id":"1:2862:98","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2864:54879"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:544:2113":{"id":"0:544:2113","crate_id":0,"name":"swap_remove_index","span":{"filename":"src/map.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Remove the key-value pair by index\n\nValid indices are *0 <= index < self.len()*\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1162":{"id":"0:1162","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[983,0],"end":[1015,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1165:2585","0:1169:2583","0:1172:2588"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:154:2050":{"id":"0:154:2050","crate_id":0,"name":"swap_remove_entry","span":{"filename":"src/map/core/raw.rs","begin":[171,4],"end":[176,5]},"visibility":"public","docs":"Remove and return the key, value pair stored in the map for this entry\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307:2049":{"id":"0:307:2049","crate_id":0,"name":"remove_entry","span":{"filename":"src/map/core.rs","begin":[639,4],"end":[641,5]},"visibility":"public","docs":"Remove and return the key, value pair stored in the map for this entry\n\n**NOTE:** This is equivalent to `.swap_remove_entry()`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:626:1970":{"id":"b:1:8676-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[126,0],"end":[141,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:435:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1362:1814":{"id":"0:1362:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:671:667":{"id":"0:671:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1059,4],"end":[1062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:724:2087":{"id":"b:1:8676-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1387:1821":{"id":"0:1387:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[967,4],"end":[967,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10813:3348":{"id":"1:10813:3348","crate_id":1,"name":"write_u8","span":null,"visibility":"default","docs":"Writes a single `u8` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10819:3354":{"id":"1:10819:3354","crate_id":1,"name":"write_i8","span":null,"visibility":"default","docs":"Writes a single `i8` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:516:2074":{"id":"0:516:2074","crate_id":0,"name":"sort_by","span":{"filename":"src/map.rs","begin":[697,4],"end":[704,5]},"visibility":"public","docs":"Sort the map’s key-value pairs in place using the comparison\nfunction `cmp`.\n\nThe comparison function receives two key and value pairs to compare (you\ncan sort by keys or values or their combination as needed).\n\nComputes in **O(n log n + c)** time and **O(n)** space where *n* is\nthe length of the map and *c* the capacity. The sort is stable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cmp",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4484:3223":{"id":"5:4484:3223","crate_id":5,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adapter for this instance of `Write`.\n\nThe returned adapter also implements `Write` and will simply borrow this\ncurrent writer.\n\n# Examples\n\n```no_run\nuse std::io::Write;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    let reference = buffer.by_ref();\n\n    // we can use reference just like our original buffer\n    reference.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:576:1964":{"id":"a:1:3382:225-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23734:31867":{"id":"1:23734:31867","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23735:55652","1:23736:55651","1:23737:55653"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23729:3434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1462:502":{"id":"0:1462:502","crate_id":0,"name":"count","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:700:1902":{"id":"b:1:3203-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2868-0:724:2087":{"id":"b:1:2868-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23075:55166":{"id":"1:23075:55166","crate_id":1,"name":"saturating_neg","span":null,"visibility":"default","docs":"Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, 3, MAX]);\nlet unsat = -x;\nlet sat = x.saturating_neg();\nassert_eq!(unsat, Simd::from_array([MIN, 2, -3, MIN + 1]));\nassert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5510:60717":{"id":"5:5510:60717","crate_id":5,"name":"set_mode","span":null,"visibility":"default","docs":"Sets the underlying raw bits for this set of permissions.\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::os::unix::fs::PermissionsExt;\n\nfn main() -> std::io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    let mut permissions = metadata.permissions();\n\n    permissions.set_mode(0o644); // Read/write for owner and read for others.\n    assert_eq!(permissions.mode(), 0o644);\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3834:693":{"id":"1:3834:693","crate_id":1,"name":"from_output","span":null,"visibility":"default","docs":"Constructs the type from its `Output` type.\n\nThis should be implemented consistently with the `branch` method\nsuch that applying the `?` operator will get back the original value:\n`Try::from_output(x).branch() --> ControlFlow::Continue(x)`.\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::Try;\n\nassert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\nassert_eq!(<Option<_> as Try>::from_output(4), Some(4));\nassert_eq!(\n    <std::ops::ControlFlow<String, _> as Try>::from_output(5),\n    std::ops::ControlFlow::Continue(5),\n);\n\n# fn make_question_mark_work() -> Option<()> {\nassert_eq!(Option::from_output(4)?, 4);\n# None }\n# make_question_mark_work();\n\n// This is used, for example, on the accumulator in `try_fold`:\nlet r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\nassert_eq!(r, Some(4));\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["output",{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6467:7297":{"id":"5:6467:7297","crate_id":5,"name":"st_gid","span":null,"visibility":"default","docs":"Returns the group ID of the file owner.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_gid());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4906:1814":{"id":"1:4906:1814","crate_id":1,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the async iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an async iterator implementation yields the declared\nnumber of elements. A buggy async iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the async iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\nasync iterator.","links":{"usize":"5:15899:2676","`usize`":"5:15899:2676","`None`":"1:47773:177","None":"1:47773:177","Option":"1:47771:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1072":{"id":"0:1072","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[793,0],"end":[798,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1074:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:4104-0:576:1964":{"id":"b:1:4104-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2973:801":{"id":"1:2973:801","crate_id":1,"name":"le","span":null,"visibility":"default","docs":"This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.\n\n# Examples\n\n```\nlet result = 1.0 <= 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 <= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:774:1813":{"id":"0:774:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1218,4],"end":[1218,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"1:23021:42808":{"id":"1:23021:42808","crate_id":1,"name":"abs","span":null,"visibility":"default","docs":"Produces a vector where every lane has the absolute value of the\nequivalently-indexed lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9532:3068-0:1096:1990":{"id":"a:1:9532:3068-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:804:762":{"id":"0:804:762","crate_id":0,"name":"index_mut","span":{"filename":"src/map.rs","begin":[1319,4],"end":[1321,5]},"visibility":"default","docs":"Returns a mutable reference to the value corresponding to the supplied `key`.\n\n***Panics*** if `key` is not present in the map.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10846:147":{"id":"1:10846:147","crate_id":1,"name":"Hasher","span":null,"visibility":"default","docs":"Type of the hasher that will be created.","links":{},"attrs":["#[stable(since = \"1.7.0\", feature = \"build_hasher\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1156,0],"end":[1160,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:731:1813","0:1424:932","0:1425:1814","0:1426:502","0:1427:1815","0:1428:1817","0:1429:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9533:3067-0:1174:2496":{"id":"a:1:9533:3067-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6569:4066":{"id":"5:6569:4066","crate_id":5,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6570:8000"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:4475:55385":{"id":"5:4475:55385","crate_id":5,"name":"write_fmt","span":null,"visibility":"default","docs":"Writes a formatted string into this writer, returning any error\nencountered.\n\nThis method is primarily used to interface with the\n[`format_args!()`] macro, and it is rare that this should\nexplicitly be called. The [`write!()`] macro should be favored to\ninvoke this method instead.\n\nThis function internally uses the [`write_all`] method on\nthis trait and hence will continuously write data so long as no errors\nare received. This also means that partial writes are not indicated in\nthis signature.\n\n[`write_all`]: Write::write_all\n\n# Errors\n\nThis function will return any I/O error reported while formatting.\n\n# Examples\n\n```no_run\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // this call\n    write!(buffer, \"{:.*}\", 2, 1.234567)?;\n    // turns into this:\n    buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n    Ok(())\n}\n```","links":{"Write::write_all":"5:4473:60891","`format_args!()`":"1:21:679","`write!()`":"1:14:2411"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"resolved_path","inner":{"name":"Arguments","id":"1:48908:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:1059:2087":{"id":"b:1:8676-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:3529:2855":{"id":"1:3529:2855","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3531:361"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14452:142":{"id":"1:14452:142","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14453:284","1:14454:525","1:14455:287","1:14456:1091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5534:61082":{"id":"5:5534:61082","crate_id":5,"name":"mtime_nsec","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in nanoseconds since [`mtime`].\n\n[`mtime`]: MetadataExt::mtime\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nano_last_modification_time = meta.mtime_nsec();\n    Ok(())\n}\n```","links":{"MetadataExt::mtime":"5:5533:61081"},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:472:1798":{"id":"0:472:1798","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[364,4],"end":[366,5]},"visibility":"public","docs":"Insert a key-value pair in the map.\n\nIf an equivalent key already exists in the map: the key remains and\nretains in its place in the order, its corresponding value is updated\nwith `value` and the older value is returned inside `Some(_)`.\n\nIf no equivalent key existed in the map: the new key-value pair is\ninserted, last in order, and `None` is returned.\n\nComputes in **O(1)** time (amortized average).\n\nSee also [`entry`](#method.entry) if you you want to insert *or* modify\nor if you need to get the index of the corresponding key-value pair.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1251:1818":{"id":"0:1251:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[1206,4],"end":[1208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:1230:2502":{"id":"b:1:2865-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:4:848-0:409:1654":{"id":"b:4:848-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:836":{"id":"0:836","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1476,0],"end":[1488,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:841:2207"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1319:363":{"id":"0:1319:363","crate_id":0,"name":"bitxor","span":{"filename":"src/set.rs","begin":[1366,4],"end":[1368,5]},"visibility":"default","docs":"Returns the set symmetric-difference, cloned into a new set.\n\nValues from `self` are collected in their original order, followed by\nvalues from `other` in their original order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:3508:2438","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:626:1970":{"id":"a:1:9532:3068-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:23025:55643":{"id":"1:23025:55643","crate_id":1,"name":"is_sign_positive","span":null,"visibility":"default","docs":"Returns true for each lane if it has a positive sign, including\n`+0.0`, `NaN`s with positive sign bit and positive infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:614:802":{"id":"0:614:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[971,4],"end":[973,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[663,0],"end":[685,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:323:1663","0:324:2396","0:325:761","0:326:1798"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3522:1252":{"id":"1:3522:1252","crate_id":1,"name":"shr","span":null,"visibility":"default","docs":"Performs the `>>` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 >> 1, 2);\nassert_eq!(2u8 >> 1, 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shr","id":"1:3519:2853","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23074:55165":{"id":"1:23074:55165","crate_id":1,"name":"saturating_abs","span":null,"visibility":"default","docs":"Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, -2, 0, 3]);\nlet unsat = xs.abs();\nlet sat = xs.saturating_abs();\nassert_eq!(unsat, Simd::from_array([MIN, 2, 0, 3]));\nassert_eq!(sat, Simd::from_array([MAX, 2, 0, 3]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3382:225-0:1096:1990":{"id":"a:1:3382:225-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3629:184":{"id":"1:3629:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The returned type after the call operator is used.","links":{},"attrs":["#[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:792":{"id":"0:792","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1265,0],"end":[1279,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":"Access `IndexMap` values corresponding to a key.\n\n# Examples\n\n```\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nfor word in \"Lorem ipsum dolor sit amet\".split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_uppercase());\n}\nassert_eq!(map[\"lorem\"], \"LOREM\");\nassert_eq!(map[\"ipsum\"], \"IPSUM\");\n```\n\n```should_panic\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nmap.insert(\"foo\", 1);\nprintln!(\"{:?}\", map[\"bar\"]); // panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:797:184","0:798:761"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8950:3227":{"id":"1:8950:3227","crate_id":1,"name":"partition_in_place","span":null,"visibility":"default","docs":"Reorders the elements of this iterator *in-place* according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\nReturns the number of `true` elements found.\n\nThe relative order of partitioned items is not maintained.\n\n# Current implementation\n\nCurrent algorithms tries finding the first element for which the predicate evaluates\nto false, and the last element for which it evaluates to true and repeatedly swaps them.\n\nTime complexity: *O*(*n*)\n\nSee also [`is_partitioned()`] and [`partition()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition()`]: Iterator::partition\n\n# Examples\n\n```\n#![feature(iter_partition_in_place)]\n\nlet mut a = [1, 2, 3, 4, 5, 6, 7];\n\n// Partition in-place between evens and odds\nlet i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n\nassert_eq!(i, 3);\nassert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\nassert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n```","links":{"Iterator::partition":"1:8940:3226","Iterator::is_partitioned":"1:8965:3228"},"attrs":["#[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue =\n\"62543\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/map/core/raw.rs","begin":[116,0],"end":[116,65]},"visibility":{"restricted":{"parent":"0:83:61","path":"::map::core::raw"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:761:802":{"id":"0:761:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1203,4],"end":[1205,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5524:59614":{"id":"5:5524:59614","crate_id":5,"name":"ino","span":null,"visibility":"default","docs":"Returns the inode number.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let inode = meta.ino();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:479:2033":{"id":"0:479:2033","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[425,4],"end":[435,5]},"visibility":"public","docs":"Return references to the key-value pair stored for `key`,\nif it is present, else `None`.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1190:1818":{"id":"0:1190:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[1055,4],"end":[1062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2969:187":{"id":"1:2969:187","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2971:1008","1:2972:836","1:2973:801","1:2974:720","1:2975:703"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5434:4129":{"id":"5:5434:4129","crate_id":5,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5435:5055","5:5436:56887"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:507:2066":{"id":"0:507:2066","crate_id":0,"name":"pop","span":{"filename":"src/map.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"Remove the last key-value pair\n\nThis preserves the order of the remaining elements.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:1269:2509":{"id":"a:1:9533:3067-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13729:3909":{"id":"1:13729:3909","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49738:3705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10845:1847":{"id":"1:10845:1847","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10846:147","1:10847:2007","1:10848:3247"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2859:97":{"id":"1:2859:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2861:1836"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:48:1862":{"id":"0:48:1862","crate_id":0,"name":"get_full_mut2","span":{"filename":"src/mutable_keys.rs","begin":[24,4],"end":[29,40]},"visibility":"default","docs":"Return item index, mutable reference to key and value","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:45:1858","args":null}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:45:1858","args":null}}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:45:1858","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9533:3067-0:1075:1900":{"id":"a:1:9533:3067-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4905:55887":{"id":"1:4905:55887","crate_id":1,"name":"poll_next","span":null,"visibility":"default","docs":"Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n`None` if the async iterator is exhausted.\n\n# Return value\n\nThere are several possible return values, each indicating a distinct\nasync iterator state:\n\n- `Poll::Pending` means that this async iterator's next value is not ready\nyet. Implementations will ensure that the current task will be notified\nwhen the next value may be ready.\n\n- `Poll::Ready(Some(val))` means that the async iterator has successfully\nproduced a value, `val`, and may produce further values on subsequent\n`poll_next` calls.\n\n- `Poll::Ready(None)` means that the async iterator has terminated, and\n`poll_next` should not be invoked again.\n\n# Panics\n\nOnce an async iterator has finished (returned `Ready(None)` from `poll_next`), calling its\n`poll_next` method again may panic, block forever, or cause other kinds of\nproblems; the `AsyncIterator` trait places no requirements on the effects of\nsuch a call. However, as the `poll_next` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the async iterator's state.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:47888:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:14355:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:50655:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsyncIterator","id":"1:4903:3501","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1464:1817":{"id":"0:1464:1817","crate_id":0,"name":"last","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:1230:2502":{"id":"a:1:3382:225-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1461:1814":{"id":"0:1461:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8887:3209":{"id":"1:8887:3209","crate_id":1,"name":"step_by","span":null,"visibility":"default","docs":"Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.\n\nNote 1: The first element of the iterator will always be returned,\nregardless of the step given.\n\nNote 2: The time at which ignored elements are pulled is not fixed.\n`StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n`self.nth(step-1)`, …, but is also free to behave like the sequence\n`advance_n_and_return_first(&mut self, step)`,\n`advance_n_and_return_first(&mut self, step)`, …\nWhich way is used may change for some iterators for performance reasons.\nThe second way will advance the iterator earlier and may consume more items.\n\n`advance_n_and_return_first` is the equivalent of:\n```\nfn advance_n_and_return_first<I>(iter: &mut I, n: usize) -> Option<I::Item>\nwhere\n    I: Iterator,\n{\n    let next = iter.next();\n    if n > 1 {\n        iter.nth(n - 2);\n    }\n    next\n}\n```\n\n# Panics\n\nThe method will panic if the given step is `0`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0, 1, 2, 3, 4, 5];\nlet mut iter = a.iter().step_by(2);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["step",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"StepBy","id":"1:47047:2943","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8635:2934":{"id":"1:8635:2934","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8637:3239"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2868-0:1059:2087":{"id":"b:1:2868-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9097:3238":{"id":"1:9097:3238","crate_id":1,"name":"sum","span":null,"visibility":"default","docs":"Sums the elements of an iterator.\n\nTakes each element, adds them together, and returns the result.\n\nAn empty iterator returns the zero value of the type.\n\n# Panics\n\nWhen calling `sum()` and a primitive integer type is being returned, this\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet sum: i32 = a.iter().sum();\n\nassert_eq!(sum, 6);\n```","links":{},"attrs":["#[stable(feature = \"iter_arith\", since = \"1.11.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"S"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sum","id":"1:8631:2935","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:1202:2506":{"id":"b:1:3213-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3218-0:650:1973":{"id":"b:1:3218-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:451:788":{"id":"0:451:788","crate_id":0,"name":"iter","span":{"filename":"src/map.rs","begin":[216,4],"end":[220,5]},"visibility":"public","docs":"Return an iterator over the key-value pairs of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:409:1654":{"id":"b:1:3203-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:8676-0:746:1990":{"id":"b:1:8676-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:8929:3221":{"id":"1:8929:3221","crate_id":1,"name":"fuse","span":null,"visibility":"default","docs":"Creates an iterator which ends after the first [`None`].\n\nAfter an iterator returns [`None`], future calls may or may not yield\n[`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n[`None`] is given, it will always return [`None`] forever.\n\nNote that the [`Fuse`] wrapper is a no-op on iterators that implement\nthe [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\nif the [`FusedIterator`] trait is improperly implemented.\n\n[`Some(T)`]: Some\n[`FusedIterator`]: crate::iter::FusedIterator\n\n# Examples\n\nBasic usage:\n\n```\n// an iterator which alternates between Some and None\nstruct Alternate {\n    state: i32,\n}\n\nimpl Iterator for Alternate {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<i32> {\n        let val = self.state;\n        self.state = self.state + 1;\n\n        // if it's even, Some(i32), else None\n        if val % 2 == 0 {\n            Some(val)\n        } else {\n            None\n        }\n    }\n}\n\nlet mut iter = Alternate { state: 0 };\n\n// we can see our iterator going back and forth\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n\n// however, once we fuse it...\nlet mut iter = iter.fuse();\n\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n\n// it will always return `None` after the first time.\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{"Some":"1:47775:220","`None`":"1:47773:177","`Fuse`":"1:46949:2951","crate::iter::FusedIterator":"1:9153:1897"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Fuse","id":"1:46949:2951","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10572:667":{"id":"1:10572:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23073:42808":{"id":"1:23073:42808","crate_id":1,"name":"abs","span":null,"visibility":"default","docs":"Lanewise absolute value, implemented in Rust.\nEvery lane becomes its absolute value.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, MIN +1, -5, 0]);\nassert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:14455:287":{"id":"1:14455:287","crate_id":1,"name":"alloc_zeroed","span":null,"visibility":"default","docs":"Behaves like `alloc`, but also ensures that the contents\nare set to zero before being returned.\n\n# Safety\n\nThis function is unsafe for the same reasons that `alloc` is.\nHowever the allocated block of memory is guaranteed to be initialized.\n\n# Errors\n\nReturning a null pointer indicates that either memory is exhausted\nor `layout` does not meet allocator's size or alignment constraints,\njust as in `alloc`.\n\nClients wishing to abort computation in response to an\nallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4903:3501":{"id":"1:4903:3501","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4904:1813","1:4905:55887","1:4906:1814"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1126":{"id":"0:1126","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[899,0],"end":[910,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1129:691"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2868-0:1096:1990":{"id":"b:1:2868-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:456:1969":{"id":"0:456:1969","crate_id":0,"name":"values_mut","span":{"filename":"src/map.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Return an iterator over mutable references to the values of the map,\nin their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3754:2266":{"id":"1:3754:2266","crate_id":1,"name":"contains","span":null,"visibility":"default","docs":"Returns `true` if `item` is contained in the range.\n\n# Examples\n\n```\nassert!( (3..5).contains(&4));\nassert!(!(3..5).contains(&2));\n\nassert!( (0.0..1.0).contains(&0.5));\nassert!(!(0.0..1.0).contains(&f32::NAN));\nassert!(!(0.0..f32::NAN).contains(&0.5));\nassert!(!(f32::NAN..1.0).contains(&0.5));","links":{},"attrs":["#[stable(feature = \"range_contains\", since = \"1.35.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"U"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3482:2847":{"id":"1:3482:2847","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3484:566"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1087:802":{"id":"0:1087:802","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[822,4],"end":[824,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[687,0],"end":[693,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:330:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:809:184":{"id":"0:809:184","crate_id":0,"name":"Output","span":{"filename":"src/map.rs","begin":[1353,4],"end":[1353,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"1:8928:3220":{"id":"1:8928:3220","crate_id":1,"name":"flatten","span":null,"visibility":"default","docs":"Creates an iterator that flattens nested structure.\n\nThis is useful when you have an iterator of iterators or an iterator of\nthings that can be turned into iterators and you want to remove one\nlevel of indirection.\n\n# Examples\n\nBasic usage:\n\n```\nlet data = vec![vec![1, 2, 3, 4], vec![5, 6]];\nlet flattened = data.into_iter().flatten().collect::<Vec<u8>>();\nassert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n```\n\nMapping and then flattening:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .map(|s| s.chars())\n                          .flatten()\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nYou can also rewrite this in terms of [`flat_map()`], which is preferable\nin this case since it conveys intent more clearly:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nFlattening only removes one level of nesting at a time:\n\n```\nlet d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n\nlet d2 = d3.iter().flatten().collect::<Vec<_>>();\nassert_eq!(d2, [&[1, 2], &[3, 4], &[5, 6], &[7, 8]]);\n\nlet d1 = d3.iter().flatten().flatten().collect::<Vec<_>>();\nassert_eq!(d1, [&1, &2, &3, &4, &5, &6, &7, &8]);\n```\n\nHere we see that `flatten()` does not perform a \"deep\" flatten.\nInstead, only one level of nesting is removed. That is, if you\n`flatten()` a three-dimensional array, the result will be\ntwo-dimensional and not one-dimensional. To get a one-dimensional\nstructure, you have to `flatten()` again.\n\n[`flat_map()`]: Iterator::flat_map","links":{"Iterator::flat_map":"1:8925:3219"},"attrs":["#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Flatten","id":"1:6716:2940","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10825:3360":{"id":"1:10825:3360","crate_id":1,"name":"write_length_prefix","span":null,"visibility":"default","docs":"Writes a length prefix into this hasher, as part of being prefix-free.\n\nIf you're implementing [`Hash`] for a custom collection, call this before\nwriting its contents to this `Hasher`.  That way\n`(collection![1, 2, 3], collection![4, 5])` and\n`(collection![1, 2], collection![3, 4, 5])` will provide different\nsequences of values to the `Hasher`\n\nThe `impl<T> Hash for [T]` includes a call to this method, so if you're\nhashing a slice (or array or vector) via its `Hash::hash` method,\nyou should **not** call this yourself.\n\nThis method is only for providing domain separation.  If you want to\nhash a `usize` that represents part of the *data*, then it's important\nthat you pass it to [`Hasher::write_usize`] instead of to this method.\n\n# Examples\n\n```\n#![feature(hasher_prefixfree_extras)]\n# // Stubs to make the `impl` below pass the compiler\n# struct MyCollection<T>(Option<T>);\n# impl<T> MyCollection<T> {\n#     fn len(&self) -> usize { todo!() }\n# }\n# impl<'a, T> IntoIterator for &'a MyCollection<T> {\n#     type Item = T;\n#     type IntoIter = std::iter::Empty<T>;\n#     fn into_iter(self) -> Self::IntoIter { todo!() }\n# }\n\nuse std::hash::{Hash, Hasher};\nimpl<T: Hash> Hash for MyCollection<T> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        state.write_length_prefix(self.len());\n        for elt in self {\n            elt.hash(state);\n        }\n    }\n}\n```\n\n# Note to Implementers\n\nIf you've decided that your `Hasher` is willing to be susceptible to\nHash-DoS attacks, then you might consider skipping hashing some or all\nof the `len` provided in the name of increased performance.","links":{"`Hash`":"1:10800:143","`Hasher::write_usize`":"1:10818:3353"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3174:74":{"id":"1:3174:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3176:2414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1373:1815":{"id":"0:1373:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13702":{"id":"1:13702","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12781:1361","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13703:802","1:13704:1956","1:13705:56884","1:13706:56885","1:13708:56886","1:13711:56887","1:13712:56888","1:13713:311","1:13714:56889","1:13715:1659","1:13717:2037","1:13719:55312","1:13721:55313","1:13723:4164","1:13724:56890","1:13725:2357","1:13726:56891","1:13727:3743","1:13728:3466","1:13729:3909","1:13730:17816","1:13731:17854","1:13732:4589","1:13733:56892","1:13734:17845","1:13735:2266","1:13738:56893","1:13741:56894","1:13744:2413","1:13748:3204","1:13752:56895","1:13755:17426","1:13758:56896","1:13761:56897","1:13764:56898","1:13767:56899","1:13770:56900","1:13773:56901","1:13776:56902","1:13779:2680","1:13782:56903","1:13785:56904","1:13788:56905","1:13791:56906","1:13793:56907","1:13795:56908","1:13797:56909","1:13798:56910","1:13799:56911","1:13802:56912","1:13805:38187","1:13808:56913","1:13811:56914","1:13814:56915","1:13817:56916","1:13820:3623","1:13822:3894","1:13823:56917","1:13824:56918","1:13825:56919","1:13826:56920","1:13828:4102","1:13829:56921"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23114:55081":{"id":"1:23114:55081","crate_id":1,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3382:225-0:700:1902":{"id":"a:1:3382:225-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:4423:2503":{"id":"5:4423:2503","crate_id":5,"name":"chain","span":null,"visibility":"default","docs":"Creates an adapter which will chain this stream with another.\n\nThe returned `Read` instance will first read all bytes from this object\nuntil EOF is encountered. Afterwards the output is equivalent to the\noutput of `next`.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f1 = File::open(\"foo.txt\")?;\n    let f2 = File::open(\"bar.txt\")?;\n\n    let mut handle = f1.chain(f2);\n    let mut buffer = String::new();\n\n    // read the value into a String. We could use any Read method here,\n    // this is just one example.\n    handle.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```","links":{"crate::fs::File":"5:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["next",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"5:10956:2435","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"5:4410:4010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4486:60804":{"id":"5:4486:60804","crate_id":5,"name":"seek","span":null,"visibility":"default","docs":"Seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`].\n\n# Errors\n\nSeeking can fail, for example because it might involve flushing a buffer.\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"5:10936:6468"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"5:10935:4028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9063:2907":{"id":"1:9063:2907","crate_id":1,"name":"min_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value from the\nspecified function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1010,0],"end":[1012,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1395:1818","0:1396:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1010:2530":{"id":"0:1010:2530","crate_id":0,"name":"swap_take","span":{"filename":"src/set.rs","begin":[502,4],"end":[507,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the\ngiven one.\n\nLike `Vec::swap_remove`, the value is removed by swapping it with the\nlast element of the set and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `None` if `value` was not in the set.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6192:2925":{"id":"4:6192:2925","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:546:2120":{"id":"0:546:2120","crate_id":0,"name":"move_index","span":{"filename":"src/map.rs","begin":[857,4],"end":[859,5]},"visibility":"public","docs":"Moves the position of a key-value pair from one index to another\nby shifting all other pairs in-between.\n\n* If `from < to`, the other pairs will shift down while the targeted pair moves up.\n* If `from > to`, the other pairs will shift up while the targeted pair moves down.\n\n***Panics*** if `from` or `to` are out of bounds.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"primitive","inner":"usize"}],["to",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3503:2437":{"id":"1:3503:2437","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:184","1:3506:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3213-0:724:2087":{"id":"b:1:3213-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:768:667":{"id":"0:768:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1211,4],"end":[1214,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:564:802":{"id":"0:564:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[891,4],"end":[893,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1180":{"id":"0:1180","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1029,0],"end":[1048,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1184:1813","0:1185:932","0:1186:1814"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9156:2932":{"id":"1:9156:2932","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3221:128":{"id":"1:3221:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39071:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:3213-0:1096:1990":{"id":"b:1:3213-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1153:59":{"id":"0:1153:59","crate_id":0,"name":"default","span":{"filename":"src/set.rs","begin":[958,4],"end":[962,5]},"visibility":"default","docs":"Return an empty `IndexSet`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1034:2543":{"id":"0:1034:2543","crate_id":0,"name":"sort_unstable","span":{"filename":"src/set.rs","begin":[615,4],"end":[620,5]},"visibility":"public","docs":"Sort the set's values by their default ordering.\n\nSee [`sort_unstable_by`](Self::sort_unstable_by) for details.","links":{"Self::sort_unstable_by":"0:1035:2092"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10823:3358":{"id":"1:10823:3358","crate_id":1,"name":"write_i128","span":null,"visibility":"default","docs":"Writes a single `i128` into this hasher.","links":{},"attrs":["#[stable(feature = \"i128\", since = \"1.26.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1312:184":{"id":"0:1312:184","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1343,4],"end":[1343,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"1:9107:1008":{"id":"1:9107:1008","crate_id":1,"name":"partial_cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\nassert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\nassert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n\nassert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:790:2087":{"id":"0:790:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[1235,4],"end":[1235,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"0:1368:1818":{"id":"0:1368:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[887,4],"end":[887,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:134:1908":{"id":"a:1:3370:216-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:844:228":{"id":"4:844:228","crate_id":4,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:845:3897","4:846:54880","4:847:54881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3222:1438":{"id":"1:3222:1438","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10583:3268":{"id":"1:10583:3268","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10584:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1125:777":{"id":"0:1125:777","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[892,4],"end":[896,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8672:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6171:57576":{"id":"4:6171:57576","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:444:2802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:444:2802","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1198,0],"end":[1200,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1440:1818","0:1441:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5913:3900":{"id":"4:5913:3900","crate_id":4,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5915:184","4:5916:440"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:962:788":{"id":"0:962:788","crate_id":0,"name":"iter","span":{"filename":"src/set.rs","begin":[193,4],"end":[197,5]},"visibility":"public","docs":"Return an iterator over the values of the set, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3171:75":{"id":"1:3171:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3173:312"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8637:3239":{"id":"1:8637:3239","crate_id":1,"name":"product","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\nmultiplying the items.","links":{},"attrs":["#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:1174:2496":{"id":"a:1:3411:3178-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3595:227":{"id":"1:3595:227","crate_id":1,"name":"Target","span":null,"visibility":"default","docs":"The resulting type after dereferencing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"deref_target\"]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"1:3379:222":{"id":"1:3379:222","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8743:1956":{"id":"1:8743:1956","crate_id":1,"name":"is_empty","span":null,"visibility":"default","docs":"Returns `true` if the iterator is empty.\n\nThis method has a default implementation using\n[`ExactSizeIterator::len()`], so you don't need to implement it yourself.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(exact_size_is_empty)]\n\nlet mut one_element = std::iter::once(0);\nassert!(!one_element.is_empty());\n\nassert_eq!(one_element.next(), Some(0));\nassert!(one_element.is_empty());\n\nassert_eq!(one_element.next(), None);\n```","links":{"`ExactSizeIterator::len()`":"1:8742:802"},"attrs":["#[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3452:902":{"id":"1:3452:902","crate_id":1,"name":"mul","span":null,"visibility":"default","docs":"Performs the `*` operation.\n\n# Example\n\n```\nassert_eq!(12 * 2, 24);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Mul","id":"1:3449:2843","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2865-0:1096:1990":{"id":"b:1:2865-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3607:2859":{"id":"1:3607:2859","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3608:552"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3218-0:1269:2509":{"id":"b:1:3218-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13798:56910":{"id":"1:13798:56910","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3750:1879":{"id":"1:3750:1879","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3752:1887","1:3753:1893","1:3754:2266"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:576:1964":{"id":"0:576:1964","crate_id":0,"name":"IntoKeys","span":{"filename":"src/map.rs","begin":[920,0],"end":[922,1]},"visibility":"public","docs":"An owning iterator over the keys of a `IndexMap`.\n\nThis `struct` is created by the [`into_keys`] method on [`IndexMap`].\nSee its documentation for more.\n\n[`IndexMap`]: struct.IndexMap.html\n[`into_keys`]: struct.IndexMap.html#method.into_keys","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:576:1964","a:1:9532:3068-0:576:1964","a:1:3382:225-0:576:1964","a:1:3411:3178-0:576:1964","a:1:9533:3067-0:576:1964","b:1:4104-0:576:1964","b:1:3218-0:576:1964","b:1:3213-0:576:1964","b:1:3203-0:576:1964","b:1:3207-0:576:1964","b:1:2865-0:576:1964","b:1:2868-0:576:1964","b:1:8676-0:576:1964","0:580","0:584","0:587","0:591","0:594"]}},"0:848:59":{"id":"0:848:59","crate_id":0,"name":"default","span":{"filename":"src/map.rs","begin":[1495,4],"end":[1497,5]},"visibility":"default","docs":"Return an empty `IndexMap`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23737:55653":{"id":"1:23737:55653","crate_id":1,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval.\n\nFor each lane, returns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise returns `self`.\n\n# Panics\n\nPanics if `min > max` on any lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:4104-0:746:1990":{"id":"b:1:4104-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2865-0:626:1970":{"id":"b:1:2865-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3109:3373":{"id":"1:3109:3373","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3108:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:851:54880":{"id":"4:851:54880","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1425:1814":{"id":"0:1425:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5529:61078":{"id":"5:5529:61078","crate_id":5,"name":"rdev","span":null,"visibility":"default","docs":"Returns the device ID of this file (if it is a special one).\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let device_id = meta.rdev();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3213-0:1269:2509":{"id":"b:1:3213-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:765":{"id":"0:765","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1210,0],"end":[1215,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:768:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9532:3068-0:672:1900":{"id":"a:1:9532:3068-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1375:1819":{"id":"0:1375:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:1230:2502":{"id":"b:1:4104-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3179:2278":{"id":"1:3179:2278","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Converts this type into the (usually inferred) input type.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4904:1813":{"id":"1:4904:1813","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of items yielded by the async iterator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3177:150":{"id":"1:3177:150","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3179:2278"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1105":{"id":"0:1105","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[864,0],"end":[868,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1107:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6460:4084":{"id":"5:6460:4084","crate_id":5,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6461:61006","5:6462:7292","5:6463:7293","5:6464:7295","5:6465:7294","5:6466:7296","5:6467:7297","5:6468:7299","5:6469:5505","5:6470:7302","5:6471:7303","5:6472:7304","5:6473:7305","5:6474:7306","5:6475:7307","5:6476:7300","5:6477:7301"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2886:417":{"id":"1:2886:417","crate_id":1,"name":"clone_from","span":null,"visibility":"default","docs":"Performs copy-assignment from `source`.\n\n`a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\nbut can be overridden to reuse the resources of `a` to avoid unnecessary\nallocations.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9082:2348":{"id":"1:9082:2348","crate_id":1,"name":"rev","span":null,"visibility":"default","docs":"Reverses an iterator's direction.\n\nUsually, iterators iterate from left to right. After using `rev()`,\nan iterator will instead iterate from right to left.\n\nThis is only possible if the iterator has an end, so `rev()` only\nworks on [`DoubleEndedIterator`]s.\n\n# Examples\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().rev();\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), None);\n```","links":{"`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[doc(alias = \"reverse\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"1:47006:2955","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:688:802":{"id":"0:688:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1087,4],"end":[1089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:1059:2087":{"id":"b:1:3207-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1038:2097":{"id":"0:1038:2097","crate_id":0,"name":"sorted_unstable_by","span":{"filename":"src/set.rs","begin":[634,4],"end":[643,5]},"visibility":"public","docs":"Sort the values of the set and return a by-value iterator of\nthe values with the result.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10579:192":{"id":"1:10579:192","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10580:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23356:55070":{"id":"1:23356:55070","crate_id":1,"name":"from_bitmask","span":null,"visibility":"default","docs":"Converts a bitmask to a mask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bitmask",{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"1:23353:31848","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23142:3433":{"id":"1:23142:3433","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"The mask type returned by each comparison.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:991:1659":{"id":"0:991:1659","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[382,4],"end":[387,5]},"visibility":"public","docs":"Return a reference to the value stored in the set, if it is present,\nelse `None`.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:134:1908":{"id":"b:1:2865-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1294":{"id":"0:1294","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1303,0],"end":[1309,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1297:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:409:1654":{"id":"0:409:1654","crate_id":0,"name":"IndexMap","span":{"filename":"src/map.rs","begin":[71,0],"end":[74,1]},"visibility":"public","docs":"A hash table where the iteration order of the key-value pairs is independent\nof the hash values of the keys.\n\nThe interface is closely compatible with the standard `HashMap`, but also\nhas additional features.\n\n# Order\n\nThe key-value pairs have a consistent order that is determined by\nthe sequence of insertion and removal calls on the map. The order does\nnot depend on the keys or the hash function at all.\n\nAll iterators traverse the map in *the order*.\n\nThe insertion order is preserved, with **notable exceptions** like the\n`.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of\ncourse result in a new order, depending on the sorting order.\n\n# Indices\n\nThe key-value pairs are indexed in a compact range without holes in the\nrange `0..self.len()`. For example, the method `.get_full` looks up the\nindex for a key, and the method `.get_index` looks up the key-value pair by\nindex.\n\n# Examples\n\n```\nuse indexmap::IndexMap;\n\n// count the frequency of each letter in a sentence.\nlet mut letters = IndexMap::new();\nfor ch in \"a short treatise on fungi\".chars() {\n    *letters.entry(ch).or_insert(0) += 1;\n}\n\nassert_eq!(letters[&'s'], 2);\nassert_eq!(letters[&'t'], 3);\nassert_eq!(letters[&'u'], 1);\nassert_eq!(letters.get(&'y'), None);\n```","links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"RandomState","id":"5:10510:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:436","0:441","0:463","0:534","a:1:3370:216-0:409:1654","a:1:9532:3068-0:409:1654","a:1:3382:225-0:409:1654","a:1:3411:3178-0:409:1654","a:1:9533:3067-0:409:1654","b:1:4104-0:409:1654","b:1:3218-0:409:1654","b:1:3213-0:409:1654","b:1:3203-0:409:1654","b:1:3207-0:409:1654","b:1:2865-0:409:1654","b:1:2868-0:409:1654","b:4:848-0:409:1654","0:53","0:415","0:431","0:769","0:777","0:785","0:792","0:799","0:805","0:811","0:816","0:822","0:829","0:836","0:844","0:849","0:858"]}},"5:5528:4347":{"id":"5:5528:4347","crate_id":5,"name":"gid","span":null,"visibility":"default","docs":"Returns the group ID of the owner of this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let group_id = meta.gid();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/map/core/raw.rs","begin":[119,0],"end":[191,1]},"visibility":{"restricted":{"parent":"0:83:61","path":"::map::core::raw"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:148:1663","0:149:1659","0:150:2037","0:152:761","0:153:2373","0:154:2050","0:155:2063"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:543:2111":{"id":"0:543:2111","crate_id":0,"name":"last_mut","span":{"filename":"src/map.rs","begin":[818,4],"end":[820,5]},"visibility":"public","docs":"Get the last key-value pair, with mutable access to the value\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4154:55054":{"id":"1:4154:55054","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":"Data providers should implement this method to provide *all* values they are able to\nprovide by using `demand`.\n\nNote that the `provide_*` methods on `Demand` have short-circuit semantics: if an earlier\nmethod has successfully provided a value, then later methods will not get an opportunity to\nprovide.\n\n# Examples\n\nProvides a reference to a field with type `String` as a `&str`, and a value of\ntype `i32`.\n\n```rust\n# #![feature(provide_any)]\nuse std::any::{Provider, Demand};\n# struct SomeConcreteType { field: String, num_field: i32 }\n\nimpl Provider for SomeConcreteType {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand.provide_ref::<str>(&self.field)\n            .provide_value::<i32>(self.num_field);\n    }\n}\n```","links":{},"attrs":["#[unstable(feature = \"provide_any\", issue = \"96024\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:4168:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13726:56891":{"id":"1:13726:56891","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13725:2357"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:724:2087":{"id":"b:1:3203-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:14454:525":{"id":"1:14454:525","crate_id":1,"name":"dealloc","span":null,"visibility":"default","docs":"Deallocate the block of memory at the given `ptr` pointer with the given `layout`.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure all of the following:\n\n* `ptr` must denote a block of memory currently allocated via\n  this allocator,\n\n* `layout` must be the same layout that was used\n  to allocate that block of memory.","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3370:216-0:576:1964":{"id":"a:1:3370:216-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:14540:2258":{"id":"1:14540:2258","crate_id":1,"name":"grow","span":null,"visibility":"default","docs":"Attempts to extend the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2391:2799"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50740:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:548:1961":{"id":"a:1:9533:3067-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:931":{"id":"0:931","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[71,0],"end":[85,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:934:415","0:935:417"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6642:4072":{"id":"5:6642:4072","crate_id":5,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6643:60735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3411:3178-0:576:1964":{"id":"a:1:3411:3178-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:3382:225-0:672:1900":{"id":"a:1:3382:225-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:827:688":{"id":"0:827:688","crate_id":0,"name":"from","span":{"filename":"src/map.rs","begin":[1438,4],"end":[1440,5]},"visibility":"default","docs":"# Examples\n\n```\nuse indexmap::IndexMap;\n\nlet map1 = IndexMap::from([(1, 2), (3, 4)]);\nlet map2: IndexMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8882:1817":{"id":"1:8882:1817","crate_id":1,"name":"last","span":null,"visibility":"default","docs":"Consumes the iterator, returning the last element.\n\nThis method will evaluate the iterator until it returns [`None`]. While\ndoing so, it keeps track of the current element. After [`None`] is\nreturned, `last()` will then return the last element it saw.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().last(), Some(&3));\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().last(), Some(&5));\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4495:59398":{"id":"5:4495:59398","crate_id":5,"name":"has_data_left","span":null,"visibility":"default","docs":"Check if the underlying `Read` has any data left to be read.\n\nThis function may fill the buffer to check for data,\nso this functions returns `Result<bool>`, not `bool`.\n\nDefault implementation calls `fill_buf` and checks that\nreturned slice is empty (which means that there is no data left,\nsince EOF is reached).\n\nExamples\n\n```\n#![feature(buf_read_has_data_left)]\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nwhile stdin.has_data_left().unwrap() {\n    let mut line = String::new();\n    stdin.read_line(&mut line).unwrap();\n    // work with line\n    println!(\"{line:?}\");\n}\n```","links":{},"attrs":["#[unstable(feature = \"buf_read_has_data_left\", reason = \"recently added\",\nissue = \"86423\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:548:1961":{"id":"a:1:3370:216-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:9532:3068-0:598:1966":{"id":"a:1:9532:3068-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:288:1663":{"id":"0:288:1663","crate_id":0,"name":"key","span":{"filename":"src/map/core.rs","begin":[545,4],"end":[550,5]},"visibility":"public","docs":"Gets a reference to the entry's key, either within the map if occupied,\nor else the new key that was used to find the entry.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8995:301":{"id":"1:8995:301","crate_id":1,"name":"any","span":null,"visibility":"default","docs":"Tests if any element of the iterator matches a predicate.\n\n`any()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then so does `any()`. If they all return `false`, it\nreturns `false`.\n\n`any()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `true`, given that no matter what else happens,\nthe result will also be `true`.\n\nAn empty iterator returns `false`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().any(|&x| x > 0));\n\nassert!(!a.iter().any(|&x| x > 5));\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(iter.any(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3539:1250":{"id":"1:3539:1250","crate_id":1,"name":"shl_assign","span":null,"visibility":"default","docs":"Performs the `<<=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx <<= 1;\nassert_eq!(x, 10);\n\nlet mut x: u8 = 1;\nx <<= 1;\nassert_eq!(x, 2);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4489:60806":{"id":"5:4489:60806","crate_id":5,"name":"stream_position","span":null,"visibility":"default","docs":"Returns the current seek position from the start of the stream.\n\nThis is equivalent to `self.seek(SeekFrom::Current(0))`.\n\n# Example\n\n```no_run\nuse std::{\n    io::{self, BufRead, BufReader, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = BufReader::new(File::open(\"foo.txt\")?);\n\n    let before = f.stream_position()?;\n    f.read_line(&mut String::new())?;\n    let after = f.stream_position()?;\n\n    println!(\"The first line was {} bytes long\", after - before);\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"seek_convenience\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6464:7295":{"id":"5:6464:7295","crate_id":5,"name":"st_mode","span":null,"visibility":"default","docs":"Returns the file type and mode.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_mode());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:11206:55312":{"id":"1:11206:55312","crate_id":1,"name":"get_unchecked","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[930,0],"end":[932,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1377:1818","0:1378:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8683:2207":{"id":"1:8683:2207","crate_id":1,"name":"extend","span":null,"visibility":"default","docs":"Extends a collection with the contents of an iterator.\n\nAs this is the only required method for this trait, the [trait-level] docs\ncontain more details.\n\n[trait-level]: Extend\n\n# Examples\n\nBasic usage:\n\n```\n// You can extend a String with some chars:\nlet mut message = String::from(\"abc\");\n\nmessage.extend(['d', 'e', 'f'].iter());\n\nassert_eq!(\"abcdef\", &message);\n```","links":{"Extend":"1:8681:2212"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1186:1814":{"id":"0:1186:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6235:60753":{"id":"5:6235:60753","crate_id":5,"name":"from_raw","span":null,"visibility":"default","docs":"Creates a new `ExitStatus` or `ExitStatusError` from the raw underlying integer status\nvalue from `wait`\n\nThe value should be a **wait status, not an exit status**.\n\n# Panics\n\nPanics on an attempt to make an `ExitStatusError` from a wait status of `0`.\n\nMaking an `ExitStatus` always succeeds and never panics.","links":{},"attrs":["#[stable(feature = \"exit_status_from\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["raw",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3510:184":{"id":"1:3510:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `^` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1053:2124":{"id":"0:1053:2124","crate_id":0,"name":"swap_indices","span":{"filename":"src/set.rs","begin":[719,4],"end":[721,5]},"visibility":"public","docs":"Swaps the position of two values in the set.\n\n***Panics*** if `a` or `b` are out of bounds.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["a",{"kind":"primitive","inner":"usize"}],["b",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1006:2061":{"id":"0:1006:2061","crate_id":0,"name":"shift_remove","span":{"filename":"src/set.rs","begin":[470,4],"end":[475,5]},"visibility":"public","docs":"Remove the value from the set, and return `true` if it was present.\n\nLike `Vec::remove`, the value is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `false` if `value` was not in the set.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1082:1813":{"id":"0:1082:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[812,4],"end":[812,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"1:9094:2260":{"id":"1:9094:2260","crate_id":1,"name":"cycle","span":null,"visibility":"default","docs":"Repeats an iterator endlessly.\n\nInstead of stopping at [`None`], the iterator will instead start again,\nfrom the beginning. After iterating again, it will start at the\nbeginning again. And again. And again. Forever. Note that in case the\noriginal iterator is empty, the resulting iterator will also be empty.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut it = a.iter().cycle();\n\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cycle","id":"1:46897:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3513:2852":{"id":"1:3513:2852","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3515:184","1:3516:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:9533:3067-0:409:1654":{"id":"a:1:9533:3067-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1390:502":{"id":"0:1390:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:483:2027":{"id":"0:483:2027","crate_id":0,"name":"get_index_of","span":{"filename":"src/map.rs","begin":[453,4],"end":[463,5]},"visibility":"public","docs":"Return item index, if it exists in the map\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10562:110":{"id":"1:10562:110","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10563:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3476:1377":{"id":"1:3476:1377","crate_id":1,"name":"sub_assign","span":null,"visibility":"default","docs":"Performs the `-=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx -= 1;\nassert_eq!(x, 11);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[27,28],"end":[27,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::core::OccupiedEntry","name":"OccupiedEntry","id":"0:134:1908","glob":false}},"1:3279:3797":{"id":"1:3279:3797","crate_id":1,"name":"source","span":null,"visibility":"default","docs":"The lower-level source of this error, if any.\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct SuperError {\n    source: SuperErrorSideKick,\n}\n\nimpl fmt::Display for SuperError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperError is here!\")\n    }\n}\n\nimpl Error for SuperError {\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        Some(&self.source)\n    }\n}\n\n#[derive(Debug)]\nstruct SuperErrorSideKick;\n\nimpl fmt::Display for SuperErrorSideKick {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperErrorSideKick is here!\")\n    }\n}\n\nimpl Error for SuperErrorSideKick {}\n\nfn get_super_error() -> Result<(), SuperError> {\n    Err(SuperError { source: SuperErrorSideKick })\n}\n\nfn main() {\n    match get_super_error() {\n        Err(e) => {\n            println!(\"Error: {e}\");\n            println!(\"Caused by: {}\", e.source().unwrap());\n        }\n        _ => println!(\"No error\"),\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"error_source\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:3278:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1048:2113":{"id":"0:1048:2113","crate_id":0,"name":"swap_remove_index","span":{"filename":"src/set.rs","begin":[686,4],"end":[688,5]},"visibility":"public","docs":"Remove the value by index\n\nValid indices are *0 <= index < self.len()*\n\nLike `Vec::swap_remove`, the value is removed by swapping it with the\nlast element of the set and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9075:2906":{"id":"1:9075:2906","crate_id":1,"name":"min_by","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value with respect to the\nspecified comparison function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"iter_min_by\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3831:230":{"id":"1:3831:230","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3832:184","1:3833:2863","1:3834:693","1:3835:376"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3836:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1413:1818":{"id":"0:1413:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1083,4],"end":[1083,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13825:56919":{"id":"1:13825:56919","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1441:1821":{"id":"0:1441:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1199,4],"end":[1199,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12769:1813":{"id":"1:12769:1813","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The element type of the slice being matched on.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:6477:7301":{"id":"5:6477:7301","crate_id":5,"name":"st_blocks","span":null,"visibility":"default","docs":"Returns the number of blocks allocated to the file, 512-byte units.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blocks());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23143:1266":{"id":"1:23143:1266","crate_id":1,"name":"simd_eq","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1418:1815":{"id":"0:1418:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:927:1655":{"id":"b:1:4104-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1230:2502":{"id":"0:1230:2502","crate_id":0,"name":"SymmetricDifference","span":{"filename":"src/set.rs","begin":[1172,0],"end":[1174,1]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `IndexSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`IndexSet`]. See its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1230:2502","a:1:9532:3068-0:1230:2502","a:1:3382:225-0:1230:2502","a:1:3411:3178-0:1230:2502","a:1:9533:3067-0:1230:2502","b:1:4104-0:1230:2502","b:1:3218-0:1230:2502","b:1:3213-0:1230:2502","b:1:3203-0:1230:2502","b:1:3207-0:1230:2502","b:1:2865-0:1230:2502","b:1:2868-0:1230:2502","b:1:8676-0:1230:2502","b:4:848-0:1230:2502","0:1236","0:1247","0:1255","0:1259","0:1264"]}},"0:1281:2599":{"id":"0:1281:2599","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1271,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13269:55984":{"id":"1:13269:55984","crate_id":1,"name":"from_str","span":null,"visibility":"default","docs":"Parses a string `s` to return a value of this type.\n\nIf parsing succeeds, return the value inside [`Ok`], otherwise\nwhen the string is ill-formatted return an error specific to the\ninside [`Err`]. The error type is specific to the implementation of the trait.\n\n# Examples\n\nBasic usage with [`i32`], a type that implements `FromStr`:\n\n```\nuse std::str::FromStr;\n\nlet s = \"5\";\nlet x = i32::from_str(s).unwrap();\n\nassert_eq!(5, x);\n```","links":{"`i32`":"5:15890:2667","`Ok`":"1:47899:178","`Err`":"1:47902:127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FromStr","id":"1:13267:3506","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:523:2091":{"id":"0:523:2091","crate_id":0,"name":"sort_unstable_keys","span":{"filename":"src/map.rs","begin":[725,4],"end":[732,5]},"visibility":"public","docs":"Sort the map's key-value pairs by the default ordering of the keys, but\nmay not preserve the order of equal elements.\n\nSee [`sort_unstable_by`](Self::sort_unstable_by) for details.","links":{"Self::sort_unstable_by":"0:526:2092"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:1096:1990":{"id":"b:1:3207-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10513:1558":{"id":"1:10513:1558","crate_id":1,"name":"write_str","span":null,"visibility":"default","docs":"Writes a string slice into this writer, returning whether the write\nsucceeded.\n\nThis method can only succeed if the entire string slice was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\nThe purpose of std::fmt::Error is to abort the formatting operation when the underlying\ndestination encounters some error preventing it from accepting more text; it should\ngenerally be propagated rather than handled, at least when implementing formatting traits.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_str(s)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"hola\").unwrap();\nassert_eq!(&buf, \"hola\");\n```","links":{"`Error`":"1:48834:128"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9532:3068-0:700:1902":{"id":"a:1:9532:3068-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/mutable_keys.rs","begin":[51,0],"end":[75,1]},"visibility":{"restricted":{"parent":"0:29:1646","path":"::mutable_keys"}},"docs":"Opt-in mutable access to keys.\n\nSee [`MutableKeys`](trait.MutableKeys.html) for more information.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"MutableKeys","id":"0:45:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:57:1859","0:58:1860","0:59:1862","0:61:1868","0:63:1873"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3835:376":{"id":"1:3835:376","crate_id":1,"name":"branch","span":null,"visibility":"default","docs":"Used in `?` to decide whether the operator should produce a value\n(because this returned [`ControlFlow::Continue`])\nor propagate a value back to the caller\n(because this returned [`ControlFlow::Break`]).\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, Try};\n\nassert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\nassert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));\n\nassert_eq!(Some(3).branch(), ControlFlow::Continue(3));\nassert_eq!(None::<String>.branch(), ControlFlow::Break(None));\n\nassert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));\nassert_eq!(\n    ControlFlow::<_, String>::Break(3).branch(),\n    ControlFlow::Break(ControlFlow::Break(3)),\n);\n```","links":{"`ControlFlow::Continue`":"1:46063:106","`ControlFlow::Break`":"1:46066:99"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ControlFlow","id":"1:46060:2870","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:469:2003":{"id":"0:469:2003","crate_id":0,"name":"shrink_to","span":{"filename":"src/map.rs","begin":[341,4],"end":[343,5]},"visibility":"public","docs":"Shrink the capacity of the map with a lower limit.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23110:55077":{"id":"1:23110:55077","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3213-0:746:1990":{"id":"b:1:3213-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23019:55638":{"id":"1:23019:55638","crate_id":1,"name":"to_bits","span":null,"visibility":"default","docs":"Raw transmutation to an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1393:1819":{"id":"0:1393:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13820:3623":{"id":"1:13820:3623","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13268:127","`FromStr`":"1:13267:3506"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13267:3506","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13267:3506","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:312:1909":{"id":"b:1:4104-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:152:761":{"id":"0:152:761","crate_id":0,"name":"index","span":{"filename":"src/map/core/raw.rs","begin":[152,4],"end":[155,5]},"visibility":"public","docs":"Return the index of the key-value pair","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:1174:2496":{"id":"b:4:848-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1380:1814":{"id":"0:1380:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13352:55491":{"id":"1:13352:55491","crate_id":1,"name":"next_reject","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result. See [`next()`][Searcher::next]\nand [`next_match()`][Searcher::next_match].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_match`][Searcher::next_match] will overlap.","links":{"Searcher::next":"1:13350:932","Searcher::next_match":"1:13351:55490","SearchStep::Reject":"1:50137:7678"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1269:2509":{"id":"0:1269:2509","crate_id":0,"name":"Union","span":{"filename":"src/set.rs","begin":[1252,0],"end":[1254,1]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `IndexSet`s.\n\nThis `struct` is created by the [`union`] method on [`IndexSet`].\nSee its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`union`]: struct.IndexSet.html#method.union","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1269:2509","a:1:9532:3068-0:1269:2509","a:1:3382:225-0:1269:2509","a:1:3411:3178-0:1269:2509","a:1:9533:3067-0:1269:2509","b:1:4104-0:1269:2509","b:1:3218-0:1269:2509","b:1:3213-0:1269:2509","b:1:3203-0:1269:2509","b:1:3207-0:1269:2509","b:1:2865-0:1269:2509","b:1:2868-0:1269:2509","b:1:8676-0:1269:2509","b:4:848-0:1269:2509","0:1274","0:1284","0:1291","0:1294","0:1298"]}},"4:6506:1418":{"id":"4:6506:1418","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":"Converts the given value to a `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```","links":{},"attrs":["#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1046,0],"end":[1048,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1404:1818","0:1405:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3382:225-0:927:1655":{"id":"a:1:3382:225-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1381:502":{"id":"0:1381:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:1680":{"id":"0:14:1680","crate_id":0,"name":"indexmap","span":{"filename":"src/macros.rs","begin":[21,0],"end":[36,1]},"visibility":"public","docs":"Create an `IndexMap` from a list of key-value pairs\n\n## Example\n\n```\nuse indexmap::indexmap;\n\nlet map = indexmap!{\n    \"a\" => 1,\n    \"b\" => 2,\n};\nassert_eq!(map[\"a\"], 1);\nassert_eq!(map[\"b\"], 2);\nassert_eq!(map.get(\"c\"), None);\n\n// \"a\" is the first key\nassert_eq!(map.keys().next(), Some(&\"a\"));\n```","links":{},"attrs":["#[cfg(has_std)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! indexmap {\n    (@single $($x:tt)*) => { ... };\n    (@count $($rest:expr),*) => { ... };\n    ($($key:expr => $value:expr,)+) => { ... };\n    ($($key:expr => $value:expr),*) => { ... };\n}"},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1394,0],"end":[1403,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":"Access `IndexMap` values at indexed positions.\n\nMutable indexing allows changing / updating indexed values\nthat are already present.\n\nYou can **not** insert new values with index syntax, use `.insert()`.\n\n# Examples\n\n```\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nfor word in \"Lorem ipsum dolor sit amet\".split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_string());\n}\nlet lorem = &mut map[0];\nassert_eq!(lorem, \"Lorem\");\nlorem.retain(char::is_lowercase);\nassert_eq!(map[\"lorem\"], \"orem\");\n```\n\n```should_panic\nuse indexmap::IndexMap;\n\nlet mut map = IndexMap::new();\nmap.insert(\"foo\", 1);\nmap[10] = 1; // panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3683:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:815:762"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3207-0:1174:2496":{"id":"b:1:3207-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5525:5463":{"id":"5:5525:5463","crate_id":5,"name":"mode","span":null,"visibility":"default","docs":"Returns the rights applied to this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let mode = meta.mode();\n    let user_has_write_access      = mode & 0o200;\n    let user_has_read_write_access = mode & 0o600;\n    let group_has_read_access      = mode & 0o040;\n    let others_have_exec_access    = mode & 0o001;\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:14543:3223":{"id":"1:14543:3223","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adapter for this instance of `Allocator`.\n\nThe returned adapter also implements `Allocator` and will simply borrow this.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13343:55006":{"id":"1:13343:55006","crate_id":1,"name":"is_prefix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the front of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1019:2062":{"id":"0:1019:2062","crate_id":0,"name":"shift_remove_full","span":{"filename":"src/set.rs","begin":[547,4],"end":[552,5]},"visibility":"public","docs":"Remove the value from the set return it and the index it had.\n\nLike `Vec::remove`, the value is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `None` if `value` was not in the set.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:724:2087":{"id":"a:1:3370:216-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:474:2023":{"id":"0:474:2023","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[390,4],"end":[393,5]},"visibility":"public","docs":"Get the given key’s corresponding entry in the map for insertion and/or\nin-place manipulation.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}]],"output":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:672:1900":{"id":"0:672:1900","crate_id":0,"name":"Iter","span":{"filename":"src/map.rs","begin":[1072,0],"end":[1074,1]},"visibility":"public","docs":"An iterator over the entries of a `IndexMap`.\n\nThis `struct` is created by the [`iter`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`iter`]: struct.IndexMap.html#method.iter\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:672:1900","a:1:9532:3068-0:672:1900","a:1:3382:225-0:672:1900","a:1:3411:3178-0:672:1900","a:1:9533:3067-0:672:1900","b:1:4104-0:672:1900","b:1:3218-0:672:1900","b:1:3213-0:672:1900","b:1:3203-0:672:1900","b:1:3207-0:672:1900","b:1:2865-0:672:1900","b:1:2868-0:672:1900","b:1:8676-0:672:1900","b:4:848-0:672:1900","0:677","0:682","0:685","0:689","0:692","0:696"]}},"0:720":{"id":"0:720","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1138,0],"end":[1143,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:723:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9116:3242":{"id":"1:9116:3242","crate_id":1,"name":"eq_by","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother with respect to the specified equality function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n```","links":{"`Iterator`":"1:8873:159"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["eq",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1389:1814":{"id":"0:1389:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1460:932":{"id":"0:1460:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5566:4086":{"id":"5:5566:4086","crate_id":5,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5567:59614"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[976,0],"end":[976,48]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2865-0:548:1961":{"id":"b:1:2865-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:9533:3067-0:576:1964":{"id":"a:1:9533:3067-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:325:761":{"id":"0:325:761","crate_id":0,"name":"index","span":{"filename":"src/map/core.rs","begin":[675,4],"end":[677,5]},"visibility":"public","docs":"Return the index where the key-value pair will be inserted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:672:1900":{"id":"b:1:3218-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[896,0],"end":[896,46]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13824:56918":{"id":"1:13824:56918","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23026:55644":{"id":"1:23026:55644","crate_id":1,"name":"is_sign_negative","span":null,"visibility":"default","docs":"Returns true for each lane if it has a negative sign, including\n`-0.0`, `NaN`s with negative sign bit and negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1214:1814":{"id":"0:1214:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1119,4],"end":[1121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3484:566":{"id":"1:3484:566","crate_id":1,"name":"div_assign","span":null,"visibility":"default","docs":"Performs the `/=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx /= 2;\nassert_eq!(x, 6);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9099:3239":{"id":"1:9099:3239","crate_id":1,"name":"product","span":null,"visibility":"default","docs":"Iterates over the entire iterator, multiplying all the elements\n\nAn empty iterator returns the one value of the type.\n\n# Panics\n\nWhen calling `product()` and a primitive integer type is being returned,\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\n```\nfn factorial(n: u32) -> u32 {\n    (1..=n).product()\n}\nassert_eq!(factorial(0), 1);\nassert_eq!(factorial(1), 1);\nassert_eq!(factorial(5), 120);\n```","links":{},"attrs":["#[stable(feature = \"iter_arith\", since = \"1.11.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"P"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Product","id":"1:8635:2934","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1008:2261":{"id":"0:1008:2261","crate_id":0,"name":"take","span":{"filename":"src/set.rs","begin":[485,4],"end":[490,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the\ngiven one.\n\n**NOTE:** This is equivalent to `.swap_take(value)`, if you need to\npreserve the order of the values in the set, use `.shift_take(value)`\ninstead.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8678:1813":{"id":"1:8678:1813","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1045:2103":{"id":"0:1045:2103","crate_id":0,"name":"get_index","span":{"filename":"src/set.rs","begin":[659,4],"end":[661,5]},"visibility":"public","docs":"Get a value by index\n\nValid indices are *0 <= index < self.len()*\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:798:761":{"id":"0:798:761","crate_id":0,"name":"index","span":{"filename":"src/map.rs","begin":[1276,4],"end":[1278,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied `key`.\n\n***Panics*** if `key` is not present in the map.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13349:3459":{"id":"1:13349:3459","crate_id":1,"name":"haystack","span":null,"visibility":"default","docs":"Getter for the underlying string to be searched in\n\nWill always return the same [`&str`][str].","links":{"str":"5:15882:2661"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:672:1900":{"id":"a:1:3411:3178-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:148:1663":{"id":"0:148:1663","crate_id":0,"name":"key","span":{"filename":"src/map/core/raw.rs","begin":[125,4],"end":[127,5]},"visibility":"public","docs":"Gets a reference to the entry's key in the map.\n\nNote that this is not the key that was used to find the entry. There may be an observable\ndifference if the key type has any distinguishing features outside of `Hash` and `Eq`, like\nextra fields or the memory address of an allocation.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1398:1814":{"id":"0:1398:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14053:139":{"id":"1:14053:139","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14054:184","1:14055:1024"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6237:60754":{"id":"5:6237:60754","crate_id":5,"name":"core_dumped","span":null,"visibility":"default","docs":"If the process was terminated by a signal, says whether it dumped core.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:269:1673":{"id":"0:269:1673","crate_id":0,"name":"Entry","span":{"filename":"src/map/core.rs","begin":[492,0],"end":[497,1]},"visibility":"public","docs":"Entry for an existing key-value pair or a vacant location to\ninsert one.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:273:2280","0:276:2281"],"impls":["0:279","a:1:3370:216-0:269:1673","a:1:9532:3068-0:269:1673","a:1:3382:225-0:269:1673","a:1:3411:3178-0:269:1673","a:1:9533:3067-0:269:1673","b:1:4104-0:269:1673","b:1:3218-0:269:1673","b:1:3213-0:269:1673","b:1:3203-0:269:1673","b:1:3207-0:269:1673","b:1:2865-0:269:1673","b:1:2868-0:269:1673","0:293"]}},"0:487:2038":{"id":"0:487:2038","crate_id":0,"name":"get_full_mut","span":{"filename":"src/map.rs","begin":[477,4],"end":[487,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1288:2600":{"id":"0:1288:2600","crate_id":0,"name":"rfold","span":{"filename":"src/set.rs","begin":[1288,4],"end":[1293,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:724:2087":{"id":"b:1:2865-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1194":{"id":"0:1194","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1072,0],"end":[1079,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1197:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2868-0:1075:1900":{"id":"b:1:2868-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:533:2100":{"id":"0:533:2100","crate_id":0,"name":"reverse","span":{"filename":"src/map.rs","begin":[770,4],"end":[772,5]},"visibility":"public","docs":"Reverses the order of the map’s key-value pairs in place.\n\nComputes in **O(n)** time and **O(1)** space.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1858":{"id":"0:45:1858","crate_id":0,"name":"MutableKeys","span":{"filename":"src/mutable_keys.rs","begin":[19,0],"end":[46,1]},"visibility":"public","docs":"Opt-in mutable access to keys.\n\nThese methods expose `&mut K`, mutable references to the key as it is stored\nin the map.\nYou are allowed to modify the keys in the hashmap **if the modification\ndoes not change the key’s hash and equality**.\n\nIf keys are modified erroneously, you can no longer look them up.\nThis is sound (memory safe) but a logical error hazard (just like\nimplementing PartialEq, Eq, or Hash incorrectly would be).\n\n`use` this trait to enable its methods for `IndexMap`.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:46:1859","0:47:1860","0:48:1862","0:50:1868","0:52:1873"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:53"]}},"0:997:2027":{"id":"0:997:2027","crate_id":0,"name":"get_index_of","span":{"filename":"src/set.rs","begin":[398,4],"end":[403,5]},"visibility":"public","docs":"Return item index, if it exists in the set","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296:667":{"id":"0:296:667","crate_id":0,"name":"fmt","span":{"filename":"src/map/core.rs","begin":[590,4],"end":[595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3819:2861":{"id":"1:3819:2861","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3750:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8921:3218":{"id":"1:8921:3218","crate_id":1,"name":"scan","span":null,"visibility":"default","docs":"An iterator adapter similar to [`fold`] that holds internal state and\nproduces a new iterator.\n\n[`fold`]: Iterator::fold\n\n`scan()` takes two arguments: an initial value which seeds the internal\nstate, and a closure with two arguments, the first being a mutable\nreference to the internal state and the second an iterator element.\nThe closure can assign to the internal state to share state between\niterations.\n\nOn iteration, the closure will be applied to each element of the\niterator and the return value from the closure, an [`Option`], is\nyielded by the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().scan(1, |state, &x| {\n    // each iteration, we'll multiply the state by the element\n    *state = *state * x;\n\n    // then, we'll yield the negation of the state\n    Some(-*state)\n});\n\nassert_eq!(iter.next(), Some(-1));\nassert_eq!(iter.next(), Some(-2));\nassert_eq!(iter.next(), Some(-6));\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::fold":"1:8980:2599","`Option`":"1:47771:179"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["initial_state",{"kind":"generic","inner":"St"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Scan","id":"1:47015:2956","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"St"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"St"}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4471:60890":{"id":"5:4471:60890","crate_id":5,"name":"is_write_vectored","span":null,"visibility":"default","docs":"Determines if this `Write`r has an efficient [`write_vectored`]\nimplementation.\n\nIf a `Write`r does not override the default [`write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`write_vectored`]: Write::write_vectored","links":{"Write::write_vectored":"5:4469:60889"},"attrs":["#[unstable(feature = \"can_vector\", issue = \"69941\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23034:55651":{"id":"1:23034:55651","crate_id":1,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the minimum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8932:3223":{"id":"1:8932:3223","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Borrows an iterator, rather than consuming it.\n\nThis is useful to allow applying iterator adapters while still\nretaining ownership of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n\n// Take the first two words.\nlet hello_world: Vec<_> = words.by_ref().take(2).collect();\nassert_eq!(hello_world, vec![\"hello\", \"world\"]);\n\n// Collect the rest of the words.\n// We can only do this because we used `by_ref` earlier.\nlet of_rust: Vec<_> = words.collect();\nassert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:977:2495":{"id":"0:977:2495","crate_id":0,"name":"difference","span":{"filename":"src/set.rs","begin":[315,4],"end":[323,5]},"visibility":"public","docs":"Return an iterator over the values that are in `self` but not `other`.\n\nValues are produced in the same order that they appear in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10569:120":{"id":"1:10569:120","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10570:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3203-0:1230:2502":{"id":"b:1:3203-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2865-0:269:1673":{"id":"b:1:2865-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3451:184":{"id":"1:3451:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `*` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1517,0],"end":[1523,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3486:2849":{"id":"1:3486:2849","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3488:1115"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3218-0:1096:1990":{"id":"b:1:3218-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10824:3359":{"id":"1:10824:3359","crate_id":1,"name":"write_isize","span":null,"visibility":"default","docs":"Writes a single `isize` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"isize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:700:1902":{"id":"b:1:3207-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1062":{"id":"0:1062","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[775,0],"end":[779,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1064:1813","0:1442:932","0:1443:1814","0:1444:502","0:1445:1815","0:1446:1817","0:1447:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10516:55385":{"id":"1:10516:55385","crate_id":1,"name":"write_fmt","span":null,"visibility":"default","docs":"Glue for usage of the [`write!`] macro with implementors of this trait.\n\nThis method should generally not be invoked manually, but rather through\nthe [`write!`] macro itself.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_fmt(format_args!(\"{s}\"))\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"world\").unwrap();\nassert_eq!(&buf, \"world\");\n```","links":{"`write!`":"1:14:2411"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"resolved_path","inner":{"name":"Arguments","id":"1:48908:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9160:2933":{"id":"1:9160:2933","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8196:2917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13721:55313":{"id":"1:13721:55313","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:685":{"id":"0:685","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1086,0],"end":[1090,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:688:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:4104-0:1202:2506":{"id":"b:1:4104-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5578:4089":{"id":"5:5578:4089","crate_id":5,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5579:5463"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13752:56895":{"id":"1:13752:56895","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"5:15876:2656","`DoubleEndedIterator`":"1:8716:121","str::rsplit":"1:13758:56896","str::split_whitespace":"1:13730:17816","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49752:2998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2922:611":{"id":"1:2922:611","crate_id":1,"name":"eq","span":null,"visibility":"default","docs":"This method tests for `self` and `other` values to be equal, and is used\nby `==`.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:820:691":{"id":"0:820:691","crate_id":0,"name":"from_iter","span":{"filename":"src/map.rs","begin":[1415,4],"end":[1421,5]},"visibility":"default","docs":"Create an `IndexMap` from the sequence of key-value pairs in the\niterable.\n\n`from_iter` uses the same logic as `extend`. See\n[`extend`](#method.extend) for more details.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1085":{"id":"0:1085","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[821,0],"end":[825,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1087:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:754:1813":{"id":"0:754:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1193,4],"end":[1193,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:844":{"id":"0:844","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1490,0],"end":[1498,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:848:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8895:851":{"id":"1:8895:851","crate_id":1,"name":"map","span":null,"visibility":"default","docs":"Takes a closure and creates an iterator which calls that closure on each\nelement.\n\n`map()` transforms one iterator into another, by means of its argument:\nsomething that implements [`FnMut`]. It produces a new iterator which\ncalls this closure on each element of the original iterator.\n\nIf you are good at thinking in types, you can think of `map()` like this:\nIf you have an iterator that gives you elements of some type `A`, and\nyou want an iterator of some other type `B`, you can use `map()`,\npassing a closure that takes an `A` and returns a `B`.\n\n`map()` is conceptually similar to a [`for`] loop. However, as `map()` is\nlazy, it is best used when you're already working with other iterators.\nIf you're doing some sort of looping for a side effect, it's considered\nmore idiomatic to use [`for`] than `map()`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n[`FnMut`]: crate::ops::FnMut\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().map(|x| 2 * x);\n\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), Some(6));\nassert_eq!(iter.next(), None);\n```\n\nIf you're doing some sort of side effect, prefer [`for`] to `map()`:\n\n```\n# #![allow(unused_must_use)]\n// don't do this:\n(0..5).map(|x| println!(\"{x}\"));\n\n// it won't even execute, as it is lazy. Rust will warn you about this.\n\n// Instead, use for:\nfor x in 0..5 {\n    println!(\"{x}\");\n}\n```","links":{"crate::ops::FnMut":"1:3624:132"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Map","id":"1:46978:2953","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3255:59":{"id":"1:3255:59","crate_id":1,"name":"default","span":null,"visibility":"default","docs":"Returns the \"default value\" for a type.\n\nDefault values are often some kind of initial value, identity value, or anything else that\nmay make sense as a default.\n\n# Examples\n\nUsing built-in default values:\n\n```\nlet i: i8 = Default::default();\nlet (x, y): (Option<String>, f64) = Default::default();\nlet (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();\n```\n\nMaking your own:\n\n```\n# #[allow(dead_code)]\nenum Kind {\n    A,\n    B,\n    C,\n}\n\nimpl Default for Kind {\n    fn default() -> Self { Kind::A }\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13823:56917":{"id":"1:13823:56917","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9104:3240":{"id":"1:9104:3240","crate_id":1,"name":"cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| x.cmp(&y)), Ordering::Less);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (x * x).cmp(&y)), Ordering::Equal);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[942,0],"end":[947,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:597:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2885:415":{"id":"1:2885:415","crate_id":1,"name":"clone","span":null,"visibility":"default","docs":"Returns a copy of the value.\n\n# Examples\n\n```\n# #![allow(noop_method_call)]\nlet hello = \"Hello\"; // &str implements Clone\n\nassert_eq!(\"Hello\", hello.clone());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:815:762":{"id":"0:815:762","crate_id":0,"name":"index_mut","span":{"filename":"src/map.rs","begin":[1398,4],"end":[1402,5]},"visibility":"default","docs":"Returns a mutable reference to the value at the supplied `index`.\n\n***Panics*** if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:639":{"id":"0:639","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1014,0],"end":[1018,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:642:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[499,0],"end":[587,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:283:2279","0:284:2375","0:286:2379","0:288:1663","0:289:761","0:290:2283","0:292:2289"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1320":{"id":"0:1320","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1371,0],"end":[1385,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:3444:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"items":["0:1324:184","0:1325:1376"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9533:3067-0:650:1973":{"id":"a:1:9533:3067-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1431:1818":{"id":"0:1431:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1163,4],"end":[1163,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:269:1673":{"id":"b:1:2868-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2868-0:598:1966":{"id":"b:1:2868-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6221:59625":{"id":"5:6221:59625","crate_id":5,"name":"arg0","span":null,"visibility":"default","docs":"Set executable argument\n\nSet the first process argument, `argv[0]`, to something other than the\ndefault executable path.","links":{},"attrs":["#[stable(feature = \"process_set_argv0\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["arg",{"kind":"generic","inner":"S"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:3171:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OsStr","id":"5:2654:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2861:1836":{"id":"1:2861:1836","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":"Immutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::Borrow;\n\nfn check<T: Borrow<str>>(s: T) {\n    assert_eq!(\"Hello\", s.borrow());\n}\n\nlet s = \"Hello\".to_string();\n\ncheck(s);\n\nlet s = \"Hello\";\n\ncheck(s);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6739:60295":{"id":"5:6739:60295","crate_id":5,"name":"as_fd","span":null,"visibility":"default","docs":"Borrows the file descriptor.\n\n# Example\n\n```rust,no_run\nuse std::fs::File;\n# use std::io;\n# #[cfg(target_os = \"wasi\")]\n# use std::os::wasi::io::{AsFd, BorrowedFd};\n# #[cfg(unix)]\n# use std::os::unix::io::{AsFd, BorrowedFd};\n\nlet mut f = File::open(\"foo.txt\")?;\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet borrowed_fd: BorrowedFd<'_> = f.as_fd();\n# Ok::<(), io::Error>(())\n```","links":{},"attrs":["#[stable(feature = \"io_safety\", since = \"1.63.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BorrowedFd","id":"5:11307:4070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1059:2087":{"id":"0:1059:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[771,0],"end":[773,1]},"visibility":"public","docs":"An owning iterator over the items of a `IndexSet`.\n\nThis `struct` is created by the [`into_iter`] method on [`IndexSet`]\n(provided by the `IntoIterator` trait). See its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`into_iter`]: struct.IndexSet.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1059:2087","a:1:9532:3068-0:1059:2087","a:1:3382:225-0:1059:2087","a:1:3411:3178-0:1059:2087","a:1:9533:3067-0:1059:2087","b:1:4104-0:1059:2087","b:1:3218-0:1059:2087","b:1:3213-0:1059:2087","b:1:3203-0:1059:2087","b:1:3207-0:1059:2087","b:1:2865-0:1059:2087","b:1:2868-0:1059:2087","b:1:8676-0:1059:2087","0:1062","0:1065","0:1067","0:1070","0:1072"]}},"1:8892:3210":{"id":"1:8892:3210","crate_id":1,"name":"intersperse","span":null,"visibility":"default","docs":"Creates a new iterator which places a copy of `separator` between adjacent\nitems of the original iterator.\n\nIn case `separator` does not implement [`Clone`] or needs to be\ncomputed every time, use [`intersperse_with`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\nlet mut a = [0, 1, 2].iter().intersperse(&100);\nassert_eq!(a.next(), Some(&0));   // The first element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&1));   // The next element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&2));   // The last element from `a`.\nassert_eq!(a.next(), None);       // The iterator is finished.\n```\n\n`intersperse` can be very useful to join an iterator's items using a common element:\n```\n#![feature(iter_intersperse)]\n\nlet hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\nassert_eq!(hello, \"Hello World !\");\n```\n\n[`Clone`]: crate::clone::Clone\n[`intersperse_with`]: Iterator::intersperse_with","links":{"Iterator::intersperse_with":"1:8893:3211","crate::clone::Clone":"1:2884:105"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersperse","id":"1:46967:2962","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23729:3434":{"id":"1:23729:3434","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23730:1291","1:23731:1290","1:23732:1288","1:23733:1287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9533:3067-0:1096:1990":{"id":"a:1:9533:3067-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5579:5463":{"id":"5:5579:5463","crate_id":5,"name":"mode","span":null,"visibility":"default","docs":"Sets the mode to create new directories with. This option defaults to\n0o777.\n\n# Examples\n\n```no_run\nuse std::fs::DirBuilder;\nuse std::os::unix::fs::DirBuilderExt;\n\nlet mut builder = DirBuilder::new();\nbuilder.mode(0o755);\n```","links":{},"attrs":["#[stable(feature = \"dir_builder\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mode",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3844:54157":{"id":"1:3844:54157","crate_id":1,"name":"TryType","span":null,"visibility":"default","docs":"The \"return\" type of this meta-function.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}}],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"generic","inner":"O"}}}},{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"O"}}],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"generic","inner":"Self"}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:10576:667":{"id":"1:10576:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8720:3203":{"id":"1:8720:3203","crate_id":1,"name":"try_rfold","span":null,"visibility":"default","docs":"This is the reverse version of [`Iterator::try_fold()`]: it takes\nelements starting from the back of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"2\", \"3\"];\nlet sum = a.iter()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert_eq!(sum, Ok(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [\"1\", \"rust\", \"3\"];\nlet mut it = a.iter();\nlet sum = it\n    .by_ref()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert!(sum.is_err());\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.next_back(), Some(&\"1\"));\n```","links":{"`Iterator::try_fold()`":"1:8967:3229"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23401:3527":{"id":"1:23401:3527","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24038:3382","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23392:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:9532:3068-0:548:1961":{"id":"a:1:9532:3068-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3213-0:576:1964":{"id":"b:1:3213-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23035:55652":{"id":"1:23035:55652","crate_id":1,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the maximum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[979,0],"end":[985,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:621:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3207-0:650:1973":{"id":"b:1:3207-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3411:3178-0:746:1990":{"id":"a:1:3411:3178-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23015:3516":{"id":"1:23015:3516","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23016:3433","1:23017:55074","1:23018:55637","1:23019:55638","1:23020:55639","1:23021:42808","1:23022:55640","1:23023:55641","1:23024:55642","1:23025:55643","1:23026:55644","1:23027:55645","1:23028:55646","1:23029:55647","1:23030:55648","1:23031:55649","1:23032:55169","1:23033:55650","1:23034:55651","1:23035:55652","1:23036:55653","1:23037:55075","1:23038:55076","1:23039:55077","1:23040:55078"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23117:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1391:1815":{"id":"0:1391:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1007,4],"end":[1007,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:1059:2087":{"id":"b:1:2865-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5518:7525":{"id":"5:5518:7525","crate_id":5,"name":"custom_flags","span":null,"visibility":"default","docs":"Pass custom flags to the `flags` argument of `open`.\n\nThe bits that define the access mode are masked out with `O_ACCMODE`, to\nensure they do not interfere with the access mode set by Rusts options.\n\nCustom flags can only set flags, not remove flags set by Rusts options.\nThis options overwrites any previously set custom flags.\n\n# Examples\n\n```no_run\n# #![feature(rustc_private)]\nextern crate libc;\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\n# fn main() {\nlet mut options = OpenOptions::new();\noptions.write(true);\nif cfg!(unix) {\n    options.custom_flags(libc::O_NOFOLLOW);\n}\nlet file = options.open(\"foo.txt\");\n# }\n```","links":{},"attrs":["#[stable(feature = \"open_options_ext\", since = \"1.10.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["flags",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1103":{"id":"0:1103","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[860,0],"end":[862,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1467:1818","0:1468:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:481:2035":{"id":"0:481:2035","crate_id":0,"name":"get_full","span":{"filename":"src/map.rs","begin":[438,4],"end":[448,5]},"visibility":"public","docs":"Return item index, key and value","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3217:1439":{"id":"1:3217:1439","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8203:55246":{"id":"1:8203:55246","crate_id":1,"name":"backward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `backward` or `backward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b < a`, it is safe to call `Step::backward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&b, &a) == Some(n)`,\n  it is safe to call `Step::backward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6474:7306":{"id":"5:6474:7306","crate_id":5,"name":"st_ctime","span":null,"visibility":"default","docs":"Returns the last status change time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ctime());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9532:3068":{"id":"1:9532:3068","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1442:932":{"id":"0:1442:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:642:802":{"id":"0:642:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1015,4],"end":[1017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:1230:2502":{"id":"a:1:3370:216-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23105:55074":{"id":"1:23105:55074","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8925:3219":{"id":"1:8925:3219","crate_id":1,"name":"flat_map","span":null,"visibility":"default","docs":"Creates an iterator that works like map, but flattens nested structure.\n\nThe [`map`] adapter is very useful, but only when the closure\nargument produces values. If it produces an iterator instead, there's\nan extra layer of indirection. `flat_map()` will remove this extra layer\non its own.\n\nYou can think of `flat_map(f)` as the semantic equivalent\nof [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n\nAnother way of thinking about `flat_map()`: [`map`]'s closure returns\none item for each element, and `flat_map()`'s closure returns an\niterator for each element.\n\n[`map`]: Iterator::map\n[`flatten`]: Iterator::flatten\n\n# Examples\n\nBasic usage:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```","links":{"Iterator::map":"1:8895:851","Iterator::flatten":"1:8928:3220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FlatMap","id":"1:6639:2950","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1159":{"id":"0:1159","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[976,0],"end":[981,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13758:56896":{"id":"1:13758:56896","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8716:121","str::split":"1:13752:56895","self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49770:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:548:1961":{"id":"b:4:848-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3411:3178-0:1096:1990":{"id":"a:1:3411:3178-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6218:59627":{"id":"5:6218:59627","crate_id":5,"name":"before_exec","span":null,"visibility":"default","docs":"Schedules a closure to be run just before the `exec` function is\ninvoked.\n\nThis method is stable and usable, but it should be unsafe. To fix\nthat, it got deprecated in favor of the unsafe [`pre_exec`].\n\n[`pre_exec`]: CommandExt::pre_exec","links":{"CommandExt::pre_exec":"5:6216:59623"},"attrs":["#[stable(feature = \"process_exec\", since = \"1.15.0\")]","#[deprecated(since = \"1.37.0\", note =\n\"should be unsafe, use `pre_exec` instead\")]"],"deprecation":{"since":"1.37.0","note":"should be unsafe, use `pre_exec` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3877:2868":{"id":"1:3877:2868","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:1141:2207":{"id":"0:1141:2207","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[936,4],"end":[939,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iterable",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1868":{"id":"0:50:1868","crate_id":0,"name":"retain2","span":{"filename":"src/mutable_keys.rs","begin":[38,4],"end":[40,59]},"visibility":"default","docs":"Scan through each key-value pair in the map and keep those where the\nclosure `keep` returns `true`.\n\nThe elements are visited in order, and remaining elements keep their\norder.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["keep",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Key","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:45:1858","args":null}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Value","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:45:1858","args":null}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:52:1873":{"id":"0:52:1873","crate_id":0,"name":"__private_marker","span":{"filename":"src/mutable_keys.rs","begin":[45,4],"end":[45,48]},"visibility":"default","docs":"This method is not useful in itself – it is there to “seal” the trait\nfor external implementation, so that we can add methods without\ncausing breaking changes.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"PrivateMarker","id":"0:44:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2868-0:1174:2496":{"id":"b:1:2868-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3207-0:134:1908":{"id":"b:1:3207-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1264":{"id":"0:1264","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1234,0],"end":[1243,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["0:1268:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:462:1996":{"id":"0:462:1996","crate_id":0,"name":"split_off","span":{"filename":"src/map.rs","begin":[308,4],"end":[316,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated map containing the elements in the range\n`[at, len)`. After the call, the original map will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n***Panics*** if `at > len`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:958:1951":{"id":"0:958:1951","crate_id":0,"name":"capacity","span":{"filename":"src/set.rs","begin":[169,4],"end":[171,5]},"visibility":"public","docs":"Computes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6462:7292":{"id":"5:6462:7292","crate_id":5,"name":"st_dev","span":null,"visibility":"default","docs":"Returns the device ID on which this file resides.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_dev());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8200:55243":{"id":"1:8200:55243","crate_id":1,"name":"forward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `forward` or `forward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b > a`, it is safe to call `Step::forward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&a, &b) == Some(n)`,\n  it is safe to call `Step::forward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8679:2087":{"id":"1:8679:2087","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"a:1:9532:3068-0:1202:2506":{"id":"a:1:9532:3068-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23071:1243":{"id":"1:23071:1243","crate_id":1,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, 0, 1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([-1, MAX, MIN, -2]));\nassert_eq!(sat, Simd::from_array([-1, MAX, MAX, MAX]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2865-0:1174:2496":{"id":"b:1:2865-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:4501:4589":{"id":"5:4501:4589","crate_id":5,"name":"lines","span":null,"visibility":"default","docs":"Returns an iterator over the lines of this reader.\n\nThe iterator returned from this function will yield instances of\n<code>[io::Result]<[String]></code>. Each string returned will *not* have a newline\nbyte (the `0xA` byte) or `CRLF` (`0xD`, `0xA` bytes) at the end.\n\n[io::Result]: self::Result \"io::Result\"\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to iterate over all the lines in a byte\nslice.\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");\n\nlet mut lines_iter = cursor.lines().map(|l| l.unwrap());\nassert_eq!(lines_iter.next(), Some(String::from(\"lorem\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"ipsum\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"dolor\")));\nassert_eq!(lines_iter.next(), None);\n```\n\n# Errors\n\nEach line of the iterator has the same error semantics as [`BufRead::read_line`].","links":{"self::Result":"5:3801:208","`Cursor`":"5:10712:3994","`BufRead::read_line`":"5:4498:59397"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"5:10986:3718","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:650:1973":{"id":"0:650:1973","crate_id":0,"name":"IntoValues","span":{"filename":"src/map.rs","begin":[1036,0],"end":[1038,1]},"visibility":"public","docs":"An owning iterator over the values of a `IndexMap`.\n\nThis `struct` is created by the [`into_values`] method on [`IndexMap`].\nSee its documentation for more.\n\n[`IndexMap`]: struct.IndexMap.html\n[`into_values`]: struct.IndexMap.html#method.into_values","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:650:1973","a:1:9532:3068-0:650:1973","a:1:3382:225-0:650:1973","a:1:3411:3178-0:650:1973","a:1:9533:3067-0:650:1973","b:1:4104-0:650:1973","b:1:3218-0:650:1973","b:1:3213-0:650:1973","b:1:3203-0:650:1973","b:1:3207-0:650:1973","b:1:2865-0:650:1973","b:1:2868-0:650:1973","b:1:8676-0:650:1973","0:654","0:658","0:661","0:665","0:668"]}},"a:1:3411:3178-0:626:1970":{"id":"a:1:3411:3178-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1252:2600":{"id":"0:1252:2600","crate_id":0,"name":"rfold","span":{"filename":"src/set.rs","begin":[1210,4],"end":[1215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6568:60122":{"id":"5:6568:60122","crate_id":5,"name":"take_pidfd","span":null,"visibility":"default","docs":"Takes ownership of the [`PidFd`] created for this [`Child`], if available.\n\nA pidfd will only be available if its creation was requested with\n[`create_pidfd`] when the corresponding [`Command`] was created.\n\nEven if requested, a pidfd may not be available due to an older\nversion of Linux being in use, or if some other error occurred.\n\n[`Command`]: process::Command\n[`create_pidfd`]: CommandExt::create_pidfd\n[`Child`]: process::Child","links":{"`PidFd`":"5:11281:4105","process::Child":"5:7415:4213","process::Command":"5:7477:4217","CommandExt::create_pidfd":"5:6570:8000"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PidFd","id":"5:11281:4105","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:948:667":{"id":"0:948:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[117,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1452:1814":{"id":"0:1452:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6465:7294":{"id":"5:6465:7294","crate_id":5,"name":"st_nlink","span":null,"visibility":"default","docs":"Returns the number of hard links to file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_nlink());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:700:1902":{"id":"a:1:3411:3178-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6239:60756":{"id":"5:6239:60756","crate_id":5,"name":"continued","span":null,"visibility":"default","docs":"Whether the process was continued from a stopped status.\n\nIe, `WIFCONTINUED`.  This is only possible if the status came from a `wait` system call\nwhich was passed `WCONTINUED`, and was then converted into an `ExitStatus`.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:841:2207":{"id":"0:841:2207","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[1485,4],"end":[1487,5]},"visibility":"default","docs":"Extend the map with all key-value pairs in the iterable.\n\nSee the first extend method for more details.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iterable",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10573:3264":{"id":"1:10573:3264","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10574:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1468:1821":{"id":"0:1468:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/set.rs","begin":[861,4],"end":[861,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23037:55075":{"id":"1:23037:55075","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_sum(), 3.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:475:2026":{"id":"0:475:2026","crate_id":0,"name":"contains_key","span":{"filename":"src/map.rs","begin":[398,4],"end":[403,5]},"visibility":"public","docs":"Return `true` if an equivalent to `key` exists in the map.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[598,0],"end":[598,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::raw::OccupiedEntry","name":"OccupiedEntry","id":"0:134:1908","glob":false}},"1:23078:55169":{"id":"1:23078:55169","crate_id":1,"name":"signum","span":null,"visibility":"default","docs":"Returns numbers representing the sign of each lane.\n* `0` if the number is zero\n* `1` if the number is positive\n* `-1` if the number is negative","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3370:216-0:700:1902":{"id":"a:1:3370:216-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:9140:61059":{"id":"5:9140:61059","crate_id":5,"name":"floor","span":null,"visibility":"default","docs":"Returns the largest integer value less than or equal to each lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2972:836":{"id":"1:2972:836","crate_id":1,"name":"lt","span":null,"visibility":"default","docs":"This method tests less than (for `self` and `other`) and is used by the `<` operator.\n\n# Examples\n\n```\nlet result = 1.0 < 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 < 1.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1446:1817":{"id":"0:1446:1817","crate_id":0,"name":"last","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23085:55081":{"id":"1:23085:55081","crate_id":1,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1404:1818":{"id":"0:1404:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[1047,4],"end":[1047,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4102:68":{"id":"1:4102:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4103:1452"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"b:1:3203-0:598:1966":{"id":"b:1:3203-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:454:1963":{"id":"0:454:1963","crate_id":0,"name":"into_keys","span":{"filename":"src/map.rs","begin":[237,4],"end":[241,5]},"visibility":"public","docs":"Return an owning iterator over the keys of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14068:151":{"id":"1:14068:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14069:184","1:14070:151","1:14071:776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1407:1814":{"id":"0:1407:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1079,4],"end":[1079,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6240:60757":{"id":"5:6240:60757","crate_id":5,"name":"into_raw","span":null,"visibility":"default","docs":"Returns the underlying raw `wait` status.\n\nThe returned integer is a **wait status, not an exit status**.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1118:2087":{"id":"0:1118:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[881,4],"end":[881,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:776:777":{"id":"0:776:777","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[1220,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8672:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1809":{"id":"0:15:1809","crate_id":0,"name":"indexset","span":{"filename":"src/macros.rs","begin":[58,0],"end":[73,1]},"visibility":"public","docs":"Create an `IndexSet` from a list of values\n\n## Example\n\n```\nuse indexmap::indexset;\n\nlet set = indexset!{\n    \"a\",\n    \"b\",\n};\nassert!(set.contains(\"a\"));\nassert!(set.contains(\"b\"));\nassert!(!set.contains(\"c\"));\n\n// \"a\" is the first value\nassert_eq!(set.iter().next(), Some(&\"a\"));\n```","links":{},"attrs":["#[cfg(has_std)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! indexset {\n    (@single $($x:tt)*) => { ... };\n    (@count $($rest:expr),*) => { ... };\n    ($($value:expr,)+) => { ... };\n    ($($value:expr),*) => { ... };\n}"},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[775,0],"end":[867,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:538:2103","0:539:2104","0:540:2106","0:541:2108","0:542:1817","0:543:2111","0:544:2113","0:545:2114","0:546:2120","0:547:2124"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:505:2062":{"id":"0:505:2062","crate_id":0,"name":"shift_remove_full","span":{"filename":"src/map.rs","begin":[636,4],"end":[645,5]},"visibility":"public","docs":"Remove the key-value pair equivalent to `key` and return it and\nthe index it had.\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3681:184":{"id":"1:3681:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The returned type after indexing.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"b:1:3203-0:548:1961":{"id":"b:1:3203-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3527:359":{"id":"1:3527:359","crate_id":1,"name":"bitand_assign","span":null,"visibility":"default","docs":"Performs the `&=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx &= false;\nassert_eq!(x, false);\n\nlet mut x = true;\nx &= true;\nassert_eq!(x, true);\n\nlet mut x: u8 = 5;\nx &= 1;\nassert_eq!(x, 1);\n\nlet mut x: u8 = 5;\nx &= 2;\nassert_eq!(x, 0);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5501:60150":{"id":"5:5501:60150","crate_id":5,"name":"read_at","span":null,"visibility":"default","docs":"Reads a number of bytes starting from a given offset.\n\nReturns the number of bytes read.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nNote that similar to [`File::read`], it is not an error to return with a\nshort read.\n\n[`File::read`]: fs::File::read\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs::File;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let mut buf = [0u8; 8];\n    let file = File::open(\"foo.txt\")?;\n\n    // We now read 8 bytes from the offset 10.\n    let num_bytes_read = file.read_at(&mut buf, 10)?;\n    println!(\"read {num_bytes_read} bytes: {buf:?}\");\n    Ok(())\n}\n```","links":{"fs::File::read":"5:2951:2408"},"attrs":["#[stable(feature = \"file_offset\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5530:1325":{"id":"5:5530:1325","crate_id":5,"name":"size","span":null,"visibility":"default","docs":"Returns the total size of this file in bytes.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let file_size = meta.size();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:304:2044":{"id":"0:304:2044","crate_id":0,"name":"remove","span":{"filename":"src/map/core.rs","begin":[610,4],"end":[612,5]},"visibility":"public","docs":"Remove the key, value pair stored in the map for this entry, and return the value.\n\n**NOTE:** This is equivalent to `.swap_remove()`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23018:55637":{"id":"1:23018:55637","crate_id":1,"name":"Bits","span":null,"visibility":"default","docs":"Bit representation of this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8914:3216":{"id":"1:8914:3216","crate_id":1,"name":"take_while","span":null,"visibility":"default","docs":"Creates an iterator that yields elements based on a predicate.\n\n`take_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns `true`.\n\nAfter `false` is returned, `take_while()`'s job is over, and the\nrest of the elements are ignored.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `take_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().take_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&-1));\n\n// We have more elements that are less than zero, but since we already\n// got a false, take_while() isn't used any more\nassert_eq!(iter.next(), None);\n```\n\nBecause `take_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<i32> = iter.by_ref()\n                           .take_while(|n| **n != 3)\n                           .cloned()\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"TakeWhile","id":"1:47068:2960","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:134:1908":{"id":"b:1:3203-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:283:2279":{"id":"0:283:2279","crate_id":0,"name":"or_insert","span":{"filename":"src/map/core.rs","begin":[504,4],"end":[509,5]},"visibility":"public","docs":"Inserts the given default value in the entry if it is vacant and returns a mutable\nreference to it. Otherwise a mutable reference to an already existent value is returned.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2959:2323":{"id":"1:2959:2323","crate_id":1,"name":"min","span":null,"visibility":"default","docs":"Compares and returns the minimum of two values.\n\nReturns the first argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(1, 1.min(2));\nassert_eq!(2, 2.min(2));\n```","links":{},"attrs":["#[stable(feature = \"ord_max_min\", since = \"1.21.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8938:3225":{"id":"1:8938:3225","crate_id":1,"name":"collect_into","span":null,"visibility":"default","docs":"Collects all the items from an iterator into a collection.\n\nThis method consumes the iterator and adds all its items to the\npassed collection. The collection is then returned, so the call chain\ncan be continued.\n\nThis is useful when you already have a collection and wants to add\nthe iterator items to it.\n\nThis method is a convenience method to call [Extend::extend](trait.Extend.html),\nbut instead of being called on a collection, it's called on an iterator.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = vec![0, 1];\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(vec![0, 1, 2, 4, 6, 10, 20, 30], vec);\n```\n\n`Vec` can have a manual set capacity to avoid reallocating it:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(6, vec.capacity());\nprintln!(\"{:?}\", vec);\n```\n\nThe returned mutable reference can be used to continue the call chain:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len is {}\", count);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len now is {}\", count);\n```","links":{},"attrs":["#[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue =\n\"94780\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["collection",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:829":{"id":"0:829","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1443,0],"end":[1474,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:833:2207"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3207-0:576:1964":{"id":"b:1:3207-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:695:415":{"id":"0:695:415","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[1096,4],"end":[1100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:927:1655":{"id":"a:1:9533:3067-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6468:7299":{"id":"5:6468:7299","crate_id":5,"name":"st_rdev","span":null,"visibility":"default","docs":"Returns the device ID that this file represents. Only relevant for special file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_rdev());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:4104-0:409:1654":{"id":"b:1:4104-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:9143:61055":{"id":"5:9143:61055","crate_id":5,"name":"fract","span":null,"visibility":"default","docs":"Returns the floating point's fractional value, with its integer part removed.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23068:3432":{"id":"1:23068:3432","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23069:3433","1:23070:55074","1:23071:1243","1:23072:1244","1:23073:42808","1:23074:55165","1:23075:55166","1:23076:55167","1:23077:55168","1:23078:55169","1:23079:55075","1:23080:55076","1:23081:55077","1:23082:55078","1:23083:55079","1:23084:55080","1:23085:55081"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23117:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:833:2207":{"id":"0:833:2207","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[1457,4],"end":[1473,5]},"visibility":"default","docs":"Extend the map with all key-value pairs in the iterable.\n\nThis is equivalent to calling [`insert`](#method.insert) for each of\nthem in order, which means that for keys that already existed\nin the map, their value is updated but it keeps the existing order.\n\nNew keys are inserted in the order they appear in the sequence. If\nequivalents of a key occur more than once, the last corresponding value\nprevails.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iterable",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6640:4071":{"id":"5:6640:4071","crate_id":5,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6641:60208"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:960:802":{"id":"0:960:802","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[181,4],"end":[183,5]},"visibility":"public","docs":"Return the number of elements in the set.\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3661:2866":{"id":"1:3661:2866","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3663:243","1:3664:209","1:3665:56053"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3838:694":{"id":"1:3838:694","crate_id":1,"name":"from_residual","span":null,"visibility":"default","docs":"Constructs the type from a compatible `Residual` type.\n\nThis should be implemented consistently with the `branch` method such\nthat applying the `?` operator will get back an equivalent residual:\n`FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`.\n(It must not be an *identical* residual when interconversion is involved.)\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, FromResidual};\n\nassert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));\nassert_eq!(Option::<String>::from_residual(None), None);\nassert_eq!(\n    ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),\n    ControlFlow::Break(5),\n);\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["residual",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:590:802":{"id":"0:590:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[935,4],"end":[937,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1414:1821":{"id":"0:1414:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1083,4],"end":[1083,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3203-0:746:1990":{"id":"b:1:3203-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1453:502":{"id":"0:1453:502","crate_id":0,"name":"count","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:1075:1900":{"id":"b:4:848-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1463:1815":{"id":"0:1463:1815","crate_id":0,"name":"nth","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:1059:2087":{"id":"a:1:9532:3068-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:491:2044":{"id":"0:491:2044","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[512,4],"end":[517,5]},"visibility":"public","docs":"Remove the key-value pair equivalent to `key` and return\nits value.\n\n**NOTE:** This is equivalent to `.swap_remove(key)`, if you need to\npreserve the order of the keys in the map, use `.shift_remove(key)`\ninstead.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:548:1961":{"id":"b:1:2868-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:24039:3433":{"id":"1:24039:3433","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"The mask element type corresponding to this element type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"MaskElement","id":"1:23401:3527","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"a:1:3382:225-0:548:1961":{"id":"a:1:3382:225-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1004,0],"end":[1008,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:635:1813","0:1388:932","0:1389:1814","0:1390:502","0:1391:1815","0:1392:1817","0:1393:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6476:7300":{"id":"5:6476:7300","crate_id":5,"name":"st_blksize","span":null,"visibility":"default","docs":"Returns the \"preferred\" block size for efficient filesystem I/O.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_blksize());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:0:1680":{"id":"0:0:1680","crate_id":0,"name":"indexmap","span":{"filename":"src/lib.rs","begin":[2,0],"end":[193,1]},"visibility":"public","docs":"[`IndexMap`] is a hash table where the iteration order of the key-value\npairs is independent of the hash values of the keys.\n\n[`IndexSet`] is a corresponding hash set using the same implementation and\nwith similar properties.\n\n[`IndexMap`]: map/struct.IndexMap.html\n[`IndexSet`]: set/struct.IndexSet.html\n\n\n### Feature Highlights\n\n[`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`\nand `HashSet`, but they also have some features of note:\n\n- The ordering semantics (see their documentation for details)\n- Sorting methods and the [`.pop()`][IndexMap::pop] methods.\n- The [`Equivalent`] trait, which offers more flexible equality definitions\n  between borrowed and owned versions of keys.\n- The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable\n  access to hash map keys.\n\n### Alternate Hashers\n\n[`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,\njust like the standard `HashMap` and `HashSet`, which is resistant to\nHashDoS attacks but not the most performant. Type aliases can make it easier\nto use alternate hashers:\n\n```\nuse fnv::FnvBuildHasher;\nuse fxhash::FxBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\n\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\n\ntype FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;\ntype FxIndexSet<T> = IndexSet<T, FxBuildHasher>;\n\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nlet fx: FxIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\nassert_eq!(std, fx);\n```\n\n### Rust Version\n\nThis version of indexmap requires Rust 1.56 or later.\n\nThe indexmap 1.x release series will use a carefully considered version\nupgrade policy, where in a later 1.x version, we will raise the minimum\nrequired Rust version.\n\n## No Standard Library Targets\n\nThis crate supports being built without `std`, requiring\n`alloc` instead. This is enabled automatically when it is detected that\n`std` is not available. There is no crate feature to enable/disable to\ntrigger this. It can be tested by building for a std-less target.\n\n- Creating maps and sets using [`new`][IndexMap::new] and\n[`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  \n  Use methods [`IndexMap::default`][def],\n  [`with_hasher`][IndexMap::with_hasher],\n  [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.\n  A no-std compatible hasher will be needed as well, for example\n  from the crate `twox-hash`.\n- Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.\n\n[def]: map/struct.IndexMap.html#impl-Default","links":{"IndexMap::new":"0:439:930","map::MutableKeys":"0:45:1858","`indexmap!`":"0:14:1680","`Equivalent`":"0:22:1653","IndexMap::with_hasher":"0:446:1946","IndexMap::pop":"0:507:2066","IndexMap::with_capacity_and_hasher":"0:445:1945","IndexMap::with_capacity":"0:440:1797","`indexset!`":"0:15:1809"},"attrs":["#![deny(unsafe_code)]","#![warn(rust_2018_idioms)]","#![doc(html_root_url = \"https://docs.rs/indexmap/1/\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:81:851","0:862:1650","0:1326","0:1329","0:1332","0:14:1680","0:15:1809"],"is_stripped":false}},"4:6175:57577":{"id":"4:6175:57577","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:1230:2502":{"id":"b:1:3213-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9129:3243":{"id":"1:9129:3243","crate_id":1,"name":"is_sorted","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted.\n\nThat is, for each element `a` and its following element `b`, `a <= b` must hold. If the\niterator yields exactly zero or one element, `true` is returned.\n\nNote that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition\nimplies that this function returns `false` if any two consecutive items are not\ncomparable.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted());\nassert!(![1, 3, 2, 4].iter().is_sorted());\nassert!([0].iter().is_sorted());\nassert!(std::iter::empty::<i32>().is_sorted());\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n```","links":{},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1416:1814":{"id":"0:1416:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:980:2501":{"id":"0:980:2501","crate_id":0,"name":"symmetric_difference","span":{"filename":"src/set.rs","begin":[330,4],"end":[340,5]},"visibility":"public","docs":"Return an iterator over the values that are in `self` or `other`,\nbut not in both.\n\nValues from `self` are produced in their original order, followed by\nvalues from `other` in their original order.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:598:1966":{"id":"b:1:3213-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1306:184":{"id":"0:1306:184","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1327,4],"end":[1327,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"1:3478:2848":{"id":"1:3478:2848","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3480:903"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3203-0:650:1973":{"id":"b:1:3203-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:989:2266":{"id":"0:989:2266","crate_id":0,"name":"contains","span":{"filename":"src/set.rs","begin":[371,4],"end":[376,5]},"visibility":"public","docs":"Return `true` if an equivalent to `value` exists in the set.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4416:4024":{"id":"5:4416:4024","crate_id":5,"name":"read_to_string","span":null,"visibility":"default","docs":"Read all bytes until EOF in this source, appending them to `buf`.\n\nIf successful, this function returns the number of bytes which were read\nand appended to `buf`.\n\n# Errors\n\nIf the data in this stream is *not* valid UTF-8 then an error is\nreturned and `buf` is unchanged.\n\nSee [`read_to_end`] for other error semantics.\n\n[`read_to_end`]: Read::read_to_end\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = String::new();\n\n    f.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```\n\n(See also the [`std::fs::read_to_string`] convenience function for\nreading from a file.)\n\n[`std::fs::read_to_string`]: crate::fs::read_to_string","links":{"crate::fs::read_to_string":"5:2917:4024","crate::fs::File":"5:2909:129","Read::read_to_end":"5:4415:60516"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1229:667":{"id":"0:1229:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1160,4],"end":[1162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:626:1970":{"id":"a:1:9533:3067-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:4415:60516":{"id":"5:4415:60516","crate_id":5,"name":"read_to_end","span":null,"visibility":"default","docs":"Read all bytes until EOF in this source, placing them into `buf`.\n\nAll bytes read from this source will be appended to the specified buffer\n`buf`. This function will continuously call [`read()`] to append more data to\n`buf` until [`read()`] returns either [`Ok(0)`] or an error of\nnon-[`ErrorKind::Interrupted`] kind.\n\nIf successful, this function will return the total number of bytes read.\n\n# Errors\n\nIf this function encounters an error of the kind\n[`ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf any other read error is encountered then this function immediately\nreturns. Any bytes which have already been read will be appended to\n`buf`.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`read()`]: Read::read\n[`Ok(0)`]: Ok\n[`File`]: crate::fs::File\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n    Ok(())\n}\n```\n\n(See also the [`std::fs::read`] convenience function for reading from a\nfile.)\n\n[`std::fs::read`]: crate::fs::read","links":{"crate::fs::File":"5:2909:129","Ok":"1:47899:178","Read::read":"5:4411:2408","`ErrorKind::Interrupted`":"5:10863:7479","crate::fs::read":"5:2914:2408"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3382:225-0:1059:2087":{"id":"a:1:3382:225-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3596:550":{"id":"1:3596:550","crate_id":1,"name":"deref","span":null,"visibility":"default","docs":"Dereferences the value.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"deref_method\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"1:3594:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2864:54879":{"id":"1:2864:54879","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":"Mutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::BorrowMut;\n\nfn check<T: BorrowMut<[i32]>>(mut v: T) {\n    assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n}\n\nlet v = vec![1, 2, 3];\n\ncheck(v);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5523:6946":{"id":"5:5523:6946","crate_id":5,"name":"dev","span":null,"visibility":"default","docs":"Returns the ID of the device containing the file.\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let dev_id = meta.dev();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:672:1900":{"id":"b:1:3203-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:746:1990":{"id":"0:746:1990","crate_id":0,"name":"Drain","span":{"filename":"src/map.rs","begin":[1188,0],"end":[1190,1]},"visibility":"public","docs":"A draining iterator over the entries of a `IndexMap`.\n\nThis `struct` is created by the [`drain`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`drain`]: struct.IndexMap.html#method.drain\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:746:1990","a:1:9532:3068-0:746:1990","a:1:3382:225-0:746:1990","a:1:3411:3178-0:746:1990","a:1:9533:3067-0:746:1990","b:1:4104-0:746:1990","b:1:3218-0:746:1990","b:1:3213-0:746:1990","b:1:3203-0:746:1990","b:1:3207-0:746:1990","b:1:2865-0:746:1990","b:1:2868-0:746:1990","b:1:8676-0:746:1990","0:751","0:755","0:758","0:762","0:765"]}},"5:5502:60152":{"id":"5:5502:60152","crate_id":5,"name":"read_exact_at","span":null,"visibility":"default","docs":"Reads the exact number of byte required to fill `buf` from the given offset.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nSimilar to [`io::Read::read_exact`] but uses [`read_at`] instead of `read`.\n\n[`read_at`]: FileExt::read_at\n\n# Errors\n\nIf this function encounters an error of the kind\n[`io::ErrorKind::Interrupted`] then the error is ignored and the operation\nwill continue.\n\nIf this function encounters an \"end of file\" before completely filling\nthe buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\nThe contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately\nreturns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.\n\n# Examples\n\n```no_run\nuse std::io;\nuse std::fs::File;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let mut buf = [0u8; 8];\n    let file = File::open(\"foo.txt\")?;\n\n    // We now read exactly 8 bytes from the offset 10.\n    file.read_exact_at(&mut buf, 10)?;\n    println!(\"read {} bytes: {:?}\", buf.len(), buf);\n    Ok(())\n}\n```","links":{"`io::Read::read_exact`":"5:4417:60517","FileExt::read_at":"5:5501:60150","`io::ErrorKind::Interrupted`":"5:10863:7479","`io::ErrorKind::UnexpectedEof`":"5:10867:6352"},"attrs":["#[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10826:1558":{"id":"1:10826:1558","crate_id":1,"name":"write_str","span":null,"visibility":"default","docs":"Writes a single `str` into this hasher.\n\nIf you're implementing [`Hash`], you generally do not need to call this,\nas the `impl Hash for str` does, so you should prefer that instead.\n\nThis includes the domain separator for prefix-freedom, so you should\n**not** call `Self::write_length_prefix` before calling this.\n\n# Note to Implementers\n\nThere are at least two reasonable default ways to implement this.\nWhich one will be the default is not yet decided, so for now\nyou probably want to override it specifically.\n\n## The general answer\n\nIt's always correct to implement this with a length prefix:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write_length_prefix(s.len());\n    self.write(s.as_bytes());\n}\n# }\n```\n\nAnd, if your `Hasher` works in `usize` chunks, this is likely a very\nefficient way to do it, as anything more complicated may well end up\nslower than just running the round with the length.\n\n## If your `Hasher` works byte-wise\n\nOne nice thing about `str` being UTF-8 is that the `b'\\xFF'` byte\nnever happens.  That means that you can append that to the byte stream\nbeing hashed and maintain prefix-freedom:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write(s.as_bytes());\n    self.write_u8(0xff);\n}\n# }\n```\n\nThis does require that your implementation not add extra padding, and\nthus generally requires that you maintain a buffer, running a round\nonly once that buffer is full (or `finish` is called).\n\nThat's because if `write` pads data out to a fixed chunk size, it's\nlikely that it does it in such a way that `\"a\"` and `\"a\\x00\"` would\nend up hashing the same sequence of things, introducing conflicts.","links":{"`Hash`":"1:10800:143"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10822:3357":{"id":"1:10822:3357","crate_id":1,"name":"write_i64","span":null,"visibility":"default","docs":"Writes a single `i64` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13338:3438":{"id":"1:13338:3438","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13340:3436","1:13341:55004","1:13342:55005","1:13343:55006","1:13344:55008","1:13345:55007","1:13346:55009"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:994:2035":{"id":"0:994:2035","crate_id":0,"name":"get_full","span":{"filename":"src/set.rs","begin":[390,4],"end":[395,5]},"visibility":"public","docs":"Return item index and value","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1307:358":{"id":"0:1307:358","crate_id":0,"name":"bitand","span":{"filename":"src/set.rs","begin":[1332,4],"end":[1334,5]},"visibility":"default","docs":"Returns the set intersection, cloned into a new set.\n\nValues are collected in the same order that they appear in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:3498:2436","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:1174:2496":{"id":"a:1:3370:216-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4103:1452":{"id":"1:4103:1452","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":"Gets the `TypeId` of `self`.\n\n# Examples\n\n```\nuse std::any::{Any, TypeId};\n\nfn is_string(s: &dyn Any) -> bool {\n    TypeId::of::<String>() == s.type_id()\n}\n\nassert_eq!(is_string(&0), false);\nassert_eq!(is_string(&\"cookie monster\".to_string()), true);\n```","links":{},"attrs":["#[stable(feature = \"get_type_id\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46299:3476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:855:611":{"id":"0:855:611","crate_id":0,"name":"eq","span":{"filename":"src/map.rs","begin":[1507,4],"end":[1514,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V2"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:927:1655":{"id":"b:1:3218-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3515:184":{"id":"1:3515:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `<<` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13731:17854":{"id":"1:13731:17854","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:13730:17816"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50035:3721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:598:1966":{"id":"b:4:848-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1225,0],"end":[1231,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}},"items":["0:782:1813","0:783:2087","0:784:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9002:2413":{"id":"1:9002:2413","crate_id":1,"name":"find","span":null,"visibility":"default","docs":"Searches for an element of an iterator that satisfies a predicate.\n\n`find()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then `find()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`find()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `find()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().find(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().find(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.find(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```\n\nNote that `iter.find(f)` is equivalent to `iter.filter(f).next()`.","links":{"`None`":"1:47773:177","Some":"1:47775:220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:409:1654":{"id":"b:1:2868-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1054":{"id":"0:1054","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[752,0],"end":[762,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":"Access `IndexSet` values at indexed positions.\n\n# Examples\n\n```\nuse indexmap::IndexSet;\n\nlet mut set = IndexSet::new();\nfor word in \"Lorem ipsum dolor sit amet\".split_whitespace() {\n    set.insert(word.to_string());\n}\nassert_eq!(set[0], \"Lorem\");\nassert_eq!(set[1], \"ipsum\");\nset.reverse();\nassert_eq!(set[0], \"amet\");\nassert_eq!(set[1], \"sit\");\nset.sort();\nassert_eq!(set[0], \"Lorem\");\nassert_eq!(set[1], \"amet\");\n```\n\n```should_panic\nuse indexmap::IndexSet;\n\nlet mut set = IndexSet::new();\nset.insert(\"foo\");\nprintln!(\"{:?}\", set[10]); // panics!\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1057:184","0:1058:761"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11207:55313":{"id":"1:11207:55313","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3683:1899":{"id":"1:3683:1899","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3685:762"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10582:667":{"id":"1:10582:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1138":{"id":"0:1138","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[931,0],"end":[940,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1141:2207"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1067":{"id":"0:1067","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[785,0],"end":[789,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1069:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[644,0],"end":[651,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:311:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3218-0:626:1970":{"id":"b:1:3218-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:961:1956":{"id":"0:961:1956","crate_id":0,"name":"is_empty","span":{"filename":"src/set.rs","begin":[188,4],"end":[190,5]},"visibility":"public","docs":"Returns true if the set contains no elements.\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:1096:1990":{"id":"b:1:4104-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:14538:55550":{"id":"1:14538:55550","crate_id":1,"name":"allocate_zeroed","span":null,"visibility":"default","docs":"Behaves like `allocate`, but also ensures that the returned memory is zero-initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50740:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6570:8000":{"id":"5:6570:8000","crate_id":5,"name":"create_pidfd","span":null,"visibility":"default","docs":"Sets whether a [`PidFd`](struct@PidFd) should be created for the [`Child`]\nspawned by this [`Command`].\nBy default, no pidfd will be created.\n\nThe pidfd can be retrieved from the child with [`pidfd`] or [`take_pidfd`].\n\nA pidfd will only be created if it is possible to do so\nin a guaranteed race-free manner (e.g. if the `clone3` system call\nis supported). Otherwise, [`pidfd`] will return an error.\n\n[`Command`]: process::Command\n[`Child`]: process::Child\n[`pidfd`]: fn@ChildExt::pidfd\n[`take_pidfd`]: ChildExt::take_pidfd","links":{"fn@ChildExt::pidfd":"5:6567:7410","ChildExt::take_pidfd":"5:6568:60122","struct@PidFd":"5:11281:4105","process::Child":"5:7415:4213","process::Command":"5:7477:4217"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3914:2869":{"id":"1:3914:2869","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3206:2278":{"id":"1:3206:2278","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3180:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1236":{"id":"0:1236","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1176,0],"end":[1198,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["0:1241:1813","0:1242:932","0:1243:1814","0:1244:2599"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1396:1821":{"id":"0:1396:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1011,4],"end":[1011,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1079":{"id":"0:1079","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[811,0],"end":[815,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1082:1813","0:1451:932","0:1452:1814","0:1453:502","0:1454:1815","0:1455:1817","0:1456:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5917:3898":{"id":"4:5917:3898","crate_id":4,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5919:184","4:5920:17940"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8633:3238":{"id":"1:8633:3238","crate_id":1,"name":"sum","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\n\"summing up\" the items.","links":{},"attrs":["#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1451:932":{"id":"0:1451:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6213:4346":{"id":"5:6213:4346","crate_id":5,"name":"uid","span":null,"visibility":"default","docs":"Sets the child process's user ID. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5067:4109":{"id":"5:5067:4109","crate_id":5,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5068:1900","5:5069:60129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10570:667":{"id":"1:10570:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Display for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\"(1.987, 2.983)\",\n           format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4467:3258":{"id":"5:4467:3258","crate_id":5,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4468:2411","5:4469:60889","5:4471:60890","5:4472:4522","5:4473:60891","5:4474:60892","5:4475:55385","5:4484:3223"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1325:1376":{"id":"0:1325:1376","crate_id":0,"name":"sub","span":{"filename":"src/set.rs","begin":[1382,4],"end":[1384,5]},"visibility":"default","docs":"Returns the set difference, cloned into a new set.\n\nValues are collected in the same order that they appear in `self`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:3444:2439","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23141:3517":{"id":"1:23141:3517","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23142:3433","1:23143:1266","1:23144:1293"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5919:184":{"id":"4:5919:184","crate_id":4,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1202:2506":{"id":"0:1202:2506","crate_id":0,"name":"Intersection","span":{"filename":"src/set.rs","begin":[1098,0],"end":[1101,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `IndexSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`IndexSet`].\nSee its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`intersection`]: struct.IndexSet.html#method.intersection","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1202:2506","a:1:9532:3068-0:1202:2506","a:1:3382:225-0:1202:2506","a:1:3411:3178-0:1202:2506","a:1:9533:3067-0:1202:2506","b:1:4104-0:1202:2506","b:1:3218-0:1202:2506","b:1:3213-0:1202:2506","b:1:3203-0:1202:2506","b:1:3207-0:1202:2506","b:1:2865-0:1202:2506","b:1:2868-0:1202:2506","b:1:8676-0:1202:2506","b:4:848-0:1202:2506","0:1208","0:1215","0:1219","0:1222","0:1226"]}},"1:9101:422":{"id":"1:9101:422","crate_id":1,"name":"cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\nassert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\nassert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n```","links":{"`Iterator`":"1:8873:159","Ord#lexicographical-comparison":"1:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:2037":{"id":"0:150:2037","crate_id":0,"name":"get_mut","span":{"filename":"src/map/core/raw.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Gets a mutable reference to the entry's value in the map.\n\nIf you need a reference which may outlive the destruction of the\n`Entry` value, see `into_mut`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1069:802":{"id":"0:1069:802","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[786,4],"end":[788,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13826:56920":{"id":"1:13826:56920","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5452:56920"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50051:3723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13814:56915":{"id":"1:13814:56915","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4493:59395":{"id":"5:4493:59395","crate_id":5,"name":"fill_buf","span":null,"visibility":"default","docs":"Returns the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\n[`consume`]: BufRead::consume\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n# Errors\n\nThis function will return an I/O error if the underlying reader was\nread, but returned an error.\n\n# Examples\n\nA locked standard input implements `BufRead`:\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nlet buffer = stdin.fill_buf().unwrap();\n\n// work with buffer\nprintln!(\"{buffer:?}\");\n\n// ensure the bytes we worked with aren't returned again later\nlet length = buffer.len();\nstdin.consume(length);\n```","links":{"BufRead::consume":"5:4494:59396"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1247":{"id":"0:1247","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1200,0],"end":[1216,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["0:1251:1818","0:1252:2600"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6214:4347":{"id":"5:6214:4347","crate_id":5,"name":"gid","span":null,"visibility":"default","docs":"Similar to `uid`, but sets the group ID of the child process. This has\nthe same semantics as the `uid` field.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8873:159":{"id":"1:8873:159","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8874:1813","1:8875:932","1:8876:3207","1:8879:1814","1:8880:502","1:8882:1817","1:8885:3208","1:8886:1815","1:8887:3209","1:8888:2503","1:8890:2257","1:8892:3210","1:8893:3211","1:8895:851","1:8898:2220","1:8905:3212","1:8907:3213","1:8910:2239","1:8911:3214","1:8912:3215","1:8914:3216","1:8916:3217","1:8919:1329","1:8920:2261","1:8921:3218","1:8925:3219","1:8928:3220","1:8929:3221","1:8930:3222","1:8932:3223","1:8933:1819","1:8935:3224","1:8938:3225","1:8940:3226","1:8950:3227","1:8965:3228","1:8967:3229","1:8971:3230","1:8980:2599","1:8983:3231","1:8985:3232","1:8988:283","1:8995:301","1:9002:2413","1:9009:3233","1:9018:3234","1:9028:1025","1:9035:3235","1:9042:2908","1:9043:2323","1:9044:2910","1:9056:2909","1:9063:2907","1:9075:2906","1:9082:2348","1:9083:3236","1:9088:2296","1:9091:2606","1:9094:2260","1:9095:3237","1:9097:3238","1:9099:3239","1:9101:422","1:9104:3240","1:9107:1008","1:9110:3241","1:9113:611","1:9116:3242","1:9119:917","1:9121:836","1:9123:801","1:9125:720","1:9127:703","1:9129:3243","1:9130:3244","1:9138:3245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1405:1821":{"id":"0:1405:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1047,4],"end":[1047,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:650:1973":{"id":"b:1:3213-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3370:216-0:626:1970":{"id":"a:1:3370:216-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13708:56886":{"id":"1:13708:56886","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13706:56885"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10574:667":{"id":"1:10574:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1423:1821":{"id":"0:1423:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[1127,4],"end":[1127,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497:2050":{"id":"0:497:2050","crate_id":0,"name":"swap_remove_entry","span":{"filename":"src/map.rs","begin":[559,4],"end":[567,5]},"visibility":"public","docs":"Remove and return the key-value pair equivalent to `key`.\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3685:762":{"id":"1:3685:762","crate_id":1,"name":"index_mut","span":null,"visibility":"default","docs":"Performs the mutable indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"1:3679:1898","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10811:659":{"id":"1:10811:659","crate_id":1,"name":"finish","span":null,"visibility":"default","docs":"Returns the hash value for the values written so far.\n\nDespite its name, the method does not reset the hasher’s internal\nstate. Additional [`write`]s will continue from the current value.\nIf you need to start a fresh hash value, you will have to create\na new hasher.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nhasher.write(b\"Cool!\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`write`]: Hasher::write","links":{"Hasher::write":"1:10812:2411"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1445:1815":{"id":"0:1445:1815","crate_id":0,"name":"nth","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3463:1114":{"id":"1:3463:1114","crate_id":1,"name":"rem","span":null,"visibility":"default","docs":"Performs the `%` operation.\n\n# Example\n\n```\nassert_eq!(12 % 10, 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Rem","id":"1:3460:2845","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1279:932":{"id":"0:1279:932","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1263,4],"end":[1265,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:473:2017":{"id":"0:473:2017","crate_id":0,"name":"insert_full","span":{"filename":"src/map.rs","begin":[381,4],"end":[384,5]},"visibility":"public","docs":"Insert a key-value pair in the map, and get their index.\n\nIf an equivalent key already exists in the map: the key remains and\nretains in its place in the order, its corresponding value is updated\nwith `value` and the older value is returned inside `(index, Some(_))`.\n\nIf no equivalent key existed in the map: the new key-value pair is\ninserted, last in order, and `(index, None)` is returned.\n\nComputes in **O(1)** time (amortized average).\n\nSee also [`entry`](#method.entry) if you you want to insert *or* modify\nor if you need to get the index of the corresponding key-value pair.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1095:667":{"id":"0:1095:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[838,4],"end":[840,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:700:1902":{"id":"b:1:8676-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1366:1819":{"id":"0:1366:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13705:56884":{"id":"1:13705:56884","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:572":{"id":"0:572","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[907,0],"end":[911,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:575:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3619:585":{"id":"1:3619:585","crate_id":1,"name":"drop","span":null,"visibility":"default","docs":"Executes the destructor for this type.\n\nThis method is called implicitly when the value goes out of scope,\nand cannot be called explicitly (this is compiler error [E0040]).\nHowever, the [`mem::drop`] function in the prelude can be\nused to call the argument's `Drop` implementation.\n\nWhen this method has been called, `self` has not yet been deallocated.\nThat only happens after the method is over.\nIf this wasn't the case, `self` would be a dangling reference.\n\n# Panics\n\nGiven that a [`panic!`] will call `drop` as it unwinds, any [`panic!`]\nin a `drop` implementation will likely abort.\n\nNote that even if this panics, the value is considered to be dropped;\nyou must not cause `drop` to be called again. This is normally automatically\nhandled by the compiler, but when using unsafe code, can sometimes occur\nunintentionally, particularly when using [`ptr::drop_in_place`].\n\n[E0040]: ../../error_codes/E0040.html\n[`panic!`]: crate::panic!\n[`mem::drop`]: drop\n[`ptr::drop_in_place`]: crate::ptr::drop_in_place","links":{"drop":"1:2181:585","crate::panic!":"1:4:989","crate::ptr::drop_in_place":"1:2765:586"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1100":{"id":"0:1100","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[854,0],"end":[858,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1102:1813","0:1460:932","0:1461:1814","0:1462:502","0:1463:1815","0:1464:1817","0:1465:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3411:3178-0:134:1908":{"id":"a:1:3411:3178-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3218-0:1174:2496":{"id":"b:1:3218-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13717:2037":{"id":"1:13717:2037","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3411:3178-0:1202:2506":{"id":"a:1:3411:3178-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5557:60669":{"id":"5:5557:60669","crate_id":5,"name":"is_block_device","span":null,"visibility":"default","docs":"Returns `true` if this file type is a block device.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"block_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_block_device());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"file_type_ext\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5533:61081":{"id":"5:5533:61081","crate_id":5,"name":"mtime","span":null,"visibility":"default","docs":"Returns the last modification time of the file, in seconds since Unix Epoch.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let last_modification_time = meta.mtime();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:696":{"id":"0:696","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1103,0],"end":[1107,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:699:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:286:2379":{"id":"0:286:2379","crate_id":0,"name":"or_insert_with_key","span":{"filename":"src/map/core.rs","begin":[530,4],"end":[541,5]},"visibility":"public","docs":"Inserts the result of the `call` function with a reference to the entry's key if it is\nvacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\nan already existent value is returned.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["call",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3627:133","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}],"output":{"kind":"generic","inner":"V"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1284":{"id":"0:1284","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1279,0],"end":[1294,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1287:1818","0:1288:2600"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5509:5463":{"id":"5:5509:5463","crate_id":5,"name":"mode","span":null,"visibility":"default","docs":"Returns the underlying raw `st_mode` bits that contain the standard\nUnix permissions for this file.\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::os::unix::fs::PermissionsExt;\n\nfn main() -> std::io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    let permissions = metadata.permissions();\n\n    println!(\"permissions: {:o}\", permissions.mode());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"fs_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6223:59626":{"id":"5:6223:59626","crate_id":5,"name":"process_group","span":null,"visibility":"default","docs":"Sets the process group ID (PGID) of the child process. Equivalent to a\n`setpgid` call in the child process, but may be more efficient.\n\nProcess groups determine which processes receive signals.\n\n# Examples\n\nPressing Ctrl-C in a terminal will send SIGINT to all processes in\nthe current foreground process group. By spawning the `sleep`\nsubprocess in a new process group, it will not receive SIGINT from the\nterminal.\n\nThe parent process could install a signal handler and manage the\nsubprocess on its own terms.\n\nA process group ID of 0 will use the process ID as the PGID.\n\n```no_run\nuse std::process::Command;\nuse std::os::unix::process::CommandExt;\n\nCommand::new(\"sleep\")\n    .arg(\"10\")\n    .process_group(0)\n    .spawn()?\n    .wait()?;\n#\n# Ok::<_, Box<dyn std::error::Error>>(())\n```","links":{},"attrs":["#[stable(feature = \"process_set_process_group\", since = \"1.64.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pgroup",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Command","id":"5:7477:4217","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:1174:2496":{"id":"b:1:3203-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3679:1898":{"id":"1:3679:1898","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3681:184","1:3682:761"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:1:8676-0:1174:2496":{"id":"b:1:8676-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"a:1:3382:225-0:724:2087":{"id":"a:1:3382:225-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:3370:216-0:269:1673":{"id":"a:1:3370:216-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11205:2037":{"id":"1:11205:2037","crate_id":1,"name":"get_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11201:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:153:2373":{"id":"0:153:2373","crate_id":0,"name":"into_mut","span":{"filename":"src/map/core/raw.rs","begin":[159,4],"end":[162,5]},"visibility":"public","docs":"Converts into a mutable reference to the entry's value in the map,\nwith a lifetime bound to the map itself.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1070":{"id":"0:1070","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[791,0],"end":[791,40]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8890:2257":{"id":"1:8890:2257","crate_id":1,"name":"zip","span":null,"visibility":"default","docs":"'Zips up' two iterators into a single iterator of pairs.\n\n`zip()` returns a new iterator that will iterate over two other\niterators, returning a tuple where the first element comes from the\nfirst iterator, and the second element comes from the second iterator.\n\nIn other words, it zips two iterators together, into a single one.\n\nIf either iterator returns [`None`], [`next`] from the zipped iterator\nwill return [`None`].\nIf the zipped iterator has no more elements to return then each further attempt to advance\nit will first try to advance the first iterator at most one time and if it still yielded an item\ntry to advance the second iterator at most one time.\n\nTo 'undo' the result of zipping up two iterators, see [`unzip`].\n\n[`unzip`]: Iterator::unzip\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().zip(a2.iter());\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `zip()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `zip()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().zip(s2);\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\n`zip()` is often used to zip an infinite iterator to a finite one.\nThis works because the finite iterator will eventually return [`None`],\nending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n\n```\nlet enumerate: Vec<_> = \"foo\".chars().enumerate().collect();\n\nlet zipper: Vec<_> = (0..).zip(\"foo\".chars()).collect();\n\nassert_eq!((0, 'f'), enumerate[0]);\nassert_eq!((0, 'f'), zipper[0]);\n\nassert_eq!((1, 'o'), enumerate[1]);\nassert_eq!((1, 'o'), zipper[1]);\n\nassert_eq!((2, 'o'), enumerate[2]);\nassert_eq!((2, 'o'), zipper[2]);\n```\n\nIf both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n\n```\nuse std::iter::zip;\n\nlet a = [1, 2, 3];\nlet b = [2, 3, 4];\n\nlet mut zipped = zip(\n    a.into_iter().map(|x| x * 2).skip(1),\n    b.into_iter().map(|x| x * 2).skip(1),\n);\n\nassert_eq!(zipped.next(), Some((4, 6)));\nassert_eq!(zipped.next(), Some((6, 8)));\nassert_eq!(zipped.next(), None);\n```\n\ncompared to:\n\n```\n# let a = [1, 2, 3];\n# let b = [2, 3, 4];\n#\nlet mut zipped = a\n    .into_iter()\n    .map(|x| x * 2)\n    .skip(1)\n    .zip(b.into_iter().map(|x| x * 2).skip(1));\n#\n# assert_eq!(zipped.next(), Some((4, 6)));\n# assert_eq!(zipped.next(), Some((6, 8)));\n# assert_eq!(zipped.next(), None);\n```\n\n[`enumerate`]: Iterator::enumerate\n[`next`]: Iterator::next\n[`zip`]: crate::iter::zip","links":{"`Iterator`":"1:8873:159","Iterator::enumerate":"1:8910:2239","`IntoIterator`":"1:8672:152","crate::iter::zip":"1:7935:2257","`None`":"1:47773:177","Iterator::unzip":"1:9083:3236","Iterator::next":"1:8875:932"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Zip","id":"1:47078:2961","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3411:3178-0:927:1655":{"id":"a:1:3411:3178-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:4487:39819":{"id":"5:4487:39819","crate_id":5,"name":"rewind","span":null,"visibility":"default","docs":"Rewind to the beginning of a stream.\n\nThis is a convenience method, equivalent to `seek(SeekFrom::Start(0))`.\n\n# Errors\n\nRewinding can fail, for example because it might involve flushing a buffer.\n\n# Example\n\n```no_run\nuse std::io::{Read, Seek, Write};\nuse std::fs::OpenOptions;\n\nlet mut f = OpenOptions::new()\n    .write(true)\n    .read(true)\n    .create(true)\n    .open(\"foo.txt\").unwrap();\n\nlet hello = \"Hello!\\n\";\nwrite!(f, \"{hello}\").unwrap();\nf.rewind().unwrap();\n\nlet mut buf = String::new();\nf.read_to_string(&mut buf).unwrap();\nassert_eq!(&buf, hello);\n```","links":{},"attrs":["#[stable(feature = \"seek_rewind\", since = \"1.55.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8930:3222":{"id":"1:8930:3222","crate_id":1,"name":"inspect","span":null,"visibility":"default","docs":"Does something with each element of an iterator, passing the value on.\n\nWhen using iterators, you'll often chain several of them together.\nWhile working on such code, you might want to check out what's\nhappening at various parts in the pipeline. To do that, insert\na call to `inspect()`.\n\nIt's more common for `inspect()` to be used as a debugging tool than to\nexist in your final code, but applications may find it useful in certain\nsituations when errors need to be logged before being discarded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 4, 2, 3];\n\n// this iterator sequence is complex.\nlet sum = a.iter()\n    .cloned()\n    .filter(|x| x % 2 == 0)\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n\n// let's add some inspect() calls to investigate what's happening\nlet sum = a.iter()\n    .cloned()\n    .inspect(|x| println!(\"about to filter: {x}\"))\n    .filter(|x| x % 2 == 0)\n    .inspect(|x| println!(\"made it through filter: {x}\"))\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n```\n\nThis will print:\n\n```text\n6\nabout to filter: 1\nabout to filter: 4\nmade it through filter: 4\nabout to filter: 2\nmade it through filter: 2\nabout to filter: 3\n6\n```\n\nLogging errors before discarding them:\n\n```\nlet lines = [\"1\", \"2\", \"a\"];\n\nlet sum: i32 = lines\n    .iter()\n    .map(|line| line.parse::<i32>())\n    .inspect(|num| {\n        if let Err(ref e) = *num {\n            println!(\"Parsing error: {e}\");\n        }\n    })\n    .filter_map(Result::ok)\n    .sum();\n\nprintln!(\"Sum: {sum}\");\n```\n\nThis will print:\n\n```text\nParsing error: invalid digit found in string\nSum: 3\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Inspect","id":"1:46958:2952","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:548:1961":{"id":"b:1:8676-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:4153:3478":{"id":"1:4153:3478","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4154:55054"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13761:56897":{"id":"1:13761:56897","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:13752:56895","prim@char":"5:15876:2656","str::rsplit_terminator":"1:13764:56898","self::pattern":"1:13328:3437","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49802:3709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9044:2910":{"id":"1:9044:2910","crate_id":1,"name":"max_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value from the\nspecified function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n```","links":{"`None`":"1:47773:177"},"attrs":["#[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2956:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6,0],"end":[6,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::mutable_keys::MutableKeys","name":"MutableKeys","id":"0:45:1858","glob":false}},"1:9088:2296":{"id":"1:9088:2296","crate_id":1,"name":"copied","span":null,"visibility":"default","docs":"Creates an iterator which copies all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_copied: Vec<_> = a.iter().copied().collect();\n\n// copied is the same as .map(|&x| x)\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_copied, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```","links":{},"attrs":["#[stable(feature = \"iter_copied\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Copied","id":"1:46888:2939","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1467:1818":{"id":"0:1467:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[861,4],"end":[861,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3411:3178-0:650:1973":{"id":"a:1:3411:3178-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11203:184":{"id":"1:11203:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The output type returned by methods.","links":{},"attrs":["#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"1:14539:55551":{"id":"1:14539:55551","crate_id":1,"name":"deallocate","span":null,"visibility":"default","docs":"Deallocates the memory referenced by `ptr`.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator, and\n* `layout` must [*fit*] that block of memory.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"5:1032:3897":{"id":"5:1032:3897","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":"Container type for copied ASCII characters.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3472:272":{"id":"1:3472:272","crate_id":1,"name":"add_assign","span":null,"visibility":"default","docs":"Performs the `+=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx += 1;\nassert_eq!(x, 13);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3664:209":{"id":"1:3664:209","crate_id":1,"name":"Return","span":null,"visibility":"default","docs":"The type of value this generator returns.\n\nThis corresponds to the type returned from a generator either with a\n`return` statement or implicitly as the last expression of a generator\nliteral. For example futures would use this as `Result<T, E>` as it\nrepresents a completed future.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13730:17816":{"id":"1:13730:17816","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:13731:17854"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50026:3720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440:1797":{"id":"0:440:1797","crate_id":0,"name":"with_capacity","span":{"filename":"src/map.rs","begin":[156,4],"end":[158,5]},"visibility":"public","docs":"Create a new map with capacity for `n` key-value pairs. (Does not\nallocate if `n` is zero.)\n\nComputes in **O(n)** time.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:927:1655":{"id":"a:1:9532:3068-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3470:2846":{"id":"1:3470:2846","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3472:272"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:455:1524":{"id":"0:455:1524","crate_id":0,"name":"values","span":{"filename":"src/map.rs","begin":[244,4],"end":[248,5]},"visibility":"public","docs":"Return an iterator over the values of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8919:1329":{"id":"1:8919:1329","crate_id":1,"name":"skip","span":null,"visibility":"default","docs":"Creates an iterator that skips the first `n` elements.\n\n`skip(n)` skips elements until `n` elements are skipped or the end of the\niterator is reached (whichever happens first). After that, all the remaining\nelements are yielded. In particular, if the original iterator is too short,\nthen the returned iterator is empty.\n\nRather than overriding this method directly, instead override the `nth` method.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().skip(2);\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Skip","id":"1:47027:2957","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:134:1908":{"id":"b:1:3218-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1314":{"id":"0:1314","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1354,0],"end":[1369,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:3508:2438","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"items":["0:1318:184","0:1319:363"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3411:3178-0:312:1909":{"id":"a:1:3411:3178-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1040,0],"end":[1044,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:657:1813","0:1397:932","0:1398:1814","0:1399:502","0:1400:1815","0:1401:1817","0:1402:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:4:848-0:672:1900":{"id":"b:4:848-0:672:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5503:60151":{"id":"5:5503:60151","crate_id":5,"name":"write_at","span":null,"visibility":"default","docs":"Writes a number of bytes starting from a given offset.\n\nReturns the number of bytes written.\n\nThe offset is relative to the start of the file and thus independent\nfrom the current cursor.\n\nThe current file cursor is not affected by this function.\n\nWhen writing beyond the end of the file, the file is appropriately\nextended and the intermediate bytes are initialized with the value 0.\n\nNote that similar to [`File::write`], it is not an error to return a\nshort write.\n\n[`File::write`]: fs::File::write\n\n# Examples\n\n```no_run\nuse std::fs::File;\nuse std::io;\nuse std::os::unix::prelude::FileExt;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foo.txt\")?;\n\n    // We now write at the offset 10.\n    file.write_at(b\"sushi\", 10)?;\n    Ok(())\n}\n```","links":{"fs::File::write":"5:2958:2411"},"attrs":["#[stable(feature = \"file_offset\", since = \"1.15.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["offset",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1361:932":{"id":"0:1361:932","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:700:1902":{"id":"b:1:4104-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:575:667":{"id":"0:575:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[908,4],"end":[910,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1297:415":{"id":"0:1297:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1304,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1645":{"id":"0:28:1645","crate_id":0,"name":"equivalent","span":{"filename":"src/equivalent.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:949":{"id":"0:949","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[128,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":["#[cfg(has_std)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:951:930","0:952:1797"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:9138:61057":{"id":"5:9138:61057","crate_id":5,"name":"sqrt","span":null,"visibility":"default","docs":"Produces a vector where every lane has the square root value\nof the equivalently-indexed lane in `self`","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:607:1813":{"id":"0:607:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[961,4],"end":[961,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}}},"0:290:2283":{"id":"0:290:2283","crate_id":0,"name":"and_modify","span":{"filename":"src/map/core.rs","begin":[561,4],"end":[572,5]},"visibility":"public","docs":"Modifies the entry if it is occupied.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3627:133","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6191:57580":{"id":"4:6191:57580","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"4:8479:221","`Box<str>`":"4:444:2802"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:444:2802","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4500:56895":{"id":"5:4500:56895","crate_id":5,"name":"split","span":null,"visibility":"default","docs":"Returns an iterator over the contents of this reader split on the byte\n`byte`.\n\nThe iterator returned from this function will return instances of\n<code>[io::Result]<[Vec]\\<u8>></code>. Each vector returned will *not* have\nthe delimiter byte at the end.\n\nThis function will yield errors whenever [`read_until`] would have\nalso yielded an error.\n\n[io::Result]: self::Result \"io::Result\"\n[`read_until`]: BufRead::read_until\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to iterate over all hyphen delimited\nsegments in a byte slice\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem-ipsum-dolor\");\n\nlet mut split_iter = cursor.split(b'-').map(|l| l.unwrap());\nassert_eq!(split_iter.next(), Some(b\"lorem\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"ipsum\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"dolor\".to_vec()));\nassert_eq!(split_iter.next(), None);\n```","links":{"`Cursor`":"5:10712:3994","self::Result":"5:3801:208","BufRead::read_until":"5:4497:4029"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["byte",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"5:10979:2998","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4104-0:1174:2496":{"id":"b:1:4104-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:9533:3067-0:134:1908":{"id":"a:1:9533:3067-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3505:184":{"id":"1:3505:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `|` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:6463:7293":{"id":"5:6463:7293","crate_id":5,"name":"st_ino","span":null,"visibility":"default","docs":"Returns the inode number.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_ino());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1443:1814":{"id":"0:1443:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[778,4],"end":[778,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:746:1990":{"id":"a:1:9532:3068-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23024:55642":{"id":"1:23024:55642","crate_id":1,"name":"to_radians","span":null,"visibility":"default","docs":"Converts each lane from degrees to radians.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2865-0:598:1966":{"id":"b:1:2865-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:14453:284":{"id":"1:14453:284","crate_id":1,"name":"alloc","span":null,"visibility":"default","docs":"Allocate memory as described by the given `layout`.\n\nReturns a pointer to newly-allocated memory,\nor null to indicate allocation failure.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure that `layout` has non-zero size.\n\n(Extension subtraits might provide more specific bounds on\nbehavior, e.g., guarantee a sentinel address or a null pointer\nin response to a zero-size allocation request.)\n\nThe allocated block of memory may or may not be initialized.\n\n# Errors\n\nReturning a null pointer indicates that either memory is exhausted\nor `layout` does not meet this allocator's size or alignment constraints.\n\nImplementations are encouraged to return null on memory\nexhaustion rather than aborting, but this is not\na strict requirement. (Specifically: it is *legal* to\nimplement this trait atop an underlying native allocation\nlibrary that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an\nallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:13782:56903":{"id":"1:13782:56903","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:13779:2680","self::pattern":"1:13328:3437","prim@char":"5:15876:2656","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49974:3717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9113:611":{"id":"1:9113:611","crate_id":1,"name":"eq","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().eq([1].iter()), true);\nassert_eq!([1].iter().eq([1, 2].iter()), false);\n```","links":{"`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3176:2414":{"id":"1:3176:2414","crate_id":1,"name":"as_mut","span":null,"visibility":"default","docs":"Converts this type into a mutable reference of the (usually inferred) input type.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3190:1438":{"id":"1:3190:1438","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":["#[stable(feature = \"try_from\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3207-0:548:1961":{"id":"b:1:3207-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:973:2003":{"id":"0:973:2003","crate_id":0,"name":"shrink_to","span":{"filename":"src/set.rs","begin":[274,4],"end":[276,5]},"visibility":"public","docs":"Shrink the capacity of the set with a lower limit.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1136,0],"end":[1136,49]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:7596:59580":{"id":"5:7596:59580","crate_id":5,"name":"report","span":null,"visibility":"default","docs":"Is called to get the representation of the value as status code.\nThis status code is returned to the operating system.","links":{},"attrs":["#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ExitCode","id":"5:11875:4222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4485:4027":{"id":"5:4485:4027","crate_id":5,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4486:60804","5:4487:39819","5:4488:60805","5:4489:60806"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10817:3352":{"id":"1:10817:3352","crate_id":1,"name":"write_u128","span":null,"visibility":"default","docs":"Writes a single `u128` into this hasher.","links":{},"attrs":["#[stable(feature = \"i128\", since = \"1.26.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:724:2087":{"id":"b:1:3207-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3467:184":{"id":"1:3467:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8893:3211":{"id":"1:8893:3211","crate_id":1,"name":"intersperse_with","span":null,"visibility":"default","docs":"Creates a new iterator which places an item generated by `separator`\nbetween adjacent items of the original iterator.\n\nThe closure will be called exactly once each time an item is placed\nbetween two adjacent items from the underlying iterator; specifically,\nthe closure is not called if the underlying iterator yields less than\ntwo items and after the last item is yielded.\n\nIf the iterator's item implements [`Clone`], it may be easier to use\n[`intersperse`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\n#[derive(PartialEq, Debug)]\nstruct NotClone(usize);\n\nlet v = [NotClone(0), NotClone(1), NotClone(2)];\nlet mut it = v.into_iter().intersperse_with(|| NotClone(99));\n\nassert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(2)));  // The last element from from `v`.\nassert_eq!(it.next(), None);               // The iterator is finished.\n```\n\n`intersperse_with` can be used in situations where the separator needs\nto be computed:\n```\n#![feature(iter_intersperse)]\n\nlet src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n\n// The closure mutably borrows its context to generate an item.\nlet mut happy_emojis = [\" ❤️ \", \" 😀 \"].iter().copied();\nlet separator = || happy_emojis.next().unwrap_or(\" 🦀 \");\n\nlet result = src.intersperse_with(separator).collect::<String>();\nassert_eq!(result, \"Hello ❤️ to 😀 all 🦀 people 🦀 !!\");\n```\n[`Clone`]: crate::clone::Clone\n[`intersperse`]: Iterator::intersperse","links":{"crate::clone::Clone":"1:2884:105","Iterator::intersperse":"1:8892:3210"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"generic","inner":"G"}]],"output":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"1:7158:2963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"G"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8875:932":{"id":"1:8875:932","crate_id":1,"name":"next","span":null,"visibility":"default","docs":"Advances the iterator and returns the next value.\n\nReturns [`None`] when iteration is finished. Individual iterator\nimplementations may choose to resume iteration, and so calling `next()`\nagain may or may not eventually start returning [`Some(Item)`] again at some\npoint.\n\n[`Some(Item)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\n// A call to next() returns the next value...\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\n\n// ... and then None once it's over.\nassert_eq!(None, iter.next());\n\n// More calls may or may not return `None`. Here, they always will.\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next());\n```","links":{"`None`":"1:47773:177","Some":"1:47775:220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:626:1970":{"id":"b:1:3203-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"4:6194:57582":{"id":"4:6194:57582","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13825:56919"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:1269:2509":{"id":"b:4:848-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:956:1945":{"id":"0:956:1945","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/set.rs","begin":[152,4],"end":[156,5]},"visibility":"public","docs":"Create a new set with capacity for `n` elements.\n(Does not allocate if `n` is zero.)\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"primitive","inner":"usize"}],["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:758":{"id":"0:758","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1202,0],"end":[1206,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:761:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3213-0:626:1970":{"id":"b:1:3213-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:44:1848":{"id":"0:44:1848","crate_id":0,"name":"PrivateMarker","span":{"filename":"src/mutable_keys.rs","begin":[5,0],"end":[5,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"a:1:9533:3067-0:269:1673":{"id":"a:1:9533:3067-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:14537:55549":{"id":"1:14537:55549","crate_id":1,"name":"allocate","span":null,"visibility":"default","docs":"Attempts to allocate a block of memory.\n\nOn success, returns a [`NonNull<[u8]>`][NonNull] meeting the size and alignment guarantees of `layout`.\n\nThe returned block may have a larger size than specified by `layout.size()`, and may or may\nnot have its contents initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2391:2799"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50740:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23032:55169":{"id":"1:23032:55169","crate_id":1,"name":"signum","span":null,"visibility":"default","docs":"Replaces each lane with a number that represents its sign.\n\n* `1.0` if the number is positive, `+0.0`, or `INFINITY`\n* `-1.0` if the number is negative, `-0.0`, or `NEG_INFINITY`\n* `NAN` if the number is `NAN`","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3213-0:409:1654":{"id":"b:1:3213-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:4498:59397":{"id":"5:4498:59397","crate_id":5,"name":"read_line","span":null,"visibility":"default","docs":"Read all bytes until a newline (the `0xA` byte) is reached, and append\nthem to the provided buffer. You do not need to clear the buffer before\nappending.\n\nThis function will read bytes from the underlying stream until the\nnewline delimiter (the `0xA` byte) or EOF is found. Once found, all bytes\nup to, and including, the delimiter (if found) will be appended to\n`buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nIf this function returns [`Ok(0)`], the stream has reached EOF.\n\nThis function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending a newline\nor EOF.\n\n[`Ok(0)`]: Ok\n\n# Errors\n\nThis function has the same error semantics as [`read_until`] and will\nalso return an error if the read bytes are not valid UTF-8. If an I/O\nerror is encountered then `buf` may contain some bytes already read in\nthe event that all data read so far was valid UTF-8.\n\n[`read_until`]: BufRead::read_until\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to read all the lines in a byte slice:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"foo\\nbar\");\nlet mut buf = String::new();\n\n// cursor is at 'f'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 4);\nassert_eq!(buf, \"foo\\n\");\nbuf.clear();\n\n// cursor is at 'b'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 3);\nassert_eq!(buf, \"bar\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, \"\");\n```","links":{"BufRead::read_until":"5:4497:4029","Ok":"1:47899:178","`Cursor`":"5:10712:3994"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000:2517":{"id":"0:1000:2517","crate_id":0,"name":"replace_full","span":{"filename":"src/set.rs","begin":[419,4],"end":[430,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing value, if any, that is\nequal to the given one, without altering its insertion order. Returns\nthe index of the item and its replaced value.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:312:1909":{"id":"a:1:9532:3068-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1090":{"id":"0:1090","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[829,0],"end":[835,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1092:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3370:216-0:650:1973":{"id":"a:1:3370:216-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:4104-0:269:1673":{"id":"b:1:4104-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:311:667":{"id":"0:311:667","crate_id":0,"name":"fmt","span":{"filename":"src/map/core.rs","begin":[645,4],"end":[650,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:598:1966":{"id":"b:1:8676-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:10848:3247":{"id":"1:10848:3247","crate_id":1,"name":"hash_one","span":null,"visibility":"default","docs":"Calculates the hash of a single value.\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.\n\n# Example\n\n```\n#![feature(build_hasher_simple_hash_one)]\n\nuse std::cmp::{max, min};\nuse std::hash::{BuildHasher, Hash, Hasher};\nstruct OrderAmbivalentPair<T: Ord>(T, T);\nimpl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n    fn hash<H: Hasher>(&self, hasher: &mut H) {\n        min(&self.0, &self.1).hash(hasher);\n        max(&self.0, &self.1).hash(hasher);\n    }\n}\n\n// Then later, in a `#[test]` for the type...\nlet bh = std::collections::hash_map::RandomState::new();\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(1, 2)),\n    bh.hash_one(OrderAmbivalentPair(2, 1))\n);\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(10, 2)),\n    bh.hash_one(&OrderAmbivalentPair(2, 10))\n);\n```","links":{"`Hash`":"1:10800:143","`Hash::hash`":"1:10801:722","`Hasher`":"1:10810:147"},"attrs":["#[unstable(feature = \"build_hasher_simple_hash_one\", issue = \"86161\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23070:55074":{"id":"1:23070:55074","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3544:1253":{"id":"1:3544:1253","crate_id":1,"name":"shr_assign","span":null,"visibility":"default","docs":"Performs the `>>=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx >>= 1;\nassert_eq!(x, 2);\n\nlet mut x: u8 = 2;\nx >>= 1;\nassert_eq!(x, 1);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:797:184":{"id":"0:797:184","crate_id":0,"name":"Output","span":{"filename":"src/map.rs","begin":[1271,4],"end":[1271,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"0:935:417":{"id":"0:935:417","crate_id":0,"name":"clone_from","span":{"filename":"src/set.rs","begin":[82,4],"end":[84,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6835:59722":{"id":"5:6835:59722","crate_id":5,"name":"set_quickack","span":null,"visibility":"default","docs":"Enable or disable `TCP_QUICKACK`.\n\nThis flag causes Linux to eagerly send ACKs rather than delaying them.\nLinux may reset this flag after further operations on the socket.\n\nSee [`man 7 tcp`](https://man7.org/linux/man-pages/man7/tcp.7.html) and\n[TCP delayed acknowledgement](https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment)\nfor more information.\n\n# Examples\n\n```no_run\n#![feature(tcp_quickack)]\nuse std::net::TcpStream;\nuse std::os::linux::net::TcpStreamExt;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n        .expect(\"Couldn't connect to the server...\");\nstream.set_quickack(true).expect(\"set_quickack call failed\");\n```","links":{},"attrs":["#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["quickack",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13805:38187":{"id":"1:13805:38187","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13328:3437","prim@char":"5:15876:2656"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5508:4082":{"id":"5:5508:4082","crate_id":5,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5509:5463","5:5510:60717","5:5511:60718"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1093":{"id":"0:1093","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[837,0],"end":[841,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1095:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:9533:3067-0:700:1902":{"id":"a:1:9533:3067-0:700:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1144":{"id":"0:1144","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[942,0],"end":[951,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8681:2212","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1148:2207"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:4:848-0:927:1655":{"id":"b:4:848-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:745:667":{"id":"0:745:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[1175,4],"end":[1178,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:1033:3894":{"id":"5:1033:3894","crate_id":5,"name":"is_ascii","span":null,"visibility":"default","docs":"Checks if the value is within the ASCII range.\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:11201:219":{"id":"1:11201:219","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11203:184","1:11204:1659","1:11205:2037","1:11206:55312","1:11207:55313","1:11208:761","1:11209:762"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11192:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:784:777":{"id":"0:784:777","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[1228,4],"end":[1230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8672:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10815:3350":{"id":"1:10815:3350","crate_id":1,"name":"write_u32","span":null,"visibility":"default","docs":"Writes a single `u32` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3207-0:626:1970":{"id":"b:1:3207-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:4422:3909":{"id":"5:4422:3909","crate_id":5,"name":"bytes","span":null,"visibility":"default","docs":"Transforms this `Read` instance to an [`Iterator`] over its bytes.\n\nThe returned type implements [`Iterator`] where the [`Item`] is\n<code>[Result]<[u8], [io::Error]></code>.\nThe yielded item is [`Ok`] if a byte was successfully read and [`Err`]\notherwise. EOF is mapped to returning [`None`] from this iterator.\n\nThe default implementation calls `read` for each byte,\nwhich can be very inefficient for data that's not in memory,\nsuch as [`File`]. Consider using a [`BufReader`] in such cases.\n\n# Examples\n\n[`File`]s implement `Read`:\n\n[`Item`]: Iterator::Item\n[`File`]: crate::fs::File \"fs::File\"\n[Result]: crate::result::Result \"Result\"\n[io::Error]: self::Error \"io::Error\"\n\n```no_run\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = BufReader::new(File::open(\"foo.txt\")?);\n\n    for byte in f.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n    Ok(())\n}\n```","links":{"Iterator::Item":"1:8874:1813","`Ok`":"1:47899:178","self::Error":"5:3803:128","`Iterator`":"1:8873:159","`None`":"1:47773:177","crate::result::Result":"1:47896:208","u8":"5:15893:2670","`BufReader`":"5:3284:4036","`Err`":"1:47902:127","crate::fs::File":"5:2909:129"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"5:10973:3705","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1386:1818":{"id":"0:1386:1818","crate_id":0,"name":"next_back","span":{"filename":"src/map.rs","begin":[967,4],"end":[967,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13724:56890":{"id":"1:13724:56890","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:15882:2661","crate::ops::IndexMut":"1:3683:1899","str::slice_unchecked":"1:13723:4164"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:626:1970":{"id":"b:1:2868-0:626:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:626:1970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:810:761":{"id":"0:810:761","crate_id":0,"name":"index","span":{"filename":"src/map.rs","begin":[1358,4],"end":[1362,5]},"visibility":"default","docs":"Returns a reference to the value at the supplied `index`.\n\n***Panics*** if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1268:667":{"id":"0:1268:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1240,4],"end":[1242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:1202:2506":{"id":"b:1:2865-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3457:565":{"id":"1:3457:565","crate_id":1,"name":"div","span":null,"visibility":"default","docs":"Performs the `/` operation.\n\n# Example\n\n```\nassert_eq!(12 / 2, 6);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Div","id":"1:3454:2842","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1052:2120":{"id":"0:1052:2120","crate_id":0,"name":"move_index","span":{"filename":"src/set.rs","begin":[712,4],"end":[714,5]},"visibility":"public","docs":"Moves the position of a value from one index to another\nby shifting all other values in-between.\n\n* If `from < to`, the other values will shift down while the targeted value moves up.\n* If `from > to`, the other values will shift up while the targeted value moves down.\n\n***Panics*** if `from` or `to` are out of bounds.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"primitive","inner":"usize"}],["to",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:845:3897":{"id":"4:845:3897","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":"The resulting type after obtaining ownership.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:10821:3356":{"id":"1:10821:3356","crate_id":1,"name":"write_i32","span":null,"visibility":"default","docs":"Writes a single `i32` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1426:502":{"id":"0:1426:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1159,4],"end":[1159,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14456:1091":{"id":"1:14456:1091","crate_id":1,"name":"realloc","span":null,"visibility":"default","docs":"Shrink or grow a block of memory to the given `new_size`.\nThe block is described by the given `ptr` pointer and `layout`.\n\nIf this returns a non-null pointer, then ownership of the memory block\nreferenced by `ptr` has been transferred to this allocator.\nThe memory may or may not have been deallocated, and should be\nconsidered unusable. The new memory block is allocated with `layout`,\nbut with the `size` updated to `new_size`. This new layout should be\nused when deallocating the new memory block with `dealloc`. The range\n`0..min(layout.size(), new_size)` of the new memory block is\nguaranteed to have the same values as the original block.\n\nIf this method returns null, then ownership of the memory\nblock has not been transferred to this allocator, and the\ncontents of the memory block are unaltered.\n\n# Safety\n\nThis function is unsafe because undefined behavior can result\nif the caller does not ensure all of the following:\n\n* `ptr` must be currently allocated via this allocator,\n\n* `layout` must be the same layout that was used\n  to allocate that block of memory,\n\n* `new_size` must be greater than zero.\n\n* `new_size`, when rounded up to the nearest multiple of `layout.align()`,\n  must not overflow (i.e., the rounded value must be less than `usize::MAX`).\n\n(Extension subtraits might provide more specific bounds on\nbehavior, e.g., guarantee a sentinel address or a null pointer\nin response to a zero-size allocation request.)\n\n# Errors\n\nReturns null if the new layout does not meet the size\nand alignment constraints of the allocator, or if reallocation\notherwise fails.\n\nImplementations are encouraged to return null on memory\nexhaustion rather than panicking or aborting, but this is not\na strict requirement. (Specifically: it is *legal* to\nimplement this trait atop an underlying native allocation\nlibrary that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to a\nreallocation error are encouraged to call the [`handle_alloc_error`] function,\nrather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8985:3232":{"id":"1:8985:3232","crate_id":1,"name":"try_reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately.\n\nThe return type of this method depends on the return type of the closure. If the closure\nreturns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,\nE>`. If the closure returns `Option<Self::Item>`, then this function will return\n`Option<Option<Self::Item>>`.\n\nWhen called on an empty iterator, this function will return either `Some(None)` or\n`Ok(None)` depending on the type of the provided closure.\n\nFor iterators with at least one element, this is essentially the same as calling\n[`try_fold()`] with the first element of the iterator as the initial accumulator value.\n\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\nSafely calculate the sum of a series of numbers:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = vec![10, 20, 5, 23, 0];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(Some(58)));\n```\n\nDetermine when a reduction short circuited:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![1, 2, 3, usize::MAX, 4, 5];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, None);\n```\n\nDetermine when a reduction was not performed because there are no elements:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = Vec::new();\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(None));\n```\n\nUse a [`Result`] instead of an [`Option`]:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\nlet max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n    numbers.into_iter().try_reduce(|x, y| {\n        if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n    });\nassert_eq!(max, Ok(Some(\"5\")));\n```","links":{"`Option`":"1:47771:179","Iterator::try_fold":"1:8967:3229","`Result`":"1:47896:208"},"attrs":["#[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue =\n\"87053\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3842:2863","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13351:55490":{"id":"1:13351:55490","crate_id":1,"name":"next_match","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result. See [`next()`][Searcher::next].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_reject`][Searcher::next_reject] will overlap. This will return\n`(start_match, end_match)`, where start_match is the index of where\nthe match begins, and end_match is the index after the end of the match.","links":{"SearchStep::Match":"1:50133:3344","Searcher::next_reject":"1:13352:55491","Searcher::next":"1:13350:932"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:775:2087":{"id":"0:775:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[1219,4],"end":[1219,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"5:5526:61077":{"id":"5:5526:61077","crate_id":5,"name":"nlink","span":null,"visibility":"default","docs":"Returns the number of hard links pointing to this file.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::os::unix::fs::MetadataExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    let nb_hard_links = meta.nlink();\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3182:688":{"id":"1:3182:688","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Converts to this type from the input type.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10512:3258":{"id":"1:10512:3258","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10513:1558","1:10514:55384","1:10516:55385"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:732":{"id":"0:732","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1162,0],"end":[1164,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1431:1818","0:1432:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:692":{"id":"0:692","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1095,0],"end":[1101,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:672:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:695:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1378:1821":{"id":"0:1378:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/map.rs","begin":[931,4],"end":[931,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/map/core.rs","begin":[601,0],"end":[642,1]},"visibility":{"restricted":{"parent":"0:82:495","path":"::map::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:303:1798","0:304:2044","0:305:2045","0:306:2061","0:307:2049"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3203-0:1202:2506":{"id":"b:1:3203-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1371:1814":{"id":"0:1371:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[927,4],"end":[927,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3618:2860":{"id":"1:3618:2860","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3619:585"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:700:1902":{"id":"0:700:1902","crate_id":0,"name":"IterMut","span":{"filename":"src/map.rs","begin":[1116,0],"end":[1118,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `IndexMap`.\n\nThis `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: struct.IndexMap.html#method.iter_mut\n[`IndexMap`]: struct.IndexMap.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:700:1902","a:1:9532:3068-0:700:1902","a:1:3382:225-0:700:1902","a:1:3411:3178-0:700:1902","a:1:9533:3067-0:700:1902","b:1:4104-0:700:1902","b:1:3218-0:700:1902","b:1:3213-0:700:1902","b:1:3203-0:700:1902","b:1:3207-0:700:1902","b:1:2865-0:700:1902","b:1:2868-0:700:1902","b:1:8676-0:700:1902","0:705","0:710","0:713","0:717","0:720"]}},"1:8674:2087":{"id":"1:8674:2087","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":"Which kind of iterator are we turning this into?","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"a:1:3370:216-0:1096:1990":{"id":"a:1:3370:216-0:1096:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:3382:225-0:746:1990":{"id":"a:1:3382:225-0:746:1990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:305:2045":{"id":"0:305:2045","crate_id":0,"name":"swap_remove","span":{"filename":"src/map/core.rs","begin":[621,4],"end":[623,5]},"visibility":"public","docs":"Remove the key, value pair stored in the map for this entry, and return the value.\n\nLike `Vec::swap_remove`, the pair is removed by swapping it with the\nlast element of the map and popping it off. **This perturbs\nthe position of what used to be the last element!**\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23016:3433":{"id":"1:23016:3433","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:6641:60208":{"id":"5:6641:60208","crate_id":5,"name":"from_raw_fd","span":null,"visibility":"default","docs":"Constructs a new instance of `Self` from the given raw file\ndescriptor.\n\nThis function is typically used to **consume ownership** of the\nspecified file descriptor. When used in this way, the returned object\nwill take responsibility for closing it when the object goes out of\nscope.\n\nHowever, consuming ownership is not strictly required. Use a\n[`From<OwnedFd>::from`] implementation for an API which strictly\nconsumes ownership.\n\n# Safety\n\nThe `fd` passed in must be a valid and open file descriptor.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{FromRawFd, IntoRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{FromRawFd, IntoRawFd, RawFd};\n\nlet f = File::open(\"foo.txt\")?;\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.into_raw_fd();\n// SAFETY: no other functions should call `from_raw_fd`, so there\n// is only one owner for the file descriptor.\n# #[cfg(any(unix, target_os = \"wasi\"))]\nlet f = unsafe { File::from_raw_fd(raw_fd) };\n# Ok::<(), io::Error>(())\n```","links":{"`From<OwnedFd>::from`":"1:3182:688"},"attrs":["#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["fd",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:460:1989":{"id":"0:460:1989","crate_id":0,"name":"drain","span":{"filename":"src/map.rs","begin":[292,4],"end":[299,5]},"visibility":"public","docs":"Clears the `IndexMap` in the given index range, returning those\nkey-value pairs as a drain iterator.\n\nThe range may be any type that implements `RangeBounds<usize>`,\nincluding all of the `std::ops::Range*` types, or even a tuple pair of\n`Bound` start and end values. To drain the map entirely, use `RangeFull`\nlike `map.drain(..)`.\n\nThis shifts down all entries following the drained range to fill the\ngap, and keeps the allocated memory for reuse.\n\n***Panics*** if the starting point is greater than the end point or if\nthe end point is greater than the length of the map.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:746:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3750:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1158:611":{"id":"0:1158:611","crate_id":0,"name":"eq","span":{"filename":"src/set.rs","begin":[971,4],"end":[973,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8631:2935":{"id":"1:8631:2935","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8633:3238"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3213-0:1059:2087":{"id":"b:1:3213-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1454:1815":{"id":"0:1454:1815","crate_id":0,"name":"nth","span":{"filename":"src/set.rs","begin":[814,4],"end":[814,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2884:105":{"id":"1:2884:105","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2885:415","1:2886:417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6469:5505":{"id":"5:6469:5505","crate_id":5,"name":"st_size","span":null,"visibility":"default","docs":"Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n\nThe size of a symbolic link is the length of the pathname it contains,\nwithout a terminating null byte.\n\n# Examples\n\n```no_run\nuse std::fs;\nuse std::io;\nuse std::os::linux::fs::MetadataExt;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"some_file\")?;\n    println!(\"{}\", meta.st_size());\n    Ok(())\n}\n```","links":{},"attrs":["#[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23036:55653":{"id":"1:23036:55653","crate_id":1,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval unless it is NaN.\n\nFor each lane in `self`, returns the corresponding lane in `max` if the lane is\ngreater than `max`, and the corresponding lane in `min` if the lane is less\nthan `min`.  Otherwise returns the lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:1269:2509":{"id":"a:1:3411:3178-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13793:56907":{"id":"1:13793:56907","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:783:2087":{"id":"0:783:2087","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[1227,4],"end":[1227,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"0:1400:1815":{"id":"0:1400:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[1043,4],"end":[1043,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155:2063":{"id":"0:155:2063","crate_id":0,"name":"shift_remove_entry","span":{"filename":"src/map/core/raw.rs","begin":[185,4],"end":[190,5]},"visibility":"public","docs":"Remove and return the key, value pair stored in the map for this entry\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1459:1821":{"id":"0:1459:1821","crate_id":0,"name":"nth_back","span":{"filename":"src/set.rs","begin":[818,4],"end":[818,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23080:55076":{"id":"1:23080:55076","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_product(), 24);\n\n// SIMD integer multiplication is always wrapping\nlet v = i32x4::from_array([i32::MAX, 2, 1, 1]);\nassert!(v.reduce_product() < i32::MAX);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1458:1818":{"id":"0:1458:1818","crate_id":0,"name":"next_back","span":{"filename":"src/set.rs","begin":[818,4],"end":[818,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:967:1996":{"id":"0:967:1996","crate_id":0,"name":"split_off","span":{"filename":"src/set.rs","begin":[242,4],"end":[249,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated set containing the elements in the range\n`[at, len)`. After the call, the original set will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n***Panics*** if `at > len`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1184:1813":{"id":"0:1184:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1034,4],"end":[1034,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"1:8980:2599":{"id":"1:8980:2599","crate_id":1,"name":"fold","span":null,"visibility":"default","docs":"Folds every element into an accumulator by applying an operation,\nreturning the final result.\n\n`fold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `fold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `fold()`, and similar methods that traverse the entire iterator,\nmight not terminate for infinite iterators, even on traits for which a\nresult is determinable in finite time.\n\nNote: [`reduce()`] can be used to use the first element as the initial\nvalue, if the accumulator type and item type is the same.\n\nNote: `fold()` combines elements in a *left-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `fold()` on the internal parts\nfrom which this iterator is composed.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of the array\nlet sum = a.iter().fold(0, |acc, x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nLet's walk through each step of the iteration here:\n\n| element | acc | x | result |\n|---------|-----|---|--------|\n|         | 0   |   |        |\n| 1       | 0   | 1 | 1      |\n| 2       | 1   | 2 | 3      |\n| 3       | 3   | 3 | 6      |\n\nAnd so, our final result, `6`.\n\nThis example demonstrates the left-associative nature of `fold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the front until the back:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().fold(zero, |acc, &x| {\n    format!(\"({acc} + {x})\")\n});\n\nassert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n```\nIt's common for people who haven't used iterators a lot to\nuse a `for` loop with a list of things to build up a result. Those\ncan be turned into `fold()`s:\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet mut result = 0;\n\n// for loop:\nfor i in &numbers {\n    result = result + i;\n}\n\n// fold:\nlet result2 = numbers.iter().fold(0, |acc, &x| acc + x);\n\n// they're the same\nassert_eq!(result, result2);\n```\n\n[`reduce()`]: Iterator::reduce","links":{"`DoubleEndedIterator::rfold()`":"1:8724:2600","Iterator::reduce":"1:8983:3231"},"attrs":["#[doc(alias = \"inject\", alias = \"foldl\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3411:3178":{"id":"1:3411:3178","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:445:1945":{"id":"0:445:1945","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/map.rs","begin":[167,4],"end":[176,5]},"visibility":"public","docs":"Create a new map with capacity for `n` key-value pairs. (Does not\nallocate if `n` is zero.)\n\nComputes in **O(n)** time.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["n",{"kind":"primitive","inner":"usize"}],["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1438:1819":{"id":"0:1438:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[27,21],"end":[27,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::core::Entry","name":"Entry","id":"0:269:1673","glob":false}},"1:3380:107":{"id":"1:3380:107","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6567:7410":{"id":"5:6567:7410","crate_id":5,"name":"pidfd","span":null,"visibility":"default","docs":"Obtains a reference to the [`PidFd`] created for this [`Child`], if available.\n\nA pidfd will only be available if its creation was requested with\n[`create_pidfd`] when the corresponding [`Command`] was created.\n\nEven if requested, a pidfd may not be available due to an older\nversion of Linux being in use, or if some other error occurred.\n\n[`Command`]: process::Command\n[`create_pidfd`]: CommandExt::create_pidfd\n[`Child`]: process::Child","links":{"`PidFd`":"5:11281:4105","CommandExt::create_pidfd":"5:6570:8000","process::Child":"5:7415:4213","process::Command":"5:7477:4217"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"PidFd","id":"5:11281:4105","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1435:502":{"id":"0:1435:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1860":{"id":"0:47:1860","crate_id":0,"name":"Value","span":{"filename":"src/mutable_keys.rs","begin":[21,4],"end":[21,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:10801:722":{"id":"1:10801:722","crate_id":1,"name":"hash","span":null,"visibility":"default","docs":"Feeds this value into the given [`Hasher`].\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\n7920.hash(&mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```","links":{"`Hasher`":"1:10810:147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10810:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3525:2854":{"id":"1:3525:2854","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3527:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13788:56905":{"id":"1:13788:56905","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"5:15876:2656","str::match_indices":"1:13785:56904","self::pattern":"1:13328:3437","`DoubleEndedIterator`":"1:8716:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49920:3714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3213-0:134:1908":{"id":"b:1:3213-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1302":{"id":"0:1302","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1321,0],"end":[1335,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:3498:2436","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"items":["0:1306:184","0:1307:358"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10584:667":{"id":"1:10584:667","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3516:1249":{"id":"1:3516:1249","crate_id":1,"name":"shl","span":null,"visibility":"default","docs":"Performs the `<<` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 << 1, 10);\nassert_eq!(1u8 << 1, 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shl","id":"1:3513:2852","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6238:60755":{"id":"5:6238:60755","crate_id":5,"name":"stopped_signal","span":null,"visibility":"default","docs":"If the process was stopped by a signal, returns that signal.\n\nIn other words, if `WIFSTOPPED`, this returns `WSTOPSIG`.  This is only possible if the status came from\na `wait` system call which was passed `WUNTRACED`, and was then converted into an `ExitStatus`.","links":{},"attrs":["#[stable(feature = \"unix_process_wait_more\", since = \"1.58.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[890,0],"end":[894,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:564:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23028:55646":{"id":"1:23028:55646","crate_id":1,"name":"is_infinite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is positive infinity or negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1120":{"id":"0:1120","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[888,0],"end":[897,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1123:1813","0:1124:2087","0:1125:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:6172:2305":{"id":"4:6172:2305","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:8479:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8479:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9121:836":{"id":"1:9121:836","crate_id":1,"name":"lt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().lt([1].iter()), false);\nassert_eq!([1].iter().lt([1, 2].iter()), true);\nassert_eq!([1, 2].iter().lt([1].iter()), false);\nassert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1382:1815":{"id":"0:1382:1815","crate_id":0,"name":"nth","span":{"filename":"src/map.rs","begin":[963,4],"end":[963,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:848-0:1230:2502":{"id":"b:4:848-0:1230:2502","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:844:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":["4:850:3897","4:851:54880","4:852:54881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2870:54879":{"id":"1:2870:54879","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:576:1964":{"id":"a:1:9532:3068-0:576:1964","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13728:3466":{"id":"1:13728:3466","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49728:3704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:24038:3382":{"id":"1:24038:3382","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24039:3433"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24034:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3380:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:4420:60518":{"id":"5:4420:60518","crate_id":5,"name":"read_buf_exact","span":null,"visibility":"default","docs":"Read the exact number of bytes required to fill `cursor`.\n\nThis is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`BorrowedCursor`] rather than `[u8]` to\nallow use with uninitialized buffers.","links":{"Read::read_exact":"5:4417:60517","`BorrowedCursor`":"5:10895:4053"},"attrs":["#[unstable(feature = \"read_buf\", issue = \"78485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cursor",{"kind":"resolved_path","inner":{"name":"BorrowedCursor","id":"5:10895:4053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23106:1243":{"id":"1:23106:1243","crate_id":1,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([1, 0, MAX, MAX - 1]));\nassert_eq!(sat, max);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3382:225-0:312:1909":{"id":"a:1:3382:225-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3446:184":{"id":"1:3446:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:1038:56919":{"id":"5:1038:56919","crate_id":5,"name":"make_ascii_lowercase","span":null,"visibility":"default","docs":"Converts this type to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`to_ascii_lowercase`]: AsciiExt::to_ascii_lowercase","links":{"AsciiExt::to_ascii_lowercase":"5:1035:57582"},"attrs":["#[stable(feature = \"ascii\", since = \"1.9.0\")]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1042":{"id":"0:1042","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[653,0],"end":[722,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1045:2103","0:1046:2106","0:1047:1817","0:1048:2113","0:1050:2114","0:1052:2120","0:1053:2124"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:24:1645":{"id":"0:24:1645","crate_id":0,"name":"equivalent","span":{"filename":"src/equivalent.rs","begin":[15,4],"end":[15,42]},"visibility":"default","docs":"Compare self to `key` and return `true` if they are equal.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9532:3068-0:1269:2509":{"id":"a:1:9532:3068-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3216:128":{"id":"1:3216:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:1:3207-0:1202:2506":{"id":"b:1:3207-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:8676-0:1269:2509":{"id":"b:1:8676-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:10812:2411":{"id":"1:10812:2411","crate_id":1,"name":"write","span":null,"visibility":"default","docs":"Writes some data into this `Hasher`.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nlet data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n\nhasher.write(&data);\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n# Note to Implementers\n\nYou generally should not do length-prefixing as part of implementing\nthis method.  It's up to the [`Hash`] implementation to call\n[`Hasher::write_length_prefix`] before sequences that need it.","links":{"`Hash`":"1:10800:143","`Hasher::write_length_prefix`":"1:10825:3360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8716:121":{"id":"1:8716:121","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8717:1818","1:8718:3202","1:8719:1821","1:8720:3203","1:8724:2600","1:8727:3204"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3187:233":{"id":"1:3187:233","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3189:128","1:3190:1438"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1096:1990":{"id":"0:1096:1990","crate_id":0,"name":"Drain","span":{"filename":"src/set.rs","begin":[850,0],"end":[852,1]},"visibility":"public","docs":"A draining iterator over the items of a `IndexSet`.\n\nThis `struct` is created by the [`drain`] method on [`IndexSet`].\nSee its documentation for more.\n\n[`IndexSet`]: struct.IndexSet.html\n[`drain`]: struct.IndexSet.html#method.drain","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:3370:216-0:1096:1990","a:1:9532:3068-0:1096:1990","a:1:3382:225-0:1096:1990","a:1:3411:3178-0:1096:1990","a:1:9533:3067-0:1096:1990","b:1:4104-0:1096:1990","b:1:3218-0:1096:1990","b:1:3213-0:1096:1990","b:1:3203-0:1096:1990","b:1:3207-0:1096:1990","b:1:2865-0:1096:1990","b:1:2868-0:1096:1990","b:1:8676-0:1096:1990","0:1100","0:1103","0:1105","0:1108","0:1110"]}},"a:1:9532:3068-0:269:1673":{"id":"a:1:9532:3068-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:14070:151":{"id":"1:14070:151","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":"Which kind of future are we turning this into?","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[{"eq_predicate":{"lhs":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"1:14068:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Future","id":"1:14053:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"rhs":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"1:14068:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:14053:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:23076:55167":{"id":"1:23076:55167","crate_id":1,"name":"is_positive","span":null,"visibility":"default","docs":"Returns true for each positive lane and false if it is zero or negative.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3370:216-0:409:1654":{"id":"a:1:3370:216-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:964:1978":{"id":"0:964:1978","crate_id":0,"name":"truncate","span":{"filename":"src/set.rs","begin":[209,4],"end":[211,5]},"visibility":"public","docs":"Shortens the set, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater than the set's current length, this has no effect.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23079:55075":{"id":"1:23079:55075","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_sum(), 10);\n\n// SIMD integer addition is always wrapping\nlet v = i32x4::from_array([i32::MAX, 1, 0, 0]);\nassert_eq!(v.reduce_sum(), i32::MIN);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23107:1244":{"id":"1:23107:1244","crate_id":1,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\nassert_eq!(sat, Simd::splat(0));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23069:3433":{"id":"1:23069:3433","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:1:4104-0:1269:2509":{"id":"b:1:4104-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3630:385":{"id":"1:3630:385","crate_id":1,"name":"call_once","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3627:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"0:457:1972":{"id":"0:457:1972","crate_id":0,"name":"into_values","span":{"filename":"src/map.rs","begin":[259,4],"end":[263,5]},"visibility":"public","docs":"Return an owning iterator over the values of the map, in their order","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:999:2305":{"id":"0:999:2305","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[410,4],"end":[412,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing value, if any, that is\nequal to the given one, without altering its insertion order. Returns\nthe replaced value.\n\nComputes in **O(1)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2865-0:409:1654":{"id":"b:1:2865-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3665:56053":{"id":"1:3665:56053","crate_id":1,"name":"resume","span":null,"visibility":"default","docs":"Resumes the execution of this generator.\n\nThis function will resume execution of the generator or start execution\nif it hasn't already. This call will return back into the generator's\nlast suspension point, resuming execution from the latest `yield`. The\ngenerator will continue executing until it either yields or returns, at\nwhich point this function will return.\n\n# Return value\n\nThe `GeneratorState` enum returned from this function indicates what\nstate the generator is in upon returning. If the `Yielded` variant is\nreturned then the generator has reached a suspension point and a value\nhas been yielded out. Generators in this state are available for\nresumption at a later point.\n\nIf `Complete` is returned then the generator has completely finished\nwith the value provided. It is invalid for the generator to be resumed\nagain.\n\n# Panics\n\nThis function may panic if it is called after the `Complete` variant has\nbeen returned previously. While generator literals in the language are\nguaranteed to panic on resuming after `Complete`, this is not guaranteed\nfor all implementations of the `Generator` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:47888:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["arg",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"GeneratorState","id":"1:46087:2867","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"1:3661:2866","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"1:3661:2866","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1326":{"id":"0:1326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,0],"end":[109,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::equivalent::Equivalent","name":"Equivalent","id":"0:22:1653","glob":false}},"0:1255":{"id":"0:1255","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1218,0],"end":[1224,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1230:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23082:55078":{"id":"1:23082:55078","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_min(), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23068:3432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23039:55077":{"id":"1:23039:55077","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_max(), 2.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_max(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_max().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2865-0:927:1655":{"id":"b:1:2865-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2867:1836"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1046:2106":{"id":"0:1046:2106","crate_id":0,"name":"first","span":{"filename":"src/set.rs","begin":[666,4],"end":[668,5]},"visibility":"public","docs":"Get the first value\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1126,0],"end":[1128,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:700:1902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1422:1818","0:1423:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3213-0:1075:1900":{"id":"b:1:3213-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:580":{"id":"0:580","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[924,0],"end":[928,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:583:1813","0:1370:932","0:1371:1814","0:1372:502","0:1373:1815","0:1374:1817","0:1375:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:14542:55553":{"id":"1:14542:55553","crate_id":1,"name":"shrink","span":null,"visibility":"default","docs":"Attempts to shrink the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be smaller than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if shrinking otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2391:2799"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50711:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2391:2799","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50740:3583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::set::IndexSet","name":"IndexSet","id":"0:927:1655","glob":false}},"1:3501:358":{"id":"1:3501:358","crate_id":1,"name":"bitand","span":null,"visibility":"default","docs":"Performs the `&` operation.\n\n# Examples\n\n```\nassert_eq!(true & false, false);\nassert_eq!(true & true, true);\nassert_eq!(5u8 & 1u8, 1);\nassert_eq!(5u8 & 2u8, 0);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitAnd","id":"1:3498:2436","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23353:31848":{"id":"1:23353:31848","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23354:5286","1:23355:55069","1:23356:55070"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23346:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1150":{"id":"0:1150","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[953,0],"end":[963,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1153:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3382:225-0:1269:2509":{"id":"a:1:3382:225-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13723:4164":{"id":"1:13723:4164","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3679:1898","str::slice_mut_unchecked":"1:13724:56890","`str`":"5:15882:2661"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:23072:1244":{"id":"1:23072:1244","crate_id":1,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, -1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));\nassert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:459:1978":{"id":"0:459:1978","crate_id":0,"name":"truncate","span":{"filename":"src/map.rs","begin":[275,4],"end":[277,5]},"visibility":"public","docs":"Shortens the map, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater than the map's current length, this has no effect.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9533:3067-0:724:2087":{"id":"a:1:9533:3067-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6234:4063":{"id":"5:6234:4063","crate_id":5,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6235:60753","5:6236:7370","5:6237:60754","5:6238:60755","5:6239:60756","5:6240:60757"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:530:2097":{"id":"0:530:2097","crate_id":0,"name":"sorted_unstable_by","span":{"filename":"src/map.rs","begin":[756,4],"end":[765,5]},"visibility":"public","docs":"Sort the key-value pairs of the map and return a by-value iterator of\nthe key-value pairs with the result.\n\nThe sort is unstable.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:548:1961":{"id":"b:1:3218-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:4104-0:1075:1900":{"id":"b:1:4104-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1225:415":{"id":"0:1225:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1147,4],"end":[1152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14069:184":{"id":"1:14069:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The output that the future will produce on completion.","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1013:2532":{"id":"0:1013:2532","crate_id":0,"name":"shift_take","span":{"filename":"src/set.rs","begin":[519,4],"end":[524,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the\ngiven one.\n\nLike `Vec::remove`, the value is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `None` if `value` was not in the set.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:571:415":{"id":"0:571:415","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[900,4],"end":[904,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23111:55078":{"id":"1:23111:55078","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23104:3400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13797:56909":{"id":"1:13797:56909","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1278:1813":{"id":"0:1278:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1261,4],"end":[1261,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:503:2063":{"id":"0:503:2063","crate_id":0,"name":"shift_remove_entry","span":{"filename":"src/map.rs","begin":[616,4],"end":[624,5]},"visibility":"public","docs":"Remove and return the key-value pair equivalent to `key`.\n\nLike `Vec::remove`, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nReturn `None` if `key` is not in map.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14055:1024":{"id":"1:14055:1024","crate_id":1,"name":"poll","span":null,"visibility":"default","docs":"Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available.\n\n# Return value\n\nThis function returns:\n\n- [`Poll::Pending`] if the future is not ready yet\n- [`Poll::Ready(val)`] with the result `val` of this future if it\n  finished successfully.\n\nOnce a future has finished, clients should not `poll` it again.\n\nWhen a future is not ready yet, `poll` returns `Poll::Pending` and\nstores a clone of the [`Waker`] copied from the current [`Context`].\nThis [`Waker`] is then woken once the future can make progress.\nFor example, a future waiting for a socket to become\nreadable would call `.clone()` on the [`Waker`] and store it.\nWhen a signal arrives elsewhere indicating that the socket is readable,\n[`Waker::wake`] is called and the socket future's task is awoken.\nOnce a task has been woken up, it should attempt to `poll` the future\nagain, which may or may not produce a final value.\n\nNote that on multiple calls to `poll`, only the [`Waker`] from the\n[`Context`] passed to the most recent call should be scheduled to\nreceive a wakeup.\n\n# Runtime characteristics\n\nFutures alone are *inert*; they must be *actively* `poll`ed to make\nprogress, meaning that each time the current task is woken up, it should\nactively re-`poll` pending futures that it still has an interest in.\n\nThe `poll` function is not called repeatedly in a tight loop -- instead,\nit should only be called when the future indicates that it is ready to\nmake progress (by calling `wake()`). If you're familiar with the\n`poll(2)` or `select(2)` syscalls on Unix it's worth noting that futures\ntypically do *not* suffer the same problems of \"all wakeups must poll\nall events\"; they are more like `epoll(4)`.\n\nAn implementation of `poll` should strive to return quickly, and should\nnot block. Returning quickly prevents unnecessarily clogging up\nthreads or event loops. If it is known ahead of time that a call to\n`poll` may end up taking awhile, the work should be offloaded to a\nthread pool (or something similar) to ensure that `poll` can return\nquickly.\n\n# Panics\n\nOnce a future has completed (returned `Ready` from `poll`), calling its\n`poll` method again may panic, block forever, or cause other kinds of\nproblems; the `Future` trait places no requirements on the effects of\nsuch a call. However, as the `poll` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the future's state.\n\n[`Poll::Ready(val)`]: Poll::Ready\n[`Waker`]: crate::task::Waker\n[`Waker::wake`]: crate::task::Waker::wake","links":{"`Context`":"1:14355:3503","`Poll::Pending`":"1:50660:190","Poll::Ready":"1:50657:204","crate::task::Waker::wake":"1:14371:3745","crate::task::Waker":"1:14365:3748"},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:47888:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:14355:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:50655:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Future","id":"1:14053:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:526:2092":{"id":"0:526:2092","crate_id":0,"name":"sort_unstable_by","span":{"filename":"src/map.rs","begin":[742,4],"end":[749,5]},"visibility":"public","docs":"Sort the map's key-value pairs in place using the comparison function `cmp`, but\nmay not preserve the order of equal elements.\n\nThe comparison function receives two key and value pairs to compare (you\ncan sort by keys or values or their combination as needed).\n\nComputes in **O(n log n + c)** time where *n* is\nthe length of the map and *c* is the capacity. The sort is unstable.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["cmp",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8876:3207":{"id":"1:8876:3207","crate_id":1,"name":"next_chunk","span":null,"visibility":"default","docs":"Advances the iterator and returns an array containing the next `N` values.\n\nIf there are not enough elements to fill the array then `Err` is returned\ncontaining an iterator over the remaining elements.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_next_chunk)]\n\nlet mut iter = \"lorem\".chars();\n\nassert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\nassert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\nassert_eq!(iter.next_chunk::<4>().unwrap_err().as_slice(), &[]); // N is explicitly 4\n```\n\nSplit a string and get the first three items.\n\n```\n#![feature(iter_next_chunk)]\n\nlet quote = \"not all those who wander are lost\";\nlet [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\nassert_eq!(first, \"not\");\nassert_eq!(second, \"all\");\nassert_eq!(third, \"those\");\n```","links":{},"attrs":["#[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue =\n\"98326\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"len":"N"}}},{"type":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"1:4496:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2868-0:1202:2506":{"id":"b:1:2868-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:2870:54879"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1050:2114":{"id":"0:1050:2114","crate_id":0,"name":"shift_remove_index","span":{"filename":"src/set.rs","begin":[699,4],"end":[701,5]},"visibility":"public","docs":"Remove the value by index\n\nValid indices are *0 <= index < self.len()*\n\nLike `Vec::remove`, the value is removed by shifting all of the\nelements that follow it, preserving their relative order.\n**This perturbs the index of all of those elements!**\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23144:1293":{"id":"1:23144:1293","crate_id":1,"name":"simd_ne","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3411:3178-0:409:1654":{"id":"a:1:3411:3178-0:409:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexMap","id":"0:409:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13713:311":{"id":"1:13713:311","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"5:15893:2670","str::as_mut_ptr":"1:13714:56889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9532:3068-0:650:1973":{"id":"a:1:9532:3068-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9533:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9532:3068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8686:3206":{"id":"1:8686:3206","crate_id":1,"name":"extend_reserve","span":null,"visibility":"default","docs":"Reserves capacity in a collection for the given number of additional elements.\n\nThe default implementation does nothing.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1363:502":{"id":"0:1363:502","crate_id":0,"name":"count","span":{"filename":"src/map.rs","begin":[883,4],"end":[883,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:625:667":{"id":"0:625:667","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[988,4],"end":[990,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1110":{"id":"0:1110","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[872,0],"end":[877,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1096:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1112:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5069:60129":{"id":"5:5069:60129","crate_id":5,"name":"to_socket_addrs","span":null,"visibility":"default","docs":"Converts this object to an iterator of resolved [`SocketAddr`]s.\n\nThe returned iterator might not actually yield any values depending on the\noutcome of any resolution performed.\n\nNote that this function may block the current thread while resolution is\nperformed.","links":{"`SocketAddr`":"5:11134:4111"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToSocketAddrs","id":"5:5067:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:927:1655":{"id":"b:1:3203-0:927:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1465:1819":{"id":"0:1465:1819","crate_id":0,"name":"collect","span":{"filename":"src/set.rs","begin":[857,4],"end":[857,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:458:1975":{"id":"0:458:1975","crate_id":0,"name":"clear","span":{"filename":"src/map.rs","begin":[268,4],"end":[270,5]},"visibility":"public","docs":"Remove all key-value pairs in the map, while preserving its capacity.\n\nComputes in **O(n)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3449:2843":{"id":"1:3449:2843","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3451:184","1:3452:902"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3411:3178-0:548:1961":{"id":"a:1:3411:3178-0:548:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:548:1961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:485:2037":{"id":"0:485:2037","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[465,4],"end":[475,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:22:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8202:55248":{"id":"1:8202:55248","crate_id":1,"name":"backward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_checked(a, n) == Some(Step::backward(a, n))`\n* `Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))`\n  * Corollary: `Step::backward(a, 0) == a`\n* `Step::backward(a, n) <= a`\n* `Step::forward(Step::backward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6566:4106":{"id":"5:6566:4106","crate_id":5,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6567:7410","5:6568:60122"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3480:903":{"id":"1:3480:903","crate_id":1,"name":"mul_assign","span":null,"visibility":"default","docs":"Performs the `*=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx *= 2;\nassert_eq!(x, 24);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:975:2017":{"id":"0:975:2017","crate_id":0,"name":"insert_full","span":{"filename":"src/set.rs","begin":[299,4],"end":[310,5]},"visibility":"public","docs":"Insert the value into the set, and get its index.\n\nIf an equivalent item already exists in the set, it returns\nthe index of the existing item and `false`, leaving the\noriginal value in the set and without altering its insertion\norder. Otherwise, it inserts the new item and returns the index\nof the inserted item and `true`.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"bool"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9110:3241":{"id":"1:9110:3241","crate_id":1,"name":"partial_cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1.0, 2.0, 3.0, 4.0];\nlet ys = [1.0, 4.0, 9.0, 16.0];\n\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| x.partial_cmp(&y)),\n    Some(Ordering::Less)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (x * x).partial_cmp(&y)),\n    Some(Ordering::Equal)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (2.0 * x).partial_cmp(&y)),\n    Some(Ordering::Greater)\n);\n```","links":{"Ord#lexicographical-comparison":"1:2956:180","`Iterator`":"1:8873:159"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["partial_cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:37894:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13828:4102":{"id":"1:13828:4102","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5453:4102"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50060:3724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:4497:4029":{"id":"5:4497:4029","crate_id":5,"name":"read_until","span":null,"visibility":"default","docs":"Read all bytes into `buf` until the delimiter `byte` or EOF is reached.\n\nThis function will read bytes from the underlying stream until the\ndelimiter or EOF is found. Once found, all bytes up to, and including,\nthe delimiter (if found) will be appended to `buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nThis function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending the delimiter\nor EOF.\n\n# Errors\n\nThis function will ignore all instances of [`ErrorKind::Interrupted`] and\nwill otherwise return any errors returned by [`fill_buf`].\n\nIf an I/O error is encountered then all bytes read so far will be\npresent in `buf` and its length will have been adjusted appropriately.\n\n[`fill_buf`]: BufRead::fill_buf\n\n# Examples\n\n[`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\nthis example, we use [`Cursor`] to read all the bytes in a byte slice\nin hyphen delimited segments:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"lorem-ipsum\");\nlet mut buf = vec![];\n\n// cursor is at 'l'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 6);\nassert_eq!(buf, b\"lorem-\");\nbuf.clear();\n\n// cursor is at 'i'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 5);\nassert_eq!(buf, b\"ipsum\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, b\"\");\n```","links":{"`ErrorKind::Interrupted`":"5:10863:7479","`Cursor`":"5:10712:3994","BufRead::fill_buf":"5:4493:59395"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["byte",{"kind":"primitive","inner":"u8"}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:7898:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8224:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3663:243":{"id":"1:3663:243","crate_id":1,"name":"Yield","span":null,"visibility":"default","docs":"The type of value this generator yields.\n\nThis associated type corresponds to the `yield` expression and the\nvalues which are allowed to be returned each time a generator yields.\nFor example an iterator-as-a-generator would likely have this type as\n`T`, the type being iterated over.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:540:2106":{"id":"0:540:2106","crate_id":0,"name":"first","span":{"filename":"src/map.rs","begin":[797,4],"end":[799,5]},"visibility":"public","docs":"Get the first key-value pair\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:1035:57582":{"id":"5:1035:57582","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"default","docs":"Makes a copy of the value in its ASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`str::to_lowercase`].\n\n# Note\n\nThis method is deprecated in favor of the identically-named\ninherent methods on `u8`, `char`, `[u8]` and `str`.\n\n[`make_ascii_lowercase`]: AsciiExt::make_ascii_lowercase","links":{"`str::to_lowercase`":"4:6178:57578","AsciiExt::make_ascii_lowercase":"5:1038:56919"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.26.0","note":"use inherent methods instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsciiExt","id":"5:1031:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3842:2863":{"id":"1:3842:2863","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3844:54157"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:4104-0:134:1908":{"id":"b:1:4104-0:134:1908","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:134:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13817:56916":{"id":"1:13817:56916","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:15876:2656","self::pattern":"1:13328:3437"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4106:1452":{"id":"1:4106:1452","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46299:3476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6220:59624":{"id":"5:6220:59624","crate_id":5,"name":"exec","span":null,"visibility":"default","docs":"Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.\n\nOn success this function will not return, and otherwise it will return\nan error indicating why the exec (or another part of the setup of the\n`Command`) failed.\n\n`exec` not returning has the same implications as calling\n[`process::exit`] – no destructors on the current stack or any other\nthread’s stack will be run. Therefore, it is recommended to only call\n`exec` at a point where it is fine to not run any destructors. Note,\nthat the `execvp` syscall independently guarantees that all memory is\nfreed and all file descriptors with the `CLOEXEC` option (set by default\non all file descriptors opened by the standard library) are closed.\n\nThis function, unlike `spawn`, will **not** `fork` the process to create\na new child. Like spawn, however, the default behavior for the stdio\ndescriptors will be to inherited from the current process.\n\n# Notes\n\nThe process may be in a \"broken state\" if this function returns in\nerror. For example the working directory, environment variables, signal\nhandling settings, various user/group information, or aspects of stdio\nfile descriptors may have changed. If a \"transactional spawn\" is\nrequired to gracefully handle errors it is recommended to use the\ncross-platform `spawn` instead.","links":{"`process::exit`":"5:7592:4223"},"attrs":["#[stable(feature = \"process_exec2\", since = \"1.9.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Error","id":"5:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:419:415":{"id":"0:419:415","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[87,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14071:776":{"id":"1:14071:776","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":"Creates a future from a value.\n\n# Examples\n\nBasic usage:\n\n```no_run\nuse std::future::IntoFuture;\n\n# async fn foo() {\nlet v = async { \"meow\" };\nlet mut fut = v.into_future();\nassert_eq!(\"meow\", fut.await);\n# }\n```","links":{},"attrs":["#[stable(feature = \"into_future\", since = \"1.64.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"1:14068:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:4492:4030":{"id":"5:4492:4030","crate_id":5,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:4493:59395","5:4494:59396","5:4495:59398","5:4497:4029","5:4498:59397","5:4500:56895","5:4501:4589"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"5:4410:4010","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3203-0:1269:2509":{"id":"b:1:3203-0:1269:2509","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3370:216-0:312:1909":{"id":"a:1:3370:216-0:312:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:312:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3498:2436":{"id":"1:3498:2436","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3500:184","1:3501:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3213-0:1174:2496":{"id":"b:1:3213-0:1174:2496","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3183:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1174:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["1:3216:128","1:3217:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:8676-0:1075:1900":{"id":"b:1:8676-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:23736:55651":{"id":"1:23736:55651","crate_id":1,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the lane-wise minimum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13345:55007":{"id":"1:13345:55007","crate_id":1,"name":"strip_prefix_of","span":null,"visibility":"default","docs":"Removes the pattern from the front of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:9136:4132":{"id":"5:9136:4132","crate_id":5,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:9137:61056","5:9138:61057","5:9139:61058","5:9140:61059","5:9141:61060","5:9142:32238","5:9143:61055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"5:10409:3403","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:1:3411:3178-0:724:2087":{"id":"a:1:3411:3178-0:724:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:724:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13770:56900":{"id":"1:13770:56900","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:13328:3437","str::splitn":"1:13767:56899","prim@char":"5:15876:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49874:2996","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3594:117":{"id":"1:3594:117","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3595:227","1:3596:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1434:1814":{"id":"0:1434:1814","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[1195,4],"end":[1195,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1102:1813":{"id":"0:1102:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[855,4],"end":[855,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:2960:3201":{"id":"1:2960:3201","crate_id":1,"name":"clamp","span":null,"visibility":"default","docs":"Restrict a value to a certain interval.\n\nReturns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise this returns `self`.\n\n# Panics\n\nPanics if `min > max`.\n\n# Examples\n\n```\nassert!((-3).clamp(-2, 1) == -2);\nassert!(0.clamp(-2, 1) == 0);\nassert!(2.clamp(-2, 1) == 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"clamp\", since = \"1.50.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449:802":{"id":"0:449:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[203,4],"end":[205,5]},"visibility":"public","docs":"Return the number of key-value pairs in the map.\n\nComputes in **O(1)** time.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:2375":{"id":"0:284:2375","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map/core.rs","begin":[515,4],"end":[523,5]},"visibility":"public","docs":"Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\nreference to it. Otherwise a mutable reference to an already existent value is returned.\n\nComputes in **O(1)** time (amortized average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["call",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3627:133","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"V"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8680:777":{"id":"1:8680:777","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1263:415":{"id":"0:1263:415","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1227,4],"end":[1231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3183:234":{"id":"1:3183:234","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3185:128","1:3186:1439"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13776:56902":{"id":"1:13776:56902","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13338:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13353:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8675:777":{"id":"1:8675:777","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":"Creates an iterator from a value.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet v = [1, 2, 3];\nlet mut iter = v.into_iter();\n\nassert_eq!(Some(1), iter.next());\nassert_eq!(Some(2), iter.next());\nassert_eq!(Some(3), iter.next());\nassert_eq!(None, iter.next());\n```","links":{"crate::iter":"1:5752:788"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1024:2067":{"id":"0:1024:2067","crate_id":0,"name":"retain","span":{"filename":"src/set.rs","begin":[570,4],"end":[575,5]},"visibility":"public","docs":"Scan through each value in the set and keep those where the\nclosure `keep` returns `true`.\n\nThe elements are visited in order, and remaining elements keep their\norder.\n\nComputes in **O(n)** time (average).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["keep",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8967:3229":{"id":"1:8967:3229","crate_id":1,"name":"try_fold","span":null,"visibility":"default","docs":"An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value.\n\n`try_fold()` takes two arguments: an initial value, and a closure with\ntwo arguments: an 'accumulator', and an element. The closure either\nreturns successfully, with the value that the accumulator should have\nfor the next iteration, or it returns failure, with an error value that\nis propagated back to the caller immediately (short-circuiting).\n\nThe initial value is the value the accumulator will have on the first\ncall. If applying the closure succeeded against every element of the\niterator, `try_fold()` returns the final accumulator as success.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `try_fold()` on the internal parts\nfrom which this iterator is composed. If multiple calls are needed,\nthe `?` operator may be convenient for chaining the accumulator value\nalong, but beware any invariants that need to be upheld before those\nearly returns. This is a `&mut self` method, so iteration needs to be\nresumable after hitting an error here.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the checked sum of all of the elements of the array\nlet sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n\nassert_eq!(sum, Some(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [10, 20, 30, 100, 40, 50];\nlet mut it = a.iter();\n\n// This sum overflows when adding the 100 element\nlet sum = it.try_fold(0i8, |acc, &x| acc.checked_add(x));\nassert_eq!(sum, None);\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.len(), 2);\nassert_eq!(it.next(), Some(&40));\n```\n\nWhile you cannot `break` from a closure, the [`ControlFlow`] type allows\na similar idea:\n\n```\nuse std::ops::ControlFlow;\n\nlet triangular = (1..30).try_fold(0_i8, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Break(120));\n\nlet triangular = (1..30).try_fold(0_u64, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Continue(435));\n```","links":{"`ControlFlow`":"1:46060:2870"},"attrs":["#[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3831:230","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6505:229":{"id":"4:6505:229","crate_id":4,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6506:1418"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23038:55076":{"id":"1:23038:55076","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Reducing multiply.  Returns the product of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 4.]);\nassert_eq!(v.reduce_product(), 12.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:731:1813":{"id":"0:731:1813","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[1157,4],"end":[1157,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:1308":{"id":"0:1308","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1337,0],"end":[1352,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S1"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3254:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S2"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:3503:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S2"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IndexSet","id":"0:927:1655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S1"}}],"bindings":[]}}}}}},"items":["0:1312:184","0:1313:360"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1208":{"id":"0:1208","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1103,0],"end":[1122,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1212:1813","0:1213:932","0:1214:1814"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:4104-0:650:1973":{"id":"b:1:4104-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3375:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4102:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4106:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13733:56892":{"id":"1:13733:56892","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50016:3719","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:1946":{"id":"0:446:1946","crate_id":0,"name":"with_hasher","span":{"filename":"src/map.rs","begin":[182,4],"end":[187,5]},"visibility":"public","docs":"Create a new map with `hash_builder`.\n\nThis function is `const`, so it\ncan be called in `static` contexts.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3621:131":{"id":"1:3621:131","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3623:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1047:1817":{"id":"0:1047:1817","crate_id":0,"name":"last","span":{"filename":"src/set.rs","begin":[673,4],"end":[675,5]},"visibility":"public","docs":"Get the last value\n\nComputes in **O(1)** time.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3411:3178-0:598:1966":{"id":"a:1:3411:3178-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3411:3178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9123:801":{"id":"1:9123:801","crate_id":1,"name":"le","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().le([1].iter()), true);\nassert_eq!([1].iter().le([1, 2].iter()), true);\nassert_eq!([1, 2].iter().le([1].iter()), false);\nassert_eq!([1, 2].iter().le([1, 2].iter()), true);\n```","links":{"`Iterator`":"1:8873:159","Ord#lexicographical-comparison":"1:2956:180"},"attrs":["#[stable(feature = \"iter_order\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2969:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:7595:4225":{"id":"5:7595:4225","crate_id":5,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:7596:59580"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1123:1813":{"id":"0:1123:1813","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[889,4],"end":[889,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[940,0],"end":[940,46]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9153:1897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:576:1964","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10816:3351":{"id":"1:10816:3351","crate_id":1,"name":"write_u64","span":null,"visibility":"default","docs":"Writes a single `u64` into this hasher.","links":{},"attrs":["#[stable(feature = \"hasher_write\", since = \"1.3.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1420:1819":{"id":"0:1420:1819","crate_id":0,"name":"collect","span":{"filename":"src/map.rs","begin":[1123,4],"end":[1123,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"C"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8668:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:8873:159","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3370:216-0:1059:2087":{"id":"a:1:3370:216-0:1059:2087","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3370:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1059:2087","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1050,0],"end":[1054,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:664:802"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:716:802":{"id":"0:716:802","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[1131,4],"end":[1133,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:621:415":{"id":"0:621:415","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[980,4],"end":[984,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10514:55384":{"id":"1:10514:55384","crate_id":1,"name":"write_char","span":null,"visibility":"default","docs":"Writes a [`char`] into this writer, returning whether the write succeeded.\n\nA single [`char`] may be encoded as more than one byte.\nThis method can only succeed if the entire byte sequence was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    f.write_char(c)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, 'a').unwrap();\nwriter(&mut buf, 'b').unwrap();\nassert_eq!(&buf, \"ab\");\n```","links":{"`Error`":"1:48834:128","`char`":"5:15876:2656"},"attrs":["#[stable(feature = \"fmt_write_char\", since = \"1.1.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"primitive","inner":"char"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47896:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:48834:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3218-0:598:1966":{"id":"b:1:3218-0:598:1966","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3187:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3221:128","1:3222:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10571:3263":{"id":"1:10571:3263","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10572:667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23733:1287":{"id":"1:23733:1287","crate_id":1,"name":"simd_ge","span":null,"visibility":"default","docs":"Test if each lane is greater than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23141:3517","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9035:3235":{"id":"1:9035:3235","crate_id":1,"name":"rposition","span":null,"visibility":"default","docs":"Searches for an element in an iterator from the right, returning its\nindex.\n\n`rposition()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting from the end,\nand if one of them returns `true`, then `rposition()` returns\n[`Some(index)`]. If all of them return `false`, it returns [`None`].\n\n`rposition()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rposition(|&x| x == 3), Some(2));\n\nassert_eq!(a.iter().rposition(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rposition(|&x| x == 2), Some(1));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&1));\n```","links":{"Some":"1:47775:220","`None`":"1:47773:177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3624:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8741:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:862:1650":{"id":"0:862:1650","crate_id":0,"name":"set","span":{"filename":"src/set.rs","begin":[1,0],"end":[1912,1]},"visibility":"public","docs":"A hash set implemented using `IndexMap`","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:927:1655","0:1059:2087","0:1075:1900","0:1096:1990","0:1174:2496","0:1202:2506","0:1230:2502","0:1269:2509"],"is_stripped":false}},"5:6643:60735":{"id":"5:6643:60735","crate_id":5,"name":"into_raw_fd","span":null,"visibility":"default","docs":"Consumes this object, returning the raw underlying file descriptor.\n\nThis function is typically used to **transfer ownership** of the underlying\nfile descriptor to the caller. When used in this way, callers are then the unique\nowners of the file descriptor and must close it once it's no longer needed.\n\nHowever, transferring ownership is not strictly required. Use a\n[`Into<OwnedFd>::into`] implementation for an API which strictly\ntransfers ownership.\n\n# Example\n\n```no_run\nuse std::fs::File;\n# use std::io;\n#[cfg(unix)]\nuse std::os::unix::io::{IntoRawFd, RawFd};\n#[cfg(target_os = \"wasi\")]\nuse std::os::wasi::io::{IntoRawFd, RawFd};\n\nlet f = File::open(\"foo.txt\")?;\n#[cfg(any(unix, target_os = \"wasi\"))]\nlet raw_fd: RawFd = f.into_raw_fd();\n# Ok::<(), io::Error>(())\n```","links":{"`Into<OwnedFd>::into`":"1:3179:2278"},"attrs":["#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:1075:1900":{"id":"b:1:3203-0:1075:1900","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1075:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3456:184":{"id":"1:3456:184","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `/` operator.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1301:667":{"id":"0:1301:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1316,4],"end":[1318,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2925:125":{"id":"1:2925:125","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2920:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1298":{"id":"0:1298","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1311,0],"end":[1319,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1269:2509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1301:667"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13725:2357":{"id":"1:13725:2357","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:13726:56891"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:8676-0:650:1973":{"id":"b:1:8676-0:650:1973","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:650:1973","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8678:1813","1:8679:2087","1:8680:777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:23027:55645":{"id":"1:23027:55645","crate_id":1,"name":"is_nan","span":null,"visibility":"default","docs":"Returns true for each lane if its value is `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23015:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3207-0:269:1673":{"id":"b:1:3207-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3209:688"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3382:225-0:1202:2506":{"id":"a:1:3382:225-0:1202:2506","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3382:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13706:56885":{"id":"1:13706:56885","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23023:55641":{"id":"1:23023:55641","crate_id":1,"name":"to_degrees","span":null,"visibility":"default","docs":"Converts each lane from radians to degrees.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3203-0:269:1673":{"id":"b:1:3203-0:269:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3180:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3177:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:269:1673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3206:2278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3488:1115":{"id":"1:3488:1115","crate_id":1,"name":"rem_assign","span":null,"visibility":"default","docs":"Performs the `%=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx %= 10;\nassert_eq!(x, 2);\n```","links":{},"attrs":["#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1112:667":{"id":"0:1112:667","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[873,4],"end":[876,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10511:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:603":{"id":"0:603","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[960,0],"end":[964,1]},"visibility":{"restricted":{"parent":"0:81:851","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["skip","is_sorted","array_chunks","reduce","max","last","collect_into","flat_map","min","filter_map","gt","next_chunk","lt","position","for_each","rev","sum","cmp","try_reduce","max_by","partition","eq","flatten","zip","peekable","is_sorted_by","advance_by","enumerate","ge","count","partial_cmp","any","is_sorted_by_key","fold","product","find_map","max_by_key","all","collect","fuse","partition_in_place","skip_while","ne","step_by","le","cloned","__iterator_get_unchecked","cmp_by","try_find","is_partitioned","size_hint","map","take_while","inspect","intersperse","chain","copied","partial_cmp_by","rposition","try_fold","min_by","nth","by_ref","map_while","cycle","intersperse_with","find","eq_by","unzip","try_for_each","min_by_key","try_collect","take","scan","filter"],"trait":{"name":"Iterator","id":"1:8873:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:598:1966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:607:1813","0:1379:932","0:1380:1814","0:1381:502","0:1382:1815","0:1383:1817","0:1384:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1215":{"id":"0:1215","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1124,0],"end":[1137,1]},"visibility":{"restricted":{"parent":"0:862:1650","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2925:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10845:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rfold","nth_back","advance_back_by","rfind","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8716:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1202:2506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:1218:1818"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8879:1814":{"id":"1:8879:1814","crate_id":1,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an iterator implementation yields the declared\nnumber of elements. A buggy iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet mut iter = a.iter();\n\nassert_eq!((3, Some(3)), iter.size_hint());\nlet _ = iter.next();\nassert_eq!((2, Some(2)), iter.size_hint());\n```\n\nA more complex example:\n\n```\n// The even numbers in the range of zero to nine.\nlet iter = (0..10).filter(|x| x % 2 == 0);\n\n// We might iterate from zero to ten times. Knowing that it's five\n// exactly wouldn't be possible without executing filter().\nassert_eq!((0, Some(10)), iter.size_hint());\n\n// Let's add five more numbers with chain()\nlet iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n\n// now both bounds are increased by five\nassert_eq!((5, Some(15)), iter.size_hint());\n```\n\nReturning `None` for an upper bound:\n\n```\n// an infinite iterator has no upper bound\n// and the maximum possible lower bound\nlet iter = 0..;\n\nassert_eq!((usize::MAX, None), iter.size_hint());\n```","links":{"Option":"1:47771:179","None":"1:47773:177","usize":"5:15899:2676","`None`":"1:47773:177","`usize`":"5:15899:2676"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47771:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:15246:4331":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:50069:3725":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:10558:7924":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:12585:5705":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:3491:2851":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:37915:2905":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4012:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:13472:5980":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:5289:4722":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:853:109":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:12482:5687":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:7942:5230":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:49974:3717":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:5566:4086":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:51940:3544":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1740:6740":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:10127:4999":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:50491:3738":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6129:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6474:7306":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:4198:6151":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:46935:7662":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:15897:2674":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"1:10511:208":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"12:895:4546":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:1088:4279":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3525:2854":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:10586:7926":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:23353:31848":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:6533:4926":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:6099:4770":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:6873:3064":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1673:1902":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:10775:7929":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:10504:35391":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5005:3646":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11550:3015":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:15876:2656":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"18:10266:4997":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:12093:5612":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"5:7775:5190":{"crate_id":5,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"18:13917:6118":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:10913:7936":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:12512:5692":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4362:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:13557:6003":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:50524:3804":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"18:12431:5681":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:12099:4172":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"5:12060:165":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:8321:2087":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:23117:3403":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:13069:3712":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:3848:2865":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:9259:5384":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:7063:4790":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1387:1902":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:48325:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:5784:4638":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:9064:46969":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4383:4016":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"5:15163:4117":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:2754:4647":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6937:7429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"7:38:44642":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"21:1883:1900":{"crate_id":21,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:13573:6006":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:48804:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"18:10340:4990":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:3470:2846":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:48531:3264":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1447:1970":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"9:900:6503":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:10956:2435":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"5:11307:4070":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:85:44649":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:11433:5479":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:10641:4094":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:7100:4793":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:3494:5309":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"4:3104:3897":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:4743:6166":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10850:2832":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:161:39781":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:10296:5209":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:12607:5716":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:5159:3649":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:11121:4392":{"crate_id":5,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:5853:4333":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:4467:3258":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"12:952:3041":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"19:152:8172":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:11754:5545":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"5:4178:4046":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:510:7898":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"5:6642:4072":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"19:739:7894":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:48892:3262":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:5274:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1576:6635":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:13602:6013":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:50337:3454":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:9551:5205":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:9654:3438":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:2481:4277":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"16:230:4561":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:3896:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:3265:4905":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:13347:3436":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10806:143":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"18:10422:7917":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:0:1679":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:764:1902":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5378:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:10543:7993":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4005:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:6949:4943":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:8501:3905":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:7727:4268":{"crate_id":5,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:3831:230":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:12237:5632":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:3838:1902":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:6173:4773":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:6643:4932":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:527:6544":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:0:495":{"crate_id":1,"path":["core"],"kind":"module"},"18:9636:7902":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:11956:5587":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"6:3877:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:466:2897":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"15:56:5480":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:14372:4107":{"crate_id":5,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:2059:2496":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1397:2087":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10565:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:11664:3000":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"19:829:5087":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10814:5027":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6967:7435":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:6518:4738":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:7208:4799":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:121:8166":{"crate_id":21,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"4:1740:1973":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4428:4025":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:14453:4026":{"crate_id":5,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:542:4658":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:6908:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:11234:4966":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:586:6581":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5186:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:5257:5384":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:51816:3567":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:12406:5677":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:49084:2834":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:962:3040":{"crate_id":21,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:3686:6147":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:1991:146":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:48789:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:3108:3403":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:24754:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:6671:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:4689:6164":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:13281:5928":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:53544:3549":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:51616:3543":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:13196:5911":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1551:6621":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:12674:5723":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:11706:2997":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3503:2437":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:10390:4995":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:49738:3705":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:724:2087":{"crate_id":0,"path":["indexmap","map","IntoIter"],"kind":"struct"},"17:5348:4612":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:15888:2665":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"1:8681:2212":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:1418:1966":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:47803:1813":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"9:749:4420":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:3825:1900":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6057:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:24034:3403":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:10579:192":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:10636:4282":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4160:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"15:11:7971":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"21:786:1902":{"crate_id":21,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:2284:3917":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:5941:4767":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:10527:35915":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"16:248:4562":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:8725:4372":{"crate_id":5,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:48795:134":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:14060:4044":{"crate_id":5,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:0:284":{"crate_id":4,"path":["alloc"],"kind":"module"},"5:10704:4038":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:2259:61155":{"crate_id":21,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"18:10988:7942":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:1147:1909":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:974:3041":{"crate_id":21,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"19:885:5091":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:11671:5528":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:4351:2926":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"12:399:2895":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3607:2859":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:11968:5589":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:12157:5621":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6007:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:5948:4893":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:46917:2948":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:3366:4911":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:11514:5496":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:24135:3758":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3683:1899":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10512:3258":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:7200:4741":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:50347:3455":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:15895:2672":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"17:6310:4776":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:3498:2436":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:46821:8023":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:4496:2087":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:7079:4791":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:9706:7903":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:3770:6149":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:12469:5686":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:13755:6074":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3836:138":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:50006:3718":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:6468:4780":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:14054:4046":{"crate_id":5,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:15317:59526":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"5:6738:4068":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6856:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:49956:3716":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:13267:3506":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:77:2800":{"crate_id":21,"path":["hashbrown","raw","inner","alloc","inner","Allocator"],"kind":"trait"},"1:3519:2853":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2920:186":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"19:896:5092":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:1183:4548":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:7055:7987":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:1311:5072":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:10787:4234":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"18:10364:4988":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:11169:4113":{"crate_id":5,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:114:8166":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:9240:4976":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"4:4516:1900":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:24406:9468":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:13404:5958":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:88:39714":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:23928:2992":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6097:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:1020:4485":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5260:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:13369:5952":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11692:3001":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:14452:142":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:14924:4154":{"crate_id":5,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:7967:5235":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:9746:7904":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:52418:3568":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:13754:8788":{"crate_id":5,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:11922:5577":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:13873:6103":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:8556:2805":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:1072:1900":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:13358:3441":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:5530:4625":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:362:2893":{"crate_id":21,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"1:3621:131":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"21:865:1961":{"crate_id":21,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11473:3014":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:880:2805":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:2152:2509":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:6899:55001":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"18:11068:4972":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"18:2543:5046":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:4317:5217":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:50060:3724":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:955:3039":{"crate_id":21,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:10048:7912":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:4840:6169":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:469:8687":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:5998:4742":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:3948:3994":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:3972:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:0:438":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:3661:2866":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:9883:61162":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:5868:5217":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:48834:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:5154:4323":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:53374:3546":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:51910:3540":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:6782:3942":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:1055:3920":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:984:3919":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:10571:5034":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:13515:5994":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11192:3403":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:11130:5451":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"18:13331:5945":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:11263:4345":{"crate_id":5,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4434:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:4628:6162":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"19:782:5292":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5216:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:10979:2998":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"5:1374:1900":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:10271:5207":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:32606:55109":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"20:0:1004":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:32658:55112":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"4:3554:2805":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:7121:4795":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:917:4546":{"crate_id":21,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:3801:208":{"crate_id":5,"path":["std","io","error","Result"],"kind":"typedef"},"17:7155:4798":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:13817:6095":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10562:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:13549:6002":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:51594:3539":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:46717:3644":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:5176:6174":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"9:927:44746":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"12:2036:2087":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:53834:7747":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:46578:3640":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:2956:180":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:2792:4649":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"21:809:1964":{"crate_id":21,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:4903:6171":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:8473:7545":{"crate_id":4,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:3466:2844":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:1760:3955":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:49752:2998":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"9:41:4468":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:6159:4726":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:52342:3561":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5405:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5541:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"0:927:1655":{"crate_id":0,"path":["indexmap","set","IndexSet"],"kind":"struct"},"1:24298:3630":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9534:3066":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:7637:4800":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2188:2883":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:4975:6173":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:4316:6153":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:5745:4637":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:7449:4732":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:12065:4364":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:9958:61167":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8368:2803":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:13975:6128":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:12573:5703":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:10801:5026":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:4256:4044":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:981:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:4140:4310":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:0:2707":{"crate_id":11,"path":["adler"],"kind":"module"},"6:1526:6611":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:902:2805":{"crate_id":21,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"18:13293:5931":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:618:6597":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8126:3520":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:13338:3438":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:3987:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:10598:7927":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:3284:4036":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8668:137":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4485:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:13167:5903":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:10688:119":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:15886:2663":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:7309:4727":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6688:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3533:2856":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:353:2893":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:7086:7987":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:12700:5725":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:5649:4630":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:49620:3010":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3171:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:49115:7676":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:11243:4401":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:13887:6110":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:4588:3982":{"crate_id":4,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:3379:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:5869:192":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:14794:5215":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11640:5518":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:3051:4956":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:6093:4343":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:14953:7530":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:6482:4928":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:11256:5456":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:11314:5045":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:3462:2509":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:10028:7910":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:1169:1909":{"crate_id":21,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4402:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:5701:4397":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:0:2709":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:3454:2842":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:6190:4774":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4153:3478":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:8635:2934":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1610:3044":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:51409:3550":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:9420:8786":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:6931:4942":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:5917:3898":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"18:13595:6011":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:14640:59532":{"crate_id":5,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:11945:4142":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:46677:3723":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3177:150":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:10925:7937":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:9033:46968":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46238:202":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:5460:4621":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:7247:4757":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:13029:5854":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:6717:4786":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:53678:7739":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:10291:4985":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:432:2896":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:13247:5925":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:7264:197":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:1639:5184":{"crate_id":21,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1108:7977":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:10622:5402":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:4772:5221":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:6286:4559":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"19:0:2712":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:50360:3792":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:11985:5592":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:4351:6154":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:46684:3883":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"18:9786:7905":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:13565:6005":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:47888:191":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"21:2104:1673":{"crate_id":21,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:8490:4353":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:6858:4016":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"19:766:5303":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:50026:3720":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:48241:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:9427:5204":{"crate_id":5,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:4081:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:7754:4803":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:13660:6055":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:11442:4189":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"4:1719:1970":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2912:422":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:3542:2858":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:1152:5217":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:9920:7907":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:9716:61164":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:14422:4284":{"crate_id":5,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"12:2045:2805":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:3381:5187":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"12:869:1990":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:51363:3570":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:607:6592":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:13353:3440":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:5578:4089":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:10895:4053":{"crate_id":5,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:2905:4896":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:1684:2087":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4509:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"9:722:4419":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:48856:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:14905:7529":{"crate_id":5,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:52008:3532":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:24853:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:12007:4148":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:7238:4743":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:5522:4084":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4020:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:11907:5573":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6214:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:14410:7526":{"crate_id":5,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:51564:3551":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:1001:3043":{"crate_id":21,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:9387:5203":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:5443:4620":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:3395:1900":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:7074:1527":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:50169:3445":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3060:4292":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:4168:3482":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:32412:3819":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:49770:3002":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:5498:4623":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:11402:4187":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"17:7415:4744":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5301:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:11134:4111":{"crate_id":5,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"5:11847:4220":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:49068:2835":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:973:4269":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"17:3029:4899":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:10658:4095":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"6:4135:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8873:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:5067:4109":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:48822:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:51385:3558":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:15900:2677":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:15332:7534":{"crate_id":5,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:50326:3453":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:10198:7915":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:9183:5031":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8021:2945":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:11547:5502":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"5:7132:189":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"4:2005:2805":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"21:478:2897":{"crate_id":21,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"1:2884:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8413:3946":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:1887:2087":{"crate_id":21,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4180:4047":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:24038:3382":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:39111:3514":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:13073:5886":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:14623:7993":{"crate_id":5,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:574:144":{"crate_id":21,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:49076:7672":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5154:3648":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12191:3012":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:8448:2921":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:7868:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"5:4258:4045":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:12222:5629":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:46841:2936":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:46967:2962":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10522:135":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:2396:3959":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:1784:5184":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3405:4032":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4296:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:10253:4986":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:9561:4973":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"17:6075:4723":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:23104:3400":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6569:4066":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:3340:4646":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1567:6629":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:5959:4654":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3860:3505":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:3933:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:2274:2803":{"crate_id":21,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:1729:1964":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:8849:4964":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"17:5639:4628":{"crate_id":17,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:2502:3502":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:10093:5066":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:7760:2811":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:8856:4205":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:4411:6156":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:11875:4222":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"15:216:45319":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:165:1660":{"crate_id":21,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"1:50016:3719":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:13774:6079":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:11257:4325":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:23198:3381":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1600:6652":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:1203:4549":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:6472:7304":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:6766:3930":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7592:4223":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"5:1405:1961":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:799:2087":{"crate_id":21,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:3110:56681":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:321:208":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:1533:1908":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:15847:35393":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:50044:3722":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:13776:4219":{"crate_id":5,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:13352:5949":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:539:6549":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:8439:4350":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3398:3195":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:23194:3403":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:32598:2886":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"5:5723:4399":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:49315:3892":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:9004:46967":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:13404:3444":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:22800:2905":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:15877:2657":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:51962:3547":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:11238:4398":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10033:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:4573:6160":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1721:6734":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:14387:7519":{"crate_id":5,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:11281:4105":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:2269:1908":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4218:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"19:811:5085":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5229:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"19:837:3436":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:15892:2669":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"18:10318:4999":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:10907:2918":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:46566:3639":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:844:228":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:12527:5696":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:9326:5044":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:12455:5684":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:9539:4965":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"5:11098:4391":{"crate_id":5,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:521:6541":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4416:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:15874:2654":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"21:1225:4549":{"crate_id":21,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"19:820:5086":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:13009:3708":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:5434:4129":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2044:4016":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:13600:4227":{"crate_id":5,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:48031:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5752:788":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:1256:8178":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:6604:4784":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6243:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:11905:7516":{"crate_id":5,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:6902:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:2654:182":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:13495:5988":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:5698:4635":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:53667:7738":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:7792:4760":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11201:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:12921:5764":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:3576:5313":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:47256:2922":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:5285:3280":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:997:4099":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:11405:1902":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:51653:3528":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:51515:3563":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:10788:7931":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4102:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:10966:2959":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"12:2072:2509":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:24493:3775":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5331:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:48073:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:4599:6161":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:8603:164":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:6639:2950":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:14103:55162":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:7463:4216":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"18:9466:5391":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:53582:3569":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:6331:4558":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:6569:1990":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"6:5488:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:4146:4312":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:1910:2496":{"crate_id":21,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:46698:3885":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"21:2242:5285":{"crate_id":21,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"1:32558:2797":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:14057:4048":{"crate_id":5,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:878:1966":{"crate_id":21,"path":["hashbrown","map","Values"],"kind":"struct"},"18:11822:5565":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:11142:5452":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:2253:5286":{"crate_id":21,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"17:3129:4909":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:14855:4220":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:2733:4648":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:46926:2949":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:49710:3508":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:10115:5068":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:56575:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:11494:1900":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"5:14772:5213":{"crate_id":5,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:12250:5633":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:9260:60121":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10573:3264":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"19:744:61175":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:23015:3516":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:12026:5596":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:10082:5065":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:13257:5926":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:3044:4287":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:10937:7938":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:47068:2960":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:14355:3503":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:56562:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:7702:4733":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:4008:7901":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6229:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:8639:7988":{"crate_id":5,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:50655:193":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:13539:5999":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:11887:59583":{"crate_id":5,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:859:4248":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:7323:4745":{"crate_id":17,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:696:4243":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:6141:4772":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:9156:2932":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:9873:7906":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"19:661:5097":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:49820:3710":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:32592:2798":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:51864:3552":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:9361:5388":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"19:729:61172":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:1606:6654":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:681:5459":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"13:121:45285":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:14416:204":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"9:692:4418":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:51764:3560":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:9131:46971":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10575:3265":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:10431:4252":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"5:1031:4100":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5567:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:3993:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:4492:4030":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"6:4386:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:545:6552":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"19:645:5096":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:6035:4762":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4088:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:47047:2943":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:11168:5453":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"1:47964:181":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:8932:3060":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:12716:5727":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8248:1990":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:13377:5954":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:1260:4550":{"crate_id":21,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"12:2280:1909":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3478:2848":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:46292:2862":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:10923:4026":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:24820:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"18:10211:7916":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:5516:4083":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:787:1964":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:50536:3805":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:6470:7302":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:52032:3533":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"12:183:2303":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:3486:2849":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:8224:2801":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:46174:198":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:11579:5508":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:24505:3774":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:11959:4145":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:23141:3517":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:7090:4792":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:13961:6125":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:3920:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:12687:5724":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:47078:2961":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:1238:4550":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"3:0:2700":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:49902:3713":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8196:2917":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:5085:3277":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:51634:7685":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:47058:2959":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"19:720:5294":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:46661:3882":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:1146:8782":{"crate_id":5,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:6130:4771":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:8274:205":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:11282:46975":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:21:679":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:12731:5731":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"12:2419:2803":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7595:4225":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"18:13899:6112":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:51533:7684":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:12170:5622":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:7055:3895":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"12:928:1970":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"0:0:1680":{"crate_id":0,"path":["indexmap"],"kind":"module"},"1:46134:199":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"19:651:5093":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:11032:4116":{"crate_id":5,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:13406:8177":{"crate_id":5,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10569:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:52838:3554":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:11829:4218":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5982:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:11769:5551":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:53693:7740":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:53772:7745":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10577:3266":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:11883:7515":{"crate_id":5,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"4:1547:3044":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:971:3042":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:53658:7737":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:4672:5220":{"crate_id":4,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:593:6584":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"18:11701:5532":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"17:6060:4763":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"12:2253:1673":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:1626:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:11085:4974":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:5238:45390":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:13233:5920":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3109:3373":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10571:3263":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:601:6589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"9:234:4443":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:11194:4327":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"18:13840:6096":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:12302:5641":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:10166:5399":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3378:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:14961:4229":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:7214:5230":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:24985:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"13:233:6451":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:1452:1964":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:50647:7681":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:14879:60784":{"crate_id":5,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:9579:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"5:15370:4570":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"9:1056:4478":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6954:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8741:2131":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6931:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:0:1352":{"crate_id":5,"path":["std"],"kind":"module"},"18:13215:5912":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4379:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:7721:4735":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4287:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"19:849:5088":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:46691:3884":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"0:862:1650":{"crate_id":0,"path":["indexmap","set"],"kind":"module"},"5:15308:7533":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"19:754:61174":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22845:55821":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2862:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:2861:4895":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5439:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:50711:160":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4526:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:8427:3783":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:25117:3761":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:50495:3732":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:9517:3705":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:607:7899":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12768:2989":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"12:379:2894":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:22847:55817":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:13852:4218":{"crate_id":5,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:53498:3531":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:49728:3704":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1588:6644":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:2266:5219":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:46866:2435":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6080:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"21:2120:1908":{"crate_id":21,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"0:1075:1900":{"crate_id":0,"path":["indexmap","set","Iter"],"kind":"struct"},"5:8188:4187":{"crate_id":5,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"5:15875:2655":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"1:47989:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4493:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:12324:5244":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"0:81:851":{"crate_id":0,"path":["indexmap","map"],"kind":"module"},"5:15894:2671":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"9:686:4416":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:24366:3626":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:0:2711":{"crate_id":18,"path":["object"],"kind":"module"},"5:10648:4284":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"18:11002:7943":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:23346:3403":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4277:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:23734:31867":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:49607:2936":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:28296:3419":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6896:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:3981:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:10545:7921":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:6656:4933":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"0:598:1966":{"crate_id":0,"path":["indexmap","map","Values"],"kind":"struct"},"6:1680:6710":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4061:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"19:136:8171":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:10547:3966":{"crate_id":5,"path":["std","error","private","Internal"],"kind":"struct"},"5:15882:2661":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"4:3105:56683":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:11457:5480":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:10104:5067":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:6691:4785":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:843:1961":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:9206:46972":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12196:5625":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:571:6572":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:388:2894":{"crate_id":21,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"5:10210:5459":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1558:6624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5705:14753":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4332:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"19:790:5083":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:7827:4269":{"crate_id":5,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:56614:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2213:1061":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:3627:133":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6638:4069":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:11354:5028":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"5:8089:4269":{"crate_id":5,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"21:1205:4548":{"crate_id":21,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:5495:4016":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:11474:5485":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:24472:7577":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:52500:3553":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:7898:240":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:46748:3783":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2917:4024":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"5:2911:4283":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"1:52264:3573":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:47812:1900":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:10800:143":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"12:1162:4547":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"19:668:5098":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:15046:4160":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:24389:7565":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4270:4344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"19:678:143":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:891:1990":{"crate_id":21,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:3960:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2119:1900":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:1923:2509":{"crate_id":21,"path":["hashbrown","set","Union"],"kind":"struct"},"5:11500:4192":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"5:15058:4165":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3513:2852":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:626:6602":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:15842:8705":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:12646:5719":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:3221:4903":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:49696:3788":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:13180:5908":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:7158:2963":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:25051:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:5516:4624":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:46326:3513":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:3459:4039":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:8239:3921":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:52130:7690":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5726:3580":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:8902:46965":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"12:472:8167":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"0:1230:2502":{"crate_id":0,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"4:8456:3948":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:5041:3647":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:11797:5561":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:6012:4721":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:5616:3930":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:9519:4320":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4516:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:5217:4652":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:533:6547":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"4:7558:5217":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:6407:4778":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8672:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:10455:5048":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:12746:5732":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"19:774:5292":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:51718:3572":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:10851:5437":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:22866:55819":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"15:194:45313":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:2510:4278":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"5:15889:2666":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"19:857:5089":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:6277:4775":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:50035:3721":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4440:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6250:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11623:3003":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:9948:7908":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:11978:4146":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:11991:4147":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3388:2796":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:50499:3733":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:50728:3585":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:50698:3747":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:11484:4190":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"15:189:7971":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:6746:69":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46949:2951":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:5566:4626":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4208:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:2772:4920":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:3177:4901":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:12318:5646":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:2619:3963":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:13735:6068":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:11742:5542":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2181:585":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:5366:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:11937:5582":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"5:14627:4130":{"crate_id":5,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:11953:2087":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3618:2860":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:24381:7564":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9153:1897":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:11653:5519":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:612:6594":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:15896:2673":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:5902:4765":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:12957:5795":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:2843:3962":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:57936:7755":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"21:837:1973":{"crate_id":21,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:11015:4115":{"crate_id":5,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"12:2392:5285":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:3960:3995":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:12023:4149":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4464:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"19:169:8175":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:46594:3642":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4098:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"0:700:1902":{"crate_id":0,"path":["indexmap","map","IterMut"],"kind":"struct"},"5:1477:3041":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:10949:7939":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:1075:4486":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"0:672:1900":{"crate_id":0,"path":["indexmap","map","Iter"],"kind":"struct"},"19:866:5090":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:1518:1909":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:3297:4958":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:10421:59534":{"crate_id":5,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:5447:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:46987:2941":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:24330:7559":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:5412:4618":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:1261:144":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"0:1269:2509":{"crate_id":0,"path":["indexmap","set","Union"],"kind":"struct"},"4:383:3953":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:7768:4730":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:51319:7682":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5204:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"19:712:2905":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:9505:4319":{"crate_id":5,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:10409:3403":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:57915:7754":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:46978:2953":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:2130:2805":{"crate_id":5,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"18:13147:5897":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5433:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:13953:6122":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:10660:47157":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11678:2996":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:11285:7291":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11530:5500":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:10510:1906":{"crate_id":5,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:7110:4794":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:47294:2930":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:5969:5228":{"crate_id":4,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:10394:4982":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:5685:4634":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:580:6578":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:56601:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:11810:5562":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:52161:7691":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:2052:2506":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8315:2087":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7477:4217":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"5:12070:214":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:13328:3437":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"9:157:4435":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:2404:61155":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:3478:4906":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:47274:2926":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:48908:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:4287:1990":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:10058:5071":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:23401:3527":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:5303:4610":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4538:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:13529:5996":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:2248:2801":{"crate_id":21,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"1:32758:55108":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"4:1296:3958":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:10671:130":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"6:6153:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:3441:3915":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:299:7897":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:11603:5512":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:10583:3268":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:8446:4352":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:11305:5732":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:53296:3562":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:5605:4627":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:13037:5856":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:11335:5029":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:2141:2496":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:10436:4267":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"4:8286:197":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:993:3042":{"crate_id":21,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"12:1682:4553":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"12:856:1966":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:4716:6165":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:3624:132":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:9826:4999":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:13463:5977":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:56205:3377":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:7131:4796":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1694:6721":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10916:1330":{"crate_id":1,"path":["core","slice"],"kind":"module"},"17:3461:4907":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:49550:2994":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:10631:4131":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:48545:3265":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5547:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:13584:6010":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2397:7984":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:15891:2668":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"4:4701:241":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:12075:215":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4048:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:9087:46970":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"4:3407:3914":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10810:147":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"0:15:1809":{"crate_id":0,"path":["indexmap","indexset"],"kind":"macro"},"17:7295:4729":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:8294:3913":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:47015:2956":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"12:750:1900":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:13908:6116":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:4871:6170":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5974:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10717:8017":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:2326:607":{"crate_id":5,"path":["std","env"],"kind":"module"},"0:1174:2496":{"crate_id":0,"path":["indexmap","set","Difference"],"kind":"struct"},"15:244:6404":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1912:41087":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:12003:5593":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:11591:5511":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1748:6744":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:13763:6075":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4230:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:11713:5533":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:47939:1900":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:7415:4213":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"17:5721:4636":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:7429:4214":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"1:47837:3064":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:5150:3279":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"21:1184:4547":{"crate_id":21,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5247:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:50487:3737":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1531:6613":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:2839:4894":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"21:772:1900":{"crate_id":21,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:13921:5212":{"crate_id":5,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:3371:4037":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:15031:4159":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:15880:2659":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"18:12634:5718":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:24919:2991":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:46557:7651":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:13785:6080":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:46731:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:53795:7746":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:15899:2676":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"1:47828:2087":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:6716:4073":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:484:8167":{"crate_id":21,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"1:46608:3886":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:13085:3715":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:46378:3609":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:634:6607":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:3243:4904":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2765:586":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:49662:3008":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:13859:6101":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:14179:8018":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:2040:1990":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:24354:3625":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:9556:5206":{"crate_id":5,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:4454:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6016:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"19:611:5094":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5221:3654":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:54:4539":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"12:979:3043":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:963:4483":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"10:0:2706":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:777:8005":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:11494:5495":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:12589:7994":{"crate_id":5,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"1:49541:2993":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:5428:4127":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:53186:3542":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:7025:4655":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3444:2439":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:3042:3421":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:2937:4919":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:3058:4291":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"5:14867:4221":{"crate_id":5,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6943:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:49581:3011":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:8490:3904":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"0:1202:2506":{"crate_id":0,"path":["indexmap","set","Intersection"],"kind":"struct"},"1:53719:7742":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2286:3425":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:50637:204":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46060:2870":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:4638:4118":{"crate_id":5,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8432:8179":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"0:626:1970":{"crate_id":0,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"6:6925:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:14397:4094":{"crate_id":5,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:47870:3065":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9532:3068":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:10696:4304":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:4716:5221":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:13737:4217":{"crate_id":5,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:1891:1990":{"crate_id":21,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:12360:5667":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:2398:5286":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:12496:5690":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:56588:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:11409:5465":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:49105:4187":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:46618:3887":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5293:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:51493:3559":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:2267:5288":{"crate_id":21,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"4:3114:56684":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4425:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:13556:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:10520:3045":{"crate_id":5,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"15:250:6406":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:12383:5676":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:47027:2957":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:1125:1673":{"crate_id":21,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:6914:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:53044:3574":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:3908:6150":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:47265:2924":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3411:3178":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:8375:2918":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:5281:4331":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:11249:4336":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:52624:3545":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:9160:2933":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3070:4297":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"5:4217:4048":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:5855:4641":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4321:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1764:6749":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7935:2257":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:15881:2660":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"1:56640:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:25486:3598":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:15901:2678":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"1:46150:197":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:14446:119":{"crate_id":5,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:4157:5035":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4242:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:12543:5697":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:14144:190":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3254:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:24886:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:13138:5896":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:11861:4221":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:5276:3655":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1489:3043":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3376:3194":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:49802:3709":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:13421:5965":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:10975:7941":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:15185:4323":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:6907:4787":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:5427:4619":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:7169:4739":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:11890:5567":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:13440:5972":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:11031:46973":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:46630:3725":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:11381:5461":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"5:10712:3994":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3750:1879":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:1701:1961":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:12015:5595":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"18:11945:5584":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4148:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:4219:4049":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4860:3577":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:1626:6668":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1105:7975":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3679:1898":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:10039:7911":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:6595:4737":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:15883:2662":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"5:2361:7983":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"17:7281:4728":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:9796:61168":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:48157:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:783:1859":{"crate_id":5,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:3183:234":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:13016:5847":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:10973:3705":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"18:9396:5389":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:7732:8785":{"crate_id":5,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:46888:2939":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:22868:55822":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:48538:3263":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:10221:8002":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:3966:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4410:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3449:2843":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5536:3878":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5390:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:47283:2928":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:10516:5401":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4373:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:23068:3432":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:9431:5390":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:4271:6152":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"12:940:3040":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:672:40113":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:13428:5966":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:11078:7493":{"crate_id":5,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"17:6557:4783":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:2263:3422":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:3366:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:10610:7928":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:777:2087":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:10935:4028":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"4:5395:203":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:25084:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3382:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:3370:216":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:22828:55770":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:50200:3449":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:9756:61171":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3180:136":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:11835:184":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"17:3743:6148":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:2813:4913":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:12551:129":{"crate_id":5,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:23940:55768":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:7051:4789":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:8954:5032":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"5:12046:4358":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:8264:56693":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"0:1096:1990":{"crate_id":0,"path":["indexmap","set","Drain"],"kind":"struct"},"5:9432:8787":{"crate_id":5,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:3402:2496":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:49570:3005":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:10831:4999":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:294:7896":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:24787:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2859:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:4803:6168":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:23257:3433":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:11189:4326":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:6212:4066":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:50132:3439":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1431:1990":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:6460:4084":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:5305:3199":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"19:637:5292":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:2328:3960":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6268:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:933:3039":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:50183:3448":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:15887:2664":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"1:52083:7689":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:11628:5517":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:2179:2305":{"crate_id":1,"path":["core","mem","replace"],"kind":"function"},"21:950:1970":{"crate_id":21,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:3883:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:14365:3748":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:10782:4233":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:12130:5617":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:46811:5238":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:11183:4325":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:4476:60511":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:51431:3538":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:10476:5049":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4038:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:51463:3571":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:6050:4768":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:10445:5346":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"19:704:5292":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:2359:7982":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"6:1712:6728":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:10187:7914":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:8380:3033":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:4467:6158":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:8180:4269":{"crate_id":5,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"18:8929:46966":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:809:4187":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:15893:2670":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"4:7738:2810":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8716:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:4439:6157":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:9291:5386":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:15858:59533":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4116:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:24206:3759":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:12770:5742":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:3907:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:24314:7556":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1634:6673":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"9:996:4484":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:48367:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:24427:9460":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5971:4342":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:1466:3040":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:2314:4989":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:9646:61166":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:2032:1900":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:3743:5023":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10845:1847":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:13452:5973":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:52688:3530":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3537:2857":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:8288:4144":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:10410:4244":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:13323:5942":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:11013:7944":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:411:2895":{"crate_id":21,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"0:746:1990":{"crate_id":0,"path":["indexmap","map","Drain"],"kind":"struct"},"1:2969:187":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:14536:2800":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"12:162:1660":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:10962:7940":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:13708:6056":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:46260:1878":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:14392:7521":{"crate_id":5,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4790:4016":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:49920:3714":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:11102:46974":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11381:1900":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:23403:3433":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:56627:242":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3842:2863":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:53638:7735":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:52184:7692":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:10147:5397":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:2981:4908":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"19:694:5099":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:2484:47057":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:46551:3724":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:3521:6146":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"12:1666:4552":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:12117:5614":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5419:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6332:4096":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:49093:147":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:50740:3583":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"9:27:4467":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:13522:5995":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3594:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:48199:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:1751:197":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"15:231:3907":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:48409:3787":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5178:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:15890:2667":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"18:12282:5640":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:47947:1902":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:10874:5438":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5398:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:7741:4802":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"0:409:1654":{"crate_id":0,"path":["indexmap","map","IndexMap"],"kind":"struct"},"18:13306:5937":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6114:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:1710:1966":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:46194:201":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:52578:3541":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:3199:4902":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6665:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:14135:4254":{"crate_id":5,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:10489:35389":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:547:4632":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:5955:5225":{"crate_id":4,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:8443:3947":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1592:1908":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:50275:3451":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:14788:5214":{"crate_id":5,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3174:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:6716:2940":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:8708:2922":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"1:24952:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:10038:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2925:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"11:46:6452":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:50483:3739":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:8770:4211":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1537:6616":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:11352:4177":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"1:49319:3023":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:1736:146":{"crate_id":21,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:1113:35392":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:49560:3004":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:565:6569":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:12080:4154":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"12:815:1973":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:23392:3403":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:12183:5624":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:39147:3196":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:48552:3266":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1662:6698":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:3819:2861":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:12660:5720":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:8278:2087":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:12143:5409":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:12224:3013":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:12262:5634":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:5508:4082":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10189:667":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"5:12118:4173":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:46087:2867":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5426:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:2131:1909":{"crate_id":21,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:12557:5699":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:10914:4051":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"4:8573:2806":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:1502:1673":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:47771:179":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:9587:61163":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:11181:5455":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4028:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4075:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3877:2868":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46897:2946":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3803:128":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"18:12209:5627":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:6347:2810":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:5570:4087":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:14887:4172":{"crate_id":5,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:10304:4984":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:32954:2887":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:5500:4081":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3187:233":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:5923:4766":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:3155:4900":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"15:0:2708":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"12:1121:1908":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:7659:4801":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:3314:4645":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"0:576:1964":{"crate_id":0,"path":["indexmap","map","IntoKeys"],"kind":"struct"},"17:4381:6155":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1733:4337":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:15626:5216":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3508:2438":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:12792:3862":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4:989":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"0:14:1680":{"crate_id":0,"path":["indexmap","indexmap"],"kind":"macro"},"5:5731:4400":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:10068:4997":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:0:2705":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:513:6536":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4142:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:3814:162":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:8853:4359":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:50051:3723":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:1143:1908":{"crate_id":21,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:3428:2502":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:11615:5515":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"18:11212:4968":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"17:6980:4788":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:15381:4570":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5328:3281":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:8233:2087":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:53436:3566":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:2959:4897":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:6490:4781":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:11157:4112":{"crate_id":5,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:47879:3167":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:46996:2954":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:11231:4111":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:10461:4254":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"5:4410:4010":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"5:2909:129":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:9136:4132":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:1621:6666":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:1909:5217":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:11784:5557":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:9160:4967":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:52388:3565":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:47896:208":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:4775:6167":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:4036:5217":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3380:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:4346:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"0:1059:2087":{"crate_id":0,"path":["indexmap","set","IntoIter"],"kind":"struct"},"6:4067:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:53620:3534":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:11937:1900":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:13046:3711":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:10435:5019":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5210:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:11511:4193":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:53647:7736":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:5362:4613":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:5739:4402":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:7184:4944":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7532:4219":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"18:11689:5529":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:49722:3703":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:10643:5404":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5149:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:6089:4769":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:51339:7683":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4356:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:2123:2087":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:7484:2087":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4256:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:46638:3881":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"18:13747:6071":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:9930:61165":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:1103:1673":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:22813:55770":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:13271:5927":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:13094:5891":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"8:0:2704":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:7319:1990":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:13155:5898":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"4:5913:3900":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:1663:1900":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10249:3689":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:2883:4914":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:13481:5981":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:10899:7932":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3439:2841":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3460:2845":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:46216:200":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:49642:3009":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:50690:3746":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:12560:5211":{"crate_id":5,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:13361:5950":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:46857:2937":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:24443:9469":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:3755:4236":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:39071:3372":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:1460:3039":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:47249:2920":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:8396:102":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:6679:4935":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2135:2506":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:7684:4734":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:50380:3793":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:50154:3442":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4474:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10244:3688":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3914:2869":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:14463:60782":{"crate_id":5,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2147:2502":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"19:621:5291":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"17:6026:4719":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:46319:1860":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"6:1727:6737":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:8967:7988":{"crate_id":5,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:15225:4324":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:46958:2952":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"13:0:2703":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:7369:4725":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:7449:4215":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"5:8281:4143":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4392:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:24277:7554":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:50475:3736":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:11898:59574":{"crate_id":5,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:5231:3278":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:7141:4797":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5288:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:2914:2408":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"18:13721:6062":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:1896:2805":{"crate_id":21,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5240:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:49123:7677":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7241:188":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:7932:4269":{"crate_id":5,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"5:11334:3056":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3375:1844":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:53704:7741":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:853:4247":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:24479:3824":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10581:3267":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6184:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:52654:3548":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:48115:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"19:801:5084":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:47820:1902":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:14068:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:12417:5679":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:10240:4987":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:10223:4963":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:15064:4166":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"0:650:1973":{"crate_id":0,"path":["indexmap","map","IntoValues"],"kind":"struct"},"17:3402:4650":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"9:776:4465":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:6381:4736":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"9:603:8697":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:25018:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:46333:3278":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"18:10464:5047":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:1441:2805":{"crate_id":5,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:2376:4002":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:5273:5385":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:11430:2998":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:269:4566":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:50312:3452":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39107:3966":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:5455:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:6234:4063":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:51986:3529":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:51794:3564":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:48771:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:49856:3000":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11512:2999":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:12070:5606":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"18:9988:47019":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:10407:4981":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:5374:4614":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:13612:6018":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4055:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:13345:5947":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:1276:3957":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2391:2799":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:6566:4106":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:15016:4158":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4308:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:0:1505":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:4942:6172":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:53742:7743":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6979:7437":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:6640:4071":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:48283:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:1903:2506":{"crate_id":21,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5478:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:1278:3044":{"crate_id":21,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:7471:4720":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:5326:4611":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:49532:2995":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:51671:7686":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:15898:2675":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"6:1704:6727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:157:39780":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:50471:3734":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:2420:7985":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"21:444:2896":{"crate_id":21,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"5:9646:1859":{"crate_id":5,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:4848:3576":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:8538:4362":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:1703:4554":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:2512:4983":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:14430:130":{"crate_id":5,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5311:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:14053:139":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:5582:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:13120:3014":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:37894:181":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:8256:3922":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:13507:5991":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4179:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:15879:2658":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"18:9275:5385":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:46736:3782":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:9836:61170":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4127:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8631:2935":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:5556:4085":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:4379:1902":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3482:2847":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:50467:3731":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"18:10503:5050":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:53757:7744":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:13387:7984":{"crate_id":5,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"18:10530:5441":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:9676:61169":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:49633:3006":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:0:1679":{"crate_id":21,"path":["hashbrown"],"kind":"module"},"6:1544:6619":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:5668:4631":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5998:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:23204:3383":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:11563:5507":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"6:4340:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:5752:4403":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:11425:4188":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:7782:4731":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:6630:4931":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7307:120":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"17:3103:4910":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:46907:2947":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:6858:4939":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:5396:4615":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2277:3424":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:4036:4052":{"crate_id":5,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6034:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:6549:4740":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:12348:5665":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4315:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:11049:4171":{"crate_id":5,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:10015:7909":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1669:6702":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:444:2802":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4198:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:0:2710":{"crate_id":17,"path":["gimli"],"kind":"module"},"5:10986:3718":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"6:6120:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:50479:3735":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:47006:2955":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:4017:2805":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:6342:4777":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:8479:221":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"4:7365:5217":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:6433:4779":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:3007:4898":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6135:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7993:5190":{"crate_id":5,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:50503:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"14:0:2704":{"crate_id":14,"path":["cfg_if"],"kind":"module"},"17:6504:4782":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:10992:155":{"crate_id":5,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"18:11725:5534":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:10489:5400":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:187:2303":{"crate_id":21,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"18:12758:5735":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4532:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:1236:7900":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:13129:5892":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:69:2804":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1578:1673":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"15:47:7971":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:10136:7906":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:14249:55160":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:46299:3476":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4446:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11585:3002":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6027:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:4143:4311":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:47037:2958":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:5157:4324":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:46655:3724":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:548:1961":{"crate_id":0,"path":["indexmap","map","Keys"],"kind":"struct"},"17:4660:6163":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:12558:4282":{"crate_id":5,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:6917:3055":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"4:3106:7541":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:13474:4209":{"crate_id":5,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"12:2066:2502":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:12892:5744":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:6834:4103":{"crate_id":5,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"18:12442:5682":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:2412:5288":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1601:1909":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:4872:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:12221:7985":{"crate_id":5,"path":["std","sys","unix","args","Args"],"kind":"struct"},"18:13794:6082":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:49652:3007":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3278:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:12620:5717":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:6505:229":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"21:1917:2502":{"crate_id":21,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:14:2411":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:6643:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:4485:4027":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:23729:3434":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:4903:3501":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:7826:1860":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"17:3077:4957":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:7355:4724":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:4495:6159":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1456:1973":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:49874:2996":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:12048:5605":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:2126:1990":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:2651:183":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:13938:6121":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:2422:7986":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:13238:4338":{"crate_id":5,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:11017:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:50248:3450":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:7379:4746":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:8210:3993":{"crate_id":5,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:49481:3702":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6205:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:46764:3784":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:46879:2938":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3529:2855":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:47955:2087":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:10792:4040":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4110:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:5887:4643":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:14658:4222":{"crate_id":5,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:3436:2506":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9533:3067":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1483:3042":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3474:2850":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:3905:5217":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:1256:3044":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"hashbrown","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}