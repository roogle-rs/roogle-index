{"root":"0:0:1681","crate_version":"0.4.8","includes_private":false,"index":{"2:11892:1812":{"id":"2:11892:1812","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40625:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:2416-0:33:1684":{"id":"a:2:8203:2416-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2759:2425-0:46:1689":{"id":"a:2:2759:2425-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11912:1967":{"id":"2:11912:1967","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183:799":{"id":"0:183:799","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1522,4],"end":[1524,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,9],"end":[173,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:215:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11929:25833":{"id":"2:11929:25833","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::split_whitespace":"2:11907:30342","str::rsplit":"2:11935:25837"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42620:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2425-0:199:1673":{"id":"a:2:2759:2425-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8203:2416-0:207:1679":{"id":"a:2:8203:2416-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2709:225-0:37:1687":{"id":"a:2:2709:225-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:152:2033":{"id":"0:152:2033","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1420,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155:799":{"id":"0:155:799","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1434,4],"end":[1436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1433,0],"end":[1437,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7212:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:155:799"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:166:2033":{"id":"0:166:2033","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1464,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:46:1689":{"id":"b:2:2554-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:136:657":{"id":"0:136:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1328,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1802":{"id":"0:65:1802","crate_id":0,"name":"compact","span":{"filename":"src/lib.rs","begin":[505,4],"end":[558,5]},"visibility":"public","docs":"Reduce the capacity as much as possible, changing the key for elements when necessary.\n\nTo allow updating references to the elements which must be moved to a new key,\nthis function takes a closure which is called before moving each element.\nThe second and third parameters to the closure are the current key and\nnew key respectively.\nIn case changing the key for one element turns out not to be possible,\nthe move can be cancelled by returning `false` from the closure.\nIn that case no further attempts at relocating elements is made.\nIf the closure unwinds, the slab will be left in a consistent state,\nbut the value that the closure panicked on might be removed.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(10);\nlet a = slab.insert('a');\nslab.insert('b');\nslab.insert('c');\nslab.remove(a);\nslab.compact(|&mut value, from, to| {\n    assert_eq!((value, from, to), ('c', 2, 0));\n    true\n});\nassert!(slab.capacity() >= 2 && slab.capacity() < 10);\n```\n\nThe value is not moved when the closure returns `Err`:\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(100);\nlet a = slab.insert('a');\nlet b = slab.insert('b');\nslab.remove(a);\nslab.compact(|&mut value, from, to| false);\nassert_eq!(slab.iter().next(), Some((b, &'b')));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rekey",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2964:1805","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:414":{"id":"0:45:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[192,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:30341":{"id":"2:11908:30341","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11907:30342"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42903:6044","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1996":{"id":"0:96:1996","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1174,4],"end":[1182,5]},"visibility":"public","docs":"Return a draining iterator that removes all elements from the slab and\nyields the removed items.\n\nNote: Elements are removed even if the iterator is only partially\nconsumed or not consumed at all.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet _ = slab.insert(0);\nlet _ = slab.insert(1);\nlet _ = slab.insert(2);\n\n{\n    let mut drain = slab.drain();\n\n    assert_eq!(Some(0), drain.next());\n    assert_eq!(Some(1), drain.next());\n    assert_eq!(Some(2), drain.next());\n    assert_eq!(None, drain.next());\n}\n\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5369:34183":{"id":"5:5369:34183","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2298","`String`":"5:7228:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2298","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1320,0],"end":[1329,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:136:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1443,0],"end":[1461,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","take","filter","nth","count","last","cmp","is_sorted_by_key","product","unzip","try_find","try_for_each","try_collect","scan","partial_cmp","filter_map","step_by","any","size_hint","__iterator_get_unchecked","all","cmp_by","copied","rposition","gt","collect","fold","collect_into","skip","flat_map","peekable","chain","enumerate","partial_cmp_by","cloned","max_by_key","reduce","partition","lt","flatten","ge","skip_while","intersperse","rev","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","max","is_sorted","eq","array_chunks","min_by_key","ne","find","is_partitioned","inspect","map_while","for_each","advance_by","zip","min","le","is_sorted_by","sum","min_by","map","position","find_map","try_fold"],"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:161:2000","0:162:940","0:163:2019"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:190:2019":{"id":"0:190:2019","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1546,4],"end":[1548,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176:940":{"id":"0:176:940","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1490,4],"end":[1500,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:199:1673":{"id":"b:2:2261-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,0],"end":[198,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:45:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1309,0],"end":[1318,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:133:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:114:772":{"id":"0:114:772","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1223,4],"end":[1225,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:199:1673":{"id":"a:2:2695:217-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1282,0],"end":[1296,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:127:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7156:2000":{"id":"2:7156:2000","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2565-0:37:1687":{"id":"b:2:2565-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1298,0],"end":[1307,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:130:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:144:1682":{"id":"0:144:1682","crate_id":0,"name":"key","span":{"filename":"src/lib.rs","begin":[1392,4],"end":[1394,5]},"visibility":"public","docs":"Return the key associated with this entry.\n\nA value stored in this entry will be associated with this key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:799":{"id":"2:11880:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1967":{"id":"0:93:1967","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1100,4],"end":[1105,5]},"visibility":"public","docs":"Return `true` if a value is associated with the given key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nassert!(slab.contains(hello));\n\nslab.remove(hello);\n\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:33:1684":{"id":"a:2:2709:225-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11947:25841":{"id":"2:11947:25841","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11944:25839","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42742:2653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5357:34180":{"id":"5:5357:34180","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:7062":{"id":"2:11909:7062","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42874:6041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:199:1673":{"id":"b:2:2565-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11904:6046":{"id":"2:11904:6046","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42590:6026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:30342":{"id":"2:11907:30342","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11908:30341"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42894:6043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1331,0],"end":[1335,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9067:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:139:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11891:1901":{"id":"2:11891:1901","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:199:1673":{"id":"b:2:2560-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8203:2416-0:37:1687":{"id":"a:2:8203:2416-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:123:686":{"id":"0:123:686","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1268,4],"end":[1279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:199:1673":{"id":"b:2:3354-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1419,0],"end":[1431,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7189:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:152:2033"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1185,0],"end":[1195,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:3016:1998","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:99:183","0:100:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:143:1934":{"id":"0:143:1934","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1362,4],"end":[1369,5]},"visibility":"public","docs":"Insert a value in the entry, returning a mutable reference to the value.\n\nTo get the key associated with the value, use `key` prior to calling\n`insert`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1521,0],"end":[1525,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7212:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:183:799"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11956:2253":{"id":"2:11956:2253","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::matches":"2:11956:2253"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42824:6039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:33519":{"id":"2:11970:33519","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:51:1691":{"id":"a:2:2695:217-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5352":{"id":"5:5352","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5263:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5353:34179","5:5354:1957","5:5357:34180","5:5360:34181","5:5368:34182","5:5369:34183","5:5370:2332","5:5371:25457","5:5372:25458"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:1853":{"id":"0:81:1853","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[717,4],"end":[722,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\n*slab.get_mut(key).unwrap() = \"world\";\n\nassert_eq!(slab[key], \"world\");\nassert_eq!(slab.get_mut(123), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:757":{"id":"0:100:757","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1189,4],"end":[1194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1267,0],"end":[1280,1]},"visibility":"crate","docs":"Create a slab from an iterator of key-value pairs.\n\nIf the iterator produces duplicate keys, the previous value is replaced with the later one.\nThe keys does not need to be sorted beforehand, and this function always\ntakes O(n) time.\nNote that the returned slab will use space proportional to the largest key,\nso don't use `Slab` with untrusted keys.\n\n# Examples\n\n```\n# use slab::*;\n\nlet vec = vec![(2,'a'), (6,'b'), (7,'c')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert!(slab.capacity() >= 8);\nassert_eq!(slab[2], 'a');\n```\n\nWith duplicate and unsorted keys:\n\n```\n# use slab::*;\n\nlet vec = vec![(20,'a'), (10,'b'), (11,'c'), (10,'d')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert_eq!(slab[10], 'd');\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7146:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:123:686"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1399,0],"end":[1417,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","take","filter","nth","count","last","cmp","is_sorted_by_key","product","unzip","try_find","try_for_each","try_collect","scan","partial_cmp","filter_map","step_by","any","size_hint","__iterator_get_unchecked","all","cmp_by","copied","rposition","gt","collect","fold","collect_into","skip","flat_map","peekable","chain","enumerate","partial_cmp_by","cloned","max_by_key","reduce","partition","lt","flatten","ge","skip_while","intersperse","rev","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","max","is_sorted","eq","array_chunks","min_by_key","ne","find","is_partitioned","inspect","map_while","for_each","advance_by","zip","min","le","is_sorted_by","sum","min_by","map","position","find_map","try_fold"],"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:147:2000","0:148:940","0:149:2019"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11997:33528":{"id":"2:11997:33528","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11543:126","`FromStr`":"2:11542:7408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40767:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11542:7408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11542:7408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:33:1684":{"id":"a:2:2695:217-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5360:34181":{"id":"5:5360:34181","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:33:1684":{"id":"b:2:2560-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11999:25456":{"id":"2:11999:25456","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:25835":{"id":"2:11932:25835","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11405:2671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:25460":{"id":"2:12001:25460","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1487,0],"end":[1505,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","take","filter","nth","count","last","cmp","is_sorted_by_key","product","unzip","try_find","try_for_each","try_collect","scan","partial_cmp","filter_map","step_by","any","size_hint","__iterator_get_unchecked","all","cmp_by","copied","rposition","gt","collect","fold","collect_into","skip","flat_map","peekable","chain","enumerate","partial_cmp_by","cloned","max_by_key","reduce","partition","lt","flatten","ge","skip_while","intersperse","rev","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","max","is_sorted","eq","array_chunks","min_by_key","ne","find","is_partitioned","inspect","map_while","for_each","advance_by","zip","min","le","is_sorted_by","sum","min_by","map","position","find_map","try_fold"],"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:175:2000","0:176:940","0:177:2019"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:92:1962":{"id":"0:92:1962","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1081,4],"end":[1083,5]},"visibility":"public","docs":"Remove and return the value associated with the given key.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Panics\n\nPanics if `key` is not associated with a value.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.remove(hello), \"hello\");\nassert!(!slab.contains(hello));\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:33516":{"id":"2:11962:33516","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11965:33517"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42770:6036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:33:1684":{"id":"b:2:3354-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:189:940":{"id":"0:189:940","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1534,4],"end":[1544,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2425-0:33:1684":{"id":"a:2:2759:2425-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:161:2000":{"id":"0:161:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1444,4],"end":[1444,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]}}},"2:12006:33530":{"id":"2:12006:33530","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4525:33530"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42937:5945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1823":{"id":"0:77:1823","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[611,4],"end":[613,5]},"visibility":"public","docs":"Return `true` if there are no values stored in the slab.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert!(slab.is_empty());\n\nslab.insert(1);\nassert!(!slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:33512":{"id":"2:11941:33512","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11581:12575","str::split":"2:11929:25833","prim@char":"1:11864:410","str::split_terminator":"2:11938:33511"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42688:6033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1948":{"id":"0:89:1948","crate_id":0,"name":"vacant_entry","span":{"filename":"src/lib.rs","begin":[1001,4],"end":[1006,5]},"visibility":"public","docs":"Return a handle to a vacant entry allowing for further manipulation.\n\nThis function is useful when creating values that must contain their\nslab key. The returned `VacantEntry` reserves a slot in the slab and is\nable to query the associated key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188:2000":{"id":"0:188:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1532,4],"end":[1532,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:163:2019":{"id":"0:163:2019","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1458,4],"end":[1460,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1483,0],"end":[1483,40]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7538:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2695:217-0:207:1679":{"id":"a:2:2695:217-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2550-0:207:1679":{"id":"b:2:2550-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:180:2033":{"id":"0:180:2033","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1508,4],"end":[1518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:37:1687":{"id":"b:2:2560-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1681":{"id":"0:0:1681","crate_id":0,"name":"slab","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1571,41]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type.\n\n`Slab` provides pre-allocated storage for a single data type. If many values\nof a single type are being allocated, it can be more efficient to\npre-allocate the necessary storage. Since the size of the type is uniform,\nmemory fragmentation can be avoided. Storing, clearing, and lookup\noperations become very cheap.\n\nWhile `Slab` may look like other Rust collections, it is not intended to be\nused as a general purpose collection. The primary difference between `Slab`\nand `Vec` is that `Slab` returns the key when storing the value.\n\nIt is important to note that keys may be reused. In other words, once a\nvalue associated with a given key is removed from a slab, that key may be\nreturned from future calls to `insert`.\n\n# Examples\n\nBasic storing and retrieval.\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nlet world = slab.insert(\"world\");\n\nassert_eq!(slab[hello], \"hello\");\nassert_eq!(slab[world], \"world\");\n\nslab[world] = \"earth\";\nassert_eq!(slab[world], \"earth\");\n```\n\nSometimes it is useful to be able to associate the key with the value being\ninserted in the slab. This can be done with the `vacant_entry` API as such:\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```\n\nIt is generally a good idea to specify the desired capacity of a slab at\ncreation time. Note that `Slab` will grow the internal capacity when\nattempting to insert a new value once the existing capacity has been reached.\nTo avoid this, add a check.\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(1024);\n\n// ... use the slab\n\nif slab.len() == slab.capacity() {\n    panic!(\"slab full\");\n}\n\nslab.insert(\"the slab is not at capacity yet\");\n```\n\n# Capacity and reallocation\n\nThe capacity of a slab is the amount of space allocated for any future\nvalues that will be inserted in the slab. This is not to be confused with\nthe *length* of the slab, which specifies the number of actual values\ncurrently being inserted. If a slab's length is equal to its capacity, the\nnext value inserted into the slab will require growing the slab by\nreallocating.\n\nFor example, a slab with capacity 10 and length 0 would be an empty slab\nwith space for 10 more stored values. Storing 10 or fewer elements into the\nslab will not change its capacity or cause reallocation to occur. However,\nif the slab length is increased to 11 (due to another `insert`), it will\nhave to reallocate, which can be slow. For this reason, it is recommended to\nuse [`Slab::with_capacity`] whenever possible to specify how many values the\nslab is expected to store.\n\n# Implementation\n\n`Slab` is backed by a `Vec` of slots. Each slot is either occupied or\nvacant. `Slab` maintains a stack of vacant slots using a linked list. To\nfind a vacant slot, the stack is popped. When a slot is released, it is\npushed onto the stack.\n\nIf there are no more available slots in the stack, then `Vec::reserve(1)` is\ncalled and a new slot is created.\n\n[`Slab::with_capacity`]: struct.Slab.html#with_capacity","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:199:1673","0:207:1679","0:33:1684","0:37:1687","0:46:1689","0:51:1691"],"is_stripped":false}},"5:5371:25457":{"id":"5:5371:25457","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12001:25460"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2568:127":{"id":"2:2568:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31723:4675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11911:30331":{"id":"2:11911:30331","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42912:6045","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:33520":{"id":"2:11972:33520","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:2594":{"id":"5:684:2594","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:414":{"id":"0:206:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[132,9],"end":[132,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:46:1689":{"id":"a:2:2709:225-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1531,0],"end":[1549,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["by_ref","take","filter","nth","count","last","cmp","is_sorted_by_key","product","unzip","try_find","try_for_each","try_collect","scan","partial_cmp","filter_map","step_by","any","size_hint","__iterator_get_unchecked","all","cmp_by","copied","rposition","gt","collect","fold","collect_into","skip","flat_map","peekable","chain","enumerate","partial_cmp_by","cloned","max_by_key","reduce","partition","lt","flatten","ge","skip_while","intersperse","rev","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","max","is_sorted","eq","array_chunks","min_by_key","ne","find","is_partitioned","inspect","map_while","for_each","advance_by","zip","min","le","is_sorted_by","sum","min_by","map","position","find_map","try_fold"],"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:188:2000","0:189:940","0:190:2019"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11888:23792":{"id":"2:11888:23792","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11149:12576"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:2417-0:33:1684":{"id":"a:2:8202:2417-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:118:2000":{"id":"0:118:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1229,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}},"0:58:926":{"id":"0:58:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[233,4],"end":[239,5]},"visibility":"public","docs":"Construct a new, empty `Slab`.\n\nThe function does not allocate and the returned slab will have no\ncapacity until `insert` is called or capacity is explicitly reserved.\n\nThis is `const fn` on Rust 1.39+.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::new();\n```","links":{},"attrs":["#[cfg(not(slab_no_const_vec_new))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33:1684":{"id":"0:33:1684","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[180,0],"end":[183,1]},"visibility":"public","docs":"A consuming iterator over the values stored in a `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8202:2417-0:33:1684","a:2:8203:2416-0:33:1684","a:2:2695:217-0:33:1684","a:2:2709:225-0:33:1684","a:2:2759:2425-0:33:1684","b:2:7154-0:33:1684","b:2:2565-0:33:1684","b:2:3354-0:33:1684","b:2:2560-0:33:1684","b:2:2554-0:33:1684","b:2:2261-0:33:1684","b:2:2258-0:33:1684","b:2:2550-0:33:1684","0:145","0:128","0:150","0:153","0:156"]}},"a:2:2709:225-0:51:1691":{"id":"a:2:2709:225-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2263:23510":{"id":"2:2263:23510","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1571,0],"end":[1571,41]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7538:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8202:2417-0:37:1687":{"id":"a:2:8202:2417-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:85:1899":{"id":"0:85:1899","crate_id":0,"name":"get2_unchecked_mut","span":{"filename":"src/lib.rs","begin":[863,4],"end":[874,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously without performing bounds checking and safety\ncondition checking.\n\nFor a safe alternative see [`get2_mut`](Slab::get2_mut).\n\nThis function should be used with care.\n\n# Safety\n\n- Both keys must be within bounds.\n- The condition `key1 != key2` must hold.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = unsafe { slab.get2_unchecked_mut(key1, key2) };\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{"Slab::get2_mut":"0:82:1866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key1",{"kind":"primitive","inner":"usize"}],["key2",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1197,0],"end":[1205,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"2:3020:1999","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:103:758"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2261-0:37:1687":{"id":"b:2:2261-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2550-0:37:1687":{"id":"b:2:2550-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:133:657":{"id":"0:133:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:46:1689":{"id":"b:2:2560-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2550-0:51:1691":{"id":"b:2:2550-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5370:2332":{"id":"5:5370:2332","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1207,0],"end":[1217,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:106:2000","0:107:1684","0:108:772"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11905:6057":{"id":"2:11905:6057","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42596:6027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:799":{"id":"0:169:799","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1478,4],"end":[1480,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:46:1689":{"id":"b:2:2550-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11879":{"id":"2:11879","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11144:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11880:799","2:11881:1823","2:11882:33504","2:11883:33505","2:11885:33506","2:11888:23792","2:11889:33507","2:11890:310","2:11891:1901","2:11892:1812","2:11894:1853","2:11896:1885","2:11898:1892","2:11900:33508","2:11901:33509","2:11902:25826","2:11903:1873","2:11904:6046","2:11905:6057","2:11906:5793","2:11907:30342","2:11908:30341","2:11909:7062","2:11910:33510","2:11911:30331","2:11912:1967","2:11915:25843","2:11918:25844","2:11921:2571","2:11925:2536","2:11929:25833","2:11932:25835","2:11935:25837","2:11938:33511","2:11941:33512","2:11944:25839","2:11947:25841","2:11950:33513","2:11953:33514","2:11956:2253","2:11959:33515","2:11962:33516","2:11965:33517","2:11968:33518","2:11970:33519","2:11972:33520","2:11974:33521","2:11975:33522","2:11976:33523","2:11979:33524","2:11982:24032","2:11985:25845","2:11988:33525","2:11991:33526","2:11994:33527","2:11997:33528","2:11999:25456","2:12000:25459","2:12001:25460","2:12002:25461","2:12003:33529","2:12005:7219","2:12006:33530"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11890:310":{"id":"2:11890:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11891:1901","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:33513":{"id":"2:11950:33513","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:1873":{"id":"2:11903:1873","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11902:25826"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:51:1691":{"id":"b:2:2560-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:106:2000":{"id":"0:106:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1208,4],"end":[1208,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1551,0],"end":[1563,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7189:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:193:2033"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:147:2000":{"id":"0:147:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1400,4],"end":[1400,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}},"2:11901:33509":{"id":"2:11901:33509","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:1999","str::slice_unchecked":"2:11900:33508"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:177:2019":{"id":"0:177:2019","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1502,4],"end":[1504,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:2571":{"id":"2:11921:2571","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40625:176","prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12003:33529":{"id":"2:12003:33529","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4527:33529"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42919:5953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2564:1449":{"id":"2:2564:1449","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40767:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5368:34182":{"id":"5:5368:34182","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:51:1691":{"id":"b:2:2261-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:83:1885":{"id":"0:83:1885","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[797,4],"end":[802,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key without\nperforming bounds checking.\n\nFor a safe alternative see [`get`](Slab::get).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    assert_eq!(slab.get_unchecked(key), &2);\n}\n```","links":{"Slab::get":"0:80:1812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:199:1673":{"id":"b:2:2258-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2759:2425-0:37:1687":{"id":"a:2:2759:2425-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:79:1775":{"id":"0:79:1775","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[671,4],"end":[676,5]},"visibility":"public","docs":"Return an iterator that allows modifying each value.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet key1 = slab.insert(0);\nlet key2 = slab.insert(1);\n\nfor (key, val) in slab.iter_mut() {\n    if key == key1 {\n        *val += 2;\n    }\n}\n\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1565,0],"end":[1569,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7212:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:196:799"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103:758":{"id":"0:103:758","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1199,4],"end":[1204,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1943":{"id":"0:88:1943","crate_id":0,"name":"vacant_key","span":{"filename":"src/lib.rs","begin":[974,4],"end":[976,5]},"visibility":"public","docs":"Returns the key of the next vacant entry.\n\nThis function returns the key of the vacant entry which  will be used\nfor the next insertion. This is equivalent to\n`slab.vacant_entry().key()`, but it doesn't require mutable access.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert_eq!(slab.vacant_key(), 0);\n\nslab.insert(0);\nassert_eq!(slab.vacant_key(), 1);\n\nslab.insert(1);\nslab.remove(0);\nassert_eq!(slab.vacant_key(), 0);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:37:1687":{"id":"b:2:2554-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:2595":{"id":"5:685:2595","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:207:1679":{"id":"b:2:2554-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:61:1736":{"id":"0:61:1736","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[329,4],"end":[335,5]},"visibility":"public","docs":"Reserve capacity for at least `additional` more values to be stored\nwithout allocating.\n\n`reserve` does nothing if the slab already has sufficient capacity for\n`additional` more values. If more capacity is required, a new segment of\nmemory will be allocated and all existing values will be copied into it.\nAs such, if the slab is already very large, a call to `reserve` can end\nup being expensive.\n\nThe slab may reserve more than `additional` extra space in order to\navoid frequent reallocations. Use `reserve_exact` instead to guarantee\nthat only the requested space is allocated.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1219,0],"end":[1226,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:112:2000","0:113:1684","0:114:772"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11925:2536":{"id":"2:11925:2536","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40625:176","prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:51:1691":{"id":"b:2:3354-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:76:799":{"id":"0:76:799","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[595,4],"end":[597,5]},"visibility":"public","docs":"Return the number of stored values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nassert_eq!(3, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:199:1673":{"id":"b:5:681-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:2593","5:684:2594","5:685:2595"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7157:1684":{"id":"2:7157:1684","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"2:11889:33507":{"id":"2:11889:33507","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2556:683":{"id":"2:2556:683","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215:657":{"id":"0:215:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[173,9],"end":[173,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:1885":{"id":"2:11896:1885","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:32:59":{"id":"0:32:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[146,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:33522":{"id":"2:11975:33522","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1339,0],"end":[1395,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:143:1934","0:144:1682"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[218,0],"end":[1183,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:58:926","0:59:1716","0:60:1717","0:61:1736","0:62:1750","0:63:1766","0:65:1802","0:75:1817","0:76:799","0:77:1823","0:78:783","0:79:1775","0:80:1812","0:81:1853","0:82:1866","0:83:1885","0:84:1892","0:85:1899","0:86:1922","0:87:1934","0:88:1943","0:89:1948","0:91:1955","0:92:1962","0:93:1967","0:94:1980","0:96:1996"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:681-0:37:1687":{"id":"b:5:681-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:683:2593","5:684:2594","5:685:2595"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2695:217-0:37:1687":{"id":"a:2:2695:217-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:207:1679":{"id":"0:207:1679","crate_id":0,"name":"VacantEntry","span":{"filename":"src/lib.rs","begin":[174,0],"end":[177,1]},"visibility":"public","docs":"A handle to a vacant entry in a `Slab`.\n\n`VacantEntry` allows constructing values with the key that they will be\nassigned to.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:140","a:2:8202:2417-0:207:1679","a:2:8203:2416-0:207:1679","a:2:2695:217-0:207:1679","a:2:2709:225-0:207:1679","a:2:2759:2425-0:207:1679","b:2:2565-0:207:1679","b:2:3354-0:207:1679","b:2:2560-0:207:1679","b:2:2554-0:207:1679","b:2:2261-0:207:1679","b:2:2258-0:207:1679","b:2:2550-0:207:1679","0:212"]}},"0:80:1812":{"id":"0:80:1812","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[693,4],"end":[698,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\nassert_eq!(slab.get(key), Some(&\"hello\"));\nassert_eq!(slab.get(123), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1892":{"id":"0:84:1892","crate_id":0,"name":"get_unchecked_mut","span":{"filename":"src/lib.rs","begin":[829,4],"end":[834,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key\nwithout performing bounds checking.\n\nFor a safe alternative see [`get_mut`](Slab::get_mut).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    let val = slab.get_unchecked_mut(key);\n    *val = 13;\n}\n\nassert_eq!(slab[key], 13);\n```","links":{"Slab::get_mut":"0:81:1853"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1955":{"id":"0:91:1955","crate_id":0,"name":"try_remove","span":{"filename":"src/lib.rs","begin":[1040,4],"end":[1058,5]},"visibility":"public","docs":"Tries to remove the value associated with the given key,\nreturning the value if the key existed.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.try_remove(hello), Some(\"hello\"));\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:46:1689":{"id":"b:2:2261-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:62:1750":{"id":"0:62:1750","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[363,4],"end":[369,5]},"visibility":"public","docs":"Reserve the minimum capacity required to store exactly `additional`\nmore values.\n\n`reserve_exact` does nothing if the slab already has sufficient capacity\nfor `additional` more values. If more capacity is required, a new segment\nof memory will be allocated and all existing values will be copied into\nit.  As such, if the slab is already very large, a call to `reserve` can\nend up being expensive.\n\nNote that the allocator may give the slab more space than it requests.\nTherefore capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve_exact(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:207:1679":{"id":"b:2:3354-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:63:1766":{"id":"0:63:1766","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[412,4],"end":[437,5]},"visibility":"public","docs":"Shrink the capacity of the slab as much as possible without invalidating keys.\n\nBecause values cannot be moved to a different index, the slab cannot\nshrink past any stored values.\nIt will drop down as close as possible to the length but the allocator may\nstill inform the underlying vector that there is space for a few more elements.\n\nThis function can take O(n) time even when the capacity cannot be reduced\nor the allocation is shrunk in place. Repeated calls run in O(1) though.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```\n\nThe slab cannot shrink past the last present value even if previous\nvalues are removed:\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..4 {\n    slab.insert(i);\n}\n\nslab.remove(0);\nslab.remove(3);\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:207:1679":{"id":"b:2:2565-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1527,0],"end":[1527,43]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7538:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11898:1892":{"id":"2:11898:1892","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:112:2000":{"id":"0:112:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1220,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]}}},"0:130:657":{"id":"0:130:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1302,4],"end":[1306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2260:2240":{"id":"2:2260:2240","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1689":{"id":"0:46:1689","crate_id":0,"name":"IterMut","span":{"filename":"src/lib.rs","begin":[201,0],"end":[204,1]},"visibility":"public","docs":"A mutable iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8202:2417-0:46:1689","a:2:8203:2416-0:46:1689","a:2:2695:217-0:46:1689","a:2:2709:225-0:46:1689","a:2:2759:2425-0:46:1689","b:2:7154-0:46:1689","b:2:2565-0:46:1689","b:2:3354-0:46:1689","b:2:2560-0:46:1689","b:2:2554-0:46:1689","b:2:2261-0:46:1689","b:2:2258-0:46:1689","b:2:2550-0:46:1689","0:178","0:134","0:181","0:172","0:184"]}},"0:99:183":{"id":"0:99:183","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1186,4],"end":[1186,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:108:772":{"id":"0:108:772","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1211,4],"end":[1216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:34179":{"id":"5:5353:34179","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2298","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2298","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:25843":{"id":"2:11915:25843","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12005:7219":{"id":"2:12005:7219","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4528:7219"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42928:5937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2425-0:51:1691":{"id":"a:2:2759:2425-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:139:657":{"id":"0:139:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1332,4],"end":[1334,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:33508":{"id":"2:11900:33508","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11901:33509","crate::ops::Index":"2:3016:1998"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:33527":{"id":"2:11994:33527","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:1673":{"id":"0:199:1673","crate_id":0,"name":"Slab","span":{"filename":"src/lib.rs","begin":[133,0],"end":[143,1]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type\n\nSee the [module documentation] for more details.\n\n[module documentation]: index.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:56","a:2:8202:2417-0:199:1673","a:2:8203:2416-0:199:1673","a:2:2695:217-0:199:1673","a:2:2709:225-0:199:1673","a:2:2759:2425-0:199:1673","b:2:2565-0:199:1673","b:2:3354-0:199:1673","b:2:2560-0:199:1673","b:2:2554-0:199:1673","b:2:2261-0:199:1673","b:2:2258-0:199:1673","b:2:2550-0:199:1673","b:5:681-0:199:1673","0:121","0:125","0:115","0:30","0:101","0:204","0:104","0:109","0:97"]}},"b:2:2560-0:207:1679":{"id":"b:2:2560-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:7154-0:37:1687":{"id":"b:2:7154-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7156:2000","2:7157:1684","2:7158:772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"2:11944:25839":{"id":"2:11944:25839","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575","str::rsplitn":"2:11947:25841"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42724:2657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:33523":{"id":"2:11976:33523","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11606:12572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:33505":{"id":"2:11883:33505","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:33:1684":{"id":"b:2:2554-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11985:25845":{"id":"2:11985:25845","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:33510":{"id":"2:11910:33510","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42884:6042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1439,0],"end":[1439,40]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7538:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2695:217-0:46:1689":{"id":"a:2:2695:217-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11991:33526":{"id":"2:11991:33526","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:783":{"id":"0:78:783","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Return an iterator over the slab.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nlet mut iterator = slab.iter();\n\nassert_eq!(iterator.next(), Some((0, &0)));\nassert_eq!(iterator.next(), Some((1, &1)));\nassert_eq!(iterator.next(), Some((2, &2)));\nassert_eq!(iterator.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:87:1934":{"id":"0:87:1934","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[946,4],"end":[952,5]},"visibility":"public","docs":"Insert a value in the slab, returning key assigned to the value.\n\nThe returned key can later be used to retrieve or remove the value using indexed\nlookup and `remove`. Additional capacity is allocated if needed. See\n[Capacity and reallocation](index.html#capacity-and-reallocation).\n\n# Panics\n\nPanics if the new storage in the vector exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\nassert_eq!(slab[key], \"hello\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:51:1691":{"id":"b:2:2565-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8203:2416-0:199:1673":{"id":"a:2:8203:2416-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2261-0:33:1684":{"id":"b:2:2261-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:46:1689":{"id":"b:2:3354-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11953:33514":{"id":"2:11953:33514","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1477,0],"end":[1481,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7212:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:169:799"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11979:33524":{"id":"2:11979:33524","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1716":{"id":"0:59:1716","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[282,4],"end":[288,5]},"visibility":"public","docs":"Construct a new, empty `Slab` with the specified capacity.\n\nThe returned slab will be able to store exactly `capacity` without\nreallocating. If `capacity` is 0, the slab will not allocate.\n\nIt is important to note that this function does not specify the *length*\nof the returned slab, but only the capacity. For an explanation of the\ndifference between length and capacity, see [Capacity and\nreallocation](index.html#capacity-and-reallocation).\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\n// The slab contains no values, even though it has capacity for more\nassert_eq!(slab.len(), 0);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    slab.insert(i);\n}\n\n// ...but this may make the slab reallocate\nslab.insert(11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:33:1684":{"id":"b:2:2550-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:149:2019":{"id":"0:149:2019","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1414,4],"end":[1416,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:2417-0:46:1689":{"id":"a:2:8202:2417-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:11881:1823":{"id":"2:11881:1823","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2553:1958":{"id":"2:2553:1958","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2527:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2425-0:207:1679":{"id":"a:2:2759:2425-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2258-0:46:1689":{"id":"b:2:2258-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11894:1853":{"id":"2:11894:1853","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40625:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372:25458":{"id":"5:5372:25458","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12002:25461"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1507,0],"end":[1519,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7189:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:180:2033"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:196:799":{"id":"0:196:799","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1566,4],"end":[1568,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:207:1679":{"id":"a:2:2709:225-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11968:33518":{"id":"2:11968:33518","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12000:25459":{"id":"2:12000:25459","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11974:33521":{"id":"2:11974:33521","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:207:1679":{"id":"b:2:2258-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:94:1980":{"id":"0:94:1980","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1131,4],"end":[1145,5]},"visibility":"public","docs":"Retain only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(usize, &mut e)`\nreturns false. This method operates in place and preserves the key\nassociated with the retained values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet k1 = slab.insert(0);\nlet k2 = slab.insert(1);\nlet k3 = slab.insert(2);\n\nslab.retain(|key, val| key == k1 || *val == 1);\n\nassert!(slab.contains(k1));\nassert!(slab.contains(k2));\nassert!(!slab.contains(k3));\n\nassert_eq!(2, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2964:1805","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:25844":{"id":"2:11918:25844","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:24032":{"id":"2:11982:24032","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:940":{"id":"0:148:940","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1402,4],"end":[1412,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:37:1687":{"id":"b:2:2258-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2261-0:207:1679":{"id":"b:2:2261-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2263:23510"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:37:1687":{"id":"b:2:3354-0:37:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1463,0],"end":[1475,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7189:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:166:2033"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:75:1817":{"id":"0:75:1817","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[575,4],"end":[579,5]},"visibility":"public","docs":"Clear the slab of all values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.clear();\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1228,0],"end":[1235,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:118:2000","0:119:1684","0:120:772"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:30":{"id":"0:30","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[149,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2601:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:32:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11959:33515":{"id":"2:11959:33515","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::matches":"2:11956:2253"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42842:6040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:33517":{"id":"2:11965:33517","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::match_indices":"2:11962:33516"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42788:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:33525":{"id":"2:11988:33525","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11581:12575"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1717":{"id":"0:60:1717","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[299,4],"end":[301,5]},"visibility":"public","docs":"Return the number of values the slab can store without reallocating.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::with_capacity(10);\nassert_eq!(slab.capacity(), 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:33511":{"id":"2:11938:33511","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11581:12575","str::split":"2:11929:25833","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7189:120","str::rsplit_terminator":"2:11941:33512"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42670:6032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[132,9],"end":[132,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:206:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11885:33506":{"id":"2:11885:33506","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11883:33505"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:5793":{"id":"2:11906:5793","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42606:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:199:1673":{"id":"b:2:2550-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2553:1958"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11935:25837":{"id":"2:11935:25837","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11581:12575","`DoubleEndedIterator`":"2:7189:120","prim@char":"1:11864:410","str::split":"2:11929:25833"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42638:2659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11601:12573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2563:127":{"id":"2:2563:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11902:25826":{"id":"2:11902:25826","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11903:1873"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1866":{"id":"0:82:1866","crate_id":0,"name":"get2_mut","span":{"filename":"src/lib.rs","begin":[751,4],"end":[773,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously.\n\nIf any one of the given keys is not associated with a value, then `None`\nis returned.\n\nThis function can be used to get two mutable references out of one slab,\nso that you can manipulate both of them at the same time, eg. swap them.\n\n# Panics\n\nThis function will panic if `key1` and `key2` are the same.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = slab.get2_mut(key1, key2).unwrap();\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key1",{"kind":"primitive","inner":"usize"}],["key2",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7154-0:33:1684":{"id":"b:2:7154-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7156:2000","2:7157:1684","2:7158:772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"2:7158:772":{"id":"2:7158:772","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:33:1684":{"id":"b:2:2565-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:51:1691":{"id":"0:51:1691","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[207,0],"end":[210,1]},"visibility":"public","docs":"A draining iterator for `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8202:2417-0:51:1691","a:2:8203:2416-0:51:1691","a:2:2695:217-0:51:1691","a:2:2709:225-0:51:1691","a:2:2759:2425-0:51:1691","b:2:7154-0:51:1691","b:2:2565-0:51:1691","b:2:3354-0:51:1691","b:2:2560-0:51:1691","b:2:2554-0:51:1691","b:2:2261-0:51:1691","b:2:2258-0:51:1691","b:2:2550-0:51:1691","0:137","0:194","0:191","0:186","0:197"]}},"0:120:772":{"id":"0:120:772","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2569:1448":{"id":"2:2569:1448","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40767:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7154-0:51:1691":{"id":"b:2:7154-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7156:2000","2:7157:1684","2:7158:772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:2:2258-0:33:1684":{"id":"b:2:2258-0:33:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:7154-0:46:1689":{"id":"b:2:7154-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7268:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7150:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7156:2000","2:7157:1684","2:7158:772"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"5:683:2593":{"id":"5:683:2593","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2554-0:199:1673":{"id":"b:2:2554-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:113:1684":{"id":"0:113:1684","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1221,4],"end":[1221,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:37:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"b:2:2554-0:51:1691":{"id":"b:2:2554-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2565-0:46:1689":{"id":"b:2:2565-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:225-0:199:1673":{"id":"a:2:2709:225-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5354:1957":{"id":"5:5354:1957","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11586:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:2417-0:51:1691":{"id":"a:2:8202:2417-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:175:2000":{"id":"0:175:2000","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1488,4],"end":[1488,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}},"b:2:2258-0:51:1691":{"id":"b:2:2258-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2260:2240"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11882:33504":{"id":"2:11882:33504","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:2417-0:199:1673":{"id":"a:2:8202:2417-0:199:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:199:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12002:25461":{"id":"2:12002:25461","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:2416-0:46:1689":{"id":"a:2:8203:2416-0:46:1689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8203:2416-0:51:1691":{"id":"a:2:8203:2416-0:51:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:2416","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:51:1691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:86:1922":{"id":"0:86:1922","crate_id":0,"name":"key_of","span":{"filename":"src/lib.rs","begin":[912,4],"end":[926,5]},"visibility":"public","docs":"Get the key for an element in the slab.\n\nThe reference must point to an element owned by the slab.\nOtherwise this function will panic.\nThis is a constant-time operation because the key can be calculated\nfrom the reference with pointer arithmetic.\n\n# Panics\n\nThis function will panic if the reference does not point to an element\nof the slab.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(String::from(\"foo\"));\nlet value = &slab[key];\nassert_eq!(slab.key_of(value), key);\n```\n\nValues are not compared, so passing a reference to a different location\nwill result in a panic:\n\n```should_panic\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(0);\nlet bad = &0;\nslab.key_of(bad); // this will panic\nunreachable!();\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["present_element",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:2417-0:207:1679":{"id":"a:2:8202:2417-0:207:1679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:207:1679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3356:1462":{"id":"2:3356:1462","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38962:5934","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:657":{"id":"0:127:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1295,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9026:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9015:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:2033":{"id":"0:193:2033","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1552,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:940":{"id":"0:162:940","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1446,4],"end":[1456,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7268:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1684":{"id":"0:119:1684","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1230,4],"end":[1230,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:46:1689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:37:1687":{"id":"0:37:1687","crate_id":0,"name":"Iter","span":{"filename":"src/lib.rs","begin":[186,0],"end":[189,1]},"visibility":"public","docs":"An iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8202:2417-0:37:1687","a:2:8203:2416-0:37:1687","a:2:2695:217-0:37:1687","a:2:2709:225-0:37:1687","a:2:2759:2425-0:37:1687","b:2:7154-0:37:1687","b:2:2565-0:37:1687","b:2:3354-0:37:1687","b:2:2560-0:37:1687","b:2:2554-0:37:1687","b:2:2261-0:37:1687","b:2:2258-0:37:1687","b:2:2550-0:37:1687","b:5:681-0:37:1687","0:170","0:131","0:42","0:158","0:164","0:167"]}},"0:107:1684":{"id":"0:107:1684","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1209,4],"end":[1209,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:33:1684","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"paths":{"17:10476:19672":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9193:34374":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40472:5980":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:38685:2782":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9073:6311":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6345:4156":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4656:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:43347:6077":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2465:4130":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6654:4376":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7305:2301":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2613:6742":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13091:3945":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3985:7348":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39515:2358":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5951:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:44238:6095":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8234:7365":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44515:6106":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:11119:2640":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8168:6041":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21786:5851":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:2928:33154":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2132:5772":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:4004:6702":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12361:3702":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:2423:5779":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4734:7226":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6643:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4328:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:113:7053":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4628:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4820:5262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13506:4076":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:9905:1687":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:499:4786":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41403:2611":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:1056:7072":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10455:3365":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11639:3571":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:20839:7355":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9021:6544":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:39298:5954":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"12:1866:4670":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1899:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3373:6269":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4733:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4757:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9078:2610":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6070:4287":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:353:2958":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10672:6325":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:7173:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7473:3400":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40432:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6790:4395":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12884:3889":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:9762:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5447:6612":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:956:6676":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2535:4133":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10724:24023":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:39585:2373":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44617:6110":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43252:6073":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7267:4452":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:860:1689":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:2359:7288":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5716:5402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4828:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"12:0:2143":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:6715:3003":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:5203:3256":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6472:6773":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4750:7353":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:42606:3265":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6743:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11511:6345":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6728:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8229:6272":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12980:3916":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1580:4668":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11147:3076":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10182:3339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1074:1679":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7622:2795":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4426:2625":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39331:5959":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:43536:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11218:6335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11245:6337":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8762:6299":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6690:4159":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4632:7368":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:1921:5804":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9382:3276":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6719:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:9185:2875":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:5710:30271":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:1429:4667":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4597:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:891:4667":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11235:3474":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:3263:4174":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4545:4192":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4237:5003":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4361:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8493:1687":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:2916:6538":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9022:6310":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:40561:5994":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7435:4462":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6475:7427":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:6988:1684":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:1628:2963":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:361:6722":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10139:3281":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6146:4293":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:44330:6099":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1527:4856":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:878:4666":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10949:3412":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11841:3598":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:669:6430":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:1962:6537":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"9:622:18441":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:7123:2299":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:386:6529":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11436:3514":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6330:4318":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10385:3356":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:9857:6587":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5815:19495":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:690:3153":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:939:7236":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:870:1684":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5563:3051":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12148:3660":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9873:6589":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"7:32:18408":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:531:3131":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10506:3370":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7819:6225":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:7212:2034":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2217:7281":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:30550:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4413:4189":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9644:6570":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7637:4478":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3772:6755":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11093:6311":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:5690:5387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9947:19646":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:44262:6096":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3161:6746":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3532:1691":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:4422:5110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2657:4138":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43055:6058":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1213:1675":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:1617:4910":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5219:3257":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:862:2974":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:48921:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6884:28193":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9909:3299":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11787:3590":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:5433:4209":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2825:4145":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4519:4191":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:636:3149":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"12:1845:2301":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:8944:24019":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:31759:6713":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:2868:4147":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2714:2290":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:8951:34371":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:5839:19496":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13527:4082":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7584:7355":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:8881:34365":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4166:6756":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:621:6724":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10422:6749":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4673:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4721:4198":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4714:5215":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42842:6040":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9015:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:2772:12548":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1747:4987":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7288:4455":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2831:3047":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1589:4891":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6359:2329":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1645:4935":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1687:4964":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7543:4155":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6421:2966":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:1554:2991":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"0:51:1691":{"crate_id":0,"path":["slab","Drain"],"kind":"struct"},"5:36:2300":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10419:6747":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:39392:7268":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:10997:3427":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:20442:30026":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6773:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2320:4124":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4441:4190":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42928:5937":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20670:7355":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:2190:34351":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:5755:3052":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:39350:5960":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42788:6037":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:9752:7355":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:41974:6018":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:1827:2295":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:48538:7507":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:7708:6713":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:43627:6093":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:20863:7355":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:3141:4669":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"15:175:7057":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"0:37:1687":{"crate_id":0,"path":["slab","Iter"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6548:5612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10845:3363":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"12:1065:34352":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12964:3912":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11203:6334":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4396:5097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7428:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9631:6569":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3010:18638":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3901:7340":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4849:4202":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:847:1687":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10828:4751":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:9092:6312":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9250:6548":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7201:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:39312:12633":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:29969:2292":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7249:6656":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42426:2661":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2891:2857":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:8295:19559":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8014:4450":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:12496:2296":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:594:4844":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4669:7354":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10209:6765":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13366:4036":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:6342:1684":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8105:6266":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"14:221:4611":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:7582:31286":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10682:3391":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:46671:6206":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:21478:5820":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:7109:2345":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:6716:2323":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9458:6561":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2868:2852":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:38985:2623":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:8798:1687":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:1092:7073":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4795:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:644:3126":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:5205:12564":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12768:3865":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13536:4084":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9061:3281":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9722:3291":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:4051:12547":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:39667:2369":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12211:3678":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:11606:12572":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11288:3487":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1859:4669":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:44:4681":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:29935:2291":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:5880:2991":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8161:2655":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7980:19506":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2705:4140":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11835:7225":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:481:3124":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:39947:2337":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:7275:25545":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:3977:7346":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45163:6131":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"9:649:18442":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:4389:5094":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6363:6772":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11485:3539":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4274:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4805:5256":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:48960:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:25633:5858":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45241:6147":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2389:4127":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:41919:6009":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4520:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1716:4975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39362:30349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:38802:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11412:6755":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:9067:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:3430:2603":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:2842:4146":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4451:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:46656:6205":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:7857:6783":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8839:6303":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4144:4182":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"0:0:1681":{"crate_id":0,"path":["slab"],"kind":"module"},"16:4217:4183":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:8752:3265":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8117:7298":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1051:1675":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4781:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:1021:6532":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2878:2854":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8967:6804":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10520:3373":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:38890:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:44885:6124":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3923:7342":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:5463:2361":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:2930:18637":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:8418:19563":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:42824:6039":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"12:2053:1675":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11087:3448":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10296:6606":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:590:3138":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6865:4404":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:39506:2350":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9831:6582":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3455:7316":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4583:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:4101:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:8241:19557":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12349:3695":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4994:5355":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11106:3453":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13231:3983":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:45553:6153":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:19:6402":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:4673:7358":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5945:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:38846:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12251:3681":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:3599:4177":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41655:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:22094:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7483:4167":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:5472:4153":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4890:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:1771:6533":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9183:6547":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:4016:6703":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9877:5991":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:546:4818":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"9:977:4754":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39618:2365":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12550:3755":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"6:123:13178":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:834:6674":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6747:7468":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7541:3068":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:43147:6061":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:707:3156":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8441:7403":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6210:4303":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:914:2301":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12022:3643":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41640:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12278:3685":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41927:6011":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:9339:12647":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9820:6581":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:7041:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4882:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:1367:1687":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:540:4815":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8185:7331":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:755:3168":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8744:6797":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:45317:6149":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3167:4670":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13031:3929":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:8212:19556":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40597:5995":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11800:3592":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7250:6700":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:7538:1668":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9084:2612":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:9929:1689":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11813:3594":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10854:19569":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:8137:19554":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10642:19567":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4929:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:2862:2851":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"15:193:7061":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:9488:6565":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:9076:2609":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3391:6752":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44839:6122":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12850:3886":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:6926:3064":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:39232:5944":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:9082:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:42919:5953":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7434:5746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6161:19497":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11559:3557":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13214:3976":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7953:7324":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:967:6531":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6979:2297":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:39180:5939":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11199:3465":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:7481:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"14:7:6669":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:7511:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39596:2364":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3448:7297":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9328:6555":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4086:7076":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11536:3552":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:21750:30336":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:4177:2622":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:487:4781":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40574:6271":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11368:3510":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1652:4939":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3915:7341":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:39208:5942":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7329:4164":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13354:4033":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:1753:5798":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44861:6123":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:2922:33152":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4322:5062":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11233:6776":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5981:4285":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46592:6201":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10416:6745":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:3120:25116":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46618:6203":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11873:3602":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:43367:6082":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:42416:2651":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4102:7364":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10310:6607":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:4498:7384":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3159:6745":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:21800:5852":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10748:2670":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:12197:30555":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10849:24034":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13047:3931":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11486:6341":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22424:5856":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:481:4778":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6376:19498":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9108:6545":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8174:6792":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:41389:2608":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8056:6786":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:2746:12776":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12033:3644":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5843:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:3457:3174":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2852:2848":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:641:6727":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:271:2966":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4910:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10001:7081":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:4727:3048":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6075:3037":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1479:6689":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:44493:6105":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4301:5054":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2727:4141":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2784:12779":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:20463:30032":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6735:6633":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:751:1691":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11300:3490":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2786:981":{"crate_id":2,"path":["core","ops"],"kind":"module"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"6:7475:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11170:6818":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1898:6736":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5959:5523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8991:34368":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:42884:6042":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8351:6284":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13594:4094":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1568:1684":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5411:4154":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9274:6550":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:6399:3061":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5910:5503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:7469:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:20719:7474":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9805:3376":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3114:2294":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3973:7345":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:2185:34317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:3316:2333":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:30567:3137":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43232:6071":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:3667:6753":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:562:3400":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:5540:2351":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46546:6197":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:1628:2966":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2967:2427":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:950:6674":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40767:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13082:3942":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:44907:6125":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:473:4773":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11500:3543":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22325:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2213:3011":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7117:34363":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2341:4125":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13114:3953":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13176:3968":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12617:3810":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11327:3079":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2703:12549":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:4285:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10207:6596":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13393:4045":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:300:4663":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3439:29950":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44570:6109":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11267:3078":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:8907:6306":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:9575:3032":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:44533:6107":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:39525:1685":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12748:3859":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6496:19499":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12008:3641":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1704:4971":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9751:3295":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4662:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12896:3892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6517:4356":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11997:3639":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6676:4158":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11247:3477":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:45287:6148":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5967:5526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2605:4136":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11853:3599":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:39677:2354":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:6532:2346":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:80:7049":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:42564:6022":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10894:3405":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"8:0:2139":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13203:3975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:4064:7075":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4900:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1509:4848":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10216:2658":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21291:32434":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:20657:7480":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:10188:2657":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3199:6747":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4408:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1663:4947":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:8701:3264":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5628:4231":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:659:1684":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:30011:30357":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:534:3040":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:7498:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:20713:7472":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:3566:4176":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13158:3964":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8629:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:21122:7475":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:46443:6193":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46694:6207":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3020:1999":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:39544:2360":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:10230:2654":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1677:4958":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2961:2426":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7567:19504":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:22391:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4468:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46733:6208":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:41180:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7704:6780":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1824:6734":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22226:2646":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:564:3136":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:39171:5938":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:11706:3083":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:9074:2608":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:5495:7413":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39165:5937":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10546:19565":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4369:5085":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:42447:2668":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11939:3627":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9553:3281":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46195:6189":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8868:7431":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:7268:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10147:2660":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10088:3333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4835:7391":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4962:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:14:2256":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6634:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:9304:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7865:6784":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8820:6302":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13071:3938":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"9:111:6405":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:10630:6814":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:38912:2647":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:22823:5857":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:420:3217":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40818:1689":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10374:3352":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22127:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:42590:6026":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9071:34370":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46537:6196":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1609:4905":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3346:2991":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:30069:30330":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7929:6665":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6791:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:1029:1679":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:567:4829":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2539:3044":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:42407:2650":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7511:4464":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"12:810:6683":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:638:6725":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2823:2846":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2998:2863":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:39605:2352":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4115:7078":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:29975:2695":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6123:6444":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3177:2648":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3016:1998":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43351:6078":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2011:6690":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:5615:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:9982:6734":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4489:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:553:4821":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:3146:34258":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"14:160:6669":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10062:6592":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:119:13177":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13134:3959":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2411:4128":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6316:4316":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5917:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8852:7430":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10036:2656":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12322:3692":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"12:1840:1691":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4568:5627":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7033:1684":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"13:226:4658":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9844:6585":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5938:5517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6359:4320":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:7011:2978":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9712:3290":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:45399:6150":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42770:6036":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:4316:3015":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:2184:4673":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5949:4280":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40683:1687":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:9016:2603":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:62:13123":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:9086:2613":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10257:6603":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:8203:2416":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:2069:6678":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5780:4251":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:3716:4180":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7792:3210":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4988:5353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:5457:2306":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3670:6754":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:9080:2611":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7168:5788":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:2205:5778":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12874:3888":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41759:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1788:6733":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:521:23311":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2343:5800":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:9461:3024":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:48934:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7469:4166":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:1849:6735":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6171:4299":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45587:6154":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:8202:2417":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11721:3581":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:40699:1684":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:38826:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:3240:6750":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4457:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:484:3039":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:7386:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7440:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12176:3666":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"15:0:2145":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:4330:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:4786:4200":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:8309:6708":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10321:3341":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:21584:5822":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:43639:4679":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12046:3646":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:8561:3260":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9475:6564":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:43554:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:5878:18609":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10583:19566":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12909:3898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:671:6526":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"10:0:2141":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:7049:5787":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:5209:12565":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3269:2866":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:904:1691":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12739:3858":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4766:5235":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:2198:4676":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:660:6522":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1258:6682":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1065:6678":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8424:6287":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4727:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:4327:4186":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:274:4660":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9526:6566":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:1044:18575":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:2371:7294":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:1732:2301":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11356:3507":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:12373:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10270:6604":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6593:4371":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5741:5407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4775:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3871:7338":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8814:1684":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45523:6152":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:42159:6019":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9263:6549":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4841:5277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:624:34378":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8278:5612":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:44982:6127":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:21673:30324":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5596:4226":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7388:6663":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4346:5076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8987:6307":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:38978:6714":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:43546:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10715:2669":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10332:19671":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5558:19494":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:7113:2344":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:6740:3010":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1710:4974":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13580:4091":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42398:2652":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:8475:19542":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:39922:2331":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11125:3454":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:2549:3028":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:48895:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:45060:6129":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10314:6797":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6034:6624":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:39955:2339":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:3249:6540":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13382:4040":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:738:4667":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9791:3298":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11617:3564":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10360:3347":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:4262:4184":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:11135:2642":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6521:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:45083:6130":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2882:2855":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22259:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:5686:6770":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:8204:2415":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:1852:4668":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43375:6084":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10075:6593":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4671:7357":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9560:3028":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:12224:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9031:34369":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13168:3967":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:10138:7415":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:42178:2680":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9344:5813":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10497:19673":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:42499:2663":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12118:3657":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42724:2657":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"0:207:1679":{"crate_id":0,"path":["slab","VacantEntry"],"kind":"struct"},"5:3180:34261":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43355:6079":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:4011:1689":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7044:34362":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10121:3336":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:41140:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12781:3870":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:60:7066":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:21688:5835":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8499:6295":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11034:3441":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12638:3818":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:2652:5782":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:558:6723":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:48973:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:766:23310":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11037:6084":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9350:3251":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6298:4308":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:2993:4170":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7463:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5378:6765":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5737:4247":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11761:3587":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5931:5515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2894:18636":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:40980:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:20844:7471":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7059:2413":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12695:3853":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:31723:4675":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:4171:1687":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:725:4666":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:44809:6121":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7970:4526":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44392:6101":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42912:6045":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11951:3629":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11684:3577":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41260:6436":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41020:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:2557:4134":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11029:24027":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7603:4474":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8510:6296":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7396:19503":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:45737:6155":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5122:4205":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"9:0:2140":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:782:2969":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12674:3848":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:574:3126":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:736:23309":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:39688:2370":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4554:7343":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:719:3160":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4224:4994":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:39567:2362":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9577:3287":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:9290:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"12:2080:1679":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:20410:32436":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:8240:6795":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1559:4872":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41707:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:11161:3461":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:40489:7333":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:8792:31288":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1731:4982":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11343:3506":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7093:4434":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:7681:6220":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:8110:19541":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3403:12594":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:8797:6434":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13279:4020":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6594:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2210:6739":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12060:3647":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:39435:6715":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:588:7217":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:8393:19562":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:7135:7235":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4261:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4218:4993":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6842:4402":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10714:6266":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:1786:6732":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:4888:4203":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:822:7236":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10051:6806":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:44693:6118":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2847:2847":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:727:3163":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:20682:7470":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:7522:3066":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10233:6601":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"12:2205:2299":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10708:3392":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"14:165:18581":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:699:3154":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:3134:1687":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2857:2849":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4559:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2840:2850":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7237:4451":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9691:6574":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4720:5218":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10357:3071":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:7601:6218":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7034:7079":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:2093:2983":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9501:3274":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:3854:4181":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8921:6441":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:538:3134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2386:2155":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40691:1689":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41100:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12609:3807":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13192:3971":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44414:6102":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:9317:6554":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4871:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12934:3906":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10649:6317":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11350:6753":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40623:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7372:34358":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10434:3361":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5805:5441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:8631:3262":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:7585:6217":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:491:3125":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:4983:6759":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2946:2783":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:582:3137":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:800:4735":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:43415:6087":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:7189:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:119:2954":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7659:19505":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:653:13534":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9601:3289":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9303:3274":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2803:2837":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:43394:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8884:7432":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:46603:6202":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10466:3366":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:586:4683":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:20444:30031":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12485:3704":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12265:3684":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:12415:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12134:3658":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6649:5645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10159:3338":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4893:2500":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5510:4215":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13436:4061":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7166:19502":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9401:3278":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5996:6384":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:39576:2363":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2771:4143":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:8494:3256":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:39906:5972":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:12176:12645":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:8771:657":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"18:507:3126":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:2924:5775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:4249:6704":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1571:4881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:42436:2662":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13100:3946":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:5681:1691":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:929:6431":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"13:110:34353":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7847:4516":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:43589:6719":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11054:3442":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10752:3395":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13404:4046":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:1564:1687":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2798:2838":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:38771:2858":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6528:7429":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:4380:2624":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:1459:6431":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:42596:6027":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:43359:6080":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:46273:6190":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13327:4021":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:39425:3017":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:10950:3075":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10684:6224":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4751:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:42620:2655":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:21385:7355":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42473:2347":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4649:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11606:3563":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:6827:3078":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"1:2361:7289":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:40900:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13478:4067":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:3125:6539":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10837:6766":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:38962:5934":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:40518:5987":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1244:6678":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4353:5080":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:247:6528":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:4297:4185":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:153:2952":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10774:3345":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:20631:7479":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:45029:6128":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:29997:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46085:6188":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8222:6271":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41220:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2482:12639":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1534:4858":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12797:3873":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11576:3560":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:11149:12576":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43184:6062":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7650:7220":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10824:6780":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21661:5833":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:10202:2653":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5772:5428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:41622:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"4:0:2138":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:8871:6541":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:3201:4671":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:43219:6067":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9026:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:7159:2343":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:10654:6319":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:11601:12573":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1541:4861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3126:28093":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6764:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6052:6383":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2815:2839":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6270:4151":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11594:3561":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9700:6577":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10625:3388":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6186:4150":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:8148:2370":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39475:2348":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1083:6682":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:7545:2342":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12514:3724":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:39913:2329":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:1903:19604":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40609:5996":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:11595:3156":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6512:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10721:3394":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7182:30349":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44308:6098":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11515:3548":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"9:188:6409":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:4318:6758":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:48908:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5525:4218":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:46566:6199":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6017:6621":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12337:3363":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6704:4380":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2509:4132":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:0:2148":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11708:3578":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11830:6448":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9362:3281":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:4131:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11164:6331":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:4817:4201":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9293:6552":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:43198:12585":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:4135:5805":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11909:3608":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:217:2965":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:4788:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5800:5440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9543:3027":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:652:3126":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:45477:6151":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:39637:2367":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11251:6338":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:11807:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4662:4196":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:8272:19558":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:11370:6038":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:6088:1535":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"5:7198:5791":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7909:4524":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:614:34375":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46519:6195":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4743:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9778:3297":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:387:7067":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"12:2178:4672":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1520:4853":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:8162:19555":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2886:2856":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"14:31:6669":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:493:4784":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4371:3016":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:6668:7074":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4635:4195":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:12163:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:4254:6705":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1229:1679":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:50269:6216":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:1550:4866":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10822:19568":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:21713:30315":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5902:5502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5761:6614":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5759:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12926:3903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3605:7334":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6611:5633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:5712:6440":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:586:4839":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:38944:2859":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2874:2853":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5813:5446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1330:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5000:5358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21127:7498":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:39653:2368":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4877:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1723:4978":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:5161:2966":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:8796:3268":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21779:5848":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9738:3293":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:6583:2308":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:40538:30343":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4300:2993":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:0:2142":{"crate_id":11,"path":["adler"],"kind":"module"},"17:11014:3431":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:1476:1669":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12073:3648":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:12384:3037":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:1420:4666":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"12:777:2962":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7956:4169":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39275:12632":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:10867:6301":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43363:6081":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:4629:7393":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10245:6602":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:4749:4199":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:40750:2491":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4476:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7322:2302":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6268:2966":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:3415:6701":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4439:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5890:5495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7218:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10226:24832":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2957:1808":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:21812:7336":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"9:920:18423":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:515:3129":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4689:4197":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:956:18424":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8941:6542":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:96:7050":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:42347:6718":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:39702:2371":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7228:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:8510:3257":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44362:6100":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8339:19560":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11974:3638":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4697:5204":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:561:4826":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42174:6020":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:681:3150":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:8911:34373":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:41966:6017":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:48947:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:0:2147":{"crate_id":17,"path":["object"],"kind":"module"},"1:9387:3070":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:46557:6198":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:42528:2665":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10445:3363":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:44463:6104":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42688:6033":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:42874:6041":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13413:4048":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:572:4831":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11137:3457":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42486:2667":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39252:12631":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:39269:5937":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5614:4230":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6000:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9371:6545":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6743:19500":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41935:6012":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11271:3479":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2579:4135":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11217:3473":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:505:6422":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:39928:2333":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:8774:3267":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11174:3463":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:578:4834":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:39628:2366":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12860:3887":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:39716:2372":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6628:5638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7487:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13059:3937":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"14:0:2144":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"9:863:18421":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6542:3062":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4385:4188":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:487:6530":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:8055:19543":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:5388:4152":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13221:3978":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13039:3930":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4248:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:40860:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:242:6527":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:21734:30345":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11528:3550":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1514:4850":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:5807:13097":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10490:3369":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:5184:18608":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:11652:12582":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4844:7392":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10659:6223":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:21531:5821":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42742:2653":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:3687:6690":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:6091:3057":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:6621:2356":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:3188:4173":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40940:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13126:3956":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:7343:4165":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7890:4521":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:8368:19561":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11748:3586":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6994:5786":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:40826:1684":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:12441:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"0:199:1673":{"crate_id":0,"path":["slab","Slab"],"kind":"struct"},"16:6781:6634":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9539:6567":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:679:7224":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:42894:6043":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4313:5057":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5679:6767":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4246:6757":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:1739:12799":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6241:4306":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11893:3603":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9930:3301":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:31763:5925":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:46481:6194":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:7151:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:879:1687":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7872:4518":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:1120:6681":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:9072:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:21387:7473":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:9406:1344":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:1645:2692":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11056:6312":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"12:1138:6682":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1575:2301":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4945:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7211:5794":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7688:7245":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:2573:6741":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:9339:6556":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4687:5198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6671:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5492:5533":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8932:6800":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43209:6063":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7278:4162":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9897:6591":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4564:5623":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:22358:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:6322:6771":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:44931:6126":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:2487:4131":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:2831:2843":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:38724:2864":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:43371:6083":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11149:3458":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1586:4669":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7873:5768":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12836:3882":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6829:4399":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:1534:6684":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:6925:2328":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9671:6572":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9382:6781":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13141:3960":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3204:2862":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10462:2795":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13518:4078":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12730:3854":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:12249:6711":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2631:4137":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9658:6571":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5703:4241":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3175:4668":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12237:3680":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3959:2991":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:38992:5936":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:382:6412":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10528:6609":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"9:676:18429":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:3535:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1571:1691":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10283:6605":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:39497:2349":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:609:6521":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7557:4466":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6541:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2809:2840":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:962:6677":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11005:6299":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2261:18610":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:39222:5943":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12756:3860":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12291:3686":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11186:3464":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5793:4109":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22160:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:697:6431":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39455:2347":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11547:3555":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:39244:5945":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46641:6204":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20711:7355":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:42670:6032":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7665:7222":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:4245:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6137:4292":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:5432:6766":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:43041:6055":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"14:215:4609":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3238:6749":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:39305:5955":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2367:4126":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4501:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6719:34359":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:3217:30768":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:1604:4903":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11774:3589":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"9:827:18513":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:592:18440":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1997:5768":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21637:5829":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4703:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"12:815:6673":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46577:6200":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10403:3395":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11391:6754":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44218:6094":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10933:3073":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4094:7077":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:20870:7476":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6567:4370":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:9220:6709":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:44663:6117":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4429:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4681:5196":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43339:6075":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:1927:7266":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5460:4213":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:7541:2341":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5786:5439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:214:6398":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:20397:3137":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:39899:2327":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:31772:5926":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41944:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12307:3688":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8776:6300":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4611:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:39345:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10921:3406":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:4606:4194":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6094:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9764:3296":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:39378:5961":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3969:2966":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:2300:4118":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:2827:2844":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40708:2413":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8483:6292":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44715:6119":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:5313:6760":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6816:4396":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6619:4372":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7076:1684":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:11354:6035":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:6154:3003":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:39484:2357":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:38868:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3123:28085":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:43610:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6252:4307":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2702:2424":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4549:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3865:7339":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13459:4062":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2819:2842":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7070:1684":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5660:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:9954:2655":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:11581:12575":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5347:6763":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1583:4889":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:3026:3170":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"9:709:6013":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:7452:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:22061:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:630:6686":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11070:3446":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6496:5584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5374:4149":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9433:6559":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:10074:2672":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9283:6551":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4921:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:4363:2993":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:525:4806":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13340:4027":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:41646:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:7319:4457":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:1438:6683":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6463:4344":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"12:853:6676":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11315:3496":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:41685:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12948:3909":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2759:2425":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4483:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4379:5091":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:11846:24021":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4921:4204":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:11542:7408":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11468:6340":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:3293:2301":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:8981:6543":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6472:4345":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11294:6029":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4574:4193":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6200:4302":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:8596:3261":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7019:34259":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11074:6330":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:1872:4671":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40759:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5556:3050":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8248:6792":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:9997:2671":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:933:6673":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11518:6345":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9627:6568":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46335:6191":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10108:6595":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:3559:1689":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:1518:18576":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10944:3074":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:762:2301":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12164:3664":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2964:1805":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13007:3920":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4416:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1448:6430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:2921:2593":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8974:6443":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:20594:7478":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6877:19501":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8256:6273":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:7195:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:39192:30358":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4404:7368":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:20760:5818":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40835:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6284:4168":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6109:4290":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:1847:2875":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:42937:5945":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4426:7369":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11828:3597":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"12:646:1689":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10670:3390":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8180:6794":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:286:2298":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:3632:4178":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2683:4139":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11734:3306":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8138:2357":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7948:6445":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12955:3911":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2932:33151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13184:3970":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:42518:2664":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9155:6546":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43026:6049":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13374:4039":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12198:3677":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11017:6300":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:1597:4671":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:21605:5824":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8401:6013":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44552:6108":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5999:3053":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10973:3426":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13492:4069":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11259:3478":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:531:4809":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:7146:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2481:7355":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10796:3397":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6528:4357":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39535:2359":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:632:1687":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5752:5415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:6069:7509":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:6573:2307":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2282:4116":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6079:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7446:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:4326:2623":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2788:2836":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:1832:1687":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9119:24828":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:21696:5836":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3667:1684":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:42508:2666":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"9:33:6404":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"12:1836:1684":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6668:4378":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:7239:5795":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9111:6313":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:962:2966":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:1003:6678":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6059:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9681:3209":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"14:40:3427":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5014:6759":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4108:6432":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:11331:6034":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:534:4106":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5878:5490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13572:4088":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5541:4220":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6178:3050":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5990:5532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7671:6219":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4981:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:8624:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12087:3651":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5235:4207":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"12:1555:6685":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11661:3572":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:20425:32436":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:38971:4450":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:10109:2659":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7484:6819":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10875:3402":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7497:4157":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43343:6076":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12225:3679":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:3105:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4571:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:6611:6771":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:1592:4670":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3198:2860":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4618:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:4755:30296":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:6865:2326":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8979:6446":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1382:1689":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40810:1687":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:3744:2301":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:1398:1684":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8096:6265":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6059:34361":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7943:6785":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8300:6274":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4307:5055":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40741:2414":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:22292:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:21621:5825":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7797:6781":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7309:4163":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8274:6796":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:5791:2998":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:29749:7335":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:985:1675":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6123:4148":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5664:4238":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:320:2956":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6757:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:41396:2610":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7825:4515":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:20465:30029":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"12:393:7068":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7521:5764":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4566:5625":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9422:6558":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13024:3928":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"14:187:18588":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:40455:5978":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:42578:6025":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:7596:2018":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"14:202:12592":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:39291:5953":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:8822:34367":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:3232:2865":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42903:6044":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:50248:6215":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:8526:3258":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2433:4129":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:5363:6764":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41060:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43004:12580":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"0:33:1684":{"crate_id":0,"path":["slab","IntoIter"],"kind":"struct"},"2:41382:2609":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:38786:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:5900:3050":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8155:3265":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:22193:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:41673:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:4590:12625":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41956:6013":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:3546:1687":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8333:2501":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"13:0:2137":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9446:6560":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:2476:6740":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2793:2841":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"7:79:18415":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2793:4144":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9165:34372":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:1085:6680":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:8441:19564":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:5163:4206":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9223:19574":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1072:33145":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"9:896:18422":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4850:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10394:3357":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2835:2845":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4357:4187":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8790:6301":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:4884:2991":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3283:7321":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:920:6683":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40674:2000":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8089:2326":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:6554:2306":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2345:7284":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8056:4533":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:5771:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:505:2983":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:5934:2374":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3939:1691":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6488:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:44432:6103":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12816:3874":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3763:2966":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3675:5768":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4402:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43427:12886":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4781:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6571:5630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:39553:5965":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:355:6721":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7426:6664":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:5005:2998":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5698:5389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2749:4142":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7003:1691":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:0:2146":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5823:5453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43120:6060":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"0:46:1689":{"crate_id":0,"path":["slab","IterMut"],"kind":"struct"},"16:7357:4458":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:41743:2607":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:5494:19493":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13148:3961":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:3689:4179":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:6222:1691":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6903:6307":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7298:4456":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:7150:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:39937:2335":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10350:3345":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:8666:3263":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:42638:2659":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:11405:2671":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44284:6097":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:45943:6187":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4334:5067":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6053:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6698:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7809:6224":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:925:6430":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:44763:6120":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7802:6223":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7942:6668":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:3929:7343":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3051:6743":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10420:3360":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4539:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:861:6677":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:11586:6708":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8806:6799":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1470:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4862:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:3626:2966":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5327:6762":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:599:34377":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7211:4255":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9885:6590":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:834:2972":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:10221:6600":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6530:5603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:30175:30328":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:9001:24033":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:46397:6192":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:505:4789":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9118:34366":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3201:6748":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:1931:6534":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12630:3817":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12103:3653":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7135:34360":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:2103:5770":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:36:4680":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:21279:2649":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:1695:4965":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5728:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4787:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6667:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12972:3914":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10608:3231":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43072:6059":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4952:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:3402:4175":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:646:7223":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:98:4659":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3963:7344":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:43597:6090":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:20872:5818":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13557:4087":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:4400:2626":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:1762:5801":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5722:5405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4637:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11330:3502":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}