{"root":"0:0:1873","crate_version":"0.4.9","includes_private":false,"index":{"5:689:2794":{"id":"5:689:2794","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5574:25965":{"id":"5:5574:25965","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:25968"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1993":{"id":"0:74:1993","crate_id":0,"name":"compact","span":{"filename":"src/lib.rs","begin":[523,4],"end":[576,5]},"visibility":"public","docs":"Reduce the capacity as much as possible, changing the key for elements when necessary.\n\nTo allow updating references to the elements which must be moved to a new key,\nthis function takes a closure which is called before moving each element.\nThe second and third parameters to the closure are the current key and\nnew key respectively.\nIn case changing the key for one element turns out not to be possible,\nthe move can be cancelled by returning `false` from the closure.\nIn that case no further attempts at relocating elements is made.\nIf the closure unwinds, the slab will be left in a consistent state,\nbut the value that the closure panicked on might be removed.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(10);\nlet a = slab.insert('a');\nslab.insert('b');\nslab.insert('c');\nslab.remove(a);\nslab.compact(|&mut value, from, to| {\n    assert_eq!((value, from, to), ('c', 2, 0));\n    true\n});\nassert!(slab.capacity() >= 2 && slab.capacity() < 10);\n```\n\nThe value is not moved when the closure returns `Err`:\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(100);\nlet a = slab.insert('a');\nlet b = slab.insert('b');\nslab.remove(a);\nslab.compact(|&mut value, from, to| false);\nassert_eq!(slab.iter().next(), Some((b, &'b')));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rekey",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3188:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"primitive":"usize"},{"primitive":"usize"}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:831":{"id":"0:109:831","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1212,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:32858":{"id":"2:12950:32858","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:32859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:6766","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1549,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["peekable","partial_cmp","chain","is_sorted_by_key","map","product","size_hint","unzip","position","fold","collect_into","any","flatten","ge","skip_while","intersperse","all","zip","__iterator_get_unchecked","cmp_by","copied","rposition","reduce","partition","map_windows","take_while","intersperse_with","next_chunk","skip","count","max","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","ne","fuse","map_while","for_each","advance_by","le","last","min","eq_by","cycle","eq","max_by","lt","find","is_partitioned","inspect","take","filter","nth","enumerate","is_sorted","array_chunks","min_by_key","find_map","collect","try_fold","cmp","by_ref","scan","filter_map","step_by","rev","is_sorted_by","sum","min_by","try_find","gt","try_for_each","try_collect","flat_map"],"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:197:171","0:198:1062","0:199:2207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:2616-0:60:1883":{"id":"a:2:42477:2616-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:38:463":{"id":"0:38:463","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[156,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:55:1881":{"id":"b:2:3558-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:171":{"id":"0:115:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1226,4],"end":[1226,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1300,0],"end":[1314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:136:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12990:25967":{"id":"2:12990:25967","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1244,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:121:171","0:122:1876","0:123:847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:30:1864":{"id":"b:2:2759-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:7908-0:46:1879":{"id":"b:2:7908-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7910:171","2:7911:1876","2:7912:847"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:12958:32861":{"id":"2:12958:32861","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:8128":{"id":"2:12997:8128","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:8128"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:6670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:30:1864":{"id":"a:2:2966:253-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153:1874":{"id":"0:153:1874","crate_id":0,"name":"key","span":{"filename":"src/lib.rs","begin":[1410,4],"end":[1412,5]},"visibility":"public","docs":"Return the key associated with this entry.\n\nA value stored in this entry will be associated with this key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:55:1881":{"id":"a:2:2966:253-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:202:2221":{"id":"0:202:2221","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1570,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:32867":{"id":"2:12976:32867","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:60:1883":{"id":"b:2:2754-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12956:32860":{"id":"2:12956:32860","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2446:24788":{"id":"2:2446:24788","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:171":{"id":"0:197:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1550,4],"end":[1550,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32755:5286","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:93:2082":{"id":"0:93:2082","crate_id":0,"name":"get_unchecked_mut","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key\nwithout performing bounds checking.\n\nFor a safe alternative see [`get_mut`](Slab::get_mut).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    let val = slab.get_unchecked_mut(key);\n    *val = 13;\n}\n\nassert_eq!(slab[key], 13);\n```","links":{"Slab::get_mut":"0:90:2043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1495,0],"end":[1499,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7995:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:178:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:60:1883":{"id":"b:2:2744-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:60":{"id":"0:41:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:46:1879":{"id":"b:2:2748-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2443:2439":{"id":"2:2443:2439","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:6776":{"id":"2:12892:6776","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:6756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:847":{"id":"0:117:847","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1876":{"id":"0:42:1876","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[198,0],"end":[201,1]},"visibility":"public","docs":"A consuming iterator over the values stored in a `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:42477:2616-0:42:1876","a:2:2966:253-0:42:1876","a:2:32825:244-0:42:1876","a:2:32882:2625-0:42:1876","a:2:42476:2617-0:42:1876","b:2:2754-0:42:1876","b:2:2744-0:42:1876","b:2:2748-0:42:1876","b:2:2441-0:42:1876","b:2:2444-0:42:1876","b:2:3558-0:42:1876","b:2:7908-0:42:1876","b:2:2759-0:42:1876","0:162","0:165","0:159","0:137","0:154"]}}},"0:175:2221":{"id":"0:175:2221","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1482,4],"end":[1492,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:1876":{"id":"0:128:1876","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1248,4],"end":[1248,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:2:2444-0:46:1879":{"id":"b:2:2444-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:2616-0:55:1881":{"id":"a:2:42477:2616-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3558-0:30:1864":{"id":"b:2:3558-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1316,0],"end":[1325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:139:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:55:1881":{"id":"b:2:2754-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12998:32872":{"id":"2:12998:32872","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:32872"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:6678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:216:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42476:2617-0:55:1881":{"id":"a:2:42476:2617-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:5559:33560":{"id":"5:5559:33560","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:30:1864":{"id":"b:2:2748-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192:882":{"id":"0:192:882","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:32871":{"id":"2:12995:32871","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:32871"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:6679","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:461":{"id":"0:37:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[148,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:171":{"id":"0:127:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1247,4],"end":[1247,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"b:2:2744-0:208:1871":{"id":"b:2:2744-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1505,0],"end":[1523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["peekable","partial_cmp","chain","is_sorted_by_key","map","product","size_hint","unzip","position","fold","collect_into","any","flatten","ge","skip_while","intersperse","all","zip","__iterator_get_unchecked","cmp_by","copied","rposition","reduce","partition","map_windows","take_while","intersperse_with","next_chunk","skip","count","max","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","ne","fuse","map_while","for_each","advance_by","le","last","min","eq_by","cycle","eq","max_by","lt","find","is_partitioned","inspect","take","filter","nth","enumerate","is_sorted","array_chunks","min_by_key","find_map","collect","try_fold","cmp","by_ref","scan","filter_map","step_by","rev","is_sorted_by","sum","min_by","try_find","gt","try_for_each","try_collect","flat_map"],"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:184:171","0:185:1062","0:186:2207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:46:1879":{"id":"b:5:687-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:689:2794","5:690:2795","5:691:2796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1942":{"id":"0:71:1942","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[381,4],"end":[387,5]},"visibility":"public","docs":"Reserve the minimum capacity required to store exactly `additional`\nmore values.\n\n`reserve_exact` does nothing if the slab already has sufficient capacity\nfor `additional` more values. If more capacity is required, a new segment\nof memory will be allocated and all existing values will be copied into\nit.  As such, if the slab is already very large, a call to `reserve` can\nend up being expensive.\n\nNote that the allocator may give the slab more space than it requests.\nTherefore capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve_exact(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:30:1864":{"id":"b:2:2441-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12898:32854":{"id":"2:12898:32854","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:6772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1501,0],"end":[1501,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8360:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12938:28342":{"id":"2:12938:28342","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2617-0:208:1871":{"id":"a:2:42476:2617-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:189:2221":{"id":"0:189:2221","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1526,4],"end":[1536,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1958":{"id":"0:72:1958","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[430,4],"end":[455,5]},"visibility":"public","docs":"Shrink the capacity of the slab as much as possible without invalidating keys.\n\nBecause values cannot be moved to a different index, the slab cannot\nshrink past any stored values.\nIt will drop down as close as possible to the length but the allocator may\nstill inform the underlying vector that there is space for a few more elements.\n\nThis function can take O(n) time even when the capacity cannot be reduced\nor the allocation is shrunk in place. Repeated calls run in O(1) though.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```\n\nThe slab cannot shrink past the last present value even if previous\nvalues are removed:\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..4 {\n    slab.insert(i);\n}\n\nslab.remove(0);\nslab.remove(3);\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:2796":{"id":"5:691:2796","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1246,0],"end":[1253,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:127:171","0:128:1876","0:129:847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:2616-0:208:1871":{"id":"a:2:42477:2616-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:164:882":{"id":"0:164:882","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1452,4],"end":[1454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2625-0:60:1883":{"id":"a:2:32882:2625-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12962:32863":{"id":"2:12962:32863","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[1201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:1048","0:68:1908","0:69:1909","0:70:1928","0:71:1942","0:72:1958","0:74:1993","0:84:2007","0:85:882","0:86:2013","0:87:863","0:88:864","0:89:2002","0:90:2043","0:91:2056","0:92:2075","0:93:2082","0:94:2089","0:95:2112","0:96:2124","0:97:2133","0:98:2138","0:100:2145","0:101:2152","0:102:2157","0:103:2170","0:105:2186"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:725":{"id":"0:142:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1331,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:46:1879":{"id":"a:2:32825:244-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2441-0:60:1883":{"id":"b:2:2441-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12866:2013":{"id":"2:12866:2013","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:32865":{"id":"2:12964:32865","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:13529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2124":{"id":"0:152:2124","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1387,5]},"visibility":"public","docs":"Insert a value in the entry, returning a mutable reference to the value.\n\nTo get the key associated with the value, use `key` prior to calling\n`insert`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["val",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:1876":{"id":"0:116:1876","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1227,4],"end":[1227,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"5:5555:33559":{"id":"5:5555:33559","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2494","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2494","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:28224":{"id":"2:12988:28224","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:28231","Self::is_ascii":"2:12987:25962"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:28231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2207":{"id":"0:172:2207","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:55:1881":{"id":"b:2:2748-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1225,0],"end":[1235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:115:171","0:116:1876","0:117:847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32882:2625-0:42:1876":{"id":"a:2:32882:2625-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42476:2617-0:60:1883":{"id":"a:2:42476:2617-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:1909":{"id":"0:69:1909","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[317,4],"end":[319,5]},"visibility":"public","docs":"Return the number of values the slab can store without reallocating.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::with_capacity(10);\nassert_eq!(slab.capacity(), 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:33561":{"id":"5:5562:33561","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1457,0],"end":[1457,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8360:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2056":{"id":"0:91:2056","crate_id":0,"name":"get2_mut","span":{"filename":"src/lib.rs","begin":[769,4],"end":[791,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously.\n\nIf any one of the given keys is not associated with a value, then `None`\nis returned.\n\nThis function can be used to get two mutable references out of one slab,\nso that you can manipulate both of them at the same time, eg. swap them.\n\n# Panics\n\nThis function will panic if `key1` and `key2` are the same.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = slab.get2_mut(key1, key2).unwrap();\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:882":{"id":"0:178:882","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1496,4],"end":[1498,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:30:1864":{"id":"a:2:32825:244-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1203,0],"end":[1213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39955:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:108:206","0:109:831"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:1908":{"id":"0:68:1908","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[300,4],"end":[306,5]},"visibility":"public","docs":"Construct a new, empty `Slab` with the specified capacity.\n\nThe returned slab will be able to store exactly `capacity` without\nreallocating. If `capacity` is 0, the slab will not allocate.\n\nIt is important to note that this function does not specify the *length*\nof the returned slab, but only the capacity. For an explanation of the\ndifference between length and capacity, see [Capacity and\nreallocation](index.html#capacity-and-reallocation).\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\n// The slab contains no values, even though it has capacity for more\nassert_eq!(slab.len(), 0);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    slab.insert(i);\n}\n\n// ...but this may make the slab reallocate\nslab.insert(11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2616-0:42:1876":{"id":"a:2:42477:2616-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:725":{"id":"0:139:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1320,4],"end":[1324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:60:1883":{"id":"b:2:2748-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:2133":{"id":"0:97:2133","crate_id":0,"name":"vacant_key","span":{"filename":"src/lib.rs","begin":[992,4],"end":[994,5]},"visibility":"public","docs":"Returns the key of the next vacant entry.\n\nThis function returns the key of the vacant entry which  will be used\nfor the next insertion. This is equivalent to\n`slab.vacant_entry().key()`, but it doesn't require mutable access.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert_eq!(slab.vacant_key(), 0);\n\nslab.insert(0);\nassert_eq!(slab.vacant_key(), 1);\n\nslab.insert(1);\nslab.remove(0);\nassert_eq!(slab.vacant_key(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1583,0],"end":[1587,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7995:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:205:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:1883":{"id":"0:60:1883","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[225,0],"end":[228,1]},"visibility":"public","docs":"A draining iterator for `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:42477:2616-0:60:1883","a:2:2966:253-0:60:1883","a:2:32825:244-0:60:1883","a:2:32882:2625-0:60:1883","a:2:42476:2617-0:60:1883","b:2:2754-0:60:1883","b:2:2744-0:60:1883","b:2:2748-0:60:1883","b:2:2441-0:60:1883","b:2:2444-0:60:1883","b:2:3558-0:60:1883","b:2:7908-0:60:1883","b:2:2759-0:60:1883","0:146","0:206","0:203","0:195","0:200"]}}},"2:12881:2075":{"id":"2:12881:2075","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:208:1871":{"id":"a:2:32825:244-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3560:1643":{"id":"2:3560:1643","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40123:6540","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:28345":{"id":"2:12906:28345","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2013":{"id":"0:86:2013","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Return `true` if there are no values stored in the slab.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert!(slab.is_empty());\n\nslab.insert(1);\nassert!(!slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:25968":{"id":"2:12991:25968","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:55:1881":{"id":"a:2:32825:244-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:205:882":{"id":"0:205:882","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1584,4],"end":[1586,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:60:1883":{"id":"b:2:2759-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12923:28336":{"id":"2:12923:28336","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:25176"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:2857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:33563":{"id":"5:5571:33563","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2494","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2494","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1876":{"id":"0:122:1876","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1239,4],"end":[1239,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"2:2758:1630":{"id":"2:2758:1630","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:725":{"id":"0:136:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2616-0:46:1879":{"id":"a:2:42477:2616-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1481,0],"end":[1493,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7942:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:175:2221"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2966:253-0:60:1883":{"id":"a:2:2966:253-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12953:32859":{"id":"2:12953:32859","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:32858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:6767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7912:847":{"id":"2:7912:847","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2007":{"id":"0:84:2007","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Clear the slab of all values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.clear();\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1062":{"id":"0:185:1062","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1508,4],"end":[1518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7908-0:42:1876":{"id":"b:2:7908-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7910:171","2:7911:1876","2:7912:847"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2441-0:46:1879":{"id":"b:2:2441-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:1864":{"id":"0:30:1864","crate_id":0,"name":"Slab","span":{"filename":"src/lib.rs","begin":[132,0],"end":[142,1]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type\n\nSee the [module documentation] for more details.\n\n[module documentation]: index.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:65","a:2:42477:2616-0:30:1864","a:2:2966:253-0:30:1864","a:2:32825:244-0:30:1864","a:2:32882:2625-0:30:1864","a:2:42476:2617-0:30:1864","b:2:2754-0:30:1864","b:2:2744-0:30:1864","b:2:2748-0:30:1864","b:2:2441-0:30:1864","b:2:2444-0:30:1864","b:2:3558-0:30:1864","b:2:2759-0:30:1864","b:5:687-0:30:1864","0:106","0:35","0:124","0:110","0:39","0:134","0:118","0:113","0:130"]}}},"b:2:2744-0:30:1864":{"id":"b:2:2744-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12896:30303":{"id":"2:12896:30303","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:30305"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:6774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1589,0],"end":[1589,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8360:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2625-0:55:1881":{"id":"a:2:32882:2625-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:171":{"id":"0:170:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1462,4],"end":[1462,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"0:121:171":{"id":"0:121:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1238,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1545,0],"end":[1545,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8360:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1357,0],"end":[1413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:152:2124","0:153:1874"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12893:6787":{"id":"2:12893:6787","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:6757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:30305":{"id":"2:12895:30305","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:30303"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:6773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1437,0],"end":[1449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7942:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:161:2221"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5572:2528":{"id":"5:5572:2528","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:2013","2:12867:32848","2:12868:32849","2:12870:32850","2:12873:24899","2:12874:32851","2:12875:339","2:12876:2091","2:12877:2002","2:12879:2043","2:12881:2075","2:12883:2082","2:12885:32852","2:12886:32853","2:12887:28328","2:12888:2063","2:12889:28331","2:12890:28332","2:12892:6776","2:12893:6787","2:12894:6403","2:12895:30305","2:12896:30303","2:12897:7951","2:12898:32854","2:12899:30285","2:12900:2157","2:12903:28344","2:12906:28345","2:12909:2771","2:12913:2735","2:12917:25176","2:12920:28334","2:12923:28336","2:12926:32855","2:12929:32856","2:12932:28338","2:12935:28340","2:12938:28342","2:12941:28343","2:12944:2450","2:12947:32857","2:12950:32858","2:12953:32859","2:12956:32860","2:12958:32861","2:12960:32862","2:12962:32863","2:12963:32864","2:12964:32865","2:12967:32866","2:12970:24920","2:12973:28346","2:12976:32867","2:12979:32868","2:12982:32869","2:12985:32870","2:12987:25962","2:12988:28224","2:12989:25966","2:12990:25967","2:12991:25968","2:12992:28227","2:12993:28228","2:12994:28229","2:12995:32871","2:12997:8128","2:12998:32872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:198:1062":{"id":"0:198:1062","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1552,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2043":{"id":"0:90:2043","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[735,4],"end":[740,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\n*slab.get_mut(key).unwrap() = \"world\";\n\nassert_eq!(slab[key], \"world\");\nassert_eq!(slab.get_mut(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:42:1876":{"id":"b:2:2441-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32825:244-0:60:1883":{"id":"a:2:32825:244-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12985:32870":{"id":"2:12985:32870","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:8320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:8320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:8320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:2063":{"id":"2:12888:2063","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:28328","str::split_at_mut_checked":"2:12890:28332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:30285":{"id":"2:12899:30285","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:6775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:24899":{"id":"2:12873:24899","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:13533"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1327,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:142:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186:2207":{"id":"0:186:2207","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1520,4],"end":[1522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2617-0:30:1864":{"id":"a:2:42476:2617-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:148:725":{"id":"0:148:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2112":{"id":"0:95:2112","crate_id":0,"name":"key_of","span":{"filename":"src/lib.rs","begin":[930,4],"end":[944,5]},"visibility":"public","docs":"Get the key for an element in the slab.\n\nThe reference must point to an element owned by the slab.\nOtherwise this function will panic.\nThis is a constant-time operation because the key can be calculated\nfrom the reference with pointer arithmetic.\n\n# Panics\n\nThis function will panic if the reference does not point to an element\nof the slab.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(String::from(\"foo\"));\nlet value = &slab[key];\nassert_eq!(slab.key_of(value), key);\n```\n\nValues are not compared, so passing a reference to a different location\nwill result in a panic:\n\n```should_panic\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(0);\nlet bad = &0;\nslab.key_of(bad); // this will panic\nunreachable!();\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["present_element",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:847":{"id":"0:123:847","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1241,4],"end":[1243,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2763:1628":{"id":"2:2763:1628","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2617-0:46:1879":{"id":"a:2:42476:2617-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12876:2091":{"id":"2:12876:2091","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:28338":{"id":"2:12932:28338","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532","str::rsplitn":"2:12935:28340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:2855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2157":{"id":"2:12900:2157","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:208:1871":{"id":"b:2:2759-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:1928":{"id":"0:70:1928","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[347,4],"end":[353,5]},"visibility":"public","docs":"Reserve capacity for at least `additional` more values to be stored\nwithout allocating.\n\n`reserve` does nothing if the slab already has sufficient capacity for\n`additional` more values. If more capacity is required, a new segment of\nmemory will be allocated and all existing values will be copied into it.\nAs such, if the slab is already very large, a call to `reserve` can end\nup being expensive.\n\nThe slab may reserve more than `additional` extra space in order to\navoid frequent reallocations. Use `reserve_exact` instead to guarantee\nthat only the requested space is allocated.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:46:1879":{"id":"b:2:2754-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:2221":{"id":"0:161:2221","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1438,4],"end":[1448,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:42:1876":{"id":"b:2:2744-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:2091","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1349,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:148:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12967:32866":{"id":"2:12967:32866","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:25176":{"id":"2:12917:25176","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:30305","str::rsplit":"2:12923:28336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:2853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:32852":{"id":"2:12885:32852","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:32853","crate::ops::Index":"2:39955:2188"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1285,0],"end":[1298,1]},"visibility":"default","docs":"Create a slab from an iterator of key-value pairs.\n\nIf the iterator produces duplicate keys, the previous value is replaced with the later one.\nThe keys does not need to be sorted beforehand, and this function always\ntakes O(n) time.\nNote that the returned slab will use space proportional to the largest key,\nso don't use `Slab` with untrusted keys.\n\n# Examples\n\n```\n# use slab::*;\n\nlet vec = vec![(2,'a'), (6,'b'), (7,'c')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert!(slab.capacity() >= 8);\nassert_eq!(slab[2], 'a');\n```\n\nWith duplicate and unsorted keys:\n\n```\n# use slab::*;\n\nlet vec = vec![(20,'a'), (10,'b'), (11,'c'), (10,'d')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert_eq!(slab[10], 'd');\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7900:143","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:132:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1417,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["peekable","partial_cmp","chain","is_sorted_by_key","map","product","size_hint","unzip","position","fold","collect_into","any","flatten","ge","skip_while","intersperse","all","zip","__iterator_get_unchecked","cmp_by","copied","rposition","reduce","partition","map_windows","take_while","intersperse_with","next_chunk","skip","count","max","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","ne","fuse","map_while","for_each","advance_by","le","last","min","eq_by","cycle","eq","max_by","lt","find","is_partitioned","inspect","take","filter","nth","enumerate","is_sorted","array_chunks","min_by_key","find_map","collect","try_fold","cmp","by_ref","scan","filter_map","step_by","rev","is_sorted_by","sum","min_by","try_find","gt","try_for_each","try_collect","flat_map"],"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:156:171","0:157:1062","0:158:2207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12970:24920":{"id":"2:12970:24920","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:55:1881":{"id":"b:2:2444-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12890:28332":{"id":"2:12890:28332","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:28331"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:32848":{"id":"2:12867:32848","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2138":{"id":"0:98:2138","crate_id":0,"name":"vacant_entry","span":{"filename":"src/lib.rs","begin":[1019,4],"end":[1024,5]},"visibility":"public","docs":"Return a handle to a vacant entry allowing for further manipulation.\n\nThis function is useful when creating values that must contain their\nslab key. The returned `VacantEntry` reserves a slot in the slab and is\nable to query the associated key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2625-0:46:1879":{"id":"a:2:32882:2625-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12913:2735":{"id":"2:12913:2735","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:32864":{"id":"2:12963:32864","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:208:1871":{"id":"b:2:2748-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:171":{"id":"0:156:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1418,4],"end":[1418,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"2:12883:2082":{"id":"2:12883:2082","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7908-0:55:1881":{"id":"b:2:7908-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7910:171","2:7911:1876","2:7912:847"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:12887:28328":{"id":"2:12887:28328","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:28331","str::split_at_mut":"2:12888:2063"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:30:1864":{"id":"b:5:687-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:689:2794","5:690:2795","5:691:2796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132:755":{"id":"0:132:755","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:28340":{"id":"2:12935:28340","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:28338","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:2851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:32869":{"id":"2:12982:32869","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:42:1876":{"id":"b:2:2759-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5556:2147":{"id":"5:5556:2147","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:30:1864":{"id":"b:2:2754-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5573:25964":{"id":"5:5573:25964","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:25967"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:461":{"id":"0:54:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:2450":{"id":"2:12944:2450","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:32857"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1048":{"id":"0:67:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[251,4],"end":[257,5]},"visibility":"public","docs":"Construct a new, empty `Slab`.\n\nThe function does not allocate and the returned slab will have no\ncapacity until `insert` is called or capacity is explicitly reserved.\n\nThis is `const fn` on Rust 1.39+.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::new();\n```","links":{},"attrs":["#[cfg(not(slab_no_const_vec_new))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2170":{"id":"0:103:2170","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1149,4],"end":[1163,5]},"visibility":"public","docs":"Retain only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(usize, &mut e)`\nreturns false. This method operates in place and preserves the key\nassociated with the retained values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet k1 = slab.insert(0);\nlet k2 = slab.insert(1);\nlet k3 = slab.insert(2);\n\nslab.retain(|key, val| key == k1 || *val == 1);\n\nassert!(slab.contains(k1));\nassert!(slab.contains(k2));\nassert!(!slab.contains(k3));\n\nassert_eq!(2, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3188:139","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:1871":{"id":"0:208:1871","crate_id":0,"name":"VacantEntry","span":{"filename":"src/lib.rs","begin":[192,0],"end":[195,1]},"visibility":"public","docs":"A handle to a vacant entry in a `Slab`.\n\n`VacantEntry` allows constructing values with the key that they will be\nassigned to.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:149","a:2:42477:2616-0:208:1871","a:2:2966:253-0:208:1871","a:2:32825:244-0:208:1871","a:2:32882:2625-0:208:1871","a:2:42476:2617-0:208:1871","b:2:2754-0:208:1871","b:2:2744-0:208:1871","b:2:2748-0:208:1871","b:2:2441-0:208:1871","b:2:2444-0:208:1871","b:2:3558-0:208:1871","b:2:2759-0:208:1871","0:213"]}}},"2:7911:1876":{"id":"2:7911:1876","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1461,0],"end":[1479,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["peekable","partial_cmp","chain","is_sorted_by_key","map","product","size_hint","unzip","position","fold","collect_into","any","flatten","ge","skip_while","intersperse","all","zip","__iterator_get_unchecked","cmp_by","copied","rposition","reduce","partition","map_windows","take_while","intersperse_with","next_chunk","skip","count","max","partial_cmp_by","cloned","max_by_key","try_reduce","partition_in_place","ne","fuse","map_while","for_each","advance_by","le","last","min","eq_by","cycle","eq","max_by","lt","find","is_partitioned","inspect","take","filter","nth","enumerate","is_sorted","array_chunks","min_by_key","find_map","collect","try_fold","cmp","by_ref","scan","filter_map","step_by","rev","is_sorted_by","sum","min_by","try_find","gt","try_for_each","try_collect","flat_map"],"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:170:171","0:171:1062","0:172:2207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:832":{"id":"0:112:832","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1217,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:2771":{"id":"2:12909:2771","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:25966":{"id":"2:12989:25966","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1338,0],"end":[1347,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:145:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12870:32850":{"id":"2:12870:32850","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:32849"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:725":{"id":"0:216:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:28228":{"id":"2:12993:28228","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34565"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2002":{"id":"0:89:2002","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\nassert_eq!(slab.get(key), Some(&\"hello\"));\nassert_eq!(slab.get(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2625-0:30:1864":{"id":"a:2:32882:2625-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1451,0],"end":[1455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7995:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:164:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:2616-0:30:1864":{"id":"a:2:42477:2616-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:7910:171":{"id":"2:7910:171","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:41:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:206":{"id":"0:108:206","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1204,4],"end":[1204,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:3558-0:208:1871":{"id":"b:2:3558-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:171":{"id":"0:184:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1506,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"0:158:2207":{"id":"0:158:2207","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:42:1876":{"id":"a:2:2966:253-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12877:2002":{"id":"2:12877:2002","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:28331":{"id":"2:12889:28331","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:28332"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:32855":{"id":"2:12926:32855","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:13532","str::split":"2:12917:25176","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:32856"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:6762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:33562":{"id":"5:5570:33562","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[209,0],"end":[216,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:54:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12941:28343":{"id":"2:12941:28343","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:100:2145":{"id":"0:100:2145","crate_id":0,"name":"try_remove","span":{"filename":"src/lib.rs","begin":[1058,4],"end":[1076,5]},"visibility":"public","docs":"Tries to remove the value associated with the given key,\nreturning the value if the key existed.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.try_remove(hello), Some(\"hello\"));\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1215,0],"end":[1223,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"2:3220:2189","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:112:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2444-0:208:1871":{"id":"b:2:2444-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:42:1876":{"id":"b:2:2748-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12868:32849":{"id":"2:12868:32849","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:32856":{"id":"2:12929:32856","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:13532","str::split":"2:12917:25176","prim@char":"1:12055:457","str::split_terminator":"2:12926:32855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:6763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2148":{"id":"2:2747:2148","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1881":{"id":"0:55:1881","crate_id":0,"name":"IterMut","span":{"filename":"src/lib.rs","begin":[219,0],"end":[222,1]},"visibility":"public","docs":"A mutable iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:42477:2616-0:55:1881","a:2:2966:253-0:55:1881","a:2:32825:244-0:55:1881","a:2:32882:2625-0:55:1881","a:2:42476:2617-0:55:1881","b:2:2754-0:55:1881","b:2:2744-0:55:1881","b:2:2748-0:55:1881","b:2:2441-0:55:1881","b:2:2444-0:55:1881","b:2:3558-0:55:1881","b:2:7908-0:55:1881","b:2:2759-0:55:1881","0:187","0:143","0:181","0:193","0:190"]}}},"0:46:1879":{"id":"0:46:1879","crate_id":0,"name":"Iter","span":{"filename":"src/lib.rs","begin":[204,0],"end":[207,1]},"visibility":"public","docs":"An iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:42477:2616-0:46:1879","a:2:2966:253-0:46:1879","a:2:32825:244-0:46:1879","a:2:32882:2625-0:46:1879","a:2:42476:2617-0:46:1879","b:2:2754-0:46:1879","b:2:2744-0:46:1879","b:2:2748-0:46:1879","b:2:2441-0:46:1879","b:2:2444-0:46:1879","b:2:3558-0:46:1879","b:2:7908-0:46:1879","b:2:2759-0:46:1879","b:5:687-0:46:1879","0:176","0:51","0:173","0:140","0:179","0:167"]}}},"0:87:863":{"id":"0:87:863","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[657,4],"end":[662,5]},"visibility":"public","docs":"Return an iterator over the slab.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nlet mut iterator = slab.iter();\n\nassert_eq!(iterator.next(), Some((0, &0)));\nassert_eq!(iterator.next(), Some((1, &1)));\nassert_eq!(iterator.next(), Some((2, &2)));\nassert_eq!(iterator.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1525,0],"end":[1537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7942:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:189:2221"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3558-0:42:1876":{"id":"b:2:3558-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:46:1879":{"id":"b:2:2744-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2754-0:42:1876":{"id":"b:2:2754-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2759-0:46:1879":{"id":"b:2:2759-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:60:1883":{"id":"b:2:2444-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129:847":{"id":"0:129:847","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1250,4],"end":[1252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:28344":{"id":"2:12903:28344","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:32862":{"id":"2:12960:32862","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7908-0:60:1883":{"id":"b:2:7908-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8051:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7904:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7910:171","2:7911:1876","2:7912:847"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"5:690:2795":{"id":"5:690:2795","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:208:1871":{"id":"a:2:2966:253-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32825:244-0:42:1876":{"id":"a:2:32825:244-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2441-0:208:1871":{"id":"b:2:2441-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1873":{"id":"0:0:1873","crate_id":0,"name":"slab","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1589,41]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type.\n\n`Slab` provides pre-allocated storage for a single data type. If many values\nof a single type are being allocated, it can be more efficient to\npre-allocate the necessary storage. Since the size of the type is uniform,\nmemory fragmentation can be avoided. Storing, clearing, and lookup\noperations become very cheap.\n\nWhile `Slab` may look like other Rust collections, it is not intended to be\nused as a general purpose collection. The primary difference between `Slab`\nand `Vec` is that `Slab` returns the key when storing the value.\n\nIt is important to note that keys may be reused. In other words, once a\nvalue associated with a given key is removed from a slab, that key may be\nreturned from future calls to `insert`.\n\n# Examples\n\nBasic storing and retrieval.\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nlet world = slab.insert(\"world\");\n\nassert_eq!(slab[hello], \"hello\");\nassert_eq!(slab[world], \"world\");\n\nslab[world] = \"earth\";\nassert_eq!(slab[world], \"earth\");\n```\n\nSometimes it is useful to be able to associate the key with the value being\ninserted in the slab. This can be done with the `vacant_entry` API as such:\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```\n\nIt is generally a good idea to specify the desired capacity of a slab at\ncreation time. Note that `Slab` will grow the internal capacity when\nattempting to insert a new value once the existing capacity has been reached.\nTo avoid this, add a check.\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(1024);\n\n// ... use the slab\n\nif slab.len() == slab.capacity() {\n    panic!(\"slab full\");\n}\n\nslab.insert(\"the slab is not at capacity yet\");\n```\n\n# Capacity and reallocation\n\nThe capacity of a slab is the amount of space allocated for any future\nvalues that will be inserted in the slab. This is not to be confused with\nthe *length* of the slab, which specifies the number of actual values\ncurrently being inserted. If a slab's length is equal to its capacity, the\nnext value inserted into the slab will require growing the slab by\nreallocating.\n\nFor example, a slab with capacity 10 and length 0 would be an empty slab\nwith space for 10 more stored values. Storing 10 or fewer elements into the\nslab will not change its capacity or cause reallocation to occur. However,\nif the slab length is increased to 11 (due to another `insert`), it will\nhave to reallocate, which can be slow. For this reason, it is recommended to\nuse [`Slab::with_capacity`] whenever possible to specify how many values the\nslab is expected to store.\n\n# Implementation\n\n`Slab` is backed by a `Vec` of slots. Each slot is either occupied or\nvacant. `Slab` maintains a stack of vacant slots using a linked list. To\nfind a vacant slot, the stack is popped. When a slot is released, it is\npushed onto the stack.\n\nIf there are no more available slots in the stack, then `Vec::reserve(1)` is\ncalled and a new slot is created.\n\n[`Slab::with_capacity`]: struct.Slab.html#with_capacity","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:30:1864","0:208:1871","0:42:1876","0:46:1879","0:55:1881","0:60:1883"],"is_stripped":false}}},"2:12874:32851":{"id":"2:12874:32851","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2124":{"id":"0:96:2124","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[964,4],"end":[970,5]},"visibility":"public","docs":"Insert a value in the slab, returning key assigned to the value.\n\nThe returned key can later be used to retrieve or remove the value using indexed\nlookup and `remove`. Additional capacity is allocated if needed. See\n[Capacity and reallocation](index.html#capacity-and-reallocation).\n\n# Panics\n\nPanics if the new storage in the vector exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\nassert_eq!(slab[key], \"hello\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"generic":"T"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:32857":{"id":"2:12947:32857","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:13532","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:2450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:6770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:46:1879":{"id":"b:2:3558-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:2186":{"id":"0:105:2186","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1192,4],"end":[1200,5]},"visibility":"public","docs":"Return a draining iterator that removes all elements from the slab and\nyields the removed items.\n\nNote: Elements are removed even if the iterator is only partially\nconsumed or not consumed at all.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet _ = slab.insert(0);\nlet _ = slab.insert(1);\nlet _ = slab.insert(2);\n\n{\n    let mut drain = slab.drain();\n\n    assert_eq!(Some(0), drain.next());\n    assert_eq!(Some(1), drain.next());\n    assert_eq!(Some(2), drain.next());\n    assert_eq!(None, drain.next());\n}\n\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:55:1881":{"id":"b:2:2744-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2747:2148"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[144,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:37:461","0:38:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12879:2043":{"id":"2:12879:2043","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:32868":{"id":"2:12979:32868","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2089":{"id":"0:94:2089","crate_id":0,"name":"get2_unchecked_mut","span":{"filename":"src/lib.rs","begin":[881,4],"end":[892,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously without performing bounds checking and safety\ncondition checking.\n\nFor a safe alternative see [`get2_mut`](Slab::get2_mut).\n\nThis function should be used with care.\n\n# Safety\n\n- Both keys must be within bounds.\n- The condition `key1 != key2` must hold.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = unsafe { slab.get2_unchecked_mut(key1, key2) };\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{"Slab::get2_mut":"0:91:2056"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:208:1871":{"id":"b:2:2754-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12992:28227":{"id":"2:12992:28227","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34565"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1539,0],"end":[1543,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7995:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:192:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12987:25962":{"id":"2:12987:25962","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:864":{"id":"0:88:864","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Return an iterator that allows modifying each value.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet key1 = slab.insert(0);\nlet key2 = slab.insert(1);\n\nfor (key, val) in slab.iter_mut() {\n    if key == key1 {\n        *val += 2;\n    }\n}\n\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:1062":{"id":"0:171:1062","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1464,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:6403":{"id":"2:12894:6403","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:3737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:28334":{"id":"2:12920:28334","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:30:1864":{"id":"b:2:2444-0:30:1864","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1864","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:145:725":{"id":"0:145:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1342,4],"end":[1346,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2157":{"id":"0:102:2157","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1118,4],"end":[1123,5]},"visibility":"public","docs":"Return `true` if a value is associated with the given key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nassert!(slab.contains(hello));\n\nslab.remove(hello);\n\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:33559","5:5556:2147","5:5559:33560","5:5562:33561","5:5570:33562","5:5571:33563","5:5572:2528","5:5573:25964","5:5574:25965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2750:752":{"id":"2:2750:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:60:1883":{"id":"b:2:3558-0:60:1883","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32882:2625-0:208:1871":{"id":"a:2:32882:2625-0:208:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2444-0:42:1876":{"id":"b:2:2444-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2446:24788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:2207":{"id":"0:199:2207","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1564,4],"end":[1566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:7951":{"id":"2:12897:7951","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:6771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:32853":{"id":"2:12886:32853","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:2189","str::slice_unchecked":"2:12885:32852"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:46:1879":{"id":"a:2:2966:253-0:46:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12973:28346":{"id":"2:12973:28346","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:13532"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:13530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:55:1881":{"id":"b:2:2441-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2443:2439"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42476:2617-0:42:1876":{"id":"a:2:42476:2617-0:42:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42477:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85:882":{"id":"0:85:882","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Return the number of stored values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nassert_eq!(3, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:28229":{"id":"2:12994:28229","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34565"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:55:1881":{"id":"b:2:2759-0:55:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:92:2075":{"id":"0:92:2075","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[815,4],"end":[820,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key without\nperforming bounds checking.\n\nFor a safe alternative see [`get`](Slab::get).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    assert_eq!(slab.get_unchecked(key), &2);\n}\n```","links":{"Slab::get":"0:89:2002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2152":{"id":"0:101:2152","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1101,5]},"visibility":"public","docs":"Remove and return the value associated with the given key.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Panics\n\nPanics if `key` is not associated with a value.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.remove(hello), \"hello\");\nassert!(!slab.contains(hello));\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:1062":{"id":"0:157:1062","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1420,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8051:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1569,0],"end":[1581,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7942:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:202:2221"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:39955:2188":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6079:6109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22477:8456":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:7823:7502":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:2666:3465":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43416:2819":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42292:6999":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:5408:13524":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:4376:2820":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4610:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:5404:13523":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4841:5811":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:7302:2493":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42114:6705":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:44145:2864":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:48606:6938":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:32826:2624":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12408:3855":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:643:3578":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4764:5770":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6120:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41082:2558":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43816:6749":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:7633:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"15:306:7950":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13437:3977":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11026:20605":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14933:4365":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:2063:7413":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11605:3776":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:13461:2492":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15368:4464":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4666:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"13:0:2337":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13766:4062":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:2203:7241":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:40764:6675":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2269:6386":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11493:7276":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8201:2522":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:48185:6921":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3227:25695":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"8:0:2339":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4890:8269":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"15:288:7946":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12671:7326":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:3468:3068":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4649:4795":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22699:6438":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"15:394:19624":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:598:33679":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:15116:4396":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6895:5006":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4543:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11043:7027":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13485:3989":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12076:7306":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:4448:7428":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:1287:1871":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:3260:4777":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:21302:3589":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:928:8146":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:536:4709":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:22433:8210":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5278:4810":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4063:8259":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"0:60:1883":{"crate_id":0,"path":["slab","Drain"],"kind":"struct"},"11:2124:1866":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9452:7503":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:13367:3474":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7366:4767":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1632:5533":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43584:6741":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15342:4454":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:15596:4541":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2971:2488":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8276:2853":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:14968:4366":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:504:3417":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14723:4216":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:43314:6730":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41044:2547":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3232:5279":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:2554:33650":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11621:3778":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13064:3905":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7388:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:4005:8254":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11541:7479":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:6495:2525":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"11:1087:33651":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:9107:7038":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42418:1881":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41135:2562":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6263:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:6903:2504":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:7556:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6062:4892":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1650:5545":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:96:7939":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14752:4236":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7411:1876":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6546:4950":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:21586:6430":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:12336:6768":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:14386:4172":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10075:7528":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:15249:4428":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7355:5063":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3579:8230":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:2319:4720":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:2562:5287":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12621:3870":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:10419:3739":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:34281:3046":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13594:4019":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:4227:3423":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:15010:4373":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:2175:20648":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"15:327:7127":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"9:177:7141":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1596:5503":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9807:20576":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:15463:4486":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10982:20604":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:4228:7969":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3017:3040":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12030:7303":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:1581:1883":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:328:5272":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6136:6131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44035:2850":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40798:6678":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4182:7427":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15376:4467":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4440:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3211:32226":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15390:4469":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:1917:5279":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:8097:5140":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15214:4422":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5974:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10675:6949":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13538:4002":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2883:19660":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:15:2453":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14876:4330":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16151:4684":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15273:4437":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:7692:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1514:5454":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16187:4693":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7869:5122":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:4527:2821":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1302:7398":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:7651:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4776:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6913:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6724:4983":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1883:1879":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3139:3065":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12949:3840":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:48478:6930":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:513:7237":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:15836:4602":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:44289:6762":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5897:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:11038:2858":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:7619:2522":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6713:3399":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40866:6686":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13308:3958":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:44185:6752":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3049:3059":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:22833:6457":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:4107:1881":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10671:33669":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:357:7448":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2553:4737":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4955:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15655:4556":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:7521:30281":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4813:8273":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:39296:3056":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7913:2540":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:41558:2523":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11288:5350":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:6665:8341":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12768:20573":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:10155:8327":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:7523:4770":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:9799:2831":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:46344:6834":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7622:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:951:7397":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3220:2189":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46150:6826":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6934:6322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14529:4198":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12238:7315":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:3709:4780":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1024:3399":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5910:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8343:7000":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11382:7066":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:563:5425":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:9952:2807":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:15473:4491":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6908:5009":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:3597:7247":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10997:3748":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44239:2853":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13292:3954":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:34454:3047":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13832:4073":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10251:3733":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1710:5576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:10944:3510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44361:2851":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14847:4319":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12792:3693":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4401:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:4197:3423":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:515:3581":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:765:24774":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7595:4759":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39959:3060":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:43613:6743":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:38607:3053":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:4236:13556":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:22402:13746":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:8022:20533":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5616:4819":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11102:7263":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1456:1876":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:44443:6769":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7672:3504":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6268:4754":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1054:7398":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8549:8319":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43378:2818":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11405:7275":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:3264:7245":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:45250:5290":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15222:4424":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:44655:6785":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6254:4905":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:40910:6688":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8270:3737":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:7639:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:41167:2564":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4355:4787":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:12518:8320":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:5484:7488":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:7808:8165":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12659:7325":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:10321:1515":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:41192:2566":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:11228:7542":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11773:3874":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:40993:2544":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:16212:4698":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:40787:6677":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3233:26411":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46675:6851":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10004:2809":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5885:6008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5004:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2835:4750":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:15197:4419":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6059:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12362:3852":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11630:25923":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1968:8175":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8866:7027":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:43088:2810":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3008:13739":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1072:7402":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:2569:2495":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14341:4165":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:10820:1881":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:3600:3628":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10246:25064":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12433:3858":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:44686:6789":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7548:6404":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10254:8215":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10068:20575":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15521:4528":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6248:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:2487:6387":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"14:187:19604":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:754:3620":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4399:4788":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10612:7251":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22295:8461":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13568:4014":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6599:4963":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:4333:6415":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5794:4846":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21324:30885":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:12399:3854":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:5151:7484":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3804:7479":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9015:7161":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11755:3792":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12038:24919":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:44215:6757":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5146:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:588:8127":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8981:8346":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15324:4450":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41013:2545":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43623:6747":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4809:8270":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6169:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4535:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7584:6405":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11056:7028":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:39875:2982":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7482:7384":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:13239:7436":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12251:7316":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"9:0:2340":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:43341:30333":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1576:5489":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7998:4773":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2977:3483":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:2157:3417":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6230:4900":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8939:7031":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2489:4734":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:4601:2824":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:1603:7405":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12175:7307":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:40956:3453":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6666:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:2439:4732":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:5360:3399":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2769:4747":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13387:3970":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:6880:8371":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:1115:7964":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6011:3430":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:48458:6928":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13844:4075":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:2049:6376":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:4694:8259":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4871:4803":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3431:3067":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:22864:8253":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:922:7393":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8066:7507":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2304:19659":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:883:7397":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7619:20531":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:673:1879":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4388:5618":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44556:6678":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:2140:7398":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7717:6945":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:8055:5057":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10933:3509":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5919:20523":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7537:4771":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6813:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40721:6670":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1686:3399":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5865:4856":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:9181:7040":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9633:725":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:11743:3789":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15445:4483":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:886:3407":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5955:6045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8922:7030":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8210:6993":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6804:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11318:3512":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:645:8130":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44967:6809":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:44407:6767":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:11680:2871":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:15608:4544":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7982:7505":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14436:4189":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12887:3892":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47499:6885":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3739:8251":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:16176:4692":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10018:20572":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10524:7250":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:16249:4704":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:299:5269":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13272:3953":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6579:20526":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10338:7518":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:1566:19592":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7508:6398":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:44084:2866":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12107:3767":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15769:4590":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6858:5002":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44522:6774":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:46220:6829":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:4706:6230":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10092:20593":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1718:5580":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1574:1879":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:2492:2355":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:10008:2811":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11715:3786":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:45029:6817":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6658:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:7867:2541":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:16269:3975":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"18:689:3605":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:31205:30284":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:15206:4420":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:38717:3055":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12353:3851":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:4987:31208":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1664:5556":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44053:2849":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9054:7524":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:7917:6949":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3349:7475":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7551:4761":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6071:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48393:6925":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10769:33671":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10646:7537":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:9033:24925":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2979:4774":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4351:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9659:7154":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11075:3751":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12478:3863":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6555:4951":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3416:30546":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"18:538:3586":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6376:4914":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"14:40:3940":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2355:4728":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:6107:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:48431:6926":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6759:4763":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:48309:6923":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42535:1879":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22840:6460":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10573:33673":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:16259:3970":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:16069:4664":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:1501:5448":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:475:5372":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46174:6827":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:42435:2613":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4433:4789":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8446:2702":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10185:3730":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10737:24927":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:7397:7966":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:495:5383":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4581:2822":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:563:3588":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13553:4008":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:1517:7151":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12851:3890":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11661:3782":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:3622:1881":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9002:7034":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:33302:3037":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44343:2855":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44823:6794":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5298:20519":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:1914:6408":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:31017:2894":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:15426:4478":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13581:4018":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5521:4758":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3545:4779":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11467:3774":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5009:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:62:14061":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2351:13746":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:13187:31118":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:10365:3462":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:22722:6442":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:1007:1866":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:48583:6937":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2436:8200":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4452:7483":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1440:1881":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:42314:6722":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8071:7165":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14986:4371":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:4459:3425":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:3406:4778":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:21341:30891":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10381:3507":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5023:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12320:6765":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:11079:2855":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4800:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:8407:30829":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14788:4267":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11618:7071":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11443:3772":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:9220:25882":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:22853:6461":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11865:7302":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2509:4735":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:5640:8325":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13015:3858":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:0:2342":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:507:3578":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3027:3038":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:10002:2808":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1596:5278":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11313:3764":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6221:4899":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3240:5277":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:40847:13581":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:849:1881":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12388:3853":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:527:5405":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7669:2498":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:735:24773":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"14:165:19597":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:44846:6802":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:46894:6858":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1537:7412":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8295:7515":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11877:3794":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6669:4978":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15356:4461":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:281:2494":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:3473:7246":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6159:6137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:4518:4792":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11242:7268":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:507:5388":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"9:356:19527":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11051:7259":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:12106:13533":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40821:13580":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6682:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13375:3969":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7653:5081":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4449:5659":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4556:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:482:3476":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:6927:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:34026:3043":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44198:6755":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:6631:1876":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:31043:30317":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7225:20529":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7998:6376":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4538:8281":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11368:7065":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10688:7052":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44123:2865":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7294:5058":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6030:4887":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:47229:6880":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11764:3793":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12422:3856":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1582:7404":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:939:7394":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14414:4178":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10155:3728":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10350:3736":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14994:4372":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46130:6825":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2326:7398":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:48247:6922":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15410:4475":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:16165:4687":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:6718:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:16138:4678":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:3856:4784":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"11:2352:1871":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:8363:2538":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8300:8249":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10446:7474":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:10887:33675":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:1913:15465":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:403:7236":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12900:3894":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14311:4160":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:46605:6849":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47465:6884":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12707:7329":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:41053:2556":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2418:6410":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:637:7452":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12371:3895":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:21971:8210":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:4998:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:659:7229":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3358:2497":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:1590:5277":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1674:5562":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11214:7266":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"9:52:7131":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42551:1876":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:7863:2542":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"9:446:19512":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:33967:3045":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10443:7472":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43324:2818":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40814:6679":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5450:7485":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:44165:2863":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2446:8205":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8283:6771":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:3999:8255":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:10927:2854":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44257:2857":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12342:3847":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9457:3506":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"18:613:33678":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:42477:2616":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4902:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:6263:7164":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14298:4159":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11915:20690":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3799:1876":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:44389:6766":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6745:4762":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:859:1876":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46797:6855":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7324:5059":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:0:2348":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:34144:3044":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"13:110:33652":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46529:6841":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5894:3486":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:7333:2554":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14977:4370":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:3206:5278":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6788:33662":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:651:3578":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44513:6773":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15760:4586":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:8369:2539":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21512:8210":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3403:3064":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:33674:3039":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10170:3729":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7341:3411":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:2536:5282":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14091:4111":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7602:3725":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16235:4703":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:2037:7240":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:5852:2559":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5331:3729":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4814:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2617:4740":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"0:46:1879":{"crate_id":0,"path":["slab","Iter"],"kind":"struct"},"2:3012:3035":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15058:4382":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:32791:7438":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:489:5380":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13046:3902":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:41144:2549":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:2529:4736":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3993:4785":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2573:4738":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15992:4650":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:3010:3623":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46326:6833":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47389:6882":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2959:13508":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:41206:2567":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1151:7965":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44155:2862":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2275:8192":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1862:7461":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:41105:2560":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3569:8208":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14177:4139":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9087:24929":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:434:7959":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12264:7317":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42258:30335":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4984:8307":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16032:3943":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6141:33661":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:41157:2563":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:7227:2543":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:44987:6814":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:3177:4719":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:41580:2529":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10818:7254":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:2990:6383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4878:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:15301:4445":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:7907:3672":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:41073:2557":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3551:2807":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:44959:6807":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7306:7376":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11413:7069":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:123:14116":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6882:5003":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3039:3057":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:4107:8261":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:2469:2497":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5044:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21312:30885":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:10137:20569":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:837:7393":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:12629:13538":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:40986:7441":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14449:4190":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12454:3861":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:14356:4169":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4914:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46819:6856":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5117:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:832:7403":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44963:6808":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5891:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44640:6779":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11898:3796":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12006:7549":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11392:7274":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48530:6934":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1107:7400":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7968:6952":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:1578:1876":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:44503:6772":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14855:4322":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40116:3061":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14012:4101":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:5170:3430":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:880:5276":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:1142:7401":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4860:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:21693:8374":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44864:6804":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:7477:8145":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12127:3833":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6837:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8605:7023":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6961:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6893:2503":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:6318:3492":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5726:4836":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8391:6217":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1602:5279":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14131:4115":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12043:7304":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12027:8135":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15734:4577":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15931:3925":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12289:3836":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15957:4620":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:21567:8373":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40727:6671":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13252:3943":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7951:5131":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2847:7425":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:47199:6879":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1487:5276":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7331:1883":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12647:7324":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6086:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46995:6861":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1546:5470":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41607:2535":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12993:20596":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:4300:7481":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4111:8262":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:6590:6421":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5969:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13325:3960":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43984:7445":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:41589:2531":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7679:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14260:4155":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:10728:6994":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7270:4860":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:16223:4700":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13785:4067":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:836:1879":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:266:3399":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15822:4599":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:22346:30496":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:4733:4798":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13946:4090":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:3741:4781":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:10012:2812":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4844:4802":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14475:4192":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:48355:6924":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:30:1864":{"crate_id":0,"path":["slab","Slab"],"kind":"struct"},"16:5038:4808":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:6499:7495":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22683:6434":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4893:5831":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5111:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12278:7318":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12563:7434":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4364:5600":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:1676:3396":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3768:7413":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:44461:6770":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41216:2552":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:48553:6935":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5982:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5238:4809":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:40840:6682":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:4093:3423":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:3080:3049":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1607:5280":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:15333:4453":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9671:20571":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:5669:2502":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8354:7516":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1697:5572":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5701:3492":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4847:5814":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5555:7332":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8511:6743":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11825:7298":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7653:3502":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11799:7293":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:1802:2891":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12724:20594":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:2403:1881":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44063:2859":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:42478:2689":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11269:20622":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:9163:7039":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44307:6763":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1131:32093":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:42543:1881":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:4986:7249":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:7924:6950":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7610:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:5464:7487":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:4453:7429":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3230:26408":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11016:7257":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:43074:2809":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15168:4411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"0:208:1871":{"crate_id":0,"path":["slab","VacantEntry"],"kind":"struct"},"16:6215:7126":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:491:3577":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15400:4472":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12150:3834":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44531:6775":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44798:6793":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4870:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7429:33660":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10846:7502":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:7311:1876":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13173:3924":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:1207:7239":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14489:4193":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:6595:3459":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:1682:5563":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:11093:2851":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13089:3906":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:6691:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1040:1866":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4724:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14503:4196":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:48504:6932":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:11841:7300":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:596:5442":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8348:8280":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12443:3860":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"14:7:7389":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15701:4570":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:30979:2489":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9066:7166":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5941:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:1066:19591":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:4805:13574":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4523:5693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11567:7283":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:1887:7462":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:41022:2555":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:363:7449":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:10746:24933":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10622:33672":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6803:7353":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4907:4804":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"7:31:19498":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:44493:6771":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:44547:6670":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14235:4151":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:2369:7408":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8951:8345":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1271:1866":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3397:3062":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:46405:6836":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7598:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14066:4109":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3463:3423":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10486:2992":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15266:4436":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7176:33665":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:909:7403":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6331:4913":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6152:4894":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12572:3767":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6943:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10218:3732":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44619:13544":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:893:1883":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:44951:6805":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:2819:4749":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:4302:7152":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7335:4766":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:11107:2856":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8289:7513":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:2718:6390":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4119:8264":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14463:4191":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:41035:2546":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6868:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12516:7320":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:1425:1879":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"10:36:5291":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4516:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:11606:2867":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:42332:6723":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:3181:1998":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2271:3447":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4375:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7788:8133":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:718:3612":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:46427:6837":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:40966:7440":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11189:3755":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:12583:13529":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:5896:1883":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1537:5464":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14038:4104":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14912:4360":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:33908:3041":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:6370:8467":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:4097:8260":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2459:4733":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3170:2983":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11121:2852":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2709:4744":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:5966:2548":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1558:5479":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2110:6414":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6201:4752":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22755:6445":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11557:7282":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:8253:2555":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7444:7383":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13399:3973":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1734:5585":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:4035:1883":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40884:6687":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1826:7460":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6535:3496":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:670:7233":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:7604:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:32802:7439":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:437:3679":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:2074:7414":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:7492:2989":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11166:3753":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:261:7235":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:14587:4207":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13363:3966":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7740:6946":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:3266:5280":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:1496:7403":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21695:6430":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11089:7262":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4702:4797":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8589:7020":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:1708:3423":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46445:6838":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6781:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4461:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4922:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14545:4200":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4813:4801":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10869:24931":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:6549:3399":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:44538:6679":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4283:4786":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:6389:1718":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"16:5346:4811":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22388:8465":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:7802:8134":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:22448:8455":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14079:4110":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:364:3392":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7914:5125":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13899:4084":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6941:20528":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4426:3423":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:844:8146":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:45262:6824":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7103:33663":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:2988:32091":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:38552:3052":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11647:3781":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4267:1879":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:22562:6431":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5713:4835":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46575:6848":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22482:8454":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:40086:2844":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7466:2495":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:42426:1876":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11335:7062":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15151:4406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1478:5275":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:7038:3443":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3435:2529":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:12074:2839":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:42466:2614":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22668:6433":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9074:7035":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:16105:4671":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11142:3767":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9858:20587":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:12558:13532":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"18:680:3602":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8879:7028":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2419:4731":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46242:6830":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:47435:6883":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:774:5275":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11537:7280":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:9951:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:48489:6931":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5825:4852":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8908:7520":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:8012:5133":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44955:6806":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4676:5751":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:4396:3425":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:5815:7491":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13424:3976":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6114:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:687:1881":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6348:4755":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:4867:3484":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6244:20524":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3609:1879":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12213:7313":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5897:20522":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40923:8179":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:31100:30308":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:5025:7432":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"7:78:19505":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:6032:14035":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46941:6859":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40309:28231":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11595:3775":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12808:3888":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40136:6542":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7361:32195":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7984:7388":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13774:4064":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:22791:30304":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3310:7473":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10670:7046":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5859:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:22733:30280":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:1923:5280":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:5499:4756":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10534:33670":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2749:4746":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22256:8460":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:5959:19632":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12318:3840":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:5637:6138":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5068:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15616:4547":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11158:7058":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22615:6432":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:7995:2222":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"14:31:7389":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43592:6742":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:36676:3051":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44209:6756":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:48107:6920":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:588:5438":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:945:7396":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:22771:30271":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4035:8256":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:581:3589":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4488:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:589:3590":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7565:5071":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:80:7938":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7684:5085":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:1160:7402":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:2423:1876":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41599:2533":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2336:4722":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15023:4378":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10905:7256":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3512:7477":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4480:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:6966:3499":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4249:7970":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4473:5673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:42174:6714":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:4787:4800":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40123:6540":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3010:1860":{"crate_id":2,"path":["core","ops"],"kind":"module"},"6:4745:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7194:33664":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7400:4769":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6445:4926":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11341:7272":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41341:2568":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:1098:7238":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:830:3405":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1885:3082":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1063:1871":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:32883:6532":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:2998:32094":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7706:20532":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:5569:7490":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:903:2497":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:44669:6788":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:7613:7546":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1887:1876":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2675:8210":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"14:220:5220":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11227:7267":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15678:4569":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4772:8281":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5878:4712":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:521:24775":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:557:7450":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5541:4813":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12485:20716":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:1634:1859":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:6849:7354":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9198:7525":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:11067:24917":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6362:4772":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10284:3734":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7932:5128":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1316:7402":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1824:7459":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"6:7645:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:0:2338":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:918:7151":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:15624:4548":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10440:7470":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15778:4592":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:22123:8210":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:1910:5278":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:3392:8238":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:21358:30897":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4455:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8221:6994":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:7056:26279":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5152:5964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:44971:6810":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6100:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6965:7035":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:5500:7489":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4738:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6282:4908":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:46274:6831":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2593:4739":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44979:6812":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43353:5100":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12929:3895":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:47997:6919":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5568:4817":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4824:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:533:3477":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:9284:3082":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:4220:7968":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11478:3514":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3266:7470":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6741:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5130:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1604:5508":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14516:4197":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:0:2343":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:574:5430":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7152:5041":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:7371:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5696:4830":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15092:4394":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"0:42:1876":{"crate_id":0,"path":["slab","IntoIter"],"kind":"struct"},"6:4496:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1639:5537":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1528:5459":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4710:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7760:2992":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8916:1876":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13738:4055":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3308:7472":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3245:32230":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4686:5752":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2268:7466":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:16079:4665":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12201:7312":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:32816:6531":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:4968:4806":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:42487:2981":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13526:3999":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:48568:6936":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:14575:3858":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11367:3751":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4616:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8263:2568":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:7536:6401":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:580:5433":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6764:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14372:4170":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4989:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10720:33668":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:48515:6933":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2728:7469":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:10888:2869":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12464:20715":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10661:7252":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7099:3500":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6889:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21684:8210":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:6215:3474":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"9:423:19514":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:11639:2868":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:38662:3054":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14402:4176":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:555:5420":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:7735:2206":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:40777:6676":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:39911:3066":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13814:4072":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40833:6681":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4884:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:31601:3589":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6700:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10954:20603":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5708:6944":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4761:4799":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7594:7424":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2284:19633":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9026:7521":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44812:13545":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"14:160:7389":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13211:3939":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:10014:2813":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7345:5062":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:44044:2848":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6116:7344":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7063:3446":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:42130:6707":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14599:4214":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:12260:6759":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7376:5064":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4811:8272":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:47153:6878":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13986:4098":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6394:4922":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:12090:2841":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9039:2615":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:33488:3036":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1790:2497":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14246:4153":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12089:3831":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21573:8376":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7414:5065":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4975:8306":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2353:13747":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:6898:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9949:6718":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:21356:30889":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11562:7480":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4603:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:501:5353":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6422:3389":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:5601:20520":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11510:7278":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:45210:6820":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:15748:4584":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10448:3465":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:31011:2490":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46304:6832":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:34085:3042":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7889:5123":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:5846:7334":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:698:3606":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:15126:4397":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6408:4924":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5645:4824":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3044:3058":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4217:13506":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:914:7150":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12557:3751":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10259:6425":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:5120:7484":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7609:5073":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:21514:8377":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14560:4204":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"9:237:6743":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6692:4979":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12863:3891":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11110:7057":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13753:4060":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4517:3451":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4647:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9886:20588":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4584:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:2688:7468":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:481:3576":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8616:7024":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:867:5275":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15039:4381":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5759:4843":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:790:3402":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11637:7072":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:47649:6886":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11524:7279":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:46751:6853":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46972:6860":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6819:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:1939:7463":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8362:7513":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:0:2346":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7365:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"0:55:1881":{"crate_id":0,"path":["slab","IterMut"],"kind":"struct"},"17:14325:4163":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11702:3785":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:9061:7163":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2375:4729":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11128:3718":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:8900:1879":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:15944:3939":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:2234:7244":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13723:4051":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4830:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5849:7160":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12683:7327":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:6047:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12508:3867":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12056:3828":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13674:4026":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"0:0:1873":{"crate_id":0,"path":["slab"],"kind":"module"},"2:41565:2525":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44833:6798":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5104:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:623:33676":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12189:7311":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3801:7478":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6679:3497":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1507:5451":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13959:4093":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14147:4120":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2689:4743":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46482:6840":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11634:3780":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11341:7543":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:32795:5057":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:6077:7111":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2167:6378":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4708:6232":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:597:3725":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5630:4822":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4638:8299":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:800:1883":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11063:7260":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8336:6999":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41351:2569":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6136:3423":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8463:7012":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:1051:1871":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"14:0:2344":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11153:7254":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4578:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3702:3399":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:21339:30896":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4595:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15383:4468":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:15190:4417":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:7319:6395":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15289:4439":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:42976:7156":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41114:2561":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14868:4329":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:42280:6721":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9737:20570":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:42146:8250":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:8534:7015":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5052:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15582:4535":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4434:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:30749:8252":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:40:2496":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7453:27936":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11256:3757":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"14:202:13546":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10710:7253":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4566:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43631:6748":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6139:3487":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"10:44:5292":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:4821:7248":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:40806:6670":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:4170:7426":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32755:5286":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:8360:1858":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4704:6228":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8076:8241":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22747:6444":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:635:3601":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:43095:2811":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:903:1879":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:123:3390":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13855:4076":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:34627:3048":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5033:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44983:6813":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:41365:2570":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11093:7039":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:21565:8210":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11293:20623":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:4491:4791":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:4236:8279":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:7679:2524":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2676:13590":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9781:20586":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6798:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41123:2571":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:811:2497":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:7616:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:16093:4669":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:5662:20521":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13412:3975":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15138:4400":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4549:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41063:1877":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6737:4985":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22013:30898":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:15434:4479":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13972:3801":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46375:6835":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:23985:6465":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:2548:5284":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13187:3925":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11644:7072":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4506:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:256:7234":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:7657:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13024:20597":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21976:8379":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:22001:2846":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4529:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44110:2544":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:32882:2625":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7419:1876":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7934:6951":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11115:7264":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2151:1871":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11042:7258":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6012:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11324:7269":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:4674:4796":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6711:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5015:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9654:30826":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:34800:3050":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3268:7471":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8966:8344":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40895:30281":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:608:7228":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:0:2347":{"crate_id":17,"path":["object"],"kind":"module"},"2:47311:6881":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:15281:4438":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6646:4977":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4968:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:6609:7496":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13509:3991":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7118:2613":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:4462:4790":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7716:8210":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7386:4768":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10828:33667":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4428:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8233:8209":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7971:7385":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10317:3735":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4572:3452":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11396:7498":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11407:7068":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:548:5417":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10845:2853":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11497:7277":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15102:4395":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3830:4783":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13606:4022":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:10796:1879":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:42476:2617":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11574:5281":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12530:7322":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:7491:5069":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:4628:2823":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:46196:6828":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:14189:4141":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12543:7323":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"10:0:2341":{"crate_id":10,"path":["adler"],"kind":"module"},"1:621:7451":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:149:3387":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:531:3583":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12328:3842":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15635:4553":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:2383:1879":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:2399:4730":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:44225:3737":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:48645:6939":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43081:2808":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"9:391:19513":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:43576:6739":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:10006:2810":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:41574:2527":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13999:4099":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7668:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:706:3608":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10759:3767":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13116:3912":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14284:4158":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8849:7518":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"18:573:3578":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6612:8339":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4932:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5123:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:2231:5281":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5992:6059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4572:4794":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14212:4150":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8387:7517":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:10641:8210":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2729:4745":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:1896:2497":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:1591:5501":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15078:4390":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10950:3511":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44734:6791":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48469:6929":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:45040:13838":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21370:30894":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:5033:2698":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43835:2878":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:15569:4529":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9984:20591":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15313:4446":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:6584:2550":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:4198:7967":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:212:3398":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12584:7254":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:1025:7398":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9755:20568":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12597:3869":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:2420:8195":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11841:3518":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6292:4909":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"15:0:2345":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1703:5573":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:41551:6700":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:6811:20527":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11853:7301":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5316:3728":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8599:1879":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:787:5276":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:2443:1883":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:1923:6411":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10877:7255":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:7209:7971":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5822:7494":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:47855:6918":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:22806:30338":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48449:6927":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:22125:8375":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4808:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4854:5816":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41176:2565":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4380:7482":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:7343:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:542:5414":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44073:2860":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11688:3784":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:7990:7506":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:1900:13756":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"2:45239:6823":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12824:20595":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1506:7150":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4049:8257":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:483:5377":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11730:3788":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15814:4596":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:710:7150":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:10463:3469":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:32809:2821":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:42410:1879":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6099:7341":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5075:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3001:13737":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:15646:4554":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10665:7044":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:10915:33674":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:15418:4476":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:2994:32097":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12969:3897":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7560:3431":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:640:7454":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3560:25123":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4769:8308":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11075:6814":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:14025:4102":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:2652:3480":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13877:4083":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16198:4694":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:9916:20589":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13797:4069":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6228:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"9:481:19511":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:31032:2818":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2584:7467":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1521:5456":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4937:4805":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4755:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:44136:2861":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:6503:1883":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10431:3464":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6431:4760":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14111:4114":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:2917:19661":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44975:6811":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6610:4964":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4783:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:2249:32197":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:654:14473":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4789:5781":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5928:6025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15720:4575":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:45202:7446":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:40738:6672":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13922:4089":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4947:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7452:20530":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46627:6850":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13235:3940":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1585:2497":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:46843:6857":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10439:3740":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:6395:2572":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12022:7168":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3753:6376":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:113:7942":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1570:5487":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:5020:3423":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1496:5446":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:9150:7434":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:16050:3953":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"11:856:7394":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46773:6854":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:12572:3608":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:22211:8459":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:4057:8258":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3833:2497":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:6040:3492":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:22319:8210":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:4698:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14051:4106":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7351:6396":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:43831:6750":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10054:7461":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44761:6792":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5580:4757":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11788:7292":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47075:6862":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6320:4912":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6188:4897":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:22334:8464":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5867:5995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:7449:2519":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7912:7503":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2665:4742":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4977:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:102:5268":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:214:5218":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1903:5277":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8370:7001":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:2987:2794":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:5006:4807":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22348:13746":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:16121:4676":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10699:6950":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:13146:3916":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"9:329:5330":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:501:5385":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10044:20592":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:4065:3399":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3773:4782":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:32912:13507":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2641:4741":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6134:7110":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8413:7002":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11354:7273":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15456:4484":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5485:4753":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13455:3985":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2542:5283":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:12578:13530":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8892:7029":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:3347:7474":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:6870:2502":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:634:7409":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11583:7288":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:7702:6372":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6773:4987":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:46721:6852":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:742:7151":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:11000:2857":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3665:1883":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13473:3986":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12494:3864":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:569:5428":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11419:3767":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4628:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2859:4751":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1691:5569":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"11:396:3394":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:5776:3423":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6462:20525":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2434:8199":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:3376:2845":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:119:14115":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11547:3671":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11501:7478":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10886:7029":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:351:7955":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14271:4156":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:15799:4595":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3199:1879":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:6231:3491":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5085:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:5681:3423":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:430:7958":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:2995:19662":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:2196:6380":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:1891:1883":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10965:2870":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:2304:1866":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:4560:8282":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:726:3615":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:3494:6997":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11674:3783":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4908:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7375:1876":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5829:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12695:7328":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:12374:2869":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7391:6397":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12300:20714":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5921:6021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6929:5011":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13344:3965":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6128:6128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"13:226:5267":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:7973:6953":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:40749:30283":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:5140:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13497:3990":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12225:7314":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15176:4414":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:700:1876":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:7332:2553":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:46464:6839":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:533:5408":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4545:4793":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10399:3737":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:41091:6693":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11812:7296":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:12297:6764":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:875:7396":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7653:2497":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10073:7529":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10854:7490":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:3906:7480":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:2789:4748":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9938:20590":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6222:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}