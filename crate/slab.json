{"root":"0:0:1870","crate_version":"0.4.9","includes_private":false,"index":{"b:2:7547-0:60:1880":{"id":"b:2:7547-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7549:174","2:7550:1873","2:7551:845"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:12519:2040":{"id":"2:12519:2040","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2129":{"id":"0:97:2129","crate_id":0,"name":"vacant_key","span":{"filename":"src/lib.rs","begin":[992,4],"end":[994,5]},"visibility":"public","docs":"Returns the key of the next vacant entry.\n\nThis function returns the key of the vacant entry which  will be used\nfor the next insertion. This is equivalent to\n`slab.vacant_entry().key()`, but it doesn't require mutable access.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert_eq!(slab.vacant_key(), 0);\n\nslab.insert(0);\nassert_eq!(slab.vacant_key(), 1);\n\nslab.insert(1);\nslab.remove(0);\nassert_eq!(slab.vacant_key(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12563:31929":{"id":"2:12563:31929","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12199:13386","str::split":"2:12554:25158","prim@char":"1:12021:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12566:31930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43696:6802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:55:1878":{"id":"b:2:2579-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12504":{"id":"2:12504","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12505:879","2:12506:2010","2:12507:31922","2:12508:31923","2:12510:31924","2:12513:27999","2:12514:31925","2:12515:349","2:12516:348","2:12517:1999","2:12519:2040","2:12521:2072","2:12523:2079","2:12525:31926","2:12526:31927","2:12527:26855","2:12528:2060","2:12529:6816","2:12530:6827","2:12531:6446","2:12532:30201","2:12533:30195","2:12534:7822","2:12535:31928","2:12536:30196","2:12537:2153","2:12540:26873","2:12543:26874","2:12546:2762","2:12550:2726","2:12554:25158","2:12557:26863","2:12560:26865","2:12563:31929","2:12566:31930","2:12569:26867","2:12572:26869","2:12575:26871","2:12578:26872","2:12581:2447","2:12584:31931","2:12587:31932","2:12590:31933","2:12593:31934","2:12595:31935","2:12597:31936","2:12599:31937","2:12600:31938","2:12601:31939","2:12604:31940","2:12607:24530","2:12610:26875","2:12613:31941","2:12616:31942","2:12619:31943","2:12622:31944","2:12624:28003","2:12625:28004","2:12626:28006","2:12627:28007","2:12628:28008","2:12629:31945","2:12631:7986","2:12632:31946"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2805:259-0:208:1868":{"id":"a:2:2805:259-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:185:1053":{"id":"0:185:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1508,4],"end":[1518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:60:1880":{"id":"b:2:2594-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:2040":{"id":"0:90:2040","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[735,4],"end":[740,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\n*slab.get_mut(key).unwrap() = \"world\";\n\nassert_eq!(slab[key], \"world\");\nassert_eq!(slab.get_mut(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1549,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","fuse","map_while","for_each","le","advance_by","zip","count","last","min","is_sorted","array_chunks","min_by_key","find","is_partitioned","ne","inspect","take","filter","nth","enumerate","map","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","all","scan","filter_map","step_by","rev","is_sorted_by_key","size_hint","product","eq","unzip","any","try_find","try_for_each","try_collect","flat_map","peekable","partial_cmp","chain","__iterator_get_unchecked","cmp_by","copied","rposition","collect","fold","position","collect_into","flatten","skip_while","intersperse","skip","partial_cmp_by","cloned","cmp","max_by_key","lt","reduce","gt","partition","map_windows","take_while","intersperse_with","next_chunk","max","eq_by","cycle","max_by","try_reduce","partition_in_place"],"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:197:174","0:198:1053","0:199:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12550:2726":{"id":"2:12550:2726","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12569:26867":{"id":"2:12569:26867","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386","str::rsplitn":"2:12572:26869"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43750:2844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7547-0:42:1873":{"id":"b:2:7547-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7549:174","2:7550:1873","2:7551:845"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:12529:6816":{"id":"2:12529:6816","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43616:6796","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:879":{"id":"0:164:879","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1452,4],"end":[1454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:463":{"id":"0:38:463","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[156,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:46:1876":{"id":"b:2:2589-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2589-0:208:1868":{"id":"b:2:2589-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12626:28006":{"id":"2:12626:28006","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1300,0],"end":[1314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:136:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2583-0:46:1876":{"id":"b:2:2583-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:178:879":{"id":"0:178:879","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1496,4],"end":[1498,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1244,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:121:174","0:122:1873","0:123:845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158:2203":{"id":"0:158:2203","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:2608-0:46:1876":{"id":"a:2:8670:2608-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3424-0:208:1868":{"id":"b:2:3424-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2594-0:42:1873":{"id":"b:2:2594-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2582:2144":{"id":"2:2582:2144","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:31946":{"id":"2:12632:31946","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:31946"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43963:6720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12631:7986":{"id":"2:12631:7986","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:7986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43954:6712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:1873":{"id":"0:128:1873","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1248,4],"end":[1248,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"5:5535:32607":{"id":"5:5535:32607","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:30:1861":{"id":"b:2:2594-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:197:174":{"id":"0:197:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1550,4],"end":[1550,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:100:2141":{"id":"0:100:2141","crate_id":0,"name":"try_remove","span":{"filename":"src/lib.rs","begin":[1058,4],"end":[1076,5]},"visibility":"public","docs":"Tries to remove the value associated with the given key,\nreturning the value if the key existed.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.try_remove(hello), Some(\"hello\"));\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:30:1861":{"id":"b:2:2273-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12604:31940":{"id":"2:12604:31940","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:174":{"id":"0:184:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1506,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"2:12521:2072":{"id":"2:12521:2072","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:30:1861":{"id":"a:2:2805:259-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:754":{"id":"0:132:754","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1495,0],"end":[1499,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7634:2218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:178:879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:1925":{"id":"0:70:1925","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[347,4],"end":[353,5]},"visibility":"public","docs":"Reserve capacity for at least `additional` more values to be stored\nwithout allocating.\n\n`reserve` does nothing if the slab already has sufficient capacity for\n`additional` more values. If more capacity is required, a new segment of\nmemory will be allocated and all existing values will be copied into it.\nAs such, if the slab is already very large, a call to `reserve` can end\nup being expensive.\n\nThe slab may reserve more than `additional` extra space in order to\navoid frequent reallocations. Use `reserve_exact` instead to guarantee\nthat only the requested space is allocated.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:60":{"id":"0:41:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:2786":{"id":"5:686:2786","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1316,0],"end":[1325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:139:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157:1053":{"id":"0:157:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1420,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:28061":{"id":"5:5538:28061","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12627:28007"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:216:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2788:249-0:46:1876":{"id":"a:2:2788:249-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:175:2217":{"id":"0:175:2217","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1482,4],"end":[1492,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:55:1878":{"id":"b:2:2594-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12530:6827":{"id":"2:12530:6827","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43622:6797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12557:26863":{"id":"2:12557:26863","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12015:2858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:28004":{"id":"2:12625:28004","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39633:27998","Self::is_ascii":"2:12624:28003"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39633:27998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:55:1878":{"id":"a:2:2788:249-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2845:2616-0:60:1880":{"id":"a:2:2845:2616-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12505:879":{"id":"2:12505:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:461":{"id":"0:37:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[148,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1878":{"id":"0:55:1878","crate_id":0,"name":"IterMut","span":{"filename":"src/lib.rs","begin":[219,0],"end":[222,1]},"visibility":"public","docs":"A mutable iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8670:2608-0:55:1878","a:2:2788:249-0:55:1878","a:2:2845:2616-0:55:1878","a:2:2805:259-0:55:1878","a:2:8669:2609-0:55:1878","b:2:2589-0:55:1878","b:2:2583-0:55:1878","b:2:2273-0:55:1878","b:2:2579-0:55:1878","b:2:2276-0:55:1878","b:2:2594-0:55:1878","b:2:3424-0:55:1878","b:2:7547-0:55:1878","0:143","0:193","0:187","0:190","0:181"]}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1505,0],"end":[1523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","fuse","map_while","for_each","le","advance_by","zip","count","last","min","is_sorted","array_chunks","min_by_key","find","is_partitioned","ne","inspect","take","filter","nth","enumerate","map","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","all","scan","filter_map","step_by","rev","is_sorted_by_key","size_hint","product","eq","unzip","any","try_find","try_for_each","try_collect","flat_map","peekable","partial_cmp","chain","__iterator_get_unchecked","cmp_by","copied","rposition","collect","fold","position","collect_into","flatten","skip_while","intersperse","skip","partial_cmp_by","cloned","cmp","max_by_key","lt","reduce","gt","partition","map_windows","take_while","intersperse_with","next_chunk","max","eq_by","cycle","max_by","try_reduce","partition_in_place"],"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:184:174","0:185:1053","0:186:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2273-0:60:1880":{"id":"b:2:2273-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12543:26874":{"id":"2:12543:26874","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:349":{"id":"2:12515:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12516:348","`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:2153":{"id":"2:12537:2153","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:860":{"id":"0:87:860","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[657,4],"end":[662,5]},"visibility":"public","docs":"Return an iterator over the slab.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nlet mut iterator = slab.iter();\n\nassert_eq!(iterator.next(), Some((0, &0)));\nassert_eq!(iterator.next(), Some((1, &1)));\nassert_eq!(iterator.next(), Some((2, &2)));\nassert_eq!(iterator.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12613:31941":{"id":"2:12613:31941","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2845:2616-0:46:1876":{"id":"a:2:2845:2616-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2592:135":{"id":"2:2592:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:2845:2616-0:30:1861":{"id":"a:2:2845:2616-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:116:1873":{"id":"0:116:1873","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1227,4],"end":[1227,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"2:12566:31930":{"id":"2:12566:31930","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12199:13386","str::split":"2:12554:25158","prim@char":"1:12021:457","str::split_terminator":"2:12563:31929"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43714:6803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:30195":{"id":"2:12533:30195","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12532:30201"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43929:6814","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:31926":{"id":"2:12525:31926","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12027:1543","str::slice_mut_unchecked":"2:12526:31927","crate::ops::Index":"2:3085:2184"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1501,0],"end":[1501,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7995:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2788:249-0:42:1873":{"id":"a:2:2788:249-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2593:1627":{"id":"2:2593:1627","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:6446":{"id":"2:12531:6446","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43632:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:26872":{"id":"2:12578:26872","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:32604","5:5521:2143","5:5524:32605","5:5527:32606","5:5535:32607","5:5536:32608","5:5537:2522","5:5538:28061","5:5539:28062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1246,0],"end":[1253,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:127:174","0:128:1873","0:129:845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12590:31933":{"id":"2:12590:31933","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::match_indices":"2:12587:31932"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43814:6807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[1201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:1039","0:68:1905","0:69:1906","0:70:1925","0:71:1939","0:72:1955","0:74:1990","0:84:2004","0:85:879","0:86:2010","0:87:860","0:88:861","0:89:1999","0:90:2040","0:91:2053","0:92:2072","0:93:2079","0:94:2086","0:95:2108","0:96:2120","0:97:2129","0:98:2134","0:100:2141","0:101:2148","0:102:2153","0:103:2166","0:105:2182"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:725":{"id":"0:142:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1331,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12554:25158":{"id":"2:12554:25158","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split_whitespace":"2:12532:30201","str::rsplit":"2:12560:26865"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43646:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2108":{"id":"0:95:2108","crate_id":0,"name":"key_of","span":{"filename":"src/lib.rs","begin":[930,4],"end":[944,5]},"visibility":"public","docs":"Get the key for an element in the slab.\n\nThe reference must point to an element owned by the slab.\nOtherwise this function will panic.\nThis is a constant-time operation because the key can be calculated\nfrom the reference with pointer arithmetic.\n\n# Panics\n\nThis function will panic if the reference does not point to an element\nof the slab.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(String::from(\"foo\"));\nlet value = &slab[key];\nassert_eq!(slab.key_of(value), key);\n```\n\nValues are not compared, so passing a reference to a different location\nwill result in a panic:\n\n```should_panic\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(0);\nlet bad = &0;\nslab.key_of(bad); // this will panic\nunreachable!();\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["present_element",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2275:2436":{"id":"2:2275:2436","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:30:1861":{"id":"b:2:2276-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:2120":{"id":"0:96:2120","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[964,4],"end":[970,5]},"visibility":"public","docs":"Insert a value in the slab, returning key assigned to the value.\n\nThe returned key can later be used to retrieve or remove the value using indexed\nlookup and `remove`. Additional capacity is allocated if needed. See\n[Capacity and reallocation](index.html#capacity-and-reallocation).\n\n# Panics\n\nPanics if the new storage in the vector exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\nassert_eq!(slab[key], \"hello\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"generic":"T"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:208:1868":{"id":"b:2:2579-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8669:2609-0:30:1861":{"id":"a:2:8669:2609-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153:1871":{"id":"0:153:1871","crate_id":0,"name":"key","span":{"filename":"src/lib.rs","begin":[1410,4],"end":[1412,5]},"visibility":"public","docs":"Return the key associated with this entry.\n\nA value stored in this entry will be associated with this key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1225,0],"end":[1235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:115:174","0:116:1873","0:117:845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:7547-0:55:1878":{"id":"b:2:7547-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7549:174","2:7550:1873","2:7551:845"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"2:12607:24530":{"id":"2:12607:24530","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:2608-0:42:1873":{"id":"a:2:8670:2608-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2589-0:60:1880":{"id":"b:2:2589-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:684:2784":{"id":"5:684:2784","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:171:1053":{"id":"0:171:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1464,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1457,0],"end":[1457,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7995:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:30:1861":{"id":"b:5:682-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:684:2784","5:685:2785","5:686:2786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2597:135":{"id":"2:2597:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32104:5329","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12628:28008":{"id":"2:12628:28008","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1203,0],"end":[1213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:3085:2184","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:108:210","0:109:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:725":{"id":"0:139:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1320,4],"end":[1324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:60:1880":{"id":"a:2:2788:249-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12506:2010":{"id":"2:12506:2010","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7547-0:46:1876":{"id":"b:2:7547-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:7549:174","2:7550:1873","2:7551:845"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1583,0],"end":[1587,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7634:2218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:205:879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12508:31923":{"id":"2:12508:31923","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:2079":{"id":"2:12523:2079","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:845":{"id":"0:117:845","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12616:31942":{"id":"2:12616:31942","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1990":{"id":"0:74:1990","crate_id":0,"name":"compact","span":{"filename":"src/lib.rs","begin":[523,4],"end":[576,5]},"visibility":"public","docs":"Reduce the capacity as much as possible, changing the key for elements when necessary.\n\nTo allow updating references to the elements which must be moved to a new key,\nthis function takes a closure which is called before moving each element.\nThe second and third parameters to the closure are the current key and\nnew key respectively.\nIn case changing the key for one element turns out not to be possible,\nthe move can be cancelled by returning `false` from the closure.\nIn that case no further attempts at relocating elements is made.\nIf the closure unwinds, the slab will be left in a consistent state,\nbut the value that the closure panicked on might be removed.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(10);\nlet a = slab.insert('a');\nslab.insert('b');\nslab.insert('c');\nslab.remove(a);\nslab.compact(|&mut value, from, to| {\n    assert_eq!((value, from, to), ('c', 2, 0));\n    true\n});\nassert!(slab.capacity() >= 2 && slab.capacity() < 10);\n```\n\nThe value is not moved when the closure returns `Err`:\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(100);\nlet a = slab.insert('a');\nlet b = slab.insert('b');\nslab.remove(a);\nslab.compact(|&mut value, from, to| false);\nassert_eq!(slab.iter().next(), Some((b, &'b')));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rekey",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3053:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"primitive":"usize"},{"primitive":"usize"}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:55:1878":{"id":"b:2:2589-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12584:31931":{"id":"2:12584:31931","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::matches":"2:12581:2447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43868:6810","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2845:2616-0:55:1878":{"id":"a:2:2845:2616-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8669:2609-0:42:1873":{"id":"a:2:8669:2609-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:46:1876":{"id":"b:5:682-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:684:2784","5:685:2785","5:686:2786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12510:31924":{"id":"2:12510:31924","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12508:31923"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1481,0],"end":[1493,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:7581:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:175:2217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:725":{"id":"0:136:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:32604":{"id":"5:5520:32604","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2489","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2489","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2522":{"id":"5:5537:2522","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:30:1861":{"id":"b:2:2589-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2273-0:42:1873":{"id":"b:2:2273-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12593:31934":{"id":"2:12593:31934","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:28062":{"id":"5:5539:28062","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12628:28008"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:27999":{"id":"2:12513:27999","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11759:13387"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12572:26869":{"id":"2:12572:26869","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12021:457","str::splitn":"2:12569:26867","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43768:2840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:31945":{"id":"2:12629:31945","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:31945"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43945:6721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:830":{"id":"0:109:830","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1212,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:46:1876":{"id":"b:2:3424-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12516:348":{"id":"2:12516:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:42:1873":{"id":"b:2:2589-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:2053":{"id":"0:91:2053","crate_id":0,"name":"get2_mut","span":{"filename":"src/lib.rs","begin":[769,4],"end":[791,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously.\n\nIf any one of the given keys is not associated with a value, then `None`\nis returned.\n\nThis function can be used to get two mutable references out of one slab,\nso that you can manipulate both of them at the same time, eg. swap them.\n\n# Panics\n\nThis function will panic if `key1` and `key2` are the same.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = slab.get2_mut(key1, key2).unwrap();\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2182":{"id":"0:105:2182","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1192,4],"end":[1200,5]},"visibility":"public","docs":"Return a draining iterator that removes all elements from the slab and\nyields the removed items.\n\nNote: Elements are removed even if the iterator is only partially\nconsumed or not consumed at all.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet _ = slab.insert(0);\nlet _ = slab.insert(1);\nlet _ = slab.insert(2);\n\n{\n    let mut drain = slab.drain();\n\n    assert_eq!(Some(0), drain.next());\n    assert_eq!(Some(1), drain.next());\n    assert_eq!(Some(2), drain.next());\n    assert_eq!(None, drain.next());\n}\n\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:174":{"id":"0:170:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1462,4],"end":[1462,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"2:12600:31938":{"id":"2:12600:31938","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:46:1876":{"id":"b:2:2273-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1589,0],"end":[1589,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7995:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2276-0:208:1868":{"id":"b:2:2276-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2579-0:46:1876":{"id":"b:2:2579-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8670:2608-0:55:1878":{"id":"a:2:8670:2608-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:1873":{"id":"0:42:1873","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[198,0],"end":[201,1]},"visibility":"public","docs":"A consuming iterator over the values stored in a `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8670:2608-0:42:1873","a:2:2788:249-0:42:1873","a:2:2845:2616-0:42:1873","a:2:2805:259-0:42:1873","a:2:8669:2609-0:42:1873","b:2:2589-0:42:1873","b:2:2583-0:42:1873","b:2:2273-0:42:1873","b:2:2579-0:42:1873","b:2:2276-0:42:1873","b:2:2594-0:42:1873","b:2:3424-0:42:1873","b:2:7547-0:42:1873","0:162","0:137","0:165","0:154","0:159"]}}},"a:2:8670:2608-0:30:1861":{"id":"a:2:8670:2608-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92:2072":{"id":"0:92:2072","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[815,4],"end":[820,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key without\nperforming bounds checking.\n\nFor a safe alternative see [`get`](Slab::get).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    assert_eq!(slab.get_unchecked(key), &2);\n}\n```","links":{"Slab::get":"0:89:1999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:7550:1873":{"id":"2:7550:1873","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"2:12560:26865":{"id":"2:12560:26865","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split":"2:12554:25158"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43664:2846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1861":{"id":"0:30:1861","crate_id":0,"name":"Slab","span":{"filename":"src/lib.rs","begin":[132,0],"end":[142,1]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type\n\nSee the [module documentation] for more details.\n\n[module documentation]: index.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:65","a:2:8670:2608-0:30:1861","a:2:2788:249-0:30:1861","a:2:2845:2616-0:30:1861","a:2:2805:259-0:30:1861","a:2:8669:2609-0:30:1861","b:2:2589-0:30:1861","b:2:2583-0:30:1861","b:2:2273-0:30:1861","b:2:2579-0:30:1861","b:2:2276-0:30:1861","b:2:2594-0:30:1861","b:2:3424-0:30:1861","b:5:682-0:30:1861","0:124","0:113","0:134","0:130","0:110","0:39","0:118","0:35","0:106"]}}},"0:205:879":{"id":"0:205:879","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1584,4],"end":[1586,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32606":{"id":"5:5527:32606","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2217":{"id":"0:161:2217","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1438,4],"end":[1448,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2086":{"id":"0:94:2086","crate_id":0,"name":"get2_unchecked_mut","span":{"filename":"src/lib.rs","begin":[881,4],"end":[892,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously without performing bounds checking and safety\ncondition checking.\n\nFor a safe alternative see [`get2_mut`](Slab::get2_mut).\n\nThis function should be used with care.\n\n# Safety\n\n- Both keys must be within bounds.\n- The condition `key1 != key2` must hold.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = unsafe { slab.get2_unchecked_mut(key1, key2) };\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{"Slab::get2_mut":"0:91:2053"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2153":{"id":"0:102:2153","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1118,4],"end":[1123,5]},"visibility":"public","docs":"Return `true` if a value is associated with the given key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nassert!(slab.contains(hello));\n\nslab.remove(hello);\n\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1939":{"id":"0:71:1939","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[381,4],"end":[387,5]},"visibility":"public","docs":"Reserve the minimum capacity required to store exactly `additional`\nmore values.\n\n`reserve_exact` does nothing if the slab already has sufficient capacity\nfor `additional` more values. If more capacity is required, a new segment\nof memory will be allocated and all existing values will be copied into\nit.  As such, if the slab is already very large, a call to `reserve` can\nend up being expensive.\n\nNote that the allocator may give the slab more space than it requests.\nTherefore capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve_exact(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1545,0],"end":[1545,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7995:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2203":{"id":"0:199:2203","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1564,4],"end":[1566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1357,0],"end":[1413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:152:2120","0:153:1871"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5524:32605":{"id":"5:5524:32605","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1437,0],"end":[1449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:7581:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:161:2217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93:2079":{"id":"0:93:2079","crate_id":0,"name":"get_unchecked_mut","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key\nwithout performing bounds checking.\n\nFor a safe alternative see [`get_mut`](Slab::get_mut).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    let val = slab.get_unchecked_mut(key);\n    *val = 13;\n}\n\nassert_eq!(slab[key], 13);\n```","links":{"Slab::get_mut":"0:90:2040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:174":{"id":"0:121:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1238,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"2:7549:174":{"id":"2:7549:174","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:0:1870":{"id":"0:0:1870","crate_id":0,"name":"slab","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1589,41]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type.\n\n`Slab` provides pre-allocated storage for a single data type. If many values\nof a single type are being allocated, it can be more efficient to\npre-allocate the necessary storage. Since the size of the type is uniform,\nmemory fragmentation can be avoided. Storing, clearing, and lookup\noperations become very cheap.\n\nWhile `Slab` may look like other Rust collections, it is not intended to be\nused as a general purpose collection. The primary difference between `Slab`\nand `Vec` is that `Slab` returns the key when storing the value.\n\nIt is important to note that keys may be reused. In other words, once a\nvalue associated with a given key is removed from a slab, that key may be\nreturned from future calls to `insert`.\n\n# Examples\n\nBasic storing and retrieval.\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nlet world = slab.insert(\"world\");\n\nassert_eq!(slab[hello], \"hello\");\nassert_eq!(slab[world], \"world\");\n\nslab[world] = \"earth\";\nassert_eq!(slab[world], \"earth\");\n```\n\nSometimes it is useful to be able to associate the key with the value being\ninserted in the slab. This can be done with the `vacant_entry` API as such:\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```\n\nIt is generally a good idea to specify the desired capacity of a slab at\ncreation time. Note that `Slab` will grow the internal capacity when\nattempting to insert a new value once the existing capacity has been reached.\nTo avoid this, add a check.\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(1024);\n\n// ... use the slab\n\nif slab.len() == slab.capacity() {\n    panic!(\"slab full\");\n}\n\nslab.insert(\"the slab is not at capacity yet\");\n```\n\n# Capacity and reallocation\n\nThe capacity of a slab is the amount of space allocated for any future\nvalues that will be inserted in the slab. This is not to be confused with\nthe *length* of the slab, which specifies the number of actual values\ncurrently being inserted. If a slab's length is equal to its capacity, the\nnext value inserted into the slab will require growing the slab by\nreallocating.\n\nFor example, a slab with capacity 10 and length 0 would be an empty slab\nwith space for 10 more stored values. Storing 10 or fewer elements into the\nslab will not change its capacity or cause reallocation to occur. However,\nif the slab length is increased to 11 (due to another `insert`), it will\nhave to reallocate, which can be slow. For this reason, it is recommended to\nuse [`Slab::with_capacity`] whenever possible to specify how many values the\nslab is expected to store.\n\n# Implementation\n\n`Slab` is backed by a `Vec` of slots. Each slot is either occupied or\nvacant. `Slab` maintains a stack of vacant slots using a linked list. To\nfind a vacant slot, the stack is popped. When a slot is released, it is\npushed onto the stack.\n\nIf there are no more available slots in the stack, then `Vec::reserve(1)` is\ncalled and a new slot is created.\n\n[`Slab::with_capacity`]: struct.Slab.html#with_capacity","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:30:1861","0:208:1868","0:42:1873","0:46:1876","0:55:1878","0:60:1880"],"is_stripped":false}}},"2:12540:26873":{"id":"2:12540:26873","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:42:1873":{"id":"b:2:3424-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:210":{"id":"0:108:210","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1204,4],"end":[1204,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1327,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:142:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:725":{"id":"0:148:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:31928":{"id":"2:12535:31928","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43910:6812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:55:1878":{"id":"b:2:2276-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2583-0:42:1873":{"id":"b:2:2583-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2805:259-0:55:1878":{"id":"a:2:2805:259-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8670:2608-0:60:1880":{"id":"a:2:8670:2608-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:1876":{"id":"0:46:1876","crate_id":0,"name":"Iter","span":{"filename":"src/lib.rs","begin":[204,0],"end":[207,1]},"visibility":"public","docs":"An iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8670:2608-0:46:1876","a:2:2788:249-0:46:1876","a:2:2845:2616-0:46:1876","a:2:2805:259-0:46:1876","a:2:8669:2609-0:46:1876","b:2:2589-0:46:1876","b:2:2583-0:46:1876","b:2:2273-0:46:1876","b:2:2579-0:46:1876","b:2:2276-0:46:1876","b:2:2594-0:46:1876","b:2:3424-0:46:1876","b:2:7547-0:46:1876","b:5:682-0:46:1876","0:51","0:179","0:140","0:176","0:167","0:173"]}}},"a:2:8669:2609-0:60:1880":{"id":"a:2:8669:2609-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12597:31936":{"id":"2:12597:31936","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:42:1873":{"id":"b:2:2276-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12599:31937":{"id":"2:12599:31937","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1039":{"id":"0:67:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[251,4],"end":[257,5]},"visibility":"public","docs":"Construct a new, empty `Slab`.\n\nThe function does not allocate and the returned slab will have no\ncapacity until `insert` is called or capacity is explicitly reserved.\n\nThis is `const fn` on Rust 1.39+.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::new();\n```","links":{},"attrs":["#[cfg(not(slab_no_const_vec_new))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:30201":{"id":"2:12532:30201","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12533:30195"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43920:6813","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1349,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:148:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1285,0],"end":[1298,1]},"visibility":"default","docs":"Create a slab from an iterator of key-value pairs.\n\nIf the iterator produces duplicate keys, the previous value is replaced with the later one.\nThe keys does not need to be sorted beforehand, and this function always\ntakes O(n) time.\nNote that the returned slab will use space proportional to the largest key,\nso don't use `Slab` with untrusted keys.\n\n# Examples\n\n```\n# use slab::*;\n\nlet vec = vec![(2,'a'), (6,'b'), (7,'c')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert!(slab.capacity() >= 8);\nassert_eq!(slab[2], 'a');\n```\n\nWith duplicate and unsorted keys:\n\n```\n# use slab::*;\n\nlet vec = vec![(20,'a'), (10,'b'), (11,'c'), (10,'d')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert_eq!(slab[10], 'd');\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7539:144","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:132:754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:174":{"id":"0:156:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1418,4],"end":[1418,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1417,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","fuse","map_while","for_each","le","advance_by","zip","count","last","min","is_sorted","array_chunks","min_by_key","find","is_partitioned","ne","inspect","take","filter","nth","enumerate","map","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","all","scan","filter_map","step_by","rev","is_sorted_by_key","size_hint","product","eq","unzip","any","try_find","try_for_each","try_collect","flat_map","peekable","partial_cmp","chain","__iterator_get_unchecked","cmp_by","copied","rposition","collect","fold","position","collect_into","flatten","skip_while","intersperse","skip","partial_cmp_by","cloned","cmp","max_by_key","lt","reduce","gt","partition","map_windows","take_while","intersperse_with","next_chunk","max","eq_by","cycle","max_by","try_reduce","partition_in_place"],"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:156:174","0:157:1053","0:158:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12528:2060":{"id":"2:12528:2060","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12527:26855"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2585:751":{"id":"2:2585:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12595:31935":{"id":"2:12595:31935","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12536:30196":{"id":"2:12536:30196","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43938:6815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1053":{"id":"0:198:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1552,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:28007":{"id":"2:12627:28007","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1955":{"id":"0:72:1955","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[430,4],"end":[455,5]},"visibility":"public","docs":"Shrink the capacity of the slab as much as possible without invalidating keys.\n\nBecause values cannot be moved to a different index, the slab cannot\nshrink past any stored values.\nIt will drop down as close as possible to the length but the allocator may\nstill inform the underlying vector that there is space for a few more elements.\n\nThis function can take O(n) time even when the capacity cannot be reduced\nor the allocation is shrunk in place. Repeated calls run in O(1) though.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```\n\nThe slab cannot shrink past the last present value even if previous\nvalues are removed:\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..4 {\n    slab.insert(i);\n}\n\nslab.remove(0);\nslab.remove(3);\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:60:1880":{"id":"b:2:2276-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89:1999":{"id":"0:89:1999","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\nassert_eq!(slab.get(key), Some(&\"hello\"));\nassert_eq!(slab.get(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1873":{"id":"0:122:1873","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1239,4],"end":[1239,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:85:879":{"id":"0:85:879","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Return the number of stored values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nassert_eq!(3, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:208:1868":{"id":"b:2:2273-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:685:2785":{"id":"5:685:2785","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2166":{"id":"0:103:2166","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1149,4],"end":[1163,5]},"visibility":"public","docs":"Retain only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(usize, &mut e)`\nreturns false. This method operates in place and preserves the key\nassociated with the retained values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet k1 = slab.insert(0);\nlet k2 = slab.insert(1);\nlet k3 = slab.insert(2);\n\nslab.retain(|key, val| key == k1 || *val == 1);\n\nassert!(slab.contains(k1));\nassert!(slab.contains(k2));\nassert!(!slab.contains(k3));\n\nassert_eq!(2, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3053:139","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8669:2609-0:208:1868":{"id":"a:2:8669:2609-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2594-0:46:1876":{"id":"b:2:2594-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12575:26871":{"id":"2:12575:26871","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2583-0:55:1878":{"id":"b:2:2583-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2583-0:60:1880":{"id":"b:2:2583-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2788:249-0:30:1861":{"id":"a:2:2788:249-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2598:1625":{"id":"2:2598:1625","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:31925":{"id":"2:12514:31925","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:461":{"id":"0:54:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:42:1873":{"id":"a:2:2805:259-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8669:2609-0:55:1878":{"id":"a:2:8669:2609-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2845:2616-0:208:1868":{"id":"a:2:2845:2616-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12624:28003":{"id":"2:12624:28003","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1461,0],"end":[1479,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","fuse","map_while","for_each","le","advance_by","zip","count","last","min","is_sorted","array_chunks","min_by_key","find","is_partitioned","ne","inspect","take","filter","nth","enumerate","map","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","all","scan","filter_map","step_by","rev","is_sorted_by_key","size_hint","product","eq","unzip","any","try_find","try_for_each","try_collect","flat_map","peekable","partial_cmp","chain","__iterator_get_unchecked","cmp_by","copied","rposition","collect","fold","position","collect_into","flatten","skip_while","intersperse","skip","partial_cmp_by","cloned","cmp","max_by_key","lt","reduce","gt","partition","map_windows","take_while","intersperse_with","next_chunk","max","eq_by","cycle","max_by","try_reduce","partition_in_place"],"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:170:174","0:171:1053","0:172:2203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:1868":{"id":"0:208:1868","crate_id":0,"name":"VacantEntry","span":{"filename":"src/lib.rs","begin":[192,0],"end":[195,1]},"visibility":"public","docs":"A handle to a vacant entry in a `Slab`.\n\n`VacantEntry` allows constructing values with the key that they will be\nassigned to.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:149","a:2:8670:2608-0:208:1868","a:2:2788:249-0:208:1868","a:2:2845:2616-0:208:1868","a:2:2805:259-0:208:1868","a:2:8669:2609-0:208:1868","b:2:2589-0:208:1868","b:2:2583-0:208:1868","b:2:2273-0:208:1868","b:2:2579-0:208:1868","b:2:2276-0:208:1868","b:2:2594-0:208:1868","b:2:3424-0:208:1868","0:213"]}}},"2:3426:1640":{"id":"2:3426:1640","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39446:6582","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1338,0],"end":[1347,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:145:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12581:2447":{"id":"2:12581:2447","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatches":"2:12584:31931"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43850:6809","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:725":{"id":"0:216:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12622:31944":{"id":"2:12622:31944","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12160:134","`FromStr`":"2:12159:8177"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12159:8177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12159:8177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:31927":{"id":"2:12526:31927","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12027:1543","crate::ops::IndexMut":"2:3089:2185","str::slice_unchecked":"2:12525:31926"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2217":{"id":"0:202:2217","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1570,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1451,0],"end":[1455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7634:2218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:164:879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2278:24415":{"id":"2:2278:24415","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:41:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:845":{"id":"0:129:845","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1250,4],"end":[1252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:2762":{"id":"2:12546:2762","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:60:1880":{"id":"a:2:2805:259-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5521:2143":{"id":"5:5521:2143","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:32608":{"id":"5:5536:32608","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2489","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2489","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2134":{"id":"0:98:2134","crate_id":0,"name":"vacant_entry","span":{"filename":"src/lib.rs","begin":[1019,4],"end":[1024,5]},"visibility":"public","docs":"Return a handle to a vacant entry allowing for further manipulation.\n\nThis function is useful when creating values that must contain their\nslab key. The returned `VacantEntry` reserves a slot in the slab and is\nable to query the associated key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:55:1878":{"id":"b:2:3424-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:7551:845":{"id":"2:7551:845","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[209,0],"end":[216,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:54:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1215,0],"end":[1223,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"2:3089:2185","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:112:831"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69:1906":{"id":"0:69:1906","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[317,4],"end":[319,5]},"visibility":"public","docs":"Return the number of values the slab can store without reallocating.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::with_capacity(10);\nassert_eq!(slab.capacity(), 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:30:1861":{"id":"b:2:3424-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2276-0:46:1876":{"id":"b:2:2276-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2278:24415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8669:2609-0:46:1876":{"id":"a:2:8669:2609-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:831":{"id":"0:112:831","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1217,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:208:1868":{"id":"a:2:2788:249-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2845:2616-0:42:1873":{"id":"a:2:2845:2616-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1525,0],"end":[1537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:7581:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:189:2217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2579-0:42:1873":{"id":"b:2:2579-0:42:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:1873","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186:2203":{"id":"0:186:2203","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1520,4],"end":[1522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:2217":{"id":"0:189:2217","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1526,4],"end":[1536,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:55:1878":{"id":"b:2:2273-0:55:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2275:2436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12534:7822":{"id":"2:12534:7822","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43900:6811","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1880":{"id":"0:60:1880","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[225,0],"end":[228,1]},"visibility":"public","docs":"A draining iterator for `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:8670:2608-0:60:1880","a:2:2788:249-0:60:1880","a:2:2845:2616-0:60:1880","a:2:2805:259-0:60:1880","a:2:8669:2609-0:60:1880","b:2:2589-0:60:1880","b:2:2583-0:60:1880","b:2:2273-0:60:1880","b:2:2579-0:60:1880","b:2:2276-0:60:1880","b:2:2594-0:60:1880","b:2:3424-0:60:1880","b:2:7547-0:60:1880","0:195","0:146","0:200","0:206","0:203"]}}},"0:127:174":{"id":"0:127:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1247,4],"end":[1247,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"0:101:2148":{"id":"0:101:2148","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1101,5]},"visibility":"public","docs":"Remove and return the value associated with the given key.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Panics\n\nPanics if `key` is not associated with a value.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.remove(hello), \"hello\");\nassert!(!slab.contains(hello));\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:60:1880":{"id":"b:2:3424-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8670:2608-0:208:1868":{"id":"a:2:8670:2608-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12601:31939":{"id":"2:12601:31939","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12224:13383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2120":{"id":"0:152:2120","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1387,5]},"visibility":"public","docs":"Insert a value in the entry, returning a mutable reference to the value.\n\nTo get the key associated with the value, use `key` prior to calling\n`insert`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["val",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:26855":{"id":"2:12527:26855","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12528:2060"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:26875":{"id":"2:12610:26875","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:879":{"id":"0:192:879","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2203":{"id":"0:172:2203","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1905":{"id":"0:68:1905","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[300,4],"end":[306,5]},"visibility":"public","docs":"Construct a new, empty `Slab` with the specified capacity.\n\nThe returned slab will be able to store exactly `capacity` without\nreallocating. If `capacity` is 0, the slab will not allocate.\n\nIt is important to note that this function does not specify the *length*\nof the returned slab, but only the capacity. For an explanation of the\ndifference between length and capacity, see [Capacity and\nreallocation](index.html#capacity-and-reallocation).\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\n// The slab contains no values, even though it has capacity for more\nassert_eq!(slab.len(), 0);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    slab.insert(i);\n}\n\n// ...but this may make the slab reallocate\nslab.insert(11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:861":{"id":"0:88:861","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Return an iterator that allows modifying each value.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet key1 = slab.insert(0);\nlet key2 = slab.insert(1);\n\nfor (key, val) in slab.iter_mut() {\n    if key == key1 {\n        *val += 2;\n    }\n}\n\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[144,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:37:461","0:38:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2583-0:30:1861":{"id":"b:2:2583-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1539,0],"end":[1543,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:7634:2218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:1878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:192:879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:2010":{"id":"0:86:2010","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Return `true` if there are no values stored in the slab.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert!(slab.is_empty());\n\nslab.insert(1);\nassert!(!slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:1999":{"id":"2:12517:1999","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2004":{"id":"0:84:2004","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Clear the slab of all values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.clear();\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:725":{"id":"0:145:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1342,4],"end":[1346,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12619:31943":{"id":"2:12619:31943","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:13386"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:60:1880":{"id":"b:2:2579-0:60:1880","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2594-0:208:1868":{"id":"b:2:2594-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:174":{"id":"0:115:174","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1226,4],"end":[1226,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"2:12587:31932":{"id":"2:12587:31932","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12199:13386","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatch_indices":"2:12590:31933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43796:6806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:7463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:845":{"id":"0:123:845","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1241,4],"end":[1243,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2583-0:208:1868":{"id":"b:2:2583-0:208:1868","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:1868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2805:259-0:46:1876":{"id":"a:2:2805:259-0:46:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:1876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12507:31922":{"id":"2:12507:31922","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1569,0],"end":[1581,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:7581:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:1880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:202:2217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2579-0:30:1861":{"id":"b:2:2579-0:30:1861","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:1861","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2582:2144"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"17:11547:4033":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3737:7443":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:7502:2535":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40275:3604":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:897:1876":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6531:4967":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1541:1880":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44278:6844":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4613:4838":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"14:165:19447":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:918:7192":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:507:5431":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22425:6500":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:21398:8068":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:6135:3626":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2510:8068":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:400:7277":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11086:7352":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:1750:13606":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:40077:6717":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2939:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:46404:6898":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:42741:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6798:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:4034:3561":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:21328:8239":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43200:2867":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11971:4095":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:43900:6811":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:41472:8107":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5866:4888":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:5634:2497":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3318:8095":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40930:2529":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:9963:6760":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13202:4338":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:1481:1857":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:10313:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3826:7509":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:42275:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:5814:3638":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"0:55:1878":{"crate_id":0,"path":["slab","IterMut"],"kind":"struct"},"18:624:33180":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7856:6993":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42686:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9780:7295":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5004:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5071:7512":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4710:5798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:755:3772":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:588:5481":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6545:4969":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:45974:6879":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3722:6420":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:21195:8238":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9912:7297":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2947:3038":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44385:6850":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43850:6809":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:2964:6427":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6352:4944":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:13100:2487":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11302:7571":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8217:7541":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46261:6893":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:40874:6742":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8394:7054":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11048:7346":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:6514:3561":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:207:3560":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11023:3980":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12554:4218":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:45660:6866":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6666:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5322:4854":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4418:3603":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5044:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:7692:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2884:3023":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2682:7454":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43373:7474":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:481:3728":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:3655:3780":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5867:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:0:2342":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:8670:2608":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:43646:2842":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11872:4066":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3389:3578":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22773:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4724:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4535:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11359:7526":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:44669:5333":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:48014:6972":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8841:1876":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2855:1098":{"crate_id":2,"path":["core","ops"],"kind":"module"},"6:5015:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11167:6854":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14378:4710":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:237:6783":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6169:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6798:2497":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:40228:6730":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12543:4217":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:2473:5327":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:113:7813":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:35:2491":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6071:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12473:4206":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5612:4803":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2373:8063":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:4294:7457":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11235:3998":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:5628:6986":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:14100:4613":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:12033:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12685:4240":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:1184:7280":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42450:2800":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9177:29343":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13451:4378":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:785:1880":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:2368:1880":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:9090:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13778:4532":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10784:6992":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"11:796:2492":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:4372:7511":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2722:4788":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6893:5030":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:660:7270":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:1525:19442":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14145:4624":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3185:31874":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"15:394:19474":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40664:2561":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:12015:2858":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13876:4556":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:7088:2513":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4895:8163":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22971:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:5696:20370":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9660:33171":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9896:20453":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6600:20375":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3474:2797":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5905:4891":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6961:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:42156:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40524:2560":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14355:4697":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7054:5051":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:784:3564":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40049:6714":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14324:4689":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13685:4513":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5974:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46739:6920":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2347:8053":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:122:3553":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:2317:1876":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1120:32933":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9039:24859":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5939:4897":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14118:4617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4455:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11687:20444":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"14:202:13400":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14163:4627":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10603:3934":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:21023:30354":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:21808:8237":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:14156:4625":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7997:7206":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13286:4349":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:6889:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9959:7301":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5009:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12645:4232":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:860:7426":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8553:7066":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:4365:3580":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13055:4311":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7006:7384":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12267:4156":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44381:6849":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:39321:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43424:2839":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8317:7545":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:6151:3643":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:7232:1873":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:6872:2536":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:119:13965":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1760:7489":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4902:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2526:4780":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3417:7039":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11448:20442":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:636:3753":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4488:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:7922:6420":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:10437:1876":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1494:7191":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:43632:3883":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5830:4881":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13826:4539":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5123:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:41585:29958":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:8195:5178":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:5489:7518":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11526:7509":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:3194:7499":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22458:8110":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:47695:6961":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12888:4283":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12237:4144":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7436:4905":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:6286:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22806:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:25919:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22938:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10197:7308":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:4787:3636":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14024:4591":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11351:4009":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10738:7341":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2504:4779":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9459:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:44373:6847":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11442:3666":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2696:4787":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14068:4605":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3583:1876":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13567:4471":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12225:4141":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21466:8234":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10698:7337":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7090:5056":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1778:2492":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:4196:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7834:7531":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:4585:4837":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:48025:6973":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:4912:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1072:7432":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:9138:7082":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:40485:2557":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2862:3025":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11272:4000":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:1562:7435":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2896:3028":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9823:20451":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:945:7426":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6960:7383":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10754:7092":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:32252:6574":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5614:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:30550:29946":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:8181:4818":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:8671:2607":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:21342:13596":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42978:6783":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:6633:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46899:6922":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13259:4346":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2904:3029":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5743:4869":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10084:7305":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45640:6865":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9752:7294":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13010:4302":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44397:6853":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5798:4875":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2968:31895":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:10814:7036":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9564:7291":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2260:7428":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10628:3938":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4578:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10330:28985":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4854:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7302:6440":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10978:7071":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6136:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6279:4939":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2051:7443":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9521:7290":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:8686:20430":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4044:7456":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9998:3865":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13897:4561":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:3461:4823":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44657:6863":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:6973:2547":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43910:6812":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:39219:3048":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13973:4578":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5859:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43814:6807":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11226:3997":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10962:3977":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5384:20369":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:3671:3561":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12031:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:11204:7103":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13554:4464":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8137:7035":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7534:4812":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12037:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14499:4736":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47365:6958":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1528:5503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9867:3894":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:40372:2549":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6721:20376":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6696:4996":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1604:5552":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4921:4847":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40312:2537":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4814:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:11247:2856":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:8927:8203":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1710:5620":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7631:6987":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:43954:6712":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44627:6860":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6968:20377":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:690:3757":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:8115:5173":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4388:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:8659:20417":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:7634:2218":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13274:4004":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1537:5508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4595:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:822:7423":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4039:8121":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10070:3616":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11742:4044":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14056:4602":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2892:3030":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2943:3037":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:7741:7530":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:1850:1880":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6204:7152":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6346:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12698:4241":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11473:3842":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:2394:2492":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:5370:7513":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:40442:2564":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:7371:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14090:4610":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:3600:4824":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6189:4937":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:1558:3578":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:8895:20436":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11306:4004":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6047:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:836:1876":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8002:8098":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4118:7838":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4847:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10494:3924":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4808:5836":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:504:3574":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4884:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4351:5635":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:6468:1880":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:12432:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:8239:5102":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:9883:8073":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4626:6274":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7523:5108":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1743:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:41829:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11036:3662":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:4076:1878":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12022:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2926:3033":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:569:5471":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7513:5107":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10147:7558":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:12270:13392":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:30089:8109":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11159:24989":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"0:46:1876":{"crate_id":0,"path":["slab","Iter"],"kind":"struct"},"2:30948:3741":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12437:4197":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13838:4542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22905:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:10646:4018":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:40242:8037":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44640:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2842:13585":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13868:4553":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10447:3413":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6120:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:7829:3821":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4220:7510":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:2143:6422":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"7:78:19355":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:2074:7428":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5910:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:40510:2559":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40129:6721":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4140:7839":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6529:7524":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2472:4778":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21460:8232":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:9012:7204":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4800:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12997:4301":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11133:7069":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"0:208:1868":{"crate_id":0,"path":["slab","VacantEntry"],"kind":"struct"},"16:6915:4808":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3089:2185":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:20963:3741":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10714:7339":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5661:4862":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:21157:8068":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:32104:5329":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41769:2605":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:41880:1878":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:1855:2492":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14013:4587":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"9:507:5396":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:12024:1153":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11124:7355":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:533:3629":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9155:7553":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"9:486:19361":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"19:0:1133":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:43499:2537":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:22319:29952":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:11964:6805":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:47979:6969":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11507:20443":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:8765:20432":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11327:4007":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41684:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:3240:5324":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11886:4067":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"0:60:1880":{"crate_id":0,"path":["slab","Drain"],"kind":"struct"},"16:6742:5008":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:495:5426":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4647:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:40061:29933":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:22342:6488":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:527:5448":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:922:7423":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:21564:8231":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11845:4058":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4878:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3721:7507":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:2037:6420":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:5861:1880":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:10570:2978":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:32165:6573":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:563:5468":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:42716:5145":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12123:4118":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44445:6857":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43920:6813":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:9286:7195":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:1546:5514":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2419:2352":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:2788:4791":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:654:14323":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43664:2846":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3046:1995":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:30386:29932":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:22307:6485":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39297:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5419:3876":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12026:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48063:6975":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7586:3656":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:9643:2803":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2848:13361":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:9070:3875":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:7466:6447":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:4373:2809":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:41415:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13981:4579":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4449:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10097:7306":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:4745:4841":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:893:1880":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:0:2341":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:859:1873":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9921:7298":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:3232:4764":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11279:3664":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40881:2517":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14434:4718":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11296:7104":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10749:7090":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:9581:2797":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:40136:13433":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:21414:8230":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11987:7209":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40285:7469":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3273:3046":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12496:4211":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:41663:6765":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9762:33177":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7897:6995":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:2878:3024":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:7590:2493":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6818:5023":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12484:4209":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:20976:30207":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:14282:4676":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4998:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7284:2605":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9242:3881":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:40:4082":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:43622:6797":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:928:8003":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5727:4867":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1576:5533":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:393:19363":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8291:7541":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:2334:1878":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13949:4570":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9574:33172":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41888:1873":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11582:7113":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:9650:3913":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"14:31:7419":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10278:7314":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4955:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1127:7431":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40534:2545":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:1876:5323":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:4169:7841":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7660:5114":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7479:3586":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14042:4595":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6885:3651":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:22707:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4755:5809":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3500:8087":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10661:7331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2906:3635":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7792:20381":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:4299:7458":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:3232:7286":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12154:4127":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1501:5492":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5969:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4440:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12172:4128":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8376:2693":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3797:4826":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:47941:6966":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43181:6789":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12945:4295":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:3531:1880":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:40494:2558":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:1664:5600":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43525:2850":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1496:5490":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:1764:6451":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10960:24977":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:6275:6463":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:11042:3663":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4584:5769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43604:6795":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12208:4133":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10087:7557":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13546:4461":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:42704:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:4447:2812":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12003:24982":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:10748:2845":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:1962:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11535:4032":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2951:3039":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8863:7072":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14335:4694":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41897:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6560:3552":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"11:1882:5324":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22027:8068":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:45752:6870":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4004:1880":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:22359:29944":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:5690:2541":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40091:6718":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:3977:8115":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7128:7077":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4523:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8204:2842":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3158:29743":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40162:13434":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1534:1876":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:344:7826":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:7527:7574":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6268:33168":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:4032:7455":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:3565:7288":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"0:42:1873":{"crate_id":0,"path":["slab","IntoIter"],"kind":"struct"},"1:11505:7508":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:909:7433":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4624:6272":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40392:2550":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10292:3913":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5621:3644":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:41621:7041":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40354:2539":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:43433:2837":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10410:7319":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:20991:30207":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"14:215:5263":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5152:6008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"15:327:7168":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8223:7543":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10126:3903":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:4733:8130":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:45992:6880":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:2479:33155":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:719:3764":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40462:2542":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4676:5795":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:5632:2552":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7582:5110":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7679:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2284:19483":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3236:7502":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4156:8136":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8198:3883":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1874:7492":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:489:5423":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:1051:19441":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:2165:3413":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:7262:3572":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4628:6276":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4516:5734":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13071:4312":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6318:4942":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:427:7830":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4375:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:42996:6788":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11639:3986":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:30350:2485":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8265:7041":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44619:7475":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7828:5126":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6354:1717":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"1:5404:7516":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:5963:7364":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:4:1116":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11992:7993":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8228:8106":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40674:2562":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9711:33175":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:12159:8177":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43616:6796":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9607:7292":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8911:8201":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"18:590:3742":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5829:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13298:4356":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43554:2852":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44245:6838":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12846:4262":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12136:4119":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3659:8108":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:7702:6416":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6361:4945":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9277:3882":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5992:6103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:0:2345":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:8343:7044":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11137:7356":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2872:3021":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:557:7479":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10465:3659":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:44173:6832":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7391:20379":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:829:8003":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7708:4816":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7223:2488":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:6091:2565":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6929:5032":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41744:1876":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46231:6892":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43714:6803":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:9888:6467":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3246:2834":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:475:5415":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11970:7577":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:46505:6901":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3666:1873":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:3065:3775":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13739:4523":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44067:6825":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4461:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:42039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7613:7413":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2907:4796":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47865:6964":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7722:4806":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:574:5473":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1910:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10730:7566":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:4557:4836":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2933:19510":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6879:5028":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:23070:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:1819:3060":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:11280:2857":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:8825:20434":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6819:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:1651:2880":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7597:33164":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11389:7359":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4363:3602":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9100:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7869:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11805:3670":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40453:2555":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"13:0:2334":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:6269:2543":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:44081:6828":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4473:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9102:3877":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:1092:7430":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:12996:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11788:4048":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5982:4901":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12086:4112":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2305:19509":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:599:33183":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2937:3036":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:1842:1876":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10637:3939":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:47507:6959":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5363:4855":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:6984:3597":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2615:7497":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44584:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10945:7518":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5982:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1428:1878":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6844:5024":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4027:8118":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:276:2489":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11223:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:8467:7057":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:0:2343":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:4148:7840":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:42957:6782":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:4166:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7651:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:3492:8066":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:21004:30349":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5111:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:4745:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6100:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:1013:3561":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4862:4845":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2810:4792":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4841:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10397:7318":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11586:4036":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8277:8137":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:11759:13387":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:1556:5322":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"10:44:5335":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:8191:2561":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22267:6477":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6898:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12934:4293":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12046:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41961:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:22839:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:14448:4725":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7437:29953":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:426:19364":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4666:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40305:7470":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11573:4034":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5403:3875":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:39633:27998":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6837:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6718:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7515:7453":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5104:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13244:4342":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:8669:2609":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3925:8111":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9086:3876":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:5976:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4968:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2931:3035":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:45836:6873":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45915:6876":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39180:2969":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:2133:3574":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4543:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11191:3986":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2960:3041":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7554:4813":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:6280:3610":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:3173:1876":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10949:7345":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:637:7481":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10527:7501":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:7604:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12621:4231":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:5484:3578":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2579:3632":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12531:4215":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43544:2851":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:2961:2784":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:5088:4852":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7367:29297":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8964:7202":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5435:4856":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22380:29943":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40332:2538":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:45730:6869":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:1591:5545":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7745:7467":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:1734:5629":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6513:4959":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43534:2853":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:12876:7465":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46975:6924":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3919:8112":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3960:3578":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:32144:5102":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"11:2494:2490":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2361:8057":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:491:3729":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12035:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:5117:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:8978:20439":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3234:7501":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:15:2450":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42078:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41735:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:21813:8245":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"0:0:1870":{"crate_id":0,"path":["slab"],"kind":"module"},"11:2303:7438":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14083:4609":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3035:2970":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:14469:4731":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:4719:4840":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:4148:7193":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8793:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11719:20445":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:2185:13597":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:6800:8228":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11710:4004":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11329:7107":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10772:7098":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:2178:7282":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5955:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:6419:7523":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22145:6474":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11381:4013":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:12802:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:2012:7281":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22446:6504":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9852:20452":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:9119:7081":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2345:6453":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40195:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6583:4971":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:2962:33061":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:42457:2801":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46663:6918":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44457:13687":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:47819:6963":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:7906:7533":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:40903:2523":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:504:7278":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1406:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:5572:3578":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:149:3550":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:4949:4848":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:45684:6867":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:12789:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6228:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44566:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5995:4757":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12737:4246":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10832:24985":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4558:8156":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7286:1873":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:10102:3621":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:4474:2811":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10468:3921":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10524:7499":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:914:7191":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:41812:2680":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44682:6864":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:10762:2841":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:1796:7490":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10456:7327":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10903:7342":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:46283:6894":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8895:8202":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1466:5319":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4549:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:4428:3580":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:5760:20371":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:7331:1873":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:5742:7522":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:3267:3044":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7862:5130":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1567:5324":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6499:4817":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11186:7081":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4689:8165":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:43868:6810":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40888:2519":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:31:19348":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5891:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:45885:6875":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12765:4251":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:7258:2516":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:4527:4835":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43696:6802":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44576:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:14076:4608":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7768:4804":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39446:6582":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13101:4318":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:1846:1873":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1570:5531":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:40155:6724":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"11:2085:1868":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10534:3928":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21559:8068":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:14308:4685":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5673:4802":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10440:7322":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10139:20470":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:1036:1868":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:7506:2534":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12724:4244":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4529:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1040:1863":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:21905:2835":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:7390:8002":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:39266:3042":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6792:5022":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4698:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2864:4794":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:6599:3649":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6467:4958":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:423:7829":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6972:24535":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:0:2335":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6700:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12305:4164":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11062:7350":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2810:2483":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13611:4502":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10214:7311":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:6101:3578":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7651:7414":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:1821:7491":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44235:6834":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:644:3730":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10520:3927":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5033:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46137:6890":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:8154:7415":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14401:4711":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:21251:8243":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"11:703:7191":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11934:4082":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"14:160:7419":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12671:3947":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:4462:4833":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40212:29953":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10568:2843":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:12199:13386":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3196:7500":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4789:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40121:6712":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:12038:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10059:3901":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42759:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10383:7317":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:2351:1873":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:4986:4849":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:42436:2799":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:12851:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2955:3040":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12983:4300":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47617:6960":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"9:0:2337":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10112:7307":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13228:4340":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:21209:13596":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10932:7530":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:9005:7552":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43590:6792":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12465:4204":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:1635:3558":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:0:1535":{"crate_id":1,"path":["std"],"kind":"module"},"17:9372:3886":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12062:4108":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:2487:5330":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:6817:2498":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11980:6808":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4458:8138":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:14346:4695":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:42000:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14316:4688":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14033:4594":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:12034:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6741:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12810:4256":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46115:6889":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7272:31870":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:515:3733":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47159:6926":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6711:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8536:1876":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40040:6713":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5017:4850":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10726:7340":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:13045:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6813:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9972:7302":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9187:7086":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:824:3567":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:41922:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:538:3738":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46945:6923":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4860:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:0:2339":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13758:4524":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:2972:31894":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6456:4957":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:357:3554":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2969:19511":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6059:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4428:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2380:4774":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7102:20378":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3275:7504":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4686:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7992:7535":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2548:4781":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13135:4331":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1275:1868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6079:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:12019:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:9095:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:42781:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9350:3885":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:759:5319":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:7719:7992":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4932:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:40382:1874":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:30356:2883":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42941:6779":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8833:7071":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:1259:1863":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:40912:2525":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:21207:30055":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:5328:3561":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:43938:6815":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:2238:1863":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40922:2527":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7736:5116":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:621:7480":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11111:7354":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6927:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40688:2563":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12280:4160":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13148:4332":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:548:5460":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2245:6430":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40101:6719":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4506:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2596:4783":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44393:6852":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1562:5323":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11601:7114":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10529:2858":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13802:4537":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:6666:3561":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1521:5500":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6263:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6261:7151":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4810:8126":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1862:5321":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11162:3982":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7378:2490":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2618:4784":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10679:2847":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:46821:6921":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:45955:6878":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10804:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:298:5314":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12024:4102":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4731:8129":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7503:4811":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2857:3020":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2198:3598":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:22740:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:41501:6756":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13422:4358":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:45937:6877":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10794:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:3441:7287":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:11904:6799":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7462:5103":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2193:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:4641:4839":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:5047":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:7014:3652":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:4236:1876":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:8039:30437":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12911:4292":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2321:4765":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:21159:8236":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:39460:6584":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12598:4226":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:52:7172":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12513:4214":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:7552:2533":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6401:4799":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:542:5457":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7884:20382":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:12020:1036":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5634:4858":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:5376:13378":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2796:13362":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:1681:1192":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10616:3935":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6658:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:707:3760":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12658:4235":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8819:7070":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:363:7478":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:736:24401":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11147:7070":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:13007:3626":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:48078:6976":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:7914:7534":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12044:1705":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5040:7512":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7365:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:96:7810":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3155:28986":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11490:4030":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:3214:5321":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1550:5321":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:261:7276":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3764:4825":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1484:7433":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6017:20372":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:8779:7463":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:4395:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:12021:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5140:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4053:4830":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6128:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7567:3654":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:580:5476":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8283:7544":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7269:33170":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10478:3922":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:30372:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:5138:3585":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:4417:4832":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:12219:13384":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:44377:6848":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:21006:30353":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:32140:7467":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:10461:1878":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10420:3820":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11991:4096":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5928:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:939:7424":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4977:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6455:3648":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4776:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7492:5104":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:9637:2801":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:3888:4828":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:8134:5176":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2406:4775":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:640:7483":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6083:19482":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7694:4815":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:41752:1878":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:2593:3617":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10486:2842":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9933:7299":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3596:1878":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10240:3897":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:43512:2854":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39385:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7630:8068":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1703:5617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6107:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:3301:3049":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12576:4225":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13710:4515":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11371:7110":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:4835:4844":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1140:7836":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9617:33179":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13693:4514":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1650:5589":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:39341:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2900:3027":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12032:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11358:20564":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:4953:2689":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:42314:7197":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4496:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:3219:31882":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13575:4472":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12098:4115":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7886:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"10:0:2338":{"crate_id":10,"path":["adler"],"kind":"module"},"2:40034:6712":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4401:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2183:13596":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:1596:5547":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46353:6897":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:1072:33156":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1682:5607":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1691:5613":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12959:4297":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14296:4682":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"15:306:7821":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:7725:8022":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:7323:1873":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5023:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10929:3974":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:483:5420":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:357:19377":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:8848:20435":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2058:1863":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:3206:5323":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:48116:6978":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7655:6988":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:10289:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:2209:7285":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:5560:8182":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5372:13377":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12196:4132":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7574:2492":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13914:4564":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10370:7316":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2916:3031":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:9426:2819":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10916:7343":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3435:7506":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7240:6439":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:482:3628":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12790:4253":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3085:2184":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9060:7080":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:45706:6868":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8484:8176":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10575:3931":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:12876:4281":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8713:20431":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:46709:6919":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:652:3730":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6569:4805":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2195:7495":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:39281:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12711:4243":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:772:5320":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11594:25130":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:731:7192":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4870:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9172:3879":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:41438:6747":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11910:4081":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:49979:8247":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4824:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1558:5523":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5921:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1545:2492":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7453:6444":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:582:3741":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9488:33176":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:6415:4953":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7782:5118":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:1913:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9631:2798":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:7616:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:21295:8244":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7474:7406":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10089:7556":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:5420:7517":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2511:13443":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:8321:6261":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:261:3561":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:727:3767":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:8281:5185":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21592:6472":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:2225:33139":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41821:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14134:4620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2359:4773":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4497:4834":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12027:1543":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:48093:6977":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:12041:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13723:4520":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13792:4536":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4566:5760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5052:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6934:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2670:4786":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7123:7842":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8969:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22198:6475":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46307:6895":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9207:3880":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7544:5109":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4427:2810":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11000:3979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6682:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"13:226:5312":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:42236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:5712:4864":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3802:2492":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:7892:6994":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:10430:7321":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:1903:8033":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7360:33169":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14478:4733":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9701:7293":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:880:5320":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2832:4793":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8982:24538":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46185:6891":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6687:4995":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:9137:3878":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13966:4577":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4616:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11098:7353":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:32158:2809":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:7621:20380":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:1075:7279":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40148:6723":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12373:4168":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5146:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14522:4740":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10366:7315":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6485:4800":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:43963:6720":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"14:187:19454":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10788:20538":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4434:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13667:4508":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:4988:3578":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:8926:20437":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:10823:24974":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1104:7835":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:39439:3043":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9445:7289":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12007:4100":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6332:4797":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6827:2499":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:531:3735":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:2463:6431":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4222:2808":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:42949:6781":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:21583:8068":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12452:4202":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:2150:20496":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4947:5902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7556:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5648:7362":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4603:5779":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:666:1876":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3180:5322":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12184:4131":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:123:13966":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:699:3758":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2644:4785":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44210:6833":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44030:13398":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"8:0:2336":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:434:3828":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10750:3940":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:7645:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:992:1863":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4179:6458":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11025:3661":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8444:6783":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4738:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7067:5054":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22872:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8128:2516":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"13:110:33157":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9790:33173":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11215:3993":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:5435:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47959:6967":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:256:7275":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40200:6729":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10340:3920":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12422:4193":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:14001:4586":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6804:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:609:7269":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10507:3926":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:12039:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1639:5581":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6425:4954":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:5769:7201":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:7343:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2655:7498":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:7423:6441":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14536:4743":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:1304:7432":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6943:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13989:4580":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8542:7065":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:766:24402":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"10:36:5334":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46039:6881":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11815:4054":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:4079:13360":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14514:4737":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:11729:2827":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:44146:6831":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4614:8116":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4989:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12043:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13174:4334":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:4774:4842":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:4853":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:5960:3644":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:47988:6970":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11281:4001":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12043:4107":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2867:3022":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4651:13427":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10771:3942":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6901:4807":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13040:4307":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:645:7988":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:12204:7463":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3983:8116":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:9085:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:21590:8240":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:9281:30434":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11295:4002":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6376:20374":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7342:33167":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11337:20563":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8805:7069":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2363:8058":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:7037:7837":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:22396:29936":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:44365:6845":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8975:7549":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"9:177:7182":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3361:2523":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4300:3406":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5068:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5588:4801":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9471:3658":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:40410:6735":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:10004:3613":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:48155:6979":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9945:3897":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:44389:6851":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5117:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11465:7507":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:47009:6925":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:11745:2829":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:4480:8139":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:6585:8198":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10012:3913":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1507:5495":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7676:2978":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10227:7312":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"9:450:19362":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6415:2519":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10068:7490":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6243:7374":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6041:20373":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1965:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3161:29732":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10641:2846":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6226:7371":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12074:4111":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10422:7546":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:588:7985":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6781:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:8097:5170":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7639:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10980:3913":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4480:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:629:7439":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7504:6448":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"12:0:2340":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8272:7042":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:1773:6454":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6114:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:9466:7531":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4830:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"14:221:5265":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10265:7313":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14126:4619":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3286:30518":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6753:5009":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:12224:13383":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13851:4548":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10561:3930":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8181:2548":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:47757:6962":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42732:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2766:4790":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:12213:3760":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:30920:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:12045:1252":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6012:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8950:7076":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3830:4827":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:8072:5168":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:41644:6764":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10606:2859":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"17:12252:4150":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4904:8164":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6086:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14173:4632":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43196:6790":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3724:7508":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13632:4507":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9886:7296":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11367:4010":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:596:5486":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2888:3026":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46482:6900":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13676:4512":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2744:4789":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:5735:7519":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12028:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:8953:20438":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10588:3932":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:671:7274":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:0:2344":{"crate_id":17,"path":["object"],"kind":"module"},"17:9455:33178":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:7846:6992":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9985:7303":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6346:7167":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5885:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7633:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:8794:20433":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5574:4798":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13162:4333":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4364:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6156:4932":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4031:8119":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:44369:6846":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13188:4335":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:951:7427":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:849:1878":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11201:3988":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5816:4880":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9266:3060":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:2467:5326":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:22251:6476":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1541:7434":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11316:4006":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:614:33182":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:1145:7432":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7318:5086":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13906:4562":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:7622:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11377:7111":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4729:8127":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:5976:3585":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5049:4851":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41760:1873":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7668:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7252:1880":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:21917:30211":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:21381:8235":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:1538:1873":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2339:4767":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7041:5048":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:42966:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:7995:1856":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:841:7424":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11608:7114":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:11321:2860":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"18:521:24403":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4908:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:880:3569":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:6335:8321":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40401:2551":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:8787:7546":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8148:7036":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"18:564:3740":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:47968:6968":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14269:4670":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11617:4037":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4806:4843":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:32151:7468":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:4764:5814":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:7598:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"15:288:7817":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:1413:1876":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:6587:1873":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4893:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40363:2540":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10547:3929":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:48040:6974":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5085:5976":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7610:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22334:6487":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:903:2492":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:4889:4846":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9328:3883":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6386:4950":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:6183:7205":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:2511:7496":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10186:3910":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44401:6854":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:6222:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5941:6078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6159:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2428:4776":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12040:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:1935:6457":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:7388:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:357:7477":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9641:2802":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10530:7503":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:22283:6481":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11261:3999":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5075:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8211:6811":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2853:13588":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:43945:6721":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14460:4727":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:10720:2844":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42443:2798":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:3332:2492":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:9633:2799":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6944:33165":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:533:5451":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7568:4814":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:41455:6749":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41872:1876":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11344:7108":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:680:1878":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:5297:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:62:13911":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4610:5781":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11761:4047":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6764:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6238:3644":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:1758:7488":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:101:5313":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46329:6896":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:0:1695":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:7839:6991":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:5997:13885":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:39407:2833":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44224:13399":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:3315:4822":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:43768:2840":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42988:6787":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3969:8114":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2881:4795":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:868:7427":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:501:5428":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2941:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12042:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1063:1868":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1525:7442":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:582:3872":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:536:4755":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13024:4305":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:44258:6842":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:3032:4819":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9003:20440":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9635:2800":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:2845:2616":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:867:5319":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13890:4559":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:2450:4777":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:30316:2484":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47903:6965":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"14:7:7419":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:45814:6872":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10759:6991":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10936:5393":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:14420:4716":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:4871:7461":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:10734:2840":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4922:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8849:7548":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4556:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10087:3617":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:30444:29939":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:40897:2521":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2202:8050":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3049:19512":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13922:4566":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5229:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46585:6902":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9051:20418":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5384:7515":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:6059:3639":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:1054:7428":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9025:7077":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:10279:8068":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43462:2849":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:8205:20383":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7516:3872":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43796:6806":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2795:2615":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6868:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11151:7357":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:10239:8184":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22029:8233":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10316:3918":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1514:5498":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2921:3032":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40424:2553":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11244:4037":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:42195:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:693:1873":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:7998:2531":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8857:1873":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10672:7332":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:2692:6434":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8160:8067":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"0:30:1861":{"crate_id":0,"path":["slab","Slab"],"kind":"struct"},"11:2286:1868":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:40341:2548":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1010:7428":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7657:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42676:6770":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10023:7293":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:8002:2532":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8526:7062":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:4344:4831":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1674:3561":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22432:6503":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1632:5577":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:8050:5167":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1505:7192":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:1475:5320":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47999:6971":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:555:5463":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:41608:6763":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2172:6424":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:43442:2838":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12293:4161":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7704:7991":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3955:8113":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10685:7335":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1718:5624":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8299:7043":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12970:4298":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12778:4252":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:324:5317":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9531:33174":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4833:31553":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43929:6814":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:12824:30737":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13113:4320":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4783:5822":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:817:7433":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:3915:4829":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8882:7073":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21021:30351":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:507:3730":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21458:8068":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3483:29204":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:1869:5322":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44098:6829":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40113:6720":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43452:2848":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44052:6819":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11407:20441":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11074:7351":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:389:3556":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:1290:7428":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13816:4538":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3273:7503":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40181:6728":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13487:4409":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10036:3899":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3338:3050":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:8167:7418":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:23517:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:43473:2855":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:23004:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:46085:6888":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:681:3754":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41802:2606":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44420:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1697:5616":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:40433:2554":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11173:20562":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14221:4669":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:7318:2518":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12111:4117":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:45854:6874":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:574:3730":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:7650:2202":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:42117:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13215:4339":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:2461:5325":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:9260:725":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:2574:4782":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3004:3047":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5130:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:8594:20419":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1444:1873":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:14110:4616":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6248:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12036:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:80:7809":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11951:4085":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13085:4314":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10165:20471":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1674:5606":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5557:6182":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"9:330:5373":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2909:3034":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:40475:2556":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6691:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11661:4039":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21480:6472":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:45784:6871":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6959:3594":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12830:4257":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6913:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4017:8117":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:11941:6804":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4914:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12750:4248":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43750:2844":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4692:8138":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:46451:6899":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:9950:1511":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:39363:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4628:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:6532:8196":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9017:7207":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5897:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:12025:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}