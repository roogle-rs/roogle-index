{"root":"0:0:2402","crate_version":"0.4.9","includes_private":false,"index":{"0:30:2393":{"id":"0:30:2393","crate_id":0,"name":"Slab","span":{"filename":"src/lib.rs","begin":[132,0],"end":[142,1]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type\n\nSee the [module documentation] for more details.\n\n[module documentation]: index.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:65","a:2:32385:236-0:30:2393","a:2:32444:3159-0:30:2393","a:2:42247:3151-0:30:2393","a:2:3241:14367-0:30:2393","a:2:42248:3150-0:30:2393","a:2:3206:246-0:30:2393","b:2:2987-0:30:2393","b:2:2983-0:30:2393","b:2:2998-0:30:2393","b:2:2993-0:30:2393","b:2:2713-0:30:2393","b:2:2710-0:30:2393","b:2:3822-0:30:2393","b:5:790-0:30:2393","0:130","0:39","0:113","0:106","0:134","0:35","0:124","0:110","0:118"]}}},"a:2:3241:14367-0:30:2393":{"id":"a:2:3241:14367-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2998-0:208:2400":{"id":"b:2:2998-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13355:33448":{"id":"2:13355:33448","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:33447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:7335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8289:2405":{"id":"2:8289:2405","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"2:13308:26736":{"id":"2:13308:26736","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5699:34157":{"id":"5:5699:34157","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2584":{"id":"0:91:2584","crate_id":0,"name":"get2_mut","span":{"filename":"src/lib.rs","begin":[769,4],"end":[791,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously.\n\nIf any one of the given keys is not associated with a value, then `None`\nis returned.\n\nThis function can be used to get two mutable references out of one slab,\nso that you can manipulate both of them at the same time, eg. swap them.\n\n# Panics\n\nThis function will panic if `key1` and `key2` are the same.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = slab.get2_mut(key1, key2).unwrap();\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:46:2407":{"id":"b:2:3822-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1549,0],"end":[1567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","eq_by","cycle","max_by","find","is_partitioned","inspect","take","filter","nth","is_sorted","last","array_chunks","min_by_key","find_map","map","try_fold","by_ref","scan","filter_map","step_by","count","enumerate","eq","is_sorted_by","sum","all","min_by","try_find","try_for_each","try_collect","flat_map","peekable","chain","any","rev","is_sorted_by_key","product","unzip","size_hint","position","collect","fold","collect_into","flatten","skip_while","intersperse","__iterator_get_unchecked","cmp_by","copied","rposition","le","reduce","skip","partition","cmp","map_windows","lt","take_while","ne","intersperse_with","ge","next_chunk","max","partial_cmp_by","cloned","max_by_key","gt","try_reduce","partition_in_place","fuse","partial_cmp","map_while","for_each","advance_by","zip"],"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:197:172","0:198:1201","0:199:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13391:26236":{"id":"2:13391:26236","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3001:137":{"id":"2:3001:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32309:5793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2989:838":{"id":"2:2989:838","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:841":{"id":"0:132:841","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1286,4],"end":[1297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:963":{"id":"0:129:963","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1250,4],"end":[1252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:55:2409":{"id":"b:2:2983-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:121:172":{"id":"0:121:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1238,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"0:205:1005":{"id":"0:205:1005","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1584,4],"end":[1586,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2713":{"id":"0:105:2713","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1192,4],"end":[1200,5]},"visibility":"public","docs":"Return a draining iterator that removes all elements from the slab and\nyields the removed items.\n\nNote: Elements are removed even if the iterator is only partially\nconsumed or not consumed at all.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet _ = slab.insert(0);\nlet _ = slab.insert(1);\nlet _ = slab.insert(2);\n\n{\n    let mut drain = slab.drain();\n\n    assert_eq!(Some(0), drain.next());\n    assert_eq!(Some(1), drain.next());\n    assert_eq!(Some(2), drain.next());\n    assert_eq!(None, drain.next());\n}\n\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:14367-0:55:2409":{"id":"a:2:3241:14367-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42247:3151-0:60:2411":{"id":"a:2:42247:3151-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:87:985":{"id":"0:87:985","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[657,4],"end":[662,5]},"visibility":"public","docs":"Return an iterator over the slab.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nlet mut iterator = slab.iter();\n\nassert_eq!(iterator.next(), Some((0, &0)));\nassert_eq!(iterator.next(), Some((1, &1)));\nassert_eq!(iterator.next(), Some((2, &2)));\nassert_eq!(iterator.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:2748":{"id":"0:189:2748","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1526,4],"end":[1536,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:27218":{"id":"2:13288:27218","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:27217"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3150-0:42:2405":{"id":"a:2:42248:3150-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:2748":{"id":"0:161:2748","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1438,4],"end":[1448,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1300,0],"end":[1314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:136:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13298:8559":{"id":"2:13298:8559","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:7339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:3304":{"id":"2:13311:3304","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1237,0],"end":[1244,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:121:172","0:122:2405","0:123:963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13290:7344":{"id":"2:13290:7344","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:7324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:60:2411":{"id":"b:2:2983-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2713-0:46:2407":{"id":"b:2:2713-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42247:3151-0:42:2405":{"id":"a:2:42247:3151-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:8286-0:55:2409":{"id":"b:2:8286-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:8288:172","2:8289:2405","2:8290:963"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:145:808":{"id":"0:145:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1342,4],"end":[1346,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1005":{"id":"0:178:1005","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1496,4],"end":[1498,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:42:2405":{"id":"b:2:2710-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42247:3151-0:208:2400":{"id":"a:2:42247:3151-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:95:2640":{"id":"0:95:2640","crate_id":0,"name":"key_of","span":{"filename":"src/lib.rs","begin":[930,4],"end":[944,5]},"visibility":"public","docs":"Get the key for an element in the slab.\n\nThe reference must point to an element owned by the slab.\nOtherwise this function will panic.\nThis is a constant-time operation because the key can be calculated\nfrom the reference with pointer arithmetic.\n\n# Panics\n\nThis function will panic if the reference does not point to an element\nof the slab.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(String::from(\"foo\"));\nlet value = &slab[key];\nassert_eq!(slab.key_of(value), key);\n```\n\nValues are not compared, so passing a reference to a different location\nwill result in a panic:\n\n```should_panic\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(0);\nlet bad = &0;\nslab.key_of(bad); // this will panic\nunreachable!();\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["present_element",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:172":{"id":"0:170:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1462,4],"end":[1462,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]}}}},"a:2:3206:246-0:30:2393":{"id":"a:2:3206:246-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13369:33455":{"id":"2:13369:33455","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:60:2411":{"id":"b:2:2710-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42248:3150-0:208:2400":{"id":"a:2:42248:3150-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:208:2400":{"id":"0:208:2400","crate_id":0,"name":"VacantEntry","span":{"filename":"src/lib.rs","begin":[192,0],"end":[195,1]},"visibility":"public","docs":"A handle to a vacant entry in a `Slab`.\n\n`VacantEntry` allows constructing values with the key that they will be\nassigned to.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:149","a:2:32385:236-0:208:2400","a:2:32444:3159-0:208:2400","a:2:42247:3151-0:208:2400","a:2:3241:14367-0:208:2400","a:2:42248:3150-0:208:2400","a:2:3206:246-0:208:2400","b:2:2987-0:208:2400","b:2:2983-0:208:2400","b:2:2998-0:208:2400","b:2:2993-0:208:2400","b:2:2713-0:208:2400","b:2:2710-0:208:2400","b:2:3822-0:208:2400","0:213"]}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1495,0],"end":[1499,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:8373:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:178:1005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:41:60":{"id":"0:41:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:55:2409":{"id":"b:2:2998-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13293:31875":{"id":"2:13293:31875","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:31870"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:7341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:3063":{"id":"5:5709:3063","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:8286-0:46:2407":{"id":"b:2:8286-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:8288:172","2:8289:2405","2:8290:963"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1316,0],"end":[1325,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:139:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2993-0:42:2405":{"id":"b:2:2993-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:216:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13340:27228":{"id":"2:13340:27228","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:7355":{"id":"2:13291:7355","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:7325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:963":{"id":"0:117:963","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:792:3327":{"id":"5:792:3327","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:198:1201":{"id":"0:198:1201","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1552,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:3159-0:208:2400":{"id":"a:2:32444:3159-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67:1187":{"id":"0:67:1187","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[251,4],"end":[257,5]},"visibility":"public","docs":"Construct a new, empty `Slab`.\n\nThe function does not allocate and the returned slab will have no\ncapacity until `insert` is called or capacity is explicitly reserved.\n\nThis is `const fn` on Rust 1.39+.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::new();\n```","links":{},"attrs":["#[cfg(not(slab_no_const_vec_new))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:2619":{"id":"2:13274:2619","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2402":{"id":"0:0:2402","crate_id":0,"name":"slab","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1589,41]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type.\n\n`Slab` provides pre-allocated storage for a single data type. If many values\nof a single type are being allocated, it can be more efficient to\npre-allocate the necessary storage. Since the size of the type is uniform,\nmemory fragmentation can be avoided. Storing, clearing, and lookup\noperations become very cheap.\n\nWhile `Slab` may look like other Rust collections, it is not intended to be\nused as a general purpose collection. The primary difference between `Slab`\nand `Vec` is that `Slab` returns the key when storing the value.\n\nIt is important to note that keys may be reused. In other words, once a\nvalue associated with a given key is removed from a slab, that key may be\nreturned from future calls to `insert`.\n\n# Examples\n\nBasic storing and retrieval.\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nlet world = slab.insert(\"world\");\n\nassert_eq!(slab[hello], \"hello\");\nassert_eq!(slab[world], \"world\");\n\nslab[world] = \"earth\";\nassert_eq!(slab[world], \"earth\");\n```\n\nSometimes it is useful to be able to associate the key with the value being\ninserted in the slab. This can be done with the `vacant_entry` API as such:\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```\n\nIt is generally a good idea to specify the desired capacity of a slab at\ncreation time. Note that `Slab` will grow the internal capacity when\nattempting to insert a new value once the existing capacity has been reached.\nTo avoid this, add a check.\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(1024);\n\n// ... use the slab\n\nif slab.len() == slab.capacity() {\n    panic!(\"slab full\");\n}\n\nslab.insert(\"the slab is not at capacity yet\");\n```\n\n# Capacity and reallocation\n\nThe capacity of a slab is the amount of space allocated for any future\nvalues that will be inserted in the slab. This is not to be confused with\nthe *length* of the slab, which specifies the number of actual values\ncurrently being inserted. If a slab's length is equal to its capacity, the\nnext value inserted into the slab will require growing the slab by\nreallocating.\n\nFor example, a slab with capacity 10 and length 0 would be an empty slab\nwith space for 10 more stored values. Storing 10 or fewer elements into the\nslab will not change its capacity or cause reallocation to occur. However,\nif the slab length is increased to 11 (due to another `insert`), it will\nhave to reallocate, which can be slow. For this reason, it is recommended to\nuse [`Slab::with_capacity`] whenever possible to specify how many values the\nslab is expected to store.\n\n# Implementation\n\n`Slab` is backed by a `Vec` of slots. Each slot is either occupied or\nvacant. `Slab` maintains a stack of vacant slots using a linked list. To\nfind a vacant slot, the stack is popped. When a slot is released, it is\npushed onto the stack.\n\nIf there are no more available slots in the stack, then `Vec::reserve(1)` is\ncalled and a new slot is created.\n\n[`Slab::with_capacity`]: struct.Slab.html#with_capacity","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:30:2393","0:208:2400","0:42:2405","0:46:2407","0:55:2409","0:60:2411"],"is_stripped":false}}},"0:122:2405":{"id":"0:122:2405","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1239,4],"end":[1239,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:186:2734":{"id":"0:186:2734","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1520,4],"end":[1522,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1505,0],"end":[1523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","eq_by","cycle","max_by","find","is_partitioned","inspect","take","filter","nth","is_sorted","last","array_chunks","min_by_key","find_map","map","try_fold","by_ref","scan","filter_map","step_by","count","enumerate","eq","is_sorted_by","sum","all","min_by","try_find","try_for_each","try_collect","flat_map","peekable","chain","any","rev","is_sorted_by_key","product","unzip","size_hint","position","collect","fold","collect_into","flatten","skip_while","intersperse","__iterator_get_unchecked","cmp_by","copied","rposition","le","reduce","skip","partition","cmp","map_windows","lt","take_while","ne","intersperse_with","ge","next_chunk","max","partial_cmp_by","cloned","max_by_key","gt","try_reduce","partition_in_place","fuse","partial_cmp","map_while","for_each","advance_by","zip"],"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:184:172","0:185:1201","0:186:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13352:33447":{"id":"2:13352:33447","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:33448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:7334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:208:2400":{"id":"b:2:2987-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3241:14367-0:60:2411":{"id":"a:2:3241:14367-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32385:236-0:60:2411":{"id":"a:2:32385:236-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92:2603":{"id":"0:92:2603","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[815,4],"end":[820,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key without\nperforming bounds checking.\n\nFor a safe alternative see [`get`](Slab::get).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    assert_eq!(slab.get_unchecked(key), &2);\n}\n```","links":{"Slab::get":"0:89:2530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:26307":{"id":"2:13319:26307","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:31875","str::rsplit":"2:13325:27222"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:3387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5693:2675":{"id":"5:5693:2675","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1501,0],"end":[1501,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8737:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:2403":{"id":"0:153:2403","crate_id":0,"name":"key","span":{"filename":"src/lib.rs","begin":[1410,4],"end":[1412,5]},"visibility":"public","docs":"Return the key associated with this entry.\n\nA value stored in this entry will be associated with this key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2986:2676":{"id":"2:2986:2676","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2960:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3824:1834":{"id":"2:3824:1834","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39868:7110","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:42:2405":{"id":"b:2:3822-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13401:33461":{"id":"2:13401:33461","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:33461"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:7248","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1246,0],"end":[1253,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}},"items":["0:127:172","0:128:2405","0:129:963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:790-0:46:2407":{"id":"b:5:790-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:792:3327","5:793:3328","5:794:3329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2405":{"id":"0:116:2405","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1227,4],"end":[1227,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"2:13337:27226":{"id":"2:13337:27226","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:27224","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:33445":{"id":"2:13331:33445","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:14163","str::split":"2:13319:26307","prim@char":"1:12355:475","str::split_terminator":"2:13328:33444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:7331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2673":{"id":"0:100:2673","crate_id":0,"name":"try_remove","span":{"filename":"src/lib.rs","begin":[1058,4],"end":[1076,5]},"visibility":"public","docs":"Tries to remove the value associated with the given key,\nreturning the value if the key existed.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.try_remove(hello), Some(\"hello\"));\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[1201,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:1187","0:68:2436","0:69:2437","0:70:2456","0:71:2470","0:72:2486","0:74:2521","0:84:2535","0:85:1005","0:86:2541","0:87:985","0:88:986","0:89:2530","0:90:2571","0:91:2584","0:92:2603","0:93:2610","0:94:2617","0:95:2640","0:96:2652","0:97:2661","0:98:2666","0:100:2673","0:101:2680","0:102:2685","0:103:2698","0:105:2713"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:790-0:30:2393":{"id":"b:5:790-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:792:3327","5:793:3328","5:794:3329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2456":{"id":"0:70:2456","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[347,4],"end":[353,5]},"visibility":"public","docs":"Reserve capacity for at least `additional` more values to be stored\nwithout allocating.\n\n`reserve` does nothing if the slab already has sufficient capacity for\n`additional` more values. If more capacity is required, a new segment of\nmemory will be allocated and all existing values will be copied into it.\nAs such, if the slab is already very large, a call to `reserve` can end\nup being expensive.\n\nThe slab may reserve more than `additional` extra space in order to\navoid frequent reallocations. Use `reserve_exact` instead to guarantee\nthat only the requested space is allocated.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:42:2405":{"id":"a:2:3206:246-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:8286-0:42:2405":{"id":"b:2:8286-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:8288:172","2:8289:2405","2:8290:963"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2713-0:55:2409":{"id":"b:2:2713-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:172":{"id":"0:184:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1506,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"b:2:2987-0:60:2411":{"id":"b:2:2987-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13284:33442":{"id":"2:13284:33442","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:2716","str::slice_unchecked":"2:13283:33441"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:1005":{"id":"0:85:1005","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Return the number of stored values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nassert_eq!(3, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3150-0:60:2411":{"id":"a:2:42248:3150-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5692:34155":{"id":"5:5692:34155","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:3028","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:3028","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13349:33446":{"id":"2:13349:33446","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:2983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:7338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2437":{"id":"0:69:2437","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[317,4],"end":[319,5]},"visibility":"public","docs":"Return the number of values the slab can store without reallocating.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::with_capacity(10);\nassert_eq!(slab.capacity(), 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1225,0],"end":[1235,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:115:172","0:116:2405","0:117:963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13275:2530":{"id":"2:13275:2530","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:808":{"id":"0:216:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[191,9],"end":[191,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:33450":{"id":"2:13360:33450","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3002:1819":{"id":"2:3002:1819","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2535":{"id":"0:84:2535","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Clear the slab of all values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.clear();\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:208:2400":{"id":"b:2:2993-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:46:2407":{"id":"0:46:2407","crate_id":0,"name":"Iter","span":{"filename":"src/lib.rs","begin":[204,0],"end":[207,1]},"visibility":"public","docs":"An iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:32385:236-0:46:2407","a:2:32444:3159-0:46:2407","a:2:42247:3151-0:46:2407","a:2:3241:14367-0:46:2407","a:2:42248:3150-0:46:2407","a:2:3206:246-0:46:2407","b:2:2987-0:46:2407","b:2:2983-0:46:2407","b:2:2998-0:46:2407","b:2:2993-0:46:2407","b:2:2713-0:46:2407","b:2:2710-0:46:2407","b:2:3822-0:46:2407","b:2:8286-0:46:2407","b:5:790-0:46:2407","0:176","0:167","0:179","0:140","0:51","0:173"]}}},"b:2:2710-0:46:2407":{"id":"b:2:2710-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1457,0],"end":[1457,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8737:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3822-0:60:2411":{"id":"b:2:3822-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13365:33453":{"id":"2:13365:33453","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:808":{"id":"0:148:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:33443":{"id":"2:13300:33443","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:7340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1203,0],"end":[1213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39699:2715","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:108:198","0:109:947"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:60:2411":{"id":"b:2:2713-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:2470":{"id":"0:71:2470","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[381,4],"end":[387,5]},"visibility":"public","docs":"Reserve the minimum capacity required to store exactly `additional`\nmore values.\n\n`reserve_exact` does nothing if the slab already has sufficient capacity\nfor `additional` more values. If more capacity is required, a new segment\nof memory will be allocated and all existing values will be copied into\nit.  As such, if the slab is already very large, a call to `reserve` can\nend up being expensive.\n\nNote that the allocator may give the slab more space than it requests.\nTherefore capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve_exact(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2486":{"id":"0:72:2486","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[430,4],"end":[455,5]},"visibility":"public","docs":"Shrink the capacity of the slab as much as possible without invalidating keys.\n\nBecause values cannot be moved to a different index, the slab cannot\nshrink past any stored values.\nIt will drop down as close as possible to the length but the allocator may\nstill inform the underlying vector that there is space for a few more elements.\n\nThis function can take O(n) time even when the capacity cannot be reduced\nor the allocation is shrunk in place. Repeated calls run in O(1) though.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```\n\nThe slab cannot shrink past the last present value even if previous\nvalues are removed:\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..4 {\n    slab.insert(i);\n}\n\nslab.remove(0);\nslab.remove(3);\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:46:2407":{"id":"b:2:2983-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1583,0],"end":[1587,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:8373:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:205:1005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:808":{"id":"0:142:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1331,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:26035":{"id":"2:13372:26035","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:2541":{"id":"2:13264:2541","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:8286-0:60:2411":{"id":"b:2:8286-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8282:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:8288:172","2:8289:2405","2:8290:963"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2987-0:42:2405":{"id":"b:2:2987-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13301:31873":{"id":"2:13301:31873","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:7343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:27075":{"id":"2:13390:27075","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:14220","Self::is_ascii":"2:13389:26232"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:14220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2661":{"id":"0:97:2661","crate_id":0,"name":"vacant_key","span":{"filename":"src/lib.rs","begin":[992,4],"end":[994,5]},"visibility":"public","docs":"Returns the key of the next vacant entry.\n\nThis function returns the key of the vacant entry which  will be used\nfor the next insertion. This is equivalent to\n`slab.vacant_entry().key()`, but it doesn't require mutable access.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert_eq!(slab.vacant_key(), 0);\n\nslab.insert(0);\nassert_eq!(slab.vacant_key(), 1);\n\nslab.insert(1);\nslab.remove(0);\nassert_eq!(slab.vacant_key(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:2591":{"id":"2:13286:2591","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:27214","str::split_at_mut_checked":"2:13288:27218"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:60:2411":{"id":"b:2:2998-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5708:34159":{"id":"5:5708:34159","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:3028","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:3028","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:1005":{"id":"0:164:1005","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1452,4],"end":[1454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1481,0],"end":[1493,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8320:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:175:2748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13387:33459":{"id":"2:13387:33459","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:8812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:8812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:8812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:947":{"id":"0:109:947","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1212,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2666":{"id":"0:98:2666","crate_id":0,"name":"vacant_entry","span":{"filename":"src/lib.rs","begin":[1019,4],"end":[1024,5]},"visibility":"public","docs":"Return a handle to a vacant entry allowing for further manipulation.\n\nThis function is useful when creating values that must contain their\nslab key. The returned `VacantEntry` reserves a slot in the slab and is\nable to query the associated key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2680":{"id":"0:101:2680","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1099,4],"end":[1101,5]},"visibility":"public","docs":"Remove and return the value associated with the given key.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Panics\n\nPanics if `key` is not associated with a value.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.remove(hello), \"hello\");\nassert!(!slab.contains(hello));\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:30:2393":{"id":"b:2:3822-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:2652":{"id":"0:96:2652","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[964,4],"end":[970,5]},"visibility":"public","docs":"Insert a value in the slab, returning key assigned to the value.\n\nThe returned key can later be used to retrieve or remove the value using indexed\nlookup and `remove`. Additional capacity is allocated if needed. See\n[Capacity and reallocation](index.html#capacity-and-reallocation).\n\n# Panics\n\nPanics if the new storage in the vector exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\nassert_eq!(slab[key], \"hello\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["val",{"generic":"T"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:33438":{"id":"2:13266:33438","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:808":{"id":"0:136:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:198":{"id":"0:108:198","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1204,4],"end":[1204,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:2619","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:26734":{"id":"2:13305:26734","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:808":{"id":"0:139:808","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1320,4],"end":[1324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:55:2409":{"id":"b:2:3822-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13334:27224":{"id":"2:13334:27224","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163","str::rsplitn":"2:13337:27226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1589,0],"end":[1589,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8737:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:172":{"id":"0:127:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1247,4],"end":[1247,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}]}}}},"2:13362:33451":{"id":"2:13362:33451","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2436":{"id":"0:68:2436","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[300,4],"end":[306,5]},"visibility":"public","docs":"Construct a new, empty `Slab` with the specified capacity.\n\nThe returned slab will be able to store exactly `capacity` without\nreallocating. If `capacity` is 0, the slab will not allocate.\n\nIt is important to note that this function does not specify the *length*\nof the returned slab, but only the capacity. For an explanation of the\ndifference between length and capacity, see [Capacity and\nreallocation](index.html#capacity-and-reallocation).\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\n// The slab contains no values, even though it has capacity for more\nassert_eq!(slab.len(), 0);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    slab.insert(i);\n}\n\n// ...but this may make the slab reallocate\nslab.insert(11);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:208:2400":{"id":"b:2:3822-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13397:33460":{"id":"2:13397:33460","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:33460"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:7249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1201":{"id":"0:185:1201","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1508,4],"end":[1518,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:2685":{"id":"2:13302:2685","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1005":{"id":"0:192:1005","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1542,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:42:2405":{"id":"b:2:2998-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13287:27217":{"id":"2:13287:27217","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:27218"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1545,0],"end":[1545,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8737:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13393:26238":{"id":"2:13393:26238","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1357,0],"end":[1413,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:152:2652","0:153:2403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32444:3159-0:30:2393":{"id":"a:2:32444:3159-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32444:3159-0:60:2411":{"id":"a:2:32444:3159-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:793:3328":{"id":"5:793:3328","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1437,0],"end":[1449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8320:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:161:2748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5710:26234":{"id":"5:5710:26234","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:26237"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2734":{"id":"0:199:2734","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1564,4],"end":[1566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2571":{"id":"0:90:2571","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[735,4],"end":[740,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\n*slab.get_mut(key).unwrap() = \"world\";\n\nassert_eq!(slab[key], \"world\");\nassert_eq!(slab.get_mut(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:30:2393":{"id":"b:2:2987-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:172":{"id":"0:156:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1418,4],"end":[1418,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"0:171:1201":{"id":"0:171:1201","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1464,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1327,0],"end":[1336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:142:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:33452":{"id":"2:13364:33452","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:172":{"id":"0:115:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1226,4],"end":[1226,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}}},"0:93:2610":{"id":"0:93:2610","crate_id":0,"name":"get_unchecked_mut","span":{"filename":"src/lib.rs","begin":[847,4],"end":[852,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key\nwithout performing bounds checking.\n\nFor a safe alternative see [`get_mut`](Slab::get_mut).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    let val = slab.get_unchecked_mut(key);\n    *val = 13;\n}\n\nassert_eq!(slab[key], 13);\n```","links":{"Slab::get_mut":"0:90:2571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:26217":{"id":"2:13271:26217","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:14164"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3150-0:46:2407":{"id":"a:2:42248:3150-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:2541","2:13265:33437","2:13266:33438","2:13268:33439","2:13271:26217","2:13272:33440","2:13273:335","2:13274:2619","2:13275:2530","2:13277:2571","2:13279:2603","2:13281:2610","2:13283:33441","2:13284:33442","2:13285:27214","2:13286:2591","2:13287:27217","2:13288:27218","2:13290:7344","2:13291:7355","2:13292:6966","2:13293:31875","2:13295:31870","2:13298:8559","2:13300:33443","2:13301:31873","2:13302:2685","2:13305:26734","2:13308:26736","2:13311:3304","2:13315:3268","2:13319:26307","2:13322:27220","2:13325:27222","2:13328:33444","2:13331:33445","2:13334:27224","2:13337:27226","2:13340:27228","2:13343:27229","2:13346:2983","2:13349:33446","2:13352:33447","2:13355:33448","2:13358:33449","2:13360:33450","2:13362:33451","2:13364:33452","2:13365:33453","2:13366:33454","2:13369:33455","2:13372:26035","2:13375:27230","2:13378:33456","2:13381:33457","2:13384:33458","2:13387:33459","2:13389:26232","2:13390:27075","2:13391:26236","2:13392:26237","2:13393:26238","2:13394:27078","2:13395:27079","2:13396:27080","2:13397:33460","2:13400:8749","2:13401:33461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158:2734":{"id":"0:158:2734","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:2610":{"id":"2:13281:2610","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:30:2393":{"id":"b:2:2713-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:479":{"id":"0:54:479","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[210,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:6966":{"id":"2:13292:6966","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:4277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:208:2400":{"id":"a:2:3206:246-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1349,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:148:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:481":{"id":"0:38:481","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[156,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:27079":{"id":"2:13395:27079","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1285,0],"end":[1298,1]},"visibility":"default","docs":"Create a slab from an iterator of key-value pairs.\n\nIf the iterator produces duplicate keys, the previous value is replaced with the later one.\nThe keys does not need to be sorted beforehand, and this function always\ntakes O(n) time.\nNote that the returned slab will use space proportional to the largest key,\nso don't use `Slab` with untrusted keys.\n\n# Examples\n\n```\n# use slab::*;\n\nlet vec = vec![(2,'a'), (6,'b'), (7,'c')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert!(slab.capacity() >= 8);\nassert_eq!(slab[2], 'a');\n```\n\nWith duplicate and unsorted keys:\n\n```\n# use slab::*;\n\nlet vec = vec![(20,'a'), (10,'b'), (11,'c'), (10,'d')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert_eq!(slab[10], 'd');\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8271:145","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"generic":"T"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:132:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:963":{"id":"0:123:963","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1241,4],"end":[1243,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:42:2405":{"id":"b:2:2713-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2983-0:30:2393":{"id":"b:2:2983-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2652":{"id":"0:152:2652","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1387,5]},"visibility":"public","docs":"Insert a value in the entry, returning a mutable reference to the value.\n\nTo get the key associated with the value, use `key` prior to calling\n`insert`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["val",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1417,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","eq_by","cycle","max_by","find","is_partitioned","inspect","take","filter","nth","is_sorted","last","array_chunks","min_by_key","find_map","map","try_fold","by_ref","scan","filter_map","step_by","count","enumerate","eq","is_sorted_by","sum","all","min_by","try_find","try_for_each","try_collect","flat_map","peekable","chain","any","rev","is_sorted_by_key","product","unzip","size_hint","position","collect","fold","collect_into","flatten","skip_while","intersperse","__iterator_get_unchecked","cmp_by","copied","rposition","le","reduce","skip","partition","cmp","map_windows","lt","take_while","ne","intersperse_with","ge","next_chunk","max","partial_cmp_by","cloned","max_by_key","gt","try_reduce","partition_in_place","fuse","partial_cmp","map_while","for_each","advance_by","zip"],"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:156:172","0:157:1201","0:158:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128:2405":{"id":"0:128:2405","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1248,4],"end":[1248,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"a:2:32444:3159-0:55:2409":{"id":"a:2:32444:3159-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13315:3268":{"id":"2:13315:3268","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:3159-0:42:2405":{"id":"a:2:32444:3159-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74:2521":{"id":"0:74:2521","crate_id":0,"name":"compact","span":{"filename":"src/lib.rs","begin":[523,4],"end":[576,5]},"visibility":"public","docs":"Reduce the capacity as much as possible, changing the key for elements when necessary.\n\nTo allow updating references to the elements which must be moved to a new key,\nthis function takes a closure which is called before moving each element.\nThe second and third parameters to the closure are the current key and\nnew key respectively.\nIn case changing the key for one element turns out not to be possible,\nthe move can be cancelled by returning `false` from the closure.\nIn that case no further attempts at relocating elements is made.\nIf the closure unwinds, the slab will be left in a consistent state,\nbut the value that the closure panicked on might be removed.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(10);\nlet a = slab.insert('a');\nslab.insert('b');\nslab.insert('c');\nslab.remove(a);\nslab.compact(|&mut value, from, to| {\n    assert_eq!((value, from, to), ('c', 2, 0));\n    true\n});\nassert!(slab.capacity() >= 2 && slab.capacity() < 10);\n```\n\nThe value is not moved when the closure returns `Err`:\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(100);\nlet a = slab.insert('a');\nlet b = slab.insert('b');\nslab.remove(a);\nslab.compact(|&mut value, from, to| false);\nassert_eq!(slab.iter().next(), Some((b, &'b')));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rekey",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3452:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"primitive":"usize"},{"primitive":"usize"}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13378:33456":{"id":"2:13378:33456","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:42:2405":{"id":"b:2:2983-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:2685":{"id":"0:102:2685","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1118,4],"end":[1123,5]},"visibility":"public","docs":"Return `true` if a value is associated with the given key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nassert!(slab.contains(hello));\n\nslab.remove(hello);\n\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:208:2400":{"id":"b:2:2983-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:2676"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13272:33440":{"id":"2:13272:33440","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:30:2393":{"id":"b:2:2998-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32385:236-0:208:2400":{"id":"a:2:32385:236-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13400:8749":{"id":"2:13400:8749","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:8749"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:7240","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2617":{"id":"0:94:2617","crate_id":0,"name":"get2_unchecked_mut","span":{"filename":"src/lib.rs","begin":[881,4],"end":[892,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously without performing bounds checking and safety\ncondition checking.\n\nFor a safe alternative see [`get2_mut`](Slab::get2_mut).\n\nThis function should be used with care.\n\n# Safety\n\n- Both keys must be within bounds.\n- The condition `key1 != key2` must hold.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = unsafe { slab.get2_unchecked_mut(key1, key2) };\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{"Slab::get2_mut":"0:91:2584"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key1",{"primitive":"usize"}],["key2",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265:33437":{"id":"2:13265:33437","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13343:27229":{"id":"2:13343:27229","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:46:2407":{"id":"a:2:3206:246-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13346:2983":{"id":"2:13346:2983","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:33446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:7337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1461,0],"end":[1479,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","eq_by","cycle","max_by","find","is_partitioned","inspect","take","filter","nth","is_sorted","last","array_chunks","min_by_key","find_map","map","try_fold","by_ref","scan","filter_map","step_by","count","enumerate","eq","is_sorted_by","sum","all","min_by","try_find","try_for_each","try_collect","flat_map","peekable","chain","any","rev","is_sorted_by_key","product","unzip","size_hint","position","collect","fold","collect_into","flatten","skip_while","intersperse","__iterator_get_unchecked","cmp_by","copied","rposition","le","reduce","skip","partition","cmp","map_windows","lt","take_while","ne","intersperse_with","ge","next_chunk","max","partial_cmp_by","cloned","max_by_key","gt","try_reduce","partition_in_place","fuse","partial_cmp","map_while","for_each","advance_by","zip"],"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:170:172","0:171:1201","0:172:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2748":{"id":"0:175:2748","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1482,4],"end":[1492,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:172":{"id":"0:197:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1550,4],"end":[1550,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13277:2571":{"id":"2:13277:2571","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2698":{"id":"0:103:2698","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1149,4],"end":[1163,5]},"visibility":"public","docs":"Retain only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(usize, &mut e)`\nreturns false. This method operates in place and preserves the key\nassociated with the retained values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet k1 = slab.insert(0);\nlet k2 = slab.insert(1);\nlet k3 = slab.insert(2);\n\nslab.retain(|key, val| key == k1 || *val == 1);\n\nassert!(slab.contains(k1));\nassert!(slab.contains(k2));\nassert!(!slab.contains(k3));\n\nassert_eq!(2, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3452:141","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:42:2405":{"id":"a:2:32385:236-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:1201":{"id":"0:157:1201","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1420,4],"end":[1430,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:208:2400":{"id":"b:2:2710-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3206:246-0:55:2409":{"id":"a:2:3206:246-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42247:3151-0:55:2409":{"id":"a:2:42247:3151-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:88:986":{"id":"0:88:986","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Return an iterator that allows modifying each value.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet key1 = slab.insert(0);\nlet key2 = slab.insert(1);\n\nfor (key, val) in slab.iter_mut() {\n    if key == key1 {\n        *val += 2;\n    }\n}\n\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2530":{"id":"0:89:2530","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\nassert_eq!(slab.get(key), Some(&\"hello\"));\nassert_eq!(slab.get(123), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:208:2400":{"id":"b:2:2713-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:25915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1338,0],"end":[1347,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:145:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1451,0],"end":[1455,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:8373:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:164:1005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2710-0:30:2393":{"id":"b:2:2710-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3035:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:41:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2734":{"id":"0:172:2734","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3150-0:55:2409":{"id":"a:2:42248:3150-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13268:33439":{"id":"2:13268:33439","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:33438"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:26237":{"id":"2:13392:26237","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:27078":{"id":"2:13394:27078","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:60:2411":{"id":"a:2:3206:246-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:55:2409":{"id":"b:2:2987-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:479":{"id":"0:37:479","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[148,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[209,0],"end":[216,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:54:479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:2748":{"id":"0:202:2748","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1570,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8428:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:30:2393":{"id":"a:2:32385:236-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1215,0],"end":[1223,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"2:3484:2716","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:112:948"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13366:33454":{"id":"2:13366:33454","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:14160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:27220":{"id":"2:13322:27220","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:3403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:26235":{"id":"5:5711:26235","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:26238"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:46:2407":{"id":"b:2:2998-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13396:27080":{"id":"2:13396:27080","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:37996"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2541":{"id":"0:86:2541","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Return `true` if there are no values stored in the slab.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert!(slab.is_empty());\n\nslab.insert(1);\nassert!(!slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:3159-0:46:2407":{"id":"a:2:32444:3159-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:3159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42247:3151-0:30:2393":{"id":"a:2:42247:3151-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5707:34158":{"id":"5:5707:34158","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1525,0],"end":[1537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8320:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:189:2748"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2405":{"id":"0:42:2405","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[198,0],"end":[201,1]},"visibility":"public","docs":"A consuming iterator over the values stored in a `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:32385:236-0:42:2405","a:2:32444:3159-0:42:2405","a:2:42247:3151-0:42:2405","a:2:3241:14367-0:42:2405","a:2:42248:3150-0:42:2405","a:2:3206:246-0:42:2405","b:2:2987-0:42:2405","b:2:2983-0:42:2405","b:2:2998-0:42:2405","b:2:2993-0:42:2405","b:2:2713-0:42:2405","b:2:2710-0:42:2405","b:2:3822-0:42:2405","b:2:8286-0:42:2405","0:165","0:154","0:162","0:137","0:159"]}}},"5:5696:34156":{"id":"5:5696:34156","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:27230":{"id":"2:13375:27230","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:27214":{"id":"2:13285:27214","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:27217","str::split_at_mut":"2:13286:2591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:794:3329":{"id":"5:794:3329","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:948":{"id":"0:112:948","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1217,4],"end":[1222,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2409":{"id":"0:55:2409","crate_id":0,"name":"IterMut","span":{"filename":"src/lib.rs","begin":[219,0],"end":[222,1]},"visibility":"public","docs":"A mutable iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:32385:236-0:55:2409","a:2:32444:3159-0:55:2409","a:2:42247:3151-0:55:2409","a:2:3241:14367-0:55:2409","a:2:42248:3150-0:55:2409","a:2:3206:246-0:55:2409","b:2:2987-0:55:2409","b:2:2983-0:55:2409","b:2:2998-0:55:2409","b:2:2993-0:55:2409","b:2:2713-0:55:2409","b:2:2710-0:55:2409","b:2:3822-0:55:2409","b:2:8286-0:55:2409","0:181","0:190","0:187","0:143","0:193"]}}},"0:60:2411":{"id":"0:60:2411","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[225,0],"end":[228,1]},"visibility":"public","docs":"A draining iterator for `Slab`","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:32385:236-0:60:2411","a:2:32444:3159-0:60:2411","a:2:42247:3151-0:60:2411","a:2:3241:14367-0:60:2411","a:2:42248:3150-0:60:2411","a:2:3206:246-0:60:2411","b:2:2987-0:60:2411","b:2:2983-0:60:2411","b:2:2998-0:60:2411","b:2:2993-0:60:2411","b:2:2713-0:60:2411","b:2:2710-0:60:2411","b:2:3822-0:60:2411","b:2:8286-0:60:2411","0:206","0:195","0:200","0:146","0:203"]}}},"2:13384:33458":{"id":"2:13384:33458","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:46:2407":{"id":"a:2:32385:236-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:46:2407":{"id":"b:2:2987-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2993-0:46:2407":{"id":"b:2:2993-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13295:31870":{"id":"2:13295:31870","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:31875"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:7342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:55:2409":{"id":"b:2:2710-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13381:33457":{"id":"2:13381:33457","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:14163"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:27222":{"id":"2:13325:27222","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:14163","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:26307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:3391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:14161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:14367-0:208:2400":{"id":"a:2:3241:14367-0:208:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:208:2400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:8288:172":{"id":"2:8288:172","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8428:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[144,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:37:479","0:38:481"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13283:33441":{"id":"2:13283:33441","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:33442","crate::ops::Index":"2:39699:2715"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:14367-0:46:2407":{"id":"a:2:3241:14367-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2993-0:55:2409":{"id":"b:2:2993-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42247:3151-0:46:2407":{"id":"a:2:42247:3151-0:46:2407","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:46:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1539,0],"end":[1543,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:8373:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:192:1005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2993-0:30:2393":{"id":"b:2:2993-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2715:25915":{"id":"2:2715:25915","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:26232":{"id":"2:13389:26232","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:55:2409":{"id":"a:2:32385:236-0:55:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:55:2409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13328:33444":{"id":"2:13328:33444","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:14163","str::split":"2:13319:26307","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:33445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:7330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:14367-0:42:2405":{"id":"a:2:3241:14367-0:42:2405","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:14367","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:42:2405","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2996:137":{"id":"2:2996:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2712:2972":{"id":"2:2712:2972","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:34155","5:5693:2675","5:5696:34156","5:5699:34157","5:5707:34158","5:5708:34159","5:5709:3063","5:5710:26234","5:5711:26235"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13279:2603":{"id":"2:13279:2603","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:8290:963":{"id":"2:8290:963","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:60:2411":{"id":"b:2:2993-0:60:2411","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2997:1821":{"id":"2:2997:1821","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:3150-0:30:2393":{"id":"a:2:42248:3150-0:30:2393","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Slab","id":"0:30:2393","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13358:33449":{"id":"2:13358:33449","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1569,0],"end":[1581,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:8320:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:60:2411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:202:2748"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"17:12353:4391":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14066:4649":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7586:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13855:4616":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12141:4058":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13375:4509":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40585:14210":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5588:8093":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:45969:7401":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47276:7518":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40823:3090":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:2591:6950":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:7332:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:32445:7102":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:379:8055":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6731:7707":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15701:5109":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11102:7862":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7397:4040":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10709:8078":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:12478:4403":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5494:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40562:7248":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1642:8011":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21804:9003":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:3303:31090":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:3432:3588":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:3592:7592":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10954:21732":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46501:7452":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14091:4651":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:40054:14220":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:1521:5966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4333:8577":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:11513:3386":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"9:328:5837":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11764:4333":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:32351:8043":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:45852:7388":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:3308:5785":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:42133:7291":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:689:4145":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:30508:8876":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46596:7455":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:46613:7456":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11694:7662":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13015:4398":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11042:7858":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14025:4642":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:23267:7034":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:16093:5208":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:5638:8097":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:5305:3964":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:14723:4756":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6748:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"0:0:2402":{"crate_id":0,"path":["slab"],"kind":"module"},"2:8238:3076":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:564:5937":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4372:2407":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6852:5446":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5198:5340":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2467:5261":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12851:4430":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:40924:3106":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1632:6044":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46708:7459":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:10887:35070":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7058:5472":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:23179:7026":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:9235:8976":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:8291:3075":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:1392:2400":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7949:5305":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:10384:3342":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:7567:6960":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:659:7829":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12597:4409":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:4215:8899":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9984:21720":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5603:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3048:20791":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:14131:4655":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:10390:3345":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:44342:7240":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8462:3057":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:12327:8756":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6462:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:6799:8970":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:8008:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:523:5915":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:2380:2407":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5107:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:219:3928":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6708:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6723:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:15333:4992":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:15102:4935":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"7:32:20626":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6588:5430":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:8228:7547":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:40845:3082":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9710:8113":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:4564:3954":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:46484:7451":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:818:8877":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:12031:3402":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:22717:9084":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:5278:31652":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12900:4434":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5085:5336":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6904:5454":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:2234:7844":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:2366:8007":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:40958:3098":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1500:5958":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9886:21717":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43840:3382":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:8031:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5387:6355":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1592:5783":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1494:5955":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:299:5776":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5341:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:8483:5668":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1129:3929":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21720:31597":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"13:0:2868":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6084:5353":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44256:7338":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5044:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:7986:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40945:3084":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:1860:2388":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:1569:5996":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3396:3597":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6666:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:6513:9097":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6421:5251":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:5168:3231":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:546:5248":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5682:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15078:4930":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10524:7850":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:4501:3956":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:2551:35043":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13972:4341":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5477:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:8331:8117":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:8050:3059":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:4717:8027":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:15760:5125":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5249:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3658:30349":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8700:3235":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:7597:3078":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13497:4530":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5089:8938":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:538:4126":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:6358:4008":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:39040:3587":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:9328:7630":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:21802:8833":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14868:4869":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:288:3929":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:45916:7394":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42248:3150":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:568:4012":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4496:14187":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:21810:9006":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:12973:14161":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43416:7312":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9407:3149":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6770:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:22586:14379":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:11016:7857":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5570:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:7508:5552":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11092:4048":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:40570:7240":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2003:8796":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43831:3384":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:15324:4989":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2495:8828":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:6551:1940":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"11:830:8002":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:4821:7848":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:31172:4129":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:949:7747":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46729:7460":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4829:6125":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:4430:8025":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5520:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:3870:8012":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11063:7860":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13437:4517":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:7368:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1920:8068":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:4152:5321":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:623:8748":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3649:3341":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46634:7457":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:42269:3223":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44661:7372":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6205:21651":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:1895:3031":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4923:8907":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2990:5290":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8669:5603":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:963:8767":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7337:5529":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3248:14369":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:8740:3073":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44720:14480":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:9715:4044":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42334:2409":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13877:4623":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7684:6961":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:8298:5631":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11367:4291":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:2840:5283":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2604:14379":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:11743:4329":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:11357:3404":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:9361:7633":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5295:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2966:5289":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:44900:7380":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40936:3097":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5113:5337":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:3264:7845":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13753:4600":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:7030:5470":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13424:4516":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:4109:8891":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"0:30:2393":{"crate_id":0,"path":["slab","Slab"],"kind":"struct"},"2:23245:7032":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:6449:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43849:3383":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3300:31094":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1884:2405":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:14016:3026":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2660:5275":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44643:7370":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"9:53:7728":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7424:21658":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:7060:3037":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:23190:7027":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:2684:5276":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:527:3947":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8241:8115":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:328:5779":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10938:7545":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:8489:8832":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44892:8051":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:41366:3060":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:2349:2400":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:12072:3405":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:47128:7502":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6808:5291":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7554:21659":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"13:229:5774":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:44452:7353":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:11485:3385":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:670:7833":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5088:6256":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14235:4691":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3287:3591":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:5776:6704":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13173:4464":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5375:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8004:7541":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11214:7865":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:7341:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7542:5557":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:1551:5986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"17:12328:4382":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:261:7835":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10638:4045":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12543:7920":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:1376:2395":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:9671:21700":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:41915:7273":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:491:5892":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46051:7406":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13455:4525":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6255:3954":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7838:21660":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12056:4368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15463:5025":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:2880:5285":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:303:3028":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:740:7748":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39703:3592":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5629:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6188:5364":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:15342:4993":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10534:35069":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:553:5932":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"13:110:35045":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:871:2407":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11898:4336":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"10:44:5799":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4303:8575":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:513:7837":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7938:5605":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3340:8078":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:445:20640":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:2545:5791":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5060:5335":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1098:2400":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:41408:3070":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12485:21845":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12969:4437":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:2323:7997":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:11212:2409":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4902:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6867:4035":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:2262:3947":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15289:4978":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40673:7254":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:23201:7028":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:40836:3081":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2550:5270":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40513:31644":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21701:31594":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:8290:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:8273:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:1914:5786":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13723:4591":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:3096:33370":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:45931:7395":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"14:31:7988":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13024:21726":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11680:7661":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:2203:7841":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5057:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6599:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12189:7908":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:1105:7999":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10573:35074":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2148:2400":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12792:4233":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:23157:7024":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6680:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2796:5281":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:902:5782":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:44961:5797":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:8261:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:46176:7421":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3252:3566":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5449:5348":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:214:5764":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:42872:3342":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44466:7356":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6843:5445":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:16079:5204":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11674:4323":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12494:4404":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13581:4558":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46546:7453":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5420:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7807:35063":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:32376:7101":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4821:6798":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:8174:8113":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:123:3920":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:3678:32588":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4869:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"10:0:2872":{"crate_id":10,"path":["adler"],"kind":"module"},"2:22227:3380":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:34198:3578":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14529:4738":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4060:2405":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5241:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43115:3352":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:7487:2405":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:13698:32814":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:635:4141":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8608:8126":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12584:7854":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:1539:5977":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2469:8818":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:15010:4913":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11153:7854":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22850:6991":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3368:5787":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14788:4807":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46275:7426":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42093:7594":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:8028:5611":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:12967:4148":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:46258:7425":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:8284:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44437:7347":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:481:4116":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22990:7004":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12572:4307":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:3241:14367":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:13610:8038":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:45867:7389":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:9389:4031":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:2301:6943":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:5602:8095":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40787:8046":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:2137:7997":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:2559:5794":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42247:3151":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:581:4129":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:12690:7332":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9916:21718":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:570:5940":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6183:4027":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:41375:3062":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3100:33383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:46883:7493":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:5004:8906":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1907:5785":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:1064:20719":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:43919:3399":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:23212:7029":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:14855:4862":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"14:160:7988":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1684:6076":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12278:7915":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44238:7337":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6239:5370":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2590:5272":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14051:4646":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1631:5785":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:14933:4905":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:44620:7362":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5727:4268":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:10394:3346":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14012:4641":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2780:8077":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7350:5531":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:4561:8091":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13766:4602":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:46019:7404":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:2228:5788":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:538:5924":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7495:5549":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15356:5000":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44317:7342":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:5844:4027":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6337:5386":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:0:2877":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47223:7515":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:8014:5308":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:2506:5268":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13399:4513":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:11471:3389":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6159:5359":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:45837:7385":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5357:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15368:5003":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:43160:31634":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15748:5123":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:732:8008":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:22903:6992":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:1961:3954":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:7469:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4772:8937":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:351:8563":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:5958:8099":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:42197:2405":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8788:7610":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9154:2407":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:2539:5790":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:47060:7498":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6713:7944":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:45984:7402":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10044:21721":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9193:7626":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:47159:7505":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14311:4700":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8341:8865":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:6256:3083":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22452:9089":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:3659:3594":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:39831:3378":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:30772:3428":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:45998:7403":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12213:7910":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:10386:3343":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44558:7360":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44595:7361":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44004:7324":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:7703:3089":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:7316:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4442:8026":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12433:4398":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4792:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15992:5189":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:46161:7420":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:8137:5309":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:176:7738":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:47315:7534":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13187:4465":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"7:79:20633":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:4137:2411":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5224:5341":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:698:2405":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:3308:5258":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:3695:5318":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44609:14176":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11621:4318":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:12713:7333":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:4302:3954":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3855:6939":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:33128:3567":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:21751:9007":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7770:8023":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7577:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45899:7393":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:7234:3980":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:33746:3574":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:1158:8001":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10905:7856":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:7999:2733":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10284:4274":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10828:35067":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4984:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6984:5311":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10155:4268":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5319:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11051:7859":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11503:4050":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:1220:8572":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:8480:7589":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:40:3030":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:473:5884":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11405:7874":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7358:5301":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12621:4410":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6534:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:10396:3347":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9938:21719":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2530:5269":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:7767:8574":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44950:7383":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6532:9098":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:5545:14155":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8765:7312":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11098:4049":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15426:5017":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11634:4320":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3889:4168":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:884:2409":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4844:5329":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7223:5510":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:651:4118":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7036:3036":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5709:21649":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:479:5887":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:3347:34955":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:13633:3095":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:12767:3403":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:573:4118":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7462:7954":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2606:14380":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:497:5895":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12530:7919":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5282:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4167:3929":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:44913:32615":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:43105:7298":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8526:4277":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:10643:6985":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:7454:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1583:5782":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22934:6997":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:22639:14379":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:3486:8860":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:1514:5963":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41947:8874":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6866:21655":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:40665:7253":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:7350:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:22712:9086":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:5533:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3250:2389":{"crate_id":2,"path":["core","ops"],"kind":"module"},"1:4487:8090":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:396:3924":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40883:3093":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:4796:3355":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11313:4304":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11026:21734":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14271:4696":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2820:5282":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6526:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12300:21843":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:6964:3993":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:685:2409":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4902:5331":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6381:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11973:4056":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:3441:5316":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:10995:8112":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:14449:4730":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7924:4042":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8641:8127":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12949:4380":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3337:3580":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"17:11443:4312":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11874:8088":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1609:2407":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40906:3095":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:672:8058":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2640:5274":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:8165:5300":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4874:3358":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:43906:3079":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10399:4277":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:15569:5068":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5205:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5676:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:8058:7982":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41352:7268":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:21749:8833":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:656:8057":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11595:4315":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6411:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:2037:7840":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:2301:2395":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"14:165:20726":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8556:8873":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47002:7496":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6953:5459":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:980:7995":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6374:4026":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:11237:3387":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6507:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13344:4505":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:47081:7499":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:4816:6115":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14752:4776":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13046:4442":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12175:7904":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6368:5392":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:23088:7020":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4332:3954":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11324:7868":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:15456:5023":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46806:7492":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:8546:5674":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6389:7932":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:43859:3393":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13832:4613":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4672:8919":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10595:8128":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10661:7852":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2315:8074":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:12483:3375":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10982:21733":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:598:35079":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12338:26004":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:44288:7339":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:589:4130":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:102:5775":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11841:7897":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:42189:2409":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41152:3104":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:5289:8092":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9737:21699":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:2486:5267":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2704:5277":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11657:7312":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:22918:6993":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43132:7306":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:3395:8081":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4139:8893":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:881:7996":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44973:7384":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4819:6796":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:4103:8892":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3841:8875":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12371:4435":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13785:4607":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:7717:30576":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47253:7517":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:14298:4699":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:42237:3148":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43619:7318":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5641:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4890:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:974:7993":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12318:4380":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:8179:5617":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11567:7881":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1530:2407":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10820:3998":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14475:4732":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12557:4291":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:46307:7428":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47148:7504":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:4810:5328":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10327:3341":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:11128:4258":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3906:8087":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14341:4705":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9320:7766":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2566:3029":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2541:2886":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6876:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:9170:2405":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3297:26690":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:953:7748":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1601:8004":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4983:5334":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:4167:8896":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10818:7854":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15400:5011":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1613:2405":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2860:5284":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46357:7430":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11557:7880":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13252:4483":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:6902:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11293:21752":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:4997:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9442:7634":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14111:4654":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10419:4279":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12422:4396":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11191:7622":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12929:4435":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6098:7930":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:915:5783":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:5622:8096":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11755:4332":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13509:4531":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6028:5292":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:2168:8012":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:22957:7001":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:33340:3570":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5379:5346":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:2420:2405":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12443:4400":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:2821:6953":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6111:5357":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40466:7240":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3279:3589":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:6659:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:7879:8107":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8667:7597":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:3711:2407":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43219:3353":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44084:7330":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:1922:8069":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2485:8823":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:40794:3079":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4201:8897":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:896:7929":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:1561:2405":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:34025:3577":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:10638:8837":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9120:7622":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"9:0:2871":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5224:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11392:7873":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5742:4269":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:12729:7336":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:41390:3066":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11075:4291":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:9256:7629":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2415:20762":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11035:7624":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7431:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:4786:3985":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:23041:31626":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1861:8066":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13387:4510":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12683:7924":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:3559:3954":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:1620:3031":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12342:4387":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:6037:4021":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42886:3345":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:7463:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"0:46:2407":{"crate_id":0,"path":["slab","Iter"],"kind":"struct"},"2:44034:3387":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7401:35055":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3436:8082":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:32916:3568":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:7818:3054":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11788:7890":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7159:5496":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:8612:5312":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2466:3031":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:13593:8035":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:7308:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3903:8086":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:15313:4985":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6917:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11306:7651":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:15616:5086":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7578:7630":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:0:2875":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8471:7588":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:8255:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5098:8939":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:8169:4212":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7845:3032":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1601:8002":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7829:3031":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8843:7615":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10018:21701":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47031:7497":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2149:6971":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6942:5458":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14372:4710":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7325:4039":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"9:500:5860":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13363:4506":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14284:4698":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:5172:5339":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:41142:3103":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8532:3387":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:434:8567":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:422:20642":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15655:5095":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11350:8149":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11715:4326":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:2719:3999":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"14:187:20733":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:3597:7847":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:394:20753":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:32309:5793":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:34544:3581":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1489:5953":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8196:7546":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:40739:8799":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5179:6263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9205:8975":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10710:7853":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11269:21751":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14847:4859":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8336:7765":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:1207:7839":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:6480:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11258:7650":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:42326:2407":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:2354:35005":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14912:4900":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:30766:3024":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9287:26013":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:12952:14163":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:7760:6968":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6564:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10622:35072":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5217:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8528:5671":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:938:3031":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42081:7289":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12508:4407":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14260:4695":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9341:26014":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44102:7331":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:47238:7516":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:16259:4510":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:7984:7540":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15151:4946":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10350:4276":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14356:4709":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:22358:8833":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:10388:3344":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9781:21715":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:1107:8001":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6408:5396":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:11080:4047":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2931:14219":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8590:7594":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:2272:6941":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4817:6794":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:7587:2405":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4595:6975":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11204:7623":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10503:25990":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:2533:5789":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5658:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:44010:7325":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:517:5912":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8803:8952":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6623:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10218:4272":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12516:7917":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:9518:8033":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14986:4911":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8551:8125":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3427:3516":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12201:7909":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:23278:7035":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:6758:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:12127:4373":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4404:5325":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4875:6159":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40472:7241":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10877:7855":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8070:8786":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11865:7899":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6256:5375":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:10984:26031":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:15957:5159":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:22584:32315":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:873:7995":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:772:5782":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15521:5067":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43941:3398":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1711:6087":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:1005:2395":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10720:35068":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16121:5215":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:7551:2405":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6790:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6696:7943":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:47200:7508":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1674:3926":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5265:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:2175:21777":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:22558:8833":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3342:8079":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:1236:33372":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6672:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:5316:8031":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5230:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15678:5108":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12238:7912":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4881:6161":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11813:8086":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:13211:4479":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"15:0:2876":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:903:7834":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:8064:8755":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:4722:8028":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15023:4918":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10137:21698":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2450:5259":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6625:5433":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:11031:8833":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4970:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14212:4690":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2741:8076":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44709:7376":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:10913:7638":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"9:355:20655":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2142:14390":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12388:4393":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:798:2411":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6269:5376":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:3665:3596":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6437:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10218:7286":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:21928:9004":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:835:7992":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2483:8822":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10671:35066":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14994:4912":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14038:4644":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4341:8917":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:559:5935":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10325:8067":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:3257:3571":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11166:4293":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:256:7834":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:403:7836":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6144:21650":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:40502:7242":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:8308:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:680:4142":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10031:7751":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13272:4493":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:16249:5243":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:500:4011":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:12467:3373":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8870:7619":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43980:7320":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:11430:3392":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7192:21657":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:2724:5278":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13308:4498":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40757:3987":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:23234:7031":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:8320:21663":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5051:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:23099:8890":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13538:4542":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9411:4037":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:4805:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3927:2411":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8509:3090":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:23006:31623":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:5708:8098":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:1140:8000":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7386:5533":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:22670:8833":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15249:4967":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3667:8831":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5593:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15222:4963":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7969:5609":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:364:3922":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6796:8104":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:895:3932":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8602:8918":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:586:5949":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:7712:6964":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:532:5921":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:12306:8153":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8233:7548":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:7990:3057":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:8330:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:7209:3977":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11003:8098":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:4927:8910":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"9:480:20639":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:44156:3385":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8616:8123":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15944:4479":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:4883:8941":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:43993:7323":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40874:3092":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:8296:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40729:4277":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"15:327:7724":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:21687:31602":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:14977:4910":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:7563:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"15:306:8558":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10344:8136":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:4886:8919":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10769:35073":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:1597:6015":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11223:7373":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:4766:5327":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14147:4660":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13235:4480":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:545:5927":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7305:5525":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46036:7405":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:32355:5603":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:3032:4018":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5025:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6876:5451":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14436:4729":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6822:21654":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:15058:4922":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15931:4465":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:40993:3101":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:32369:3355":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:2318:3981":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3693:3599":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:9545:8068":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:10918:7544":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6738:35062":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15778:5131":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:11392:3391":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1507:5961":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:718:4152":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:42767:7753":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40702:14426":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5019:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:8746:3074":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6521:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15190:4957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12993:21725":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:42206:3147":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40717:7256":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6970:5294":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:6150:14676":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:5085:14204":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:908:7835":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:5325:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12107:4307":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:16105:5210":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:10908:7636":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:22982:7003":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:3587:5317":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:6682:8103":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7789:35060":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:36420:3582":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6700:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:4842:6135":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2140:14389":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:894:2405":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12089:4371":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:680:8751":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:33880:3575":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12043:7901":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12454:4401":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:10955:7647":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:39655:3598":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5586:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"14:202:14177":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11725:7665":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10915:35071":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12362:4392":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:6764:3107":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6914:5455":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4925:8909":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:13026:14169":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11668:7658":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:1049:2400":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:3473:7846":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:10708:1700":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:4477:14137":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11812:7893":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8249:8116":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"0:60:2411":{"crate_id":0,"path":["slab","Drain"],"kind":"struct"},"16:4184:5322":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6716:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:39619:3515":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15445:5022":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5348:5345":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3443:2526":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11688:4324":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11942:31238":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5622:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:6665:2411":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11661:4322":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:7980:5306":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:6282:4022":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:3110:5313":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:4964:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:765:25901":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2635:8075":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:430:8566":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:22572:9094":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:22625:9095":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:7983:8833":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43627:3413":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5334:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15383:5007":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"8:0:2870":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11115:7863":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:12978:14160":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:8343:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12808:4428":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7495:6958":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13485:4529":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9858:21716":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:515:4121":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9460:7635":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:8585:7984":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4947:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4211:8898":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3529:3064":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:21918:8833":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8085:8112":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5450:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:7724:6967":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:8233:21662":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13674:4566":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1563:5994":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:4694:8920":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:33679:3576":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:944:8002":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:39699:2715":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:23223:7030":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:12724:21723":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12030:7900":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5757:5351":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40578:7249":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15376:5006":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:8565:5677":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:46243:7424":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7070:3038":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11702:4325":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:22205:9009":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6749:5435":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:991:3937":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"0:208:2400":{"crate_id":0,"path":["slab","VacantEntry"],"kind":"struct"},"17:13325:4500":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:8199:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4976:6205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44630:7366":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4531:3954":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11215:26041":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12464:21844":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:597:4265":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11674:8150":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:8249:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5139:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12887:4432":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5127:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4929:5332":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39868:7110":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12707:7926":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:47174:7506":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14599:4754":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13946:4630":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11915:21819":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"9:236:7312":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15039:4921":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9162:8129":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11799:7891":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:8267:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13412:4515":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:6881:3929":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:2400:2409":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:39881:7112":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4643:3354":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:32444:3159":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6462:21653":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9146:7624":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:928:2411":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14414:4718":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:8784:32557":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12659:7922":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:578:5945":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14189:4681":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:9416:4038":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:1407:7997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40854:3091":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1580:8003":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11189:4295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:22239:31607":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:11319:3388":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4981:4019":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:8209:5298":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40767:8045":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7883:5400":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5471:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7959:5608":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46290:7427":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5648:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7391:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6443:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2435:20789":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11419:4307":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6823:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:698:4146":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3393:8080":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:465:5879":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:935:3935":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:1703:6083":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1085:35042":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10712:8080":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"10:36:5798":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6012:2411":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:6959:6981":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:13959:4633":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3087:8024":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:7282:5524":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11853:8087":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6998:5460":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7521:5555":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14560:4744":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6781:5438":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1584:6008":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46973:7495":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11547:4211":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44052:3391":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:22496:9090":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:3610:8085":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:12653:7327":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:113:8550":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5151:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4807:8896":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11773:4414":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5288:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40814:3080":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6473:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46928:7494":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11708:8106":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:5146:3954":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:8105:5615":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"14:7:7988":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:46205:7422":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14177:4679":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10755:3523":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:44020:4277":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5144:5338":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15214:4961":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4325:8576":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13473:4526":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5112:8940":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:22534:9091":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:4212:2409":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14489:4733":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:41007:3102":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6882:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7668:3960":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:41017:3087":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8096:7983":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21718:31599":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15596:5080":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44184:7334":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5507:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:40528:7245":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:675:8060":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:726:4155":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15769:5129":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:44308:7341":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11537:7879":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:3014:20790":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8539:7339":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13553:4548":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8853:2407":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:8302:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:8066:21661":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:4354:3954":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11497:7876":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:3804:3929":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5428:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:21703:31600":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1622:7748":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6731:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:43395:7311":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"14:40:4480":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2920:5287":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:1859:8065":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:3141:4163":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6461:4027":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:2748:5279":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11241:7634":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:7472:8579":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4223:8901":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12647:7921":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:2620:5273":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:13924:4010":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:41166:3105":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44483:7357":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:33612:3572":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:23075:7019":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12824:21724":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46094:7409":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5258:8092":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:842:8767":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:80:8546":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:21930:6989":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9103:8128":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:12499:14164":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:2900:5286":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1727:6092":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1008:2407":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10068:21704":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8622:7596":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12671:7923":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:2950:5288":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:14463:4731":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11256:4297":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:40624:7251":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:10005:808":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:6502:20761":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:16050:4493":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:14575:4398":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6123:5296":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:39861:3593":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7537:34953":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12150:4374":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10976:26036":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:43961:3397":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1667:6069":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8645:6783":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"0:55:2409":{"crate_id":0,"path":["slab","IterMut"],"kind":"struct"},"11:1900:5784":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"9:390:20641":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:1831:14330":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:3267:3569":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:507:4118":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3313:34956":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10439:4280":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11853:7898":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12251:7913":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:38351:3584":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:155:3918":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7168:5497":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46434:7449":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11949:7668":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6777:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11574:5788":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:706:4148":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5779:8957":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:44138:3389":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:47102:7500":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7259:5523":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3724:2409":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:7414:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12863:4431":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8179:7544":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5311:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9807:21705":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11790:4052":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:4406:8089":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:11280:3403":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:21676:31602":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:7487:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5488:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:14503:4736":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1589:6010":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7919:7975":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:3460:3031":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3301:2407":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:43880:3400":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:4577:3956":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:4564:7749":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:16269:4515":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:40977:3100":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:7361:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:44202:7335":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7518:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:592:8056":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14386:4712":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9755:21697":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:708:7747":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5395:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:47119:7501":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2322:8814":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:43869:3394":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6573:5427":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1256:8573":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:44298:7340":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3638:3379":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5405:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13986:4638":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13899:4624":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15734:5116":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:43780:8050":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10997:4288":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:22968:31963":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15176:4954":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7731:3147":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13844:4615":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46463:7450":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46123:7418":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40551:7247":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43951:3396":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:15:2986":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:10852:4003":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4008:8088":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15624:5087":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6740:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5366:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11647:4321":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:6792:2405":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11998:3401":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:7869:4265":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:7697:14426":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10317:4275":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:34371:3579":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6691:6660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:2374:6949":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15814:5135":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13738:4595":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:5805:3036":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:8223:5619":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:4986:7849":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:8636:21664":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:4354:8578":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:9269:7757":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:5972:3954":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:7548:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42879:3344":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5441:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44333:7249":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9280:8130":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:21822:6989":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:809:3031":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:735:25900":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:10929:7644":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:3484:2716":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5551:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:21667:4129":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:8353:6935":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1696:6080":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:3834:5319":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:16198:5233":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11467:4314":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5562:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5186:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11493:7875":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12225:7911":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15197:4958":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7765:5587":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"12:0:2874":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:10837:3999":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46336:7429":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15720:5114":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5635:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13774:4604":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8859:7618":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:2705:4015":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1974:8070":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3334:5786":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:32386:3158":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4937:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2467:8817":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:6067:3954":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:9220:8974":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1625:6040":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8234:3077":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7517:3941":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8257:6939":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2044:3425":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:44667:7373":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41400:3068":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44924:8053":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13116:4452":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:8503:5669":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10346:8135":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:22200:8833":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:1530:5971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:485:5890":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2772:5280":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7016:5468":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5007:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:42865:3343":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:41381:3064":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10251:4273":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:23026:31643":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:12912:8812":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:7604:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44531:7359":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8050:8754":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2930:8833":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5196:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3935:3031":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:4120:5320":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:563:4128":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12289:4376":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44326:7343":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15434:5018":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3199:14139":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:15273:4976":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5462:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:16151:5223":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12695:7925":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:4929:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1657:6063":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44416:14175":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:521:25902":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:4241:5323":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:1893:3031":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:785:5783":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"18:643:4118":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5649:5349":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:16165:5226":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41931:7275":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:1611:7747":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2337:6974":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1637:5786":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11142:4307":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5165:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10612:7851":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47185:7507":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7736:3965":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14587:4747":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14246:4693":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:4852:3356":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7990:5610":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:854:7993":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8519:3103":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:16235:5242":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5482:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:13750:8039":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5417:5347":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6711:3929":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:8151:5310":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11018:26006":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:0:2869":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:986:7996":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46679:7458":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8545:8123":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9133:7623":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15301:4984":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1421:8001":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:8319:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6640:7939":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:1616:2411":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15473:5030":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"0:42:2405":{"crate_id":0,"path":["slab","IntoIter"],"kind":"struct"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:30734:3023":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:15646:5093":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6302:5383":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7416:7953":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46144:7419":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5069:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:16032:4483":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:16138:5217":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:5255:5342":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6611:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:8043:35057":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:5851:7539":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3438:8083":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40968:3099":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22360:9005":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8597:7595":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40658:7252":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1690:6079":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15410:5014":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:16212:5237":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:13594:4559":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9176:7625":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14516:4737":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3282:3590":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:1564:20720":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11524:7878":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4956:5333":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:22797:6990":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:15092:4934":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6544:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43426:7316":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13526:4539":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15138:4940":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:9397:3954":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:38296:3583":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:40915:3096":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8373:2749":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5117:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11413:5857":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:6794:5439":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:13064:4445":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11089:7861":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3987:4176":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:15608:5083":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:11188:2407":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1089:7997":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:7448:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40892:7261":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:7152:9001":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9315:7759":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7471:5548":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12076:7903":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:373:8054":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:14079:4650":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15799:5134":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4914:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15836:5141":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11510:7877":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11719:7664":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7716:35059":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10412:8959":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8186:7545":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6173:5362":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12399:4394":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:8626:5679":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:6853:7761":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:613:35077":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4921:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:6143:3094":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43387:7310":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11930:7667":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7075:21656":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1675:6070":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:2179:8013":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:1920:5787":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23256:7033":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:6718:4034":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:33813:3573":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4905:3357":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:16223:5239":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:10026:32553":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4896:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14402:4716":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15281:4977":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:1897:8067":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"18:0:2879":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13814:4612":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5036:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:30787:3352":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:42115:7290":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12264:7914":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46080:7408":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5301:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1791:3929":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:4873:5330":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43181:3352":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13146:4456":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4990:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:42181:2407":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1642:5787":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13606:4562":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:96:8547":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:43434:7317":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:46065:7407":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1625:5784":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7507:2411":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:7527:6959":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:6493:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:3126:20792":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8022:3523":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4843:3986":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:41975:7282":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40691:7255":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7372:5302":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6813:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:42059:31965":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5497:3929":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6406:7760":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:7702:3088":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5255:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5271:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5318:5344":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12408:4395":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:6953:3085":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11605:4316":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:5381:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15168:4951":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4957:6197":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10185:4270":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10092:21722":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46374:7431":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:32362:8044":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:5541:14154":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13999:4639":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:8000:5307":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22684:9085":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:10889:8144":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15266:4975":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12322:7768":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:491:4117":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:13904:4008":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10171:3365":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:5689:5350":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6652:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11354:7872":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14876:4870":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7354:31379":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8711:5686":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10759:4307":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:2121:2395":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15206:4959":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3730:3600":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:957:7992":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15126:4937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:1098:7838":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1643:6052":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7642:3029":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6658:7708":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:0:2873":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:38461:3586":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:8267:5627":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11242:7867":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10715:8082":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:7044:5299":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:671:2407":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6042:5295":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:608:7828":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46575:7454":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:1023:7997":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5282:5343":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:12958:8033":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3090:33376":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:623:35078":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3342:5784":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:8598:7987":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3211:3022":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:42278:3514":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46226:7423":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:11499:3390":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:6129:3964":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13089:4446":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:23168:7025":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6680:7940":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:43144:5646":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12768:21702":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:4161:8895":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:437:4219":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6419:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:8014:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:16176:5231":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:7478:3027":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6837:7723":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5349:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10170:4269":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6631:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5670:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:1075:2395":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8717:7607":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:5541:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3677:8853":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14325:4703":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13292:4494":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:32474:14138":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:15390:5008":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43932:3395":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:7539:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:16187:5232":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:11825:7895":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14545:4740":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6440:21652":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44351:7248":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11730:4328":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:6638:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:30798:31628":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:6064:5297":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4694:5326":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:16069:5203":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:1888:2411":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2570:5271":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"14:220:5766":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7212:5509":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15418:5015":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11583:7886":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6890:5293":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2154:6939":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3089:3327":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11341:7871":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15822:5138":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:15116:4936":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:1545:2409":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:0:2878":{"crate_id":17,"path":["object"],"kind":"module"},"15:288:8554":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13797:4609":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:6678:3060":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40541:7246":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:41359:3058":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:21732:31605":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:47139:7503":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:5992:3236":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:42342:2405":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:4267:5324":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11227:7866":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15582:5074":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7595:2405":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15635:5092":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6765:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:9308:8133":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45952:7400":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:38406:3585":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13922:4629":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44829:7379":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"18:531:4123":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11877:4334":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:1880:2407":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:10754:3996":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:11956:7668":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:754:4160":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4153:8894":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:45884:7392":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:43379:7308":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5965:8102":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7907:5604":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:23120:8833":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:7653:8766":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:23068:7016":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:3092:6946":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14968:4906":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13568:4554":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10967:7589":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"11:2440:2411":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:46389:7432":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}