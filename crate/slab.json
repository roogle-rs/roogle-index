{"root":"0:0:1653","crate_version":"0.4.7","includes_private":false,"index":{"0:89:743":{"id":"0:89:743","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1189,4],"end":[1194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:19:1656":{"id":"b:2:2505-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:66:1784":{"id":"0:66:1784","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[687,4],"end":[692,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\nassert_eq!(slab.get(key), Some(&\"hello\"));\nassert_eq!(slab.get(123), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1506,0],"end":[1510,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7093:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:155:784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:182:784":{"id":"0:182:784","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1595,4],"end":[1597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:757":{"id":"0:106:757","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1222,4],"end":[1224,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:1421":{"id":"2:2519:1421","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48185:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:54041":{"id":"2:11434:54041","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1209,0],"end":[1216,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:98:1971","0:99:1656","0:100:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11411:59776":{"id":"2:11411:59776","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136","`DoubleEndedIterator`":"2:7070:119","str::rmatch_indices":"2:11414:59777"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50159:3666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:59786":{"id":"2:11440:59786","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7727:2457-0:32:1661":{"id":"a:2:7727:2457-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2520-0:37:1663":{"id":"b:2:2520-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:62:784":{"id":"0:62:784","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[589,4],"end":[591,5]},"visibility":"public","docs":"Return the number of stored values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nassert_eq!(3, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1512,0],"end":[1512,40]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7417:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5107:60425":{"id":"5:5107:60425","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,0],"end":[196,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:31:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1560,0],"end":[1578,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flatten","skip_while","intersperse","lt","count","collect","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","ne","take_while","intersperse_with","next_chunk","max","cmp","is_sorted","array_chunks","min_by_key","find","is_partitioned","size_hint","inspect","map_while","for_each","position","advance_by","min","is_sorted_by","sum","min_by","find_map","last","try_fold","le","by_ref","map","take","filter","nth","any","partial_cmp","is_sorted_by_key","product","all","unzip","try_find","eq","try_for_each","try_collect","scan","gt","filter_map","step_by","skip","__iterator_get_unchecked","cmp_by","zip","enumerate","rposition","copied","fold","collect_into","flat_map","peekable","chain","ge","partial_cmp_by","cloned","rev","max_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:174:1971","0:175:923","0:176:1989"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1349,0],"end":[1358,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:122:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1218,0],"end":[1225,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:104:1971","0:105:1656","0:106:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2511:668":{"id":"2:2511:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:650":{"id":"0:125:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1361,4],"end":[1363,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1428,0],"end":[1446,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flatten","skip_while","intersperse","lt","count","collect","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","ne","take_while","intersperse_with","next_chunk","max","cmp","is_sorted","array_chunks","min_by_key","find","is_partitioned","size_hint","inspect","map_while","for_each","position","advance_by","min","is_sorted_by","sum","min_by","find_map","last","try_fold","le","by_ref","map","take","filter","nth","any","partial_cmp","is_sorted_by_key","product","all","unzip","try_find","eq","try_for_each","try_collect","scan","gt","filter_map","step_by","skip","__iterator_get_unchecked","cmp_by","zip","enumerate","rposition","copied","fold","collect_into","flat_map","peekable","chain","ge","partial_cmp_by","cloned","rev","max_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:133:1971","0:134:923","0:135:1989"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3313-0:32:1661":{"id":"b:2:3313-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:674:2597":{"id":"5:674:2597","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2226-0:19:1656":{"id":"b:2:2226-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11349:59768":{"id":"2:11349:59768","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12374:2141","crate::ops::Index":"2:2979:1969","str::slice_mut_unchecked":"2:11350:59769"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1837":{"id":"0:68:1837","crate_id":0,"name":"get2_mut","span":{"filename":"src/lib.rs","begin":[741,4],"end":[763,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously.\n\nIf any one of the given keys is not associated with a value, then `None`\nis returned.\n\nThis function can be used to get two mutable references out of one slab,\nso that you can manipulate both of them at the same time, eg. swap them.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = slab.get2_mut(key1, key2).unwrap();\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key1",{"kind":"primitive","inner":"usize"}],["key2",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1747":{"id":"0:65:1747","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[665,4],"end":[670,5]},"visibility":"public","docs":"Return an iterator that allows modifying each value.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet key1 = slab.insert(0);\nlet key2 = slab.insert(1);\n\nfor (key, val) in slab.iter_mut() {\n    if key == key1 {\n        *val += 2;\n    }\n}\n\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1536,0],"end":[1548,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7070:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:166:2005"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1257,0],"end":[1309,1]},"visibility":"crate","docs":"Create a slab from an iterator of key-value pairs.\n\nIf the iterator produces duplicate keys, the previous value is replaced with the later one.\nThe keys does not need to be sorted beforehand, and this function always\ntakes O(n) time.\nNote that the returned slab will use space proportional to the largest key,\nso don't use `Slab` with untrusted keys.\n\n# Examples\n\n```\n# use slab::*;\n\nlet vec = vec![(2,'a'), (6,'b'), (7,'c')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert!(slab.capacity() >= 8);\nassert_eq!(slab[2], 'a');\n```\n\nWith duplicate and unsorted keys:\n\n```\n# use slab::*;\n\nlet vec = vec![(20,'a'), (10,'b'), (11,'c'), (10,'d')];\nlet slab = vec.into_iter().collect::<Slab<char>>();\nassert_eq!(slab.len(), 3);\nassert_eq!(slab[10], 'd');\n```","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7029:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:109:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1325,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:113:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:147:1971":{"id":"0:147:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1473,4],"end":[1473,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]}}},"2:11455:59789":{"id":"2:11455:59789","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4460:59789"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50326:3676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7037-0:32:1661":{"id":"b:2:7037-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7039:1971","2:7040:1656","2:7041:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:169:784":{"id":"0:169:784","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1551,4],"end":[1553,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1825":{"id":"0:67:1825","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key.\n\nIf the given key is not associated with a value, then `None` is\nreturned.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\n\n*slab.get_mut(key).unwrap() = \"world\";\n\nassert_eq!(slab[key], \"world\");\nassert_eq!(slab.get_mut(123), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:2596":{"id":"5:673:2596","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:2231:53504":{"id":"2:2231:53504","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2226-0:32:1661":{"id":"b:2:2226-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11329:784":{"id":"2:11329:784","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12368:2136"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:19:1656":{"id":"b:2:3313-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2505-0:185:1645":{"id":"b:2:2505-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11402:59774":{"id":"2:11402:59774","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:1951":{"id":"0:80:1951","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1121,4],"end":[1135,5]},"visibility":"public","docs":"Retain only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(usize, &mut e)`\nreturns false. This method operates in place and preserves the key\nassociated with the retained values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet k1 = slab.insert(0);\nlet k2 = slab.insert(1);\nlet k3 = slab.insert(2);\n\nslab.retain(|key, val| key == k1 || *val == 1);\n\nassert!(slab.contains(k1));\nassert!(slab.contains(k2));\nassert!(!slab.contains(k3));\n\nassert_eq!(2, slab.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2927:1777","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:214-0:23:1659":{"id":"a:2:2654:214-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2718:2378-0:37:1663":{"id":"a:2:2718:2378-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[171,9],"end":[171,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:201:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3313-0:37:1663":{"id":"b:2:3313-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141:784":{"id":"0:141:784","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1463,4],"end":[1465,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:2313":{"id":"5:5109:2313","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:923":{"id":"0:148:923","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1475,4],"end":[1485,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:2598":{"id":"5:675:2598","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1971":{"id":"0:92:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1198,4],"end":[1198,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}},"2:11358:4171":{"id":"2:11358:4171","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50263:3020","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:222-0:37:1663":{"id":"a:2:2668:222-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:155:784":{"id":"0:155:784","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[1507,4],"end":[1509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1360,0],"end":[1364,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:125:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11396:54039":{"id":"2:11396:54039","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12368:2136","str::splitn":"2:11393:54037","self::pattern":"2:11030:3457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50131:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:193:1651":{"id":"b:2:2520-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2226-0:23:1659":{"id":"b:2:2226-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:222-0:193:1651":{"id":"a:2:2668:222-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5092:60422":{"id":"5:5092:60422","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2265","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2265","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:59767":{"id":"2:11338:59767","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:37:1663":{"id":"b:2:2505-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2718:2378-0:23:1659":{"id":"a:2:2718:2378-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1594,0],"end":[1598,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7093:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:182:784"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:7037-0:37:1663":{"id":"b:2:7037-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7039:1971","2:7040:1656","2:7041:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:69:1856":{"id":"0:69:1856","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[787,4],"end":[792,5]},"visibility":"public","docs":"Return a reference to the value associated with the given key without\nperforming bounds checking.\n\nFor a safe alternative see [`get`](Slab::get).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    assert_eq!(slab.get_unchecked(key), &2);\n}\n```","links":{"Slab::get":"0:66:1784"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:59787":{"id":"2:11443:59787","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:214-0:19:1656":{"id":"a:2:2654:214-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1368,0],"end":[1424,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:129:1905","0:130:1654"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11381:54033":{"id":"2:11381:54033","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10854:2679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:409":{"id":"0:31:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[190,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:60423":{"id":"5:5096:60423","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:59770":{"id":"2:11359:59770","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50273:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:23:1659":{"id":"b:2:2229-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:98:1971":{"id":"0:98:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1210,4],"end":[1210,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]}}},"0:0:1653":{"id":"0:0:1653","crate_id":0,"name":"slab","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1600,41]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type.\n\n`Slab` provides pre-allocated storage for a single data type. If many values\nof a single type are being allocated, it can be more efficient to\npre-allocate the necessary storage. Since the size of the type is uniform,\nmemory fragmentation can be avoided. Storing, clearing, and lookup\noperations become very cheap.\n\nWhile `Slab` may look like other Rust collections, it is not intended to be\nused as a general purpose collection. The primary difference between `Slab`\nand `Vec` is that `Slab` returns the key when storing the value.\n\nIt is important to note that keys may be reused. In other words, once a\nvalue associated with a given key is removed from a slab, that key may be\nreturned from future calls to `insert`.\n\n# Examples\n\nBasic storing and retrieval.\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nlet world = slab.insert(\"world\");\n\nassert_eq!(slab[hello], \"hello\");\nassert_eq!(slab[world], \"world\");\n\nslab[world] = \"earth\";\nassert_eq!(slab[world], \"earth\");\n```\n\nSometimes it is useful to be able to associate the key with the value being\ninserted in the slab. This can be done with the `vacant_entry` API as such:\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```\n\nIt is generally a good idea to specify the desired capacity of a slab at\ncreation time. Note that `Slab` will grow the internal capacity when\nattempting to insert a new value once the existing capacity has been reached.\nTo avoid this, add a check.\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(1024);\n\n// ... use the slab\n\nif slab.len() == slab.capacity() {\n    panic!(\"slab full\");\n}\n\nslab.insert(\"the slab is not at capacity yet\");\n```\n\n# Capacity and reallocation\n\nThe capacity of a slab is the amount of space allocated for any future\nvalues that will be inserted in the slab. This is not to be confused with\nthe *length* of the slab, which specifies the number of actual values\ncurrently being inserted. If a slab's length is equal to its capacity, the\nnext value inserted into the slab will require growing the slab by\nreallocating.\n\nFor example, a slab with capacity 10 and length 0 would be an empty slab\nwith space for 10 more stored values. Storing 10 or fewer elements into the\nslab will not change its capacity or cause reallocation to occur. However,\nif the slab length is increased to 11 (due to another `insert`), it will\nhave to reallocate, which can be slow. For this reason, it is recommended to\nuse [`Slab::with_capacity`] whenever possible to specify how many values the\nslab is expected to store.\n\n# Implementation\n\n`Slab` is backed by a `Vec` of slots. Each slot is either occupied or\nvacant. `Slab` maintains a stack of vacant slots using a linked list. To\nfind a vacant slot, the stack is popped. When a slot is released, it is\npushed onto the stack.\n\nIf there are no more available slots in the stack, then `Vec::reserve(1)` is\ncalled and a new slot is created.\n\n[`Slab::with_capacity`]: struct.Slab.html#with_capacity","links":{},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:185:1645","0:193:1651","0:19:1656","0:23:1659","0:32:1661","0:37:1663"],"is_stripped":false}},"b:2:2226-0:193:1651":{"id":"b:2:2226-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:130:1654":{"id":"0:130:1654","crate_id":0,"name":"key","span":{"filename":"src/lib.rs","begin":[1421,4],"end":[1423,5]},"visibility":"public","docs":"Return the key associated with this entry.\n\nA value stored in this entry will be associated with this key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:58973":{"id":"2:11357:58973","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11356:58976"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50292:3673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2226-0:185:1645":{"id":"b:2:2226-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11414:59777":{"id":"2:11414:59777","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11411:59776","prim@char":"1:12368:2136","self::pattern":"2:11030:3457","`DoubleEndedIterator`":"2:7070:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50177:3667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7040:1656":{"id":"2:7040:1656","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"2:11355:3856":{"id":"2:11355:3856","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49995:3018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:19:1656":{"id":"b:2:2509-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:222-0:19:1656":{"id":"a:2:2668:222-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:78:1933":{"id":"0:78:1933","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1071,4],"end":[1073,5]},"visibility":"public","docs":"Remove and return the value associated with the given key.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Panics\n\nPanics if `key` is not associated with a value.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.remove(hello), \"hello\");\nassert!(!slab.contains(hello));\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1967":{"id":"0:82:1967","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1164,4],"end":[1172,5]},"visibility":"public","docs":"Return a draining iterator that removes all elements from the slab and\nyields the removed items.\n\nNote: Elements are removed even if the iterator is only partially\nconsumed or not consumed at all.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet _ = slab.insert(0);\nlet _ = slab.insert(1);\nlet _ = slab.insert(2);\n\n{\n    let mut drain = slab.drain();\n\n    assert_eq!(Some(0), drain.next());\n    assert_eq!(Some(1), drain.next());\n    assert_eq!(Some(2), drain.next());\n    assert_eq!(None, drain.next());\n}\n\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7039:1971":{"id":"2:7039:1971","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2505-0:193:1651":{"id":"b:2:2505-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:77:1926":{"id":"0:77:1926","crate_id":0,"name":"try_remove","span":{"filename":"src/lib.rs","begin":[1030,4],"end":[1048,5]},"visibility":"public","docs":"Tries to remove the value associated with the given key,\nreturning the value if the key existed.\n\nThe key is then released and may be associated with future stored\nvalues.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\n\nassert_eq!(slab.try_remove(hello), Some(\"hello\"));\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:23:1659":{"id":"b:5:671-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:673:2596","5:674:2597","5:675:2598"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11408:59775":{"id":"2:11408:59775","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11405:2219","self::pattern":"2:11030:3457","`DoubleEndedIterator`":"2:7070:119","prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50231:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:214-0:185:1645":{"id":"a:2:2654:214-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:176:1989":{"id":"0:176:1989","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1575,4],"end":[1577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:1825":{"id":"2:11343:1825","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48043:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:53831":{"id":"2:11451:53831","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2718:2378-0:193:1651":{"id":"a:2:2718:2378-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1187,0],"end":[1195,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"2:2983:1970","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:89:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:86:742":{"id":"0:86:742","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1179,4],"end":[1184,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3315:1434":{"id":"2:3315:1434","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46514:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:3694":{"id":"2:11353:3694","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49979:3657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:1651":{"id":"0:193:1651","crate_id":0,"name":"VacantEntry","span":{"filename":"src/lib.rs","begin":[172,0],"end":[175,1]},"visibility":"public","docs":"A handle to a vacant entry in a `Slab`.\n\n`VacantEntry` allows constructing values with the key that they will be\nassigned to.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:126","a:2:2718:2378-0:193:1651","a:2:7726:2458-0:193:1651","a:2:2668:222-0:193:1651","a:2:7727:2457-0:193:1651","a:2:2654:214-0:193:1651","b:2:2509-0:193:1651","b:2:3313-0:193:1651","b:2:2520-0:193:1651","b:2:2505-0:193:1651","b:2:2229-0:193:1651","b:2:2515-0:193:1651","b:2:2226-0:193:1651","0:198"]}},"0:64:768":{"id":"0:64:768","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[633,4],"end":[638,5]},"visibility":"public","docs":"Return an iterator over the slab.\n\nThis function should generally be **avoided** as it is not efficient.\nIterators must iterate over every slot in the slab even if it is\nvacant. As such, a slab with a capacity of 1 million but only one\nstored value must still iterate the million slots.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nlet mut iterator = slab.iter();\n\nassert_eq!(iterator.next(), Some((0, &0)));\nassert_eq!(iterator.next(), Some((1, &1)));\nassert_eq!(iterator.next(), Some((2, &2)));\nassert_eq!(iterator.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1738":{"id":"0:49:1738","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[410,4],"end":[435,5]},"visibility":"public","docs":"Shrink the capacity of the slab as much as possible without invalidating keys.\n\nBecause values cannot be moved to a different index, the slab cannot\nshrink past any stored values.\nIt will drop down as close as possible to the length but the allocator may\nstill inform the underlying vector that there is space for a few more elements.\n\nThis function can take O(n) time even when the capacity cannot be reduced\nor the allocation is shrunk in place. Repeated calls run in O(1) though.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```\n\nThe slab cannot shrink past the last present value even if previous\nvalues are removed:\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\nfor i in 0..4 {\n    slab.insert(i);\n}\n\nslab.remove(0);\nslab.remove(3);\n\nslab.shrink_to_fit();\nassert!(slab.capacity() >= 3 && slab.capacity() < 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5093:1928":{"id":"5:5093:1928","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328":{"id":"2:11328","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10593:1346","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11329:784","2:11330:1795","2:11331:59764","2:11332:59765","2:11334:59766","2:11337:55155","2:11338:59767","2:11339:306","2:11340:1872","2:11341:1784","2:11343:1825","2:11345:1856","2:11347:1863","2:11349:59768","2:11350:59769","2:11351:54024","2:11352:1844","2:11353:3694","2:11354:3488","2:11355:3856","2:11356:58976","2:11357:58973","2:11358:4171","2:11359:59770","2:11360:58986","2:11361:1938","2:11364:53526","2:11367:53528","2:11370:2574","2:11374:2539","2:11378:54031","2:11381:54033","2:11384:54035","2:11387:59771","2:11390:59772","2:11393:54037","2:11396:54039","2:11399:59773","2:11402:59774","2:11405:2219","2:11408:59775","2:11411:59776","2:11414:59777","2:11417:59778","2:11419:59779","2:11421:59780","2:11423:59781","2:11424:59782","2:11425:59783","2:11428:59784","2:11431:53524","2:11434:54041","2:11437:59785","2:11440:59786","2:11443:59787","2:11446:3415","2:11448:3850","2:11449:53835","2:11450:53832","2:11451:53831","2:11452:59788","2:11454:3120","2:11455:59789"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:174:1971":{"id":"0:174:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1561,4],"end":[1561,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:161:1971":{"id":"0:161:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1517,4],"end":[1517,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}},"b:2:2229-0:193:1651":{"id":"b:2:2229-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:222-0:23:1659":{"id":"a:2:2668:222-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11446:3415":{"id":"2:11446:3415","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10992:125","`FromStr`":"2:10991:3096"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48185:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10991:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10991:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:23:1659":{"id":"b:2:2520-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:73:1905":{"id":"0:73:1905","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[936,4],"end":[942,5]},"visibility":"public","docs":"Insert a value in the slab, returning key assigned to the value.\n\nThe returned key can later be used to retrieve or remove the value using indexed\nlookup and `remove`. Additional capacity is allocated if needed. See\n[Capacity and reallocation](index.html#capacity-and-reallocation).\n\n# Panics\n\nPanics if the number of elements in the vector overflows a `usize`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(\"hello\");\nassert_eq!(slab[key], \"hello\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:193:1651":{"id":"b:2:3313-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1462,0],"end":[1466,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7093:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:141:784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:100:757":{"id":"0:100:757","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1213,4],"end":[1215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1556,0],"end":[1556,43]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7417:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11330:1795":{"id":"2:11330:1795","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1663":{"id":"0:37:1663","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[205,0],"end":[208,1]},"visibility":"public","docs":"A draining iterator for `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:2718:2378-0:37:1663","a:2:7726:2458-0:37:1663","a:2:2668:222-0:37:1663","a:2:7727:2457-0:37:1663","a:2:2654:214-0:37:1663","b:2:2509-0:37:1663","b:2:3313-0:37:1663","b:2:2520-0:37:1663","b:2:2505-0:37:1663","b:2:2229-0:37:1663","b:2:2515-0:37:1663","b:2:7037-0:37:1663","b:2:2226-0:37:1663","0:123","0:172","0:177","0:180","0:183"]}},"2:2508:1929":{"id":"2:2508:1929","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2482:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2228:2206":{"id":"2:2228:2206","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:37:1663":{"id":"b:2:2509-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2520-0:185:1645":{"id":"b:2:2520-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2226-0:37:1663":{"id":"b:2:2226-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2220:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2228:2206"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:51:1774":{"id":"0:51:1774","crate_id":0,"name":"compact","span":{"filename":"src/lib.rs","begin":[499,4],"end":[552,5]},"visibility":"public","docs":"Reduce the capacity as much as possible, changing the key for elements when necessary.\n\nTo allow updating references to the elements which must be moved to a new key,\nthis function takes a closure which is called before moving each element.\nThe second and third parameters to the closure are the current key and\nnew key respectively.\nIn case changing the key for one element turns out not to be possible,\nthe move can be cancelled by returning `false` from the closure.\nIn that case no further attempts at relocating elements is made.\nIf the closure unwinds, the slab will be left in a consistent state,\nbut the value that the closure panicked on might be removed.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(10);\nlet a = slab.insert('a');\nslab.insert('b');\nslab.insert('c');\nslab.remove(a);\nslab.compact(|&mut value, from, to| {\n    assert_eq!((value, from, to), ('c', 2, 0));\n    true\n});\nassert!(slab.capacity() >= 2 && slab.capacity() < 10);\n```\n\nThe value is not moved when the closure returns `Err`:\n\n```\n# use slab::*;\n\nlet mut slab = Slab::with_capacity(100);\nlet a = slab.insert('a');\nlet b = slab.insert('b');\nslab.remove(a);\nslab.compact(|&mut value, from, to| false);\nassert_eq!(slab.iter().next(), Some((b, &'b')));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rekey",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:2927:1777","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1971":{"id":"0:133:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1429,4],"end":[1429,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}},"0:61:1789":{"id":"0:61:1789","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"Clear the slab of all values.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nfor i in 0..3 {\n    slab.insert(i);\n}\n\nslab.clear();\nassert!(slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:58976":{"id":"2:11356:58976","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11357:58973"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50283:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:1661":{"id":"0:32:1661","crate_id":0,"name":"IterMut","span":{"filename":"src/lib.rs","begin":[199,0],"end":[202,1]},"visibility":"public","docs":"A mutable iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:2718:2378-0:32:1661","a:2:7726:2458-0:32:1661","a:2:2668:222-0:32:1661","a:2:7727:2457-0:32:1661","a:2:2654:214-0:32:1661","b:2:2509-0:32:1661","b:2:3313-0:32:1661","b:2:2520-0:32:1661","b:2:2505-0:32:1661","b:2:2229-0:32:1661","b:2:2515-0:32:1661","b:2:7037-0:32:1661","b:2:2226-0:32:1661","0:120","0:158","0:164","0:167","0:170"]}},"a:2:7726:2458-0:185:1645":{"id":"a:2:7726:2458-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:94:757":{"id":"0:94:757","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1201,4],"end":[1206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1468,0],"end":[1468,40]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7417:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11340:1872":{"id":"2:11340:1872","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12385:2150"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:222-0:32:1661":{"id":"a:2:2668:222-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1492,0],"end":[1504,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7070:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:152:2005"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2523:126":{"id":"2:2523:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39286:2957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:7727:2457-0:37:1663":{"id":"a:2:7727:2457-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1516,0],"end":[1534,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flatten","skip_while","intersperse","lt","count","collect","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","ne","take_while","intersperse_with","next_chunk","max","cmp","is_sorted","array_chunks","min_by_key","find","is_partitioned","size_hint","inspect","map_while","for_each","position","advance_by","min","is_sorted_by","sum","min_by","find_map","last","try_fold","le","by_ref","map","take","filter","nth","any","partial_cmp","is_sorted_by_key","product","all","unzip","try_find","eq","try_for_each","try_collect","scan","gt","filter_map","step_by","skip","__iterator_get_unchecked","cmp_by","zip","enumerate","rposition","copied","fold","collect_into","flat_map","peekable","chain","ge","partial_cmp_by","cloned","rev","max_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:161:1971","0:162:923","0:163:1989"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1338,0],"end":[1347,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:119:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:175:923":{"id":"0:175:923","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1563,4],"end":[1573,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:1659":{"id":"0:23:1659","crate_id":0,"name":"Iter","span":{"filename":"src/lib.rs","begin":[184,0],"end":[187,1]},"visibility":"public","docs":"An iterator over the values stored in the `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:2718:2378-0:23:1659","a:2:7726:2458-0:23:1659","a:2:2668:222-0:23:1659","a:2:7727:2457-0:23:1659","a:2:2654:214-0:23:1659","b:2:2509-0:23:1659","b:2:3313-0:23:1659","b:2:2520-0:23:1659","b:2:2505-0:23:1659","b:2:2229-0:23:1659","b:2:2515-0:23:1659","b:2:7037-0:23:1659","b:2:2226-0:23:1659","b:5:671-0:23:1659","0:28","0:117","0:144","0:150","0:153","0:156"]}},"0:109:670":{"id":"0:109:670","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1258,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"T"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:53832":{"id":"2:11450:53832","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:60424":{"id":"5:5099:60424","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:185:1645":{"id":"b:2:3313-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2654:214-0:37:1663":{"id":"a:2:2654:214-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2509-0:23:1659":{"id":"b:2:2509-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7727:2457-0:185:1645":{"id":"a:2:7727:2457-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:671-0:185:1645":{"id":"b:5:671-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:673:2596","5:674:2597","5:675:2598"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2654:214-0:32:1661":{"id":"a:2:2654:214-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11337:55155":{"id":"2:11337:55155","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10598:3818"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:23:1659":{"id":"b:2:2515-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11378:54031":{"id":"2:11378:54031","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7070:119","prim@char":"1:12368:2136","str::rsplit":"2:11384:54035","str::split_whitespace":"2:11356:58976","self::pattern":"2:11030:3457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50009:2663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7726:2458-0:23:1659":{"id":"a:2:7726:2458-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2229-0:19:1656":{"id":"b:2:2229-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:119:650":{"id":"0:119:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1342,4],"end":[1346,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7726:2458-0:37:1663":{"id":"a:2:7726:2458-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2515-0:19:1656":{"id":"b:2:2515-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1472,0],"end":[1490,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["flatten","skip_while","intersperse","lt","count","collect","eq_by","cycle","max_by","try_reduce","partition_in_place","fuse","ne","take_while","intersperse_with","next_chunk","max","cmp","is_sorted","array_chunks","min_by_key","find","is_partitioned","size_hint","inspect","map_while","for_each","position","advance_by","min","is_sorted_by","sum","min_by","find_map","last","try_fold","le","by_ref","map","take","filter","nth","any","partial_cmp","is_sorted_by_key","product","all","unzip","try_find","eq","try_for_each","try_collect","scan","gt","filter_map","step_by","skip","__iterator_get_unchecked","cmp_by","zip","enumerate","rposition","copied","fold","collect_into","flat_map","peekable","chain","ge","partial_cmp_by","cloned","rev","max_by_key","reduce","partition"],"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:147:1971","0:148:923","0:149:1989"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7726:2458-0:193:1651":{"id":"a:2:7726:2458-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1448,0],"end":[1460,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7070:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:138:2005"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11448:3850":{"id":"2:11448:3850","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1346","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:60422","5:5093:1928","5:5096:60423","5:5099:60424","5:5107:60425","5:5108:60426","5:5109:2313","5:5110:53834","5:5111:53833"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5108:60426":{"id":"5:5108:60426","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6978:218","`Box<str>`":"5:276:2265"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2265","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201:650":{"id":"0:201:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[171,9],"end":[171,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:32:1661":{"id":"b:2:2515-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11454:3120":{"id":"2:11454:3120","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4463:3120"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50317:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:59783":{"id":"2:11425:59783","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11055:3456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:58986":{"id":"2:11360:58986","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50301:3674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[147,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2556:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:18:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11345:1856":{"id":"2:11345:1856","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:1938":{"id":"2:11361:1938","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:32:1661":{"id":"b:2:2229-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2718:2378-0:32:1661":{"id":"a:2:2718:2378-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:192:409":{"id":"0:192:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[130,9],"end":[130,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:2005":{"id":"0:179:2005","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1581,4],"end":[1591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:2574":{"id":"2:11370:2574","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12368:2136","`None`":"2:48043:173","self::pattern":"2:11030:3457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:37:1663":{"id":"b:2:2229-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:116:650":{"id":"0:116:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1331,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[130,9],"end":[130,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2243:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:192:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:163:1989":{"id":"0:163:1989","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1531,4],"end":[1533,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2654:214-0:193:1651":{"id":"a:2:2654:214-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2654:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:74:1914":{"id":"0:74:1914","crate_id":0,"name":"vacant_key","span":{"filename":"src/lib.rs","begin":[964,4],"end":[966,5]},"visibility":"public","docs":"Returns the key of the next vacant entry.\n\nThis function returns the key of the vacant entry which  will be used\nfor the next insertion. This is equivalent to\n`slab.vacant_entry().key()`, but it doesn't require mutable access.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert_eq!(slab.vacant_key(), 0);\n\nslab.insert(0);\nassert_eq!(slab.vacant_key(), 1);\n\nslab.insert(1);\nslab.remove(0);\nassert_eq!(slab.vacant_key(), 0);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2524:1420":{"id":"2:2524:1420","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48185:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:193:1651":{"id":"b:2:2515-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2515-0:37:1663":{"id":"b:2:2515-0:37:1663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1197,0],"end":[1207,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:92:1971","0:93:1656","0:94:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11367:53528":{"id":"2:11367:53528","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:1844":{"id":"2:11352:1844","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11351:54024"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:53526":{"id":"2:11364:53526","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11449:53835":{"id":"2:11449:53835","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:1784":{"id":"2:11341:1784","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48043:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7727:2457-0:193:1651":{"id":"a:2:7727:2457-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2518:126":{"id":"2:2518:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:48:1722":{"id":"0:48:1722","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[361,4],"end":[367,5]},"visibility":"public","docs":"Reserve the minimum capacity required to store exactly `additional`\nmore values.\n\n`reserve_exact` does nothing if the slab already has sufficient capacity\nfor `additional` more values. If more capacity is required, a new segment\nof memory will be allocated and all existing values will be copied into\nit.  As such, if the slab is already very large, a call to `reserve` can\nend up being expensive.\n\nNote that the allocator may give the slab more space than it requests.\nTherefore capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve_exact(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7037-0:19:1656":{"id":"b:2:7037-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7039:1971","2:7040:1656","2:7041:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:2:2509-0:193:1651":{"id":"b:2:2509-0:193:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72:1893":{"id":"0:72:1893","crate_id":0,"name":"key_of","span":{"filename":"src/lib.rs","begin":[902,4],"end":[916,5]},"visibility":"public","docs":"Get the key for an element in the slab.\n\nThe reference must point to an element owned by the slab.\nOtherwise this function will panic.\nThis is a constant-time operation because the key can be calculated\nfrom the reference with pointer arithmetic.\n\n# Panics\n\nThis function will panic if the reference does not point to an element\nof the slab.\n\n# Examples\n\n```\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(String::from(\"foo\"));\nlet value = &slab[key];\nassert_eq!(slab.key_of(value), key);\n```\n\nValues are not compared, so passing a reference to a different location\nwill result in a panic:\n\n```should_panic\n# use slab::*;\n\nlet mut slab = Slab::new();\nlet key = slab.insert(0);\nlet bad = &0;\nslab.key_of(bad); // this will panic\nunreachable!();\n```","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["present_element",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:59765":{"id":"2:11332:59765","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7727:2457-0:19:1656":{"id":"a:2:7727:2457-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:7041:757":{"id":"2:7041:757","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1905":{"id":"0:129:1905","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1391,4],"end":[1398,5]},"visibility":"public","docs":"Insert a value in the entry, returning a mutable reference to the value.\n\nTo get the key associated with the value, use `key` prior to calling\n`insert`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["val",{"kind":"generic","inner":"T"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:53524":{"id":"2:11431:53524","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2505-0:32:1661":{"id":"b:2:2505-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11424:59782":{"id":"2:11424:59782","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:59780":{"id":"2:11421:59780","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:650":{"id":"0:122:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1919":{"id":"0:75:1919","crate_id":0,"name":"vacant_entry","span":{"filename":"src/lib.rs","begin":[991,4],"end":[996,5]},"visibility":"public","docs":"Return a handle to a vacant entry allowing for further manipulation.\n\nThis function is useful when creating values that must contain their\nslab key. The returned `VacantEntry` reserves a slot in the slab and is\nable to query the associated key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = {\n    let entry = slab.vacant_entry();\n    let key = entry.key();\n\n    entry.insert((key, \"hello\"));\n    key\n};\n\nassert_eq!(hello, slab[hello].0);\nassert_eq!(\"hello\", slab[hello].1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:193:1651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:59784":{"id":"2:11428:59784","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:1863":{"id":"2:11347:1863","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:113:650":{"id":"0:113:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1315,4],"end":[1324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8545:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8534:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:59788":{"id":"2:11452:59788","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4462:59788"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50308:3675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:1645":{"id":"0:185:1645","crate_id":0,"name":"Slab","span":{"filename":"src/lib.rs","begin":[131,0],"end":[141,1]},"visibility":"public","docs":"Pre-allocated storage for a uniform data type\n\nSee the [module documentation] for more details.\n\n[module documentation]: index.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:42","a:2:2718:2378-0:185:1645","a:2:7726:2458-0:185:1645","a:2:2668:222-0:185:1645","a:2:7727:2457-0:185:1645","a:2:2654:214-0:185:1645","b:2:2509-0:185:1645","b:2:3313-0:185:1645","b:2:2520-0:185:1645","b:2:2505-0:185:1645","b:2:2229-0:185:1645","b:2:2515-0:185:1645","b:2:2226-0:185:1645","b:5:671-0:185:1645","0:190","0:16","0:83","0:87","0:90","0:95","0:101","0:107","0:111"]}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1600,0],"end":[1600,41]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:7417:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:1656":{"id":"0:99:1656","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1211,4],"end":[1211,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"2:11423:59781":{"id":"2:11423:59781","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2520-0:32:1661":{"id":"b:2:2520-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19:1656":{"id":"0:19:1656","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[178,0],"end":[181,1]},"visibility":"public","docs":"A consuming iterator over the values stored in a `Slab`","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:2:2718:2378-0:19:1656","a:2:7726:2458-0:19:1656","a:2:2668:222-0:19:1656","a:2:7727:2457-0:19:1656","a:2:2654:214-0:19:1656","b:2:2509-0:19:1656","b:2:3313-0:19:1656","b:2:2520-0:19:1656","b:2:2505-0:19:1656","b:2:2229-0:19:1656","b:2:2515-0:19:1656","b:2:7037-0:19:1656","b:2:2226-0:19:1656","0:114","0:131","0:136","0:139","0:142"]}},"a:2:2718:2378-0:19:1656":{"id":"a:2:2718:2378-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11393:54037":{"id":"2:11393:54037","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11030:3457","prim@char":"1:12368:2136","str::rsplitn":"2:11396:54039"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50113:2665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2515-0:185:1645":{"id":"b:2:2515-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2485:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2518:126","2:2519:1421"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11331:59764":{"id":"2:11331:59764","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:59771":{"id":"2:11387:59771","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11030:3457","`DoubleEndedIterator`":"2:7070:119","str::split":"2:11378:54031","prim@char":"1:12368:2136","str::rsplit_terminator":"2:11390:59772"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50059:3662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1938":{"id":"0:79:1938","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"public","docs":"Return `true` if a value is associated with the given key.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\n\nlet hello = slab.insert(\"hello\");\nassert!(slab.contains(hello));\n\nslab.remove(hello);\n\nassert!(!slab.contains(hello));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134:923":{"id":"0:134:923","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1431,4],"end":[1441,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:222-0:185:1645":{"id":"a:2:2668:222-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2668:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:18:59":{"id":"0:18:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149:1989":{"id":"0:149:1989","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1487,4],"end":[1489,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:59769":{"id":"2:11350:59769","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11349:59768","crate::ops::IndexMut":"2:2983:1970","`str`":"1:12374:2141"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7037-0:23:1659":{"id":"b:2:7037-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7147:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7033:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:7039:1971","2:7040:1656","2:7041:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"2:11417:59778":{"id":"2:11417:59778","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1863":{"id":"0:70:1863","crate_id":0,"name":"get_unchecked_mut","span":{"filename":"src/lib.rs","begin":[819,4],"end":[824,5]},"visibility":"public","docs":"Return a mutable reference to the value associated with the given key\nwithout performing bounds checking.\n\nFor a safe alternative see [`get_mut`](Slab::get_mut).\n\nThis function should be used with care.\n\n# Safety\n\nThe key must be within bounds.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nlet key = slab.insert(2);\n\nunsafe {\n    let val = slab.get_unchecked_mut(key);\n    *val = 13;\n}\n\nassert_eq!(slab[key], 13);\n```","links":{"Slab::get_mut":"0:67:1825"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7727:2457-0:23:1659":{"id":"a:2:7727:2457-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11334:59766":{"id":"2:11334:59766","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11332:59765"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7726:2458-0:19:1656":{"id":"a:2:7726:2458-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7727:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:71:1870":{"id":"0:71:1870","crate_id":0,"name":"get2_unchecked_mut","span":{"filename":"src/lib.rs","begin":[853,4],"end":[864,5]},"visibility":"public","docs":"Return two mutable references to the values associated with the two\ngiven keys simultaneously without performing bounds checking and safety\ncondition checking.\n\nFor a safe alternative see [`get2_mut`](Slab::get2_mut).\n\nThis function should be used with care.\n\n# Safety\n\n- Both keys must be within bounds.\n- The condition `key1 != key2` must hold.\n\n# Examples\n\n```\n# use slab::*;\nuse std::mem;\n\nlet mut slab = Slab::new();\nlet key1 = slab.insert(1);\nlet key2 = slab.insert(2);\nlet (value1, value2) = unsafe { slab.get2_unchecked_mut(key1, key2) };\nmem::swap(value1, value2);\nassert_eq!(slab[key1], 2);\nassert_eq!(slab[key2], 1);\n```","links":{"Slab::get2_mut":"0:68:1837"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key1",{"kind":"primitive","inner":"usize"}],["key2",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1689":{"id":"0:46:1689","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[297,4],"end":[299,5]},"visibility":"public","docs":"Return the number of values the slab can store without reallocating.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::with_capacity(10);\nassert_eq!(slab.capacity(), 10);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:59773":{"id":"2:11399:59773","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3313-0:23:1659":{"id":"b:2:3313-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3311:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3315:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:138:2005":{"id":"0:138:2005","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1449,4],"end":[1459,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:59772":{"id":"2:11390:59772","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11030:3457","str::split":"2:11378:54031","str::split_terminator":"2:11387:59771","prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50077:3663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1327,0],"end":[1336,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8585:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:116:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[216,0],"end":[1173,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:44:910","0:45:1688","0:46:1689","0:47:1708","0:48:1722","0:49:1738","0:51:1774","0:61:1789","0:62:784","0:63:1795","0:64:768","0:65:1747","0:66:1784","0:67:1825","0:68:1837","0:69:1856","0:70:1863","0:71:1870","0:72:1893","0:73:1905","0:74:1914","0:75:1919","0:77:1926","0:78:1933","0:79:1938","0:80:1951","0:82:1967"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11354:3488":{"id":"2:11354:3488","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12368:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49985:3658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:53834":{"id":"5:5110:53834","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11450:53832"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1795":{"id":"0:63:1795","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[605,4],"end":[607,5]},"visibility":"public","docs":"Return `true` if there are no values stored in the slab.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nassert!(slab.is_empty());\n\nslab.insert(1);\nassert!(!slab.is_empty());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1550,0],"end":[1554,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7093:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:169:784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:85:180":{"id":"0:85:180","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1176,4],"end":[1176,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2520-0:19:1656":{"id":"b:2:2520-0:19:1656","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2489:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2523:126","2:2524:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5111:53833":{"id":"5:5111:53833","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11451:53831"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2509-0:185:1645":{"id":"b:2:2509-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:47:1708":{"id":"0:47:1708","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[327,4],"end":[333,5]},"visibility":"public","docs":"Reserve capacity for at least `additional` more values to be stored\nwithout allocating.\n\n`reserve` does nothing if the slab already has sufficient capacity for\n`additional` more values. If more capacity is required, a new segment of\nmemory will be allocated and all existing values will be copied into it.\nAs such, if the slab is already very large, a call to `reserve` can end\nup being expensive.\n\nThe slab may reserve more than `additional` extra space in order to\navoid frequent reallocations. Use `reserve_exact` instead to guarantee\nthat only the requested space is allocated.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::new();\nslab.insert(\"hello\");\nslab.reserve(10);\nassert!(slab.capacity() >= 11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1971":{"id":"0:104:1971","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1219,4],"end":[1219,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}]}}},"0:162:923":{"id":"0:162:923","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1519,4],"end":[1529,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1656":{"id":"0:105:1656","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1220,4],"end":[1220,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"2:11351:54024":{"id":"2:11351:54024","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11352:1844"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:152:2005":{"id":"0:152:2005","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1493,4],"end":[1503,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1175,0],"end":[1185,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:2979:1969","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:85:180","0:86:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:93:1656":{"id":"0:93:1656","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1199,4],"end":[1199,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:19:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:44:910":{"id":"0:44:910","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[231,4],"end":[237,5]},"visibility":"public","docs":"Construct a new, empty `Slab`.\n\nThe function does not allocate and the returned slab will have no\ncapacity until `insert` is called or capacity is explicitly reserved.\n\nThis is `const fn` on Rust 1.39+.\n\n# Examples\n\n```\n# use slab::*;\nlet slab: Slab<i32> = Slab::new();\n```","links":{},"attrs":["#[cfg(not(slab_no_const_vec_new))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:59785":{"id":"2:11437:59785","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:2005":{"id":"0:166:2005","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1537,4],"end":[1547,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7147:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2229-0:185:1645":{"id":"b:2:2229-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2661:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2223:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2231:53504"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2505-0:23:1659":{"id":"b:2:2505-0:23:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2479:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:23:1659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2508:1929"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1580,0],"end":[1592,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:7070:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:37:1663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:179:2005"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2718:2378-0:185:1645":{"id":"a:2:2718:2378-0:185:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2718:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2509-0:32:1661":{"id":"b:2:2509-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2482:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2511:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11419:59779":{"id":"2:11419:59779","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:2219":{"id":"2:11405:2219","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457","str::matches":"2:11405:2219","`DoubleEndedIterator`":"2:7070:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50213:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11374:2539":{"id":"2:11374:2539","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12368:2136","self::pattern":"2:11030:3457","`None`":"2:48043:173"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339:306":{"id":"2:11339:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11340:1872","`u8`":"1:12385:2150"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135:1989":{"id":"0:135:1989","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1443,4],"end":[1445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:54035":{"id":"2:11384:54035","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12368:2136","`DoubleEndedIterator`":"2:7070:119","self::pattern":"2:11030:3457","str::split":"2:11378:54031"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50027:2667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7726:2458-0:32:1661":{"id":"a:2:7726:2458-0:32:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7726:2458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:32:1661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:45:1688":{"id":"0:45:1688","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[280,4],"end":[286,5]},"visibility":"public","docs":"Construct a new, empty `Slab` with the specified capacity.\n\nThe returned slab will be able to store exactly `capacity` without\nreallocating. If `capacity` is 0, the slab will not allocate.\n\nIt is important to note that this function does not specify the *length*\nof the returned slab, but only the capacity. For an explanation of the\ndifference between length and capacity, see [Capacity and\nreallocation](index.html#capacity-and-reallocation).\n\n# Examples\n\n```\n# use slab::*;\nlet mut slab = Slab::with_capacity(10);\n\n// The slab contains no values, even though it has capacity for more\nassert_eq!(slab.len(), 0);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    slab.insert(i);\n}\n\n// ...but this may make the slab reallocate\nslab.insert(11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Slab","id":"0:185:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:7404:4249":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7037:2454":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13536:5798":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6329:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:20863:59637":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:7093:2006":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46475:2655":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6115:4220":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7008:3133":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6293:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:47146:2341":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47534:2314":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:4840:5856":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:646:39711":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11854:3311":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:3792:1661":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7227:4323":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7208:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11661:5291":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:487:7630":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:48354:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9681:4996":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13459:5776":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:4626:5849":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"14:221:6098":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9021:7636":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8949:1659":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:5962:1663":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10819:3668":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:4974:4855":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:5880:3064":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12695:5570":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9820:4712":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:2731:2895":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12322:5409":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:8911:61225":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47553:2318":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"9:709:3174":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:0:2112":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8939:3177":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:21897:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:2500:4517":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:5313:7728":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21050:3714":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:2358:4504":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6506:4312":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:6785:192":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:47198:2345":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11971:7501":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4581:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:131:39376":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:2921:4208":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46287:2879":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11646:4896":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6524:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:2942:3085":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13192:5686":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2900:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:20444:3450":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4361:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2673:2257":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:2456:4528":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:1737:3794":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11547:5274":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:11673:186":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13158:5679":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5606:4287":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:646:1661":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:8441:4692":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39335:2894":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5733:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"12:2190:61209":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:56972:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6723:2264":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:20166:3447":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:590:4943":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6879:2952":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7297:4329":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8140:3031":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7215:4322":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:4288:5839":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:22395:3499":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4329:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9302:3199":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:49807:2659":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12361:5419":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:50263:3020":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2924:2379":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:6389:3699":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:50923:205":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:501:6240":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1201:1651":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9631:4584":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4258:2984":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11235:5195":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:1404:2936":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:49864:2328":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:7226:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2252:4488":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11217:5194":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4449:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11594:5280":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4437:3376":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3156:3299":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8598:2608":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10708:4690":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"12:1534:4135":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21285:58454":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10894:4633":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:970:2938":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:49890:2671":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:625:3118":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:2898:204":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:8162:4637":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:0:789":{"crate_id":6,"path":["libc"],"kind":"module"},"2:47026:4866":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9857:4639":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:1859:3085":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10949:5134":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5619:3004":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:8418:4636":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8428:2663":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7430:192":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:9516:2668":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:8535:2600":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:19997:59639":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:20037:59700":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:6673:2310":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10497:47205":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13478:5781":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:2666:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"14:202:3854":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:12384:2149":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13184:5685":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4321:2621":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9722:5056":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13518:5792":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:47282:2335":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:1962:4652":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:20229:3598":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9627:4597":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5498:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2250:3270":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12980:5632":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:12381:2146":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:7070:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:12382:2147":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7144:4321":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13141:5675":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:52555:7330":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:51016:3138":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10983:2810":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:11646:59051":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4200:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:50812:3771":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:4308:2986":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:54128:7386":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4294:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:2205:2266":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:7249:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2026:178":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46853:3837":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:50728:3685":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:9484:55646":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12087:5368":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9751:4655":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:50913:199":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:3125:7632":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4185:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6415:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12955:5627":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:907:1656":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"12:853:2941":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3001:4515":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:9338:1659":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2142:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2476:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:51834:3592":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:50732:3687":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8116:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:48228:1659":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12176:5383":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10455:4726":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:50744:3688":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7932:10617":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6288:2273":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4653:3331":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:632:1659":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46809:3536":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:4318:5840":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10761:3198":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5625:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:7266:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:54205:7389":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:20014:59697":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:6926:3749":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9844:4715":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:393:7985":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4816:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11851:3699":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3995:3129":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6571:4313":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:29572:3742":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4212:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9071:61220":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46793:3534":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4179:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4644:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:542:3249":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11530:55934":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47516:2310":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12850:5603":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9488:4588":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1707:3325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:33:4049":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5503:4283":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10774:4567":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2573:3028":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:5422:1663":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:47564:2320":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:11625:32814":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6738:3894":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:5894:4860":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:5199:2273":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7245:4324":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:12374:2141":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8857:3174":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"12:98:4125":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:8318:3643":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:777:4113":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12964:5628":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10997:5149":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:3337:1659":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46892:3675":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2596:4559":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4341:2623":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"9:0:2106":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:3972:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:38113:177":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:46534:4268":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:4186:201":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12198:5394":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1605:1656":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:9607:2972":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9764:5057":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:49105:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9885:7652":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6437:7550":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9405:2664":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10845:4691":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:44:4111":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:7335:4245":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46845:3676":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:2976:3084":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:6540:200":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10608:4574":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4346:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13354:5748":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11034:5162":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7920:4335":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:3249:4640":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13279:5735":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8384:3015":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1426:192":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:8534:204":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:12118:5374":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:12005:3090":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:2309:176":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11997:5356":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6768:4317":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2396:3279":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6311:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9712:5055":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:4735:3859":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:10598:3818":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:7727:2457":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11831:3151":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:8295:46942":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:12022:4152":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:1348:1661":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"12:738:2934":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:6867:2266":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:50411:3462":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5676:3194":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9424:3070":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9371:7637":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:50974:3698":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11915:3319":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6188:4304":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:8600:188":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5856:4296":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12781:5587":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:8924:1316":{"crate_id":2,"path":["core","slice"],"kind":"module"},"5:4936:3123":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4534:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:47272:2350":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:771:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11734:5066":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4581:3330":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:29321:3784":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:49354:3174":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8069:2994":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3393:5829":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4379:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1525:6317":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:8475:4578":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10182:5096":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:581:6288":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:47207:2333":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:12386:2151":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11751:7498":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6572:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46248:2796":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8941:7634":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:4404:5843":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11538:3769":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:6996:2325":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1680:2268":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11575:7491":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:56985:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5699:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:49909:2672":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:52713:3582":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5523:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:29558:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:4029:4850":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11761:5304":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7461:4234":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:47308:2352":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1394:2935":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2402:4523":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1608:1663":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4810:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5480:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:8494:5039":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5927:4297":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4565:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:48620:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6012:4300":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:50440:3468":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5175:45320":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2839:2870":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:1840:1663":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11167:7480":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:19969:3089":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"12:353:4126":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:521:4754":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:6474:4865":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4367:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5959:4483":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:39326:3076":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7863:3237":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:1617:3084":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4231:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11343:5227":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:20016:59695":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:276:2265":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:1634:3087":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4307:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:928:2934":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:3898:1659":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:21193:7190":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6975:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:822:2939":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:50594:3474":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6035:3342":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9362:4601":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48092:1971":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:1600:6364":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46548:2620":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:20851:2657":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8570:3368":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:7803:4332":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3190:3039":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12164:5381":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:10739:55153":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7095:4498":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6354:4309":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12251:5398":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11434:4893":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7287:4328":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:387:7984":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:9541:55645":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:50748:3689":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13168:5682":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10642:4697":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2819:2866":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:21260:7198":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"0:185:1645":{"crate_id":0,"path":["slab","Slab"],"kind":"struct"},"6:507:6243":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"14:31:7692":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12103:5370":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:586:6290":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1608:6369":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"9:863:3958":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7101:58087":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4690:968":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9585:2666":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13059:5652":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10584:2650":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:4010:3311":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5390:185":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7825:4333":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:4257:3608":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11436:5233":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10394:4668":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:47155:7297":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:560:6277":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2947:3884":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10393:3326":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"9:956:3956":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:5840:2355":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5443:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49798:2658":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2833:4485":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:50059:3662":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10520:5112":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"12:2080:1651":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5817:4295":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5519:4284":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1884:7726":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6337:4308":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46963:3749":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8897:3176":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:49333:2928":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12073:5365":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:8881:61219":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:8701:5045":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:48316:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:54029:7379":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"13:0:2103":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13413:5762":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:3310:3024":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"12:1872:3087":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11485:5258":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:62:39310":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:5827:1507":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"6:5727:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9691:4654":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:515:4757":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8356:2306":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:49985:3658":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5691:3195":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12380:2145":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10194:4872":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:1643:6398":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9303:4599":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:4267:2620":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10476:47204":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5749:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"14:165:45247":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6554:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:50931:189":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:50213:3669":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12379:2144":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:54064:7382":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:21233:3417":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:20416:15822":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50724:3682":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:1435:3915":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9461:7547":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5568:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4968:2906":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:52165:3585":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13594:5808":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9475:4589":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6178:4303":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4525:3834":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12630:5534":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5974:4298":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1695:6430":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4597:5848":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:7243:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11368:3201":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7307:4330":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:1230:2944":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:2724:2596":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:2019:60774":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11853:5316":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13039:5645":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:600:6298":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"12:1120:4124":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2023:179":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:11055:3456":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:10803:3665":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:48582:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:50389:3459":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13082:5657":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11974:5355":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:1088:1647":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5660:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2743:963":{"crate_id":2,"path":["core","ops"],"kind":"module"},"9:920:3957":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:7728:2456":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7447:4233":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:999:2942":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:53915:3570":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4834:2921":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9354:1656":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"15:175:4143":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9061:4601":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:20203:3544":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:21963:163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:49979:3657":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:52379:3553":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8220:3032":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:49789:2660":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13114:5668":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11708:5296":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:562:5128":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10296:7666":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2755:2853":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:5531:3859":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:7147:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2935:1659":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:50326:3676":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7276:4327":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2436:2901":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:53025:3569":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3267:3037":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:12371:2138":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:4888:4848":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3466:56136":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4317:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"9:19:4048":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:12373:2140":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4698:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7730:5128":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:50532:3471":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:29736:3744":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:1550:6331":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8132:3029":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12378:2143":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4737:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:51965:3560":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"6:4653:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4777:5854":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6230:4306":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:21831:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:2979:1969":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2485:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5226:5860":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:49038:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:10139:4601":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11893:5320":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:48177:187":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3472:3934":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4762:3092":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:188:4024":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:1933:3249":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8712:3334":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:4208:5837":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4335:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:5547:3860":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:815:2938":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:29530:2259":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:1185:1647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:52501:7328":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:976:2939":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12674:5565":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:48126:2454":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10490:5108":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12730:5571":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:9930:5061":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6794:4539":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9897:7653":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11773:4898":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:5835:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6262:4235":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:52789:3589":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12816:5591":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"12:1555:4136":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3150:3297":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:53807:3587":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46514:3079":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13031:5644":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2843:2871":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9350:4707":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:11030:3457":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:1552:3004":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6124:4272":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11330:5223":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:4667:10621":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2291:4529":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:8272:4696":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:54075:7383":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6139:4302":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4437:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8789:2500":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11559:5276":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9263:7641":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11500:5262":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:957:2935":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:2665:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6308:4307":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:771:3892":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:48041:175":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8076:3269":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:11341:2902":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:46507:2874":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12385:2150":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:941:1663":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:1760:3793":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2831:2868":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:49877:2675":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:5450:4280":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:49568:2688":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:5005:2910":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12369:2137":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2780:2861":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11199:5186":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3482:3017":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1359:1656":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11315:5217":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4264:2985":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4900:7032":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:951:2268":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:10360:4724":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2548:4507":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4501:3321":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3343:2314":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:52871:3574":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11451:4895":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47099:2330":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11894:3312":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:810:2935":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11606:5282":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47293:2351":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:49817:2669":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6030:4301":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9165:61217":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:46334:2873":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2930:2380":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:595:2924":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11356:5228":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:50426:3465":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13024:5643":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6545:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:962:2936":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:53869:3552":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2772:2854":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2482:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:448:3232":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6228:200":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10752:4569":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1701:6433":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6048:4214":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2848:2872":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:52759:3586":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2788:2858":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:50800:2976":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11739:7731":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:985:1647":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4429:3374":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"12:2198:6150":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9330:3201":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:8137:46941":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:4879:5857":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:658:3264":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:50756:3684":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:1044:4121":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:8150:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6646:4537":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4726:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"14:40:5149":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4768:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:48117:1656":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:7779:4887":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9293:4708":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10321:4723":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4376:5842":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:19982:59639":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:21798:2654":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:8981:7635":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"12:861:2942":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47077:2329":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3149:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:5007:2912":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:0:2111":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1971:3920":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:8951:61222":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:0:1485":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:48109:1661":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12278:5402":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7868:4239":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10310:7667":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9592:161":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:6600:160":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8590:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:49564:3848":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5793:4294":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"12:1518:4134":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9193:61223":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:8774:4566":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13366:5751":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:599:61227":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2776:2857":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:53667:3583":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:660:4744":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6953:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7189:4215":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:52187:3588":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6697:4535":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4804:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4778:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6352:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13492:5783":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5941:188":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3548:4848":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6837:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4096:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8215:3215":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:8796:4575":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2378:3273":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:5402:4277":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:2178:6147":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:1919:3130":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9250:7640":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"14:187:45253":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7615:4238":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:12391:2156":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:6793:3888":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6747:1663":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4298:2981":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7545:4253":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:9602:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"0:32:1661":{"crate_id":0,"path":["slab","IterMut"],"kind":"struct"},"16:2885:4520":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:481:4755":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:3417:4848":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12046:5363":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9379:3067":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:5619:59482":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:6322:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:1120:2944":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9577:4592":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10583:4571":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:7424:2323":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13436:5775":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:3076:2261":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6087:4248":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9597:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:2734:60659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:49083:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:49325:7307":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9316:3200":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10822:46945":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8618:3146":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5720:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9317:4704":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:4195:3603":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:48159:2455":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:56576:3704":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5715:4290":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13393:5759":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3949:3143":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4421:3373":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13572:5802":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1216:2943":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8527:7452":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:54090:7384":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:1511:6312":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:1678:6423":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5771:4293":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:4051:3600":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3590:3152":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:46906:3840":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1500:6307":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:719:4749":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5438:4279":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2762:4512":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47543:2316":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11639:5290":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:6558:3445":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2662:2892":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6807:4540":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:1825:7724":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13527:5796":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:20332:3450":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:4190:3602":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6149:4273":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4312:3609":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:1138:2944":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"7:79:44521":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12797:5590":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:47231:2347":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:247:7628":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9382:5052":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1518:6315":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6981:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:51904:7318":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46823:3842":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:9599:2662":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:49372:7312":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:9478:2667":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10682:4695":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4797:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12134:5375":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"14:0:2110":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8880:3175":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:3160:2875":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:3457:2600":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:6781:3220":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7350:4546":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:7417:1640":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5574:4286":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12349:5412":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4714:768":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10221:7660":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13382:5755":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:9284:3197":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9527:4319":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7255:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12948:5625":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2570:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:4121:2619":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:48780:2606":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1861:7725":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:50292:3673":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9401:5054":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:736:4751":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:57011:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4688:59063":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4239:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1636:6394":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5060:2914":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10721:5127":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:574:4941":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:6955:3901":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2622:4519":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4206:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12909:5615":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4250:2983":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12860:5604":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:20242:2901":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9274:7642":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11617:5283":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:4320:2989":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4432:5844":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:49020:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:9571:2661":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:6156:4848":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:52454:7327":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6636:7729":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"15:214:4148":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:2718:4510":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:3176:3446":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4706:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12265:5401":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6759:4243":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2909:2797":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:5165:3099":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:11256:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12392:2157":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11670:3208":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:8596:2607":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11724:7496":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11709:7495":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5223:2499":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6998:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1601:1659":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:7948:2946":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:2668:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5782:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:51780:3571":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9873:7651":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:8585:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7726:2458":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6081:1656":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:54038:7380":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12291:5403":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2804:2862":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:0:2114":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9644:4583":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7113:4499":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2792:2860":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:9557:2665":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:7841:2901":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:53953:3590":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11014:5152":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"9:592:3999":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:608:6303":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"12:1628:4846":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:707:3460":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7887:4241":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:47137:2340":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2556:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:12383:2148":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:10516:7993":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:7166:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:20694:3453":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2814:2864":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:119:4129":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:8862:2927":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:2859:4486":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2661:2377":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:52042:7320":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13148:5676":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:2648:4518":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8422:3018":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"12:751:1663":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12884:5606":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8124:3291":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:1067:3918":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:614:61229":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8734:7021":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:7:7692":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:80:7977":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:50569:3472":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7741:7746":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:8738:7709":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:11787:5307":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:9708:7726":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:3400:2996":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:7971:7735":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6302:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:53745:3567":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8368:4568":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12896:5609":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:6307:2274":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:1629:3086":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8698:3324":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:1931:4585":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:0:2113":{"crate_id":17,"path":["object"],"kind":"module"},"18:96:7978":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6814:1656":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6269:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8807:3164":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"0:19:1656":{"crate_id":0,"path":["slab","IntoIter"],"kind":"struct"},"1:12210:4899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7975:3926":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4427:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:50637:3759":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7992:4268":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10670:4694":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48278:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8339:46943":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6474:4311":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:571:3254":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10332:4731":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2478:4505":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2394:3278":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6441:4310":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12617:5527":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11989:7502":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7055:2268":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:6002:3339":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:52089:3593":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1714:6436":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:1672:1049":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:7842:3228":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4496:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2784:2859":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12550:5472":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9283:7643":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4665:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2766:2855":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:47178:2344":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4559:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4257:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7022:4495":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4115:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4673:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:5759:3198":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:48544:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1033:7989":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"10:0:2107":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2332:4522":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7948:4237":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:46951:3748":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13221:5693":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8955:3179":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6430:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7000:3852":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10283:7665":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4565:5847":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13126:5671":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:6732:1656":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10374:4666":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5595:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7231:3308":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:52635:3594":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:48101:1659":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4274:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:53059:3551":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6538:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6164:4224":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:8594:2606":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11271:5200":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:1385:2934":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:454:3233":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:6511:2337":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:5379:4276":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8099:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4206:2900":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:4081:3601":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:48168:2490":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:3188:3038":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11506:3199":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7266:4326":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:993:2941":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:6425:2327":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6277:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47221:2346":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:54018:7378":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:3845:5835":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12334:7553":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6101:4222":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12337:4691":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"18:624:61228":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9601:4590":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:56959:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9274:1659":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11518:3200":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:690:4747":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"12:0:2109":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:10880:4892":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:13176:5683":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2220:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9433:7646":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:53991:3555":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6668:4231":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8687:3372":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6479:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5605:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:1886:7727":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11288:5208":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4761:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12307:5405":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:586:3997":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:5876:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50583:3473":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:50505:3470":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4716:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:3529:2268":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:6705:2932":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9108:7637":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"0:193:1651":{"crate_id":0,"path":["slab","VacantEntry"],"kind":"struct"},"2:11882:199":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10075:7655":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:11908:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8756:2911":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:6972:7177":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:46932:3538":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50231:3670":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"8:0:2105":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:52311:3565":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:51710:7317":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:1825:2262":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:7279:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5887:3065":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3418:3013":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:884:1659":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:21864:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:50760:3769":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4475:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:683:10618":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:4510:5845":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:11612:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46766:3121":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11162:7478":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:9514:7549":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2489:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11217:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8441:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"16:2424:4501":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8638:3314":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4398:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7256:4325":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4489:3333":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4113:3319":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1415:2937":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7366:4247":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:6992:2326":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3139:2656":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1623:3085":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2253:3012":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8588:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:3721:1663":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1049:3917":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:20959:3451":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10434:5103":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9183:7639":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:652:4941":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:7033:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:21306:58433":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2437:2958":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:48253:177":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:51935:3572":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21930:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:3254:5828":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:2740:4511":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:11841:3131":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6545:4242":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:48506:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:9466:3131":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"15:193:4144":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11528:5269":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5488:4282":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11536:5271":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:4680:5851":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:50159:3666":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5582:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12609:5524":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4152:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12148:5377":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:21245:3418":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:39322:3926":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:6818:2309":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8730:2907":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:1668:6417":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11721:5299":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6294:4252":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:6912:3899":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:11035:3458":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:6758:2306":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:2968:3086":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9328:4705":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2927:1777":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10121:4632":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:47108:2331":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:32:44514":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7521:4226":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7581:4250":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2654:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5472:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:10854:2679":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3623:5832":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:675:7716":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3362:3078":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:7489:4204":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11951:5346":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:725:2933":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:11698:7710":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9658:7648":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1887:40686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2243:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11662:7492":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2760:2852":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11185:7486":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:50177:3667":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:21322:58436":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46349:194":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:47240:2348":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:8292:650":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:11197:3269":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11247:5198":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10257:7663":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:36:2267":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:766:4753":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:58286:7396":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5536:4285":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:9447:3347":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:382:3953":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4300:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:29496:2258":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4540:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:2916:4628":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2718:2378":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:2981:3885":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46876:3838":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:5174:3141":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:49899:2674":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9791:5058":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:12015:4152":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11828:5314":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8086:2995":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13231:5698":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:20291:3135":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11515:5267":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"12:2053:1647":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6989:3851":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5083:2909":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2380:3274":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46541:7714":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:9290:180":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6071:3350":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:46870:3121":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:7029:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2570:4558":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10159:5095":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2705:2893":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13557:5801":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46409:196":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:8752:3018":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:46453:197":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8372:3014":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:410:4898":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:49157:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4506:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5739:4291":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13327:5736":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4635:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:609:7625":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:487:6232":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:51886:3584":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:12367:2135":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21732:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:46781:3533":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11137:5178":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6450:4141":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:21177:3422":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12926:5620":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8631:5043":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10568:2648":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11368:5231":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6682:4244":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4745:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:3948:3395":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:7143:4886":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10385:4667":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6424:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:0:2108":{"crate_id":11,"path":["adler"],"kind":"module"},"1:6778:3348":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3751:4848":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5194:5039":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6872:7729":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4191:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10796:4688":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:10117:2678":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"14:215:6096":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12934:5623":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:524:4479":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9909:5059":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:4912:5858":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4965:2908":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9366:2679":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2920:1780":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4575:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:6311:4877":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:20699:15840":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:1823:7723":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"13:108:61210":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:420:4192":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11576:5279":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:915:2933":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:50740:3690":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:52357:3550":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3265:3036":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6509:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:12390:2155":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:50283:3672":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3154:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:46431:195":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:539:6265":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8498:3161":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13007:5636":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13100:5661":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9805:4711":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:939:4848":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:29536:2708":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:0:1338":{"crate_id":1,"path":["std"],"kind":"module"},"16:5681:4289":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4605:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:1474:1641":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:9907:4891":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:50779:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:10837:3197":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"12:2184:6148":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4683:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6392:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12211:5395":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11172:2994":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:9360:3066":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"19:0:993":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6721:4316":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:50317:3121":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:4399:3371":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:60:7983":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:47086:2338":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1935:3262":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:575:6285":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:2607:3021":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6632:4315":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:10780:3664":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1738:6445":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:12389:2154":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1562:6340":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2247:3268":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:7214:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:54009:7377":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:1836:1656":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:622:4000":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:49967:3098":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4139:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5592:4477":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:20442:3547":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6654:4230":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:52024:3549":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7850:4240":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11087:5169":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8363:3043":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:48236:1661":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:1595:6362":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:0:2104":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6248:4225":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:554:6274":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7917:10615":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:8034:4205":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:3350:1661":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50009:2663":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:9778:4656":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4904:7036":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:50966:3697":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8583:3102":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21209:7193":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1102:2943":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:49044:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:3191:2880":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"12:1852:3084":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:987:2940":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8464:3148":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:25205:3530":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5570:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4551:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:8313:3642":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12638:5535":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:592:6293":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:21351:7211":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9562:7477":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:11445:4894":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:4519:198":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5424:4278":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:48185:204":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"12:669:2936":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4890:2985":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10403:4569":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11594:2972":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:12375:2142":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:54143:7387":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:48468:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6881:4319":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:3179:5827":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:567:6280":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"9:649:4001":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:3475:2997":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:4092:4850":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9127:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"0:0:1653":{"crate_id":0,"path":["slab"],"kind":"module"},"2:8602:2609":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:21633:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8561:4650":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:5502:184":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2896:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9392:3068":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9408:3069":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8323:3045":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:50736:3686":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2983:1970":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:5822:3204":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10546:46944":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7413:4265":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46593:3520":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9895:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:12225:5396":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6037:4503":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:51756:3579":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10062:7654":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:54049:7381":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5995:4299":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:51987:3564":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9947:47132":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:644:4941":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:8393:4623":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:2039:3919":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:11750:59052":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:10991:3096":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:1085:4123":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:153:4212":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:8592:2605":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11909:5325":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"12:1832:1659":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:1029:1651":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:564:4760":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5772:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4614:3004":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:50987:155":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:966:2937":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10466:5106":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46913:3841":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12393:2158":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12388:2153":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10506:5109":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:49053:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:46389:193":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47127:1657":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6843:4542":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10938:3038":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:7798:4889":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2647:3030":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10270:7664":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4354:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:8604:2610":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:6008:4848":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2245:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9553:4601":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11350:55651":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:4712:5852":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50273:3671":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10350:4567":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:3557:5830":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:8822:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:20283:2901":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:681:4746":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:11101:3464":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4450:3377":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:50617:3758":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:10941:3040":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5741:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:36:6153":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:48430:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:636:4952":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9519:7551":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"12:274:6144":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12022:5360":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49827:2670":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:1903:47027":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:20435:2901":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6500:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12366:2134":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:1021:4709":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:7237:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:7420:2322":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:859:1659":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13506:5790":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11800:5309":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10944:3036":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4515:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3226:3040":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8680:3102":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11337:7735":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:800:6204":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:2864:3217":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11237:55938":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9223:46989":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:8212:4689":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:9117:2901":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:7955:11615":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:54113:7385":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:1338:1659":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10625:4576":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:842:3893":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:6677:3351":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4242:2982":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11070:5167":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9671:4624":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:5808:16034":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2380:4500":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3900:3004":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:49071:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:1532:6320":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9738:4657":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:51734:3591":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:531:4758":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10108:4631":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:47257:2349":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9645:2974":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:755:4752":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1376:2933":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46979:3750":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:620:7697":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9446:7647":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3228:3041":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:7289:7170":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1111:1651":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5684:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8059:3082":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4417:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:29630:3743":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8405:2338":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2784:4514":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:6009:3341":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:11044:3460":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5819:3202":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5758:4292":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1612:2268":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:7637:4221":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:47036:7715":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7934:4236":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2406:3284":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:53415:3595":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10084:2677":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:52403:3554":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:6755:3895":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:113:7981":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:52135:3581":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4536:5846":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:4253:5838":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2961:2878":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:7042:2324":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:513:6245":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11873:5319":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13214:5691":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:3326:157":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:1541:6325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:676:4046":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:47187:2354":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:320:4127":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50077:3663":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:48658:3753":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8547:3367":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"14:160:7692":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6713:4246":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:52949:3562":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:46899:3839":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7321:4232":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3460:3031":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13091:5660":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2315:183":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:5705:3196":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2835:2869":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6855:4318":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6449:4860":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:8510:5040":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:8871:7633":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:50113:2665":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6405:4884":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4348:5841":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:6806:7990":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:3680:5833":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8966:3180":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10973:5148":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"0:23:1659":{"crate_id":0,"path":["slab","Iter"],"kind":"struct"},"2:20285:3134":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:6820:1656":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:896:3960":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2809:2863":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4247:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47525:2312":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:51864:3580":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:6605:2303":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9472:3253":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8210:3214":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:21103:3716":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9626:2973":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11774:5306":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6409:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:8857:2926":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:9443:2680":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12972:5630":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7535:4227":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:1643:2705":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:53557:3563":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:11151:2916":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:14:2222":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:52005:7319":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3228:2881":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:8808:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:7293:7991":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5642:3192":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:2244:3923":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"12:1866:3086":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12739:5575":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1505:6309":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12237:5397":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4932:3125":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10566:3211":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:49838:2676":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:897:1661":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12060:5364":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6820:5932":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:2696:4509":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1654:6406":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:49141:2604":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:3707:5834":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"12:697:2937":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:58307:7397":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:5510:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:4364:2622":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:38130:3089":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:49953:3754":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3166:2877":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9031:61221":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3374:3077":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:3017:4958":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5365:4223":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:135:39377":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:8241:4693":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:3002:3087":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13203:5690":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5009:2913":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4629:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5504:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:50308:3675":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:7072:2269":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:6212:3064":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10245:7662":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1686:6424":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46365:192":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11557:2973":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:1964:3263":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2674:4508":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:519:6248":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:52235:3573":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:977:3961":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:6942:3900":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5841:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:21765:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8606:3145":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10088:5093":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:54166:7388":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8706:3313":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2750:2856":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4621:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:49919:2673":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6323:4228":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:51004:3140":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4280:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11684:5295":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:53209:3575":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4267:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10233:7661":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12836:5599":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:582:3089":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21268:7199":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11227:3014":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:4212:2898":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21699:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:6763:60772":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:51690:7316":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4740:5853":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6375:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4224:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:5472:4281":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"13:220:6143":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:8155:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4312:2987":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:8435:3020":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2825:2867":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:11050:3461":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10921:5130":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9339:4706":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10875:4634":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8064:3267":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13340:5742":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:8991:61224":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:242:7627":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7217:3307":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"12:1003:2943":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:20957:2901":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1580:6350":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2664:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:21384:3732":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48794:2607":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7220:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:967:7631":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9902:3267":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9831:4714":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48801:2608":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12768:5582":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8666:5044":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10652:3206":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:56933:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1065:4122":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11939:5344":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6276:4251":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:1943:3887":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13580:5805":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:6492:3064":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:215:3882":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11259:5199":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1722:6440":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:4135:5836":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7958:4269":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2745:2851":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:11963:2263":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9526:4587":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48244:1656":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5642:4288":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:716:10619":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:4059:3004":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:538:4759":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5861:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:20254:3452":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:10722:3196":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:50752:3683":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:49364:7311":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2473:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:5375:2342":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:8526:4670":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3081:3044":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:9155:7638":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:9323:2663":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2583:4875":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5672:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4611:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7868:3252":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:827:3955":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:521:4873":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:3311:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2223:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:12368:2136":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2526:4506":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:2510:3027":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7853:55633":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11125:5175":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:52333:3568":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:48392:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:50131:2661":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46833:3843":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4808:5855":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12350:55642":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8415:2351":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4659:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:505:3948":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3094:2268":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:21666:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5154:4489":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10207:7656":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:2725:60656":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9118:61216":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8692:3375":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:39286:2957":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:491:4940":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3373:3004":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:2816:4513":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4013:3312":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2273:182":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12756:5577":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:3608:1656":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2984:4516":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:47117:2339":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8632:3313":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13374:5754":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:659:1656":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:52995:3566":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9539:4586":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:50604:3475":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11161:5182":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:1751:7179":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:9298:1661":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1574:6348":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4653:5850":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"12:2069:2943":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7532:55340":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:1584:4848":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:21372:3733":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11813:5311":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7907:4334":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:545:6268":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:495:6237":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21358:3789":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10743:3661":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11054:5163":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:6317:2275":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7071:4320":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12748:5576":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6495:4140":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:52532:7329":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11106:5174":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:56946:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11186:5185":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8481:3149":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4592:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"3:223:204":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:9346:3063":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10497:7725":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9458:4564":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11841:5315":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46772:7286":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5554:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5873:200":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12874:5605":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5656:3193":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:727:4750":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:7831:3458":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48787:2605":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:49995:3018":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6132:4877":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"18:507:4941":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7938:2945":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:6448:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2273:4487":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:50301:3674":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2797:2865":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:762:2268":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:2465:3922":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9700:4653":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5113:5859":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:5452:2332":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5692:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47056:2328":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:1771:4591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7889:2810":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9501:4599":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4126:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11149:5179":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:8110:46937":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:1636:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47509:2308":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:8055:4565":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:12387:2152":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:671:4745":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:52281:3561":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12033:5361":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4286:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:4988:4858":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:7374:4331":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:1845:2268":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:13047:5646":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3448:4962":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12514:5441":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12008:5358":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7475:4229":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6219:4305":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4102:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11757:7499":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:2726:7173":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11300:5211":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5541:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21156:7188":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:4598:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:678:7718":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2278:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:12372:2139":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10420:4725":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9507:7737":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"12:300:4128":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11207:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:20411:2901":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:49342:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11748:5303":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5534:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5587:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:21996:3719":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:5210:5040":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4527:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:50457:3469":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9422:7645":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:834:2940":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47323:2353":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:8596:5042":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4461:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:339:159":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5713:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:4:978":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13071:5653":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46946:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10445:4691":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:8545:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13134:5674":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:56998:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3960:3396":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10528:4687":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11174:5184":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8643:3315":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:49738:3656":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10854:4651":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:699:4748":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:2730:60657":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6777:1656":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:3590:5831":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:49317:2929":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:51802:3559":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2311:4207":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:111:4016":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:4740:2906":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:20035:59698":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:47169:2343":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12485:5421":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"0:37:1663":{"crate_id":0,"path":["slab","Drain"],"kind":"struct"},"17:13404:5760":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4902:7034":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:5344:7728":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6597:4314":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3153:3298":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:8822:61218":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:50027:2667":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12339:10620":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:386:7629":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1473:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:2479:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}