{"root":"0:0:1950","crate_version":"0.21.7","includes_private":false,"index":{"b:2:2471-0:526:2580":{"id":"b:2:2471-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:394:2093":{"id":"0:394:2093","crate_id":0,"name":"STANDARD","span":{"filename":"src/alphabet.rs","begin":[171,0],"end":[173,2]},"visibility":"public","docs":"The standard alphabet (with `+` and `/`) specified in [RFC 4648][].\n\n[RFC 4648]: https://datatracker.ietf.org/doc/html/rfc4648#section-4","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[200,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3507:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_read_vectored","chain","read_buf_exact","read_to_end","bytes","read_exact","read_vectored","by_ref","take","read_to_string","read_buf"],"trait":{"name":"Read","id":"1:3507:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:124:1931"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13080:29898":{"id":"2:13080:29898","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:1764":{"id":"0:547:1764","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[149,20],"end":[149,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[99,0],"end":[103,1]},"visibility":"default","docs":"As for io::Write, `StrConsumer` is implemented automatically for `&mut S`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"S"}}},"items":["0:214:2399"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42469:3503-0:516:2457":{"id":"a:2:42469:3503-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[142,16],"end":[142,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:1941":{"id":"0:454:1941","crate_id":0,"name":"decode_engine","span":{"filename":"src/decode.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":" Decode from string reference as octets using the specified [Engine].\n\n See [Engine::decode].\nReturns a `Result` containing a `Vec<u8>`.","links":{"Engine::decode":"0:350:590","Engine":"0:331:1934"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7052:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:458":{"id":"0:495:458","crate_id":0,"name":"clone","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[244,9],"end":[244,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:3504-0:480:2095":{"id":"a:2:42468:3504-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2789-0:47:2139":{"id":"b:2:2789-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42469:3503-0:570:1945":{"id":"a:2:42469:3503-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[83,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["0:157:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32890:3555-0:480:2095":{"id":"a:2:32890:3555-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:316:2669":{"id":"0:316:2669","crate_id":0,"name":"with_decode_allow_trailing_bits","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[290,4],"end":[295,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.\n\nMost users will not need to configure this. It's useful if you need to decode base64\nproduced by a buggy encoder that has bits set in the unused space on the last base64\ncharacter as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).\nIf invalid trailing bits are present and this is `true`, those bits will\nbe silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["allow",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:29860":{"id":"2:13022:29860","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592":{"id":"5:5592","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5593:35161","5:5594:2935","5:5597:35162","5:5600:35163","5:5608:35164","5:5609:35165","5:5610:2995","5:5611:29685","5:5612:29684"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510:724":{"id":"0:510:724","crate_id":0,"name":"fmt","span":{"filename":"src/engine/mod.rs","begin":[440,22],"end":[440,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:1942":{"id":"0:457:1942","crate_id":0,"name":"decode_engine_vec","span":{"filename":"src/decode.rs","begin":[109,0],"end":[115,1]},"visibility":"public","docs":"Decode from string reference as octets.\n\nSee [Engine::decode_vec].","links":{"Engine::decode_vec":"0:354:2529"},"attrs":["#[cfg(any(feature = \"alloc\", test))]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_vec\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode_vec"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7052:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3612:1644":{"id":"2:3612:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40131:6706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:558:1940":{"id":"b:5:725-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13020:29859":{"id":"2:13020:29859","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[96,0],"end":[246,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["0:162:1048","0:165:2186","0:170:2223"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:552:724":{"id":"0:552:724","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[142,9],"end":[142,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470-0:463:1944":{"id":"0:470-0:463:1944","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,45],"end":[271,65]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::decoded_len_estimate","name":"decoded_len_estimate","id":"0:463:1944","glob":false}}},"2:13005:2194":{"id":"2:13005:2194","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432-0:417:1938":{"id":"0:432-0:417:1938","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[264,24],"end":[264,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::encode_engine_slice","name":"encode_engine_slice","id":"0:417:1938","glob":false}}},"2:13042:29900":{"id":"2:13042:29900","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:189:2247":{"id":"b:2:2471-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550:1764":{"id":"0:550:1764","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[151,17],"end":[151,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"2:13099:34456":{"id":"2:13099:34456","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:558:1940":{"id":"0:558:1940","crate_id":0,"name":"EncodeSliceError","span":{"filename":"src/encode.rs","begin":[146,0],"end":[149,1]},"visibility":"public","docs":"Errors that can occur while encoding into a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:559:2496"],"impls":["a:2:42468:3504-0:558:1940","a:2:2997:246-0:558:1940","a:2:42469:3503-0:558:1940","a:2:32833:237-0:558:1940","a:2:32890:3555-0:558:1940","b:2:3610-0:558:1940","b:2:2471-0:558:1940","b:2:2789-0:558:1940","b:2:2784-0:558:1940","b:2:2778-0:558:1940","b:2:2774-0:558:1940","b:2:2474-0:558:1940","b:5:5866-0:558:1940","b:5:725-0:558:1940","0:561","0:565","0:424","0:566","0:563","0:568","0:426"]}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[57,0],"end":[64,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:447:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,9],"end":[440,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:507:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2778-0:85:2155":{"id":"b:2:2778-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2774-0:592:1946":{"id":"b:2:2774-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2774-0:490:2096":{"id":"b:2:2774-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[30,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:444:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2997:246-0:558:1940":{"id":"a:2:2997:246-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32833:237-0:85:2155":{"id":"a:2:32833:237-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[76,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:451:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:428-0:409:662":{"id":"0:428-0:409:662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,24],"end":[262,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::encode","name":"encode","id":"0:409:662","glob":false}}},"b:5:5866-0:539:2802":{"id":"b:5:5866-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13077:29897":{"id":"2:13077:29897","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:140:2246":{"id":"b:2:3610-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:2223":{"id":"0:199:2223","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder_string_writer.rs","begin":[67,4],"end":[72,5]},"visibility":"public","docs":"Encode all remaining buffered data, including any trailing incomplete input triples and\nassociated padding.\n\nReturns the base64-encoded form of the accumulated written data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"S"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13065:34449":{"id":"2:13065:34449","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12697:3175","str::split":"2:13056:28212","prim@char":"1:12073:454","`DoubleEndedIterator`":"2:8078:131","str::rsplit_terminator":"2:13068:34450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44277:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[145,34],"end":[145,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5612:29684":{"id":"5:5612:29684","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13130:29682"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:2431":{"id":"0:298:2431","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[46,4],"end":[46,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GeneralPurposeEstimate","id":"0:267:2583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:390:1629":{"id":"0:390:1629","crate_id":0,"name":"try_from","span":{"filename":"src/alphabet.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2758:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:138":{"id":"0:389:138","crate_id":0,"name":"Error","span":{"filename":"src/alphabet.rs","begin":[134,4],"end":[134,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2778-0:558:1940":{"id":"b:2:2778-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13006:34442":{"id":"2:13006:34442","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474-0:331:1934":{"id":"0:474-0:331:1934","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[15,0],"end":[15,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::engine::Engine","name":"Engine","id":"0:331:1934","glob":false}}},"a:2:2997:246-0:592:1946":{"id":"a:2:2997:246-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:466-0:454:1941":{"id":"0:466-0:454:1941","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,32],"end":[269,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::decode_engine","name":"decode_engine","id":"0:454:1941","glob":false}}},"5:5611:29685":{"id":"5:5611:29685","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13129:29683"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13136:9413":{"id":"2:13136:9413","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4795:9413"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44535:3786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:34466":{"id":"2:13137:34466","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4792:34466"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44544:3787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:1180":{"id":"0:473:1180","crate_id":0,"name":"prelude","span":{"filename":"src/prelude.rs","begin":[1,0],"end":[20,82]},"visibility":"public","docs":"Preconfigured engines for common use cases.\n\nThese are re-exports of `const` engines in [crate::engine::general_purpose], renamed with a `BASE64_`\nprefix for those who prefer to `use` the entire path to a name.\n\n# Examples\n\n```\nuse base64::prelude::{Engine as _, BASE64_STANDARD_NO_PAD};\n\nassert_eq!(\"c29tZSBieXRlcw\", &BASE64_STANDARD_NO_PAD.encode(b\"some bytes\"));\n```","links":{"crate::engine::general_purpose":"0:242:2094"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:474-0:331:1934","0:475-0:322:2093","0:476-0:323:2685","0:477-0:324:2688","0:478-0:325:2690"],"is_stripped":false}}},"2:13028:29886":{"id":"2:13028:29886","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13029:29887"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:1048":{"id":"0:386:1048","crate_id":0,"name":"new","span":{"filename":"src/alphabet.rs","begin":[79,4],"end":[125,5]},"visibility":"public","docs":"Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n\nThe `=` byte is not allowed as it is used for padding.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alphabet",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1950":{"id":"0:0:1950","crate_id":0,"name":"base64","span":{"filename":"src/lib.rs","begin":[1,0],"end":[278,26]},"visibility":"public","docs":"Correct, fast, and configurable [base64][] decoding and encoding. Base64\ntransports binary data efficiently in contexts where only plain text is\nallowed.\n\n[base64]: https://developer.mozilla.org/en-US/docs/Glossary/Base64\n\n# Usage\n\nUse an [`Engine`] to decode or encode base64, configured with the base64\nalphabet and padding behavior best suited to your application.\n\n## Engine setup\n\nThere is more than one way to encode a stream of bytes as “base64”.\nDifferent applications use different encoding\n[alphabets][alphabet::Alphabet] and\n[padding behaviors][engine::general_purpose::GeneralPurposeConfig].\n\n### Encoding alphabet\n\nAlmost all base64 [alphabets][alphabet::Alphabet] use `A-Z`, `a-z`, and\n`0-9`, which gives nearly 64 characters (26 + 26 + 10 = 62), but they differ\nin their choice of their final 2.\n\nMost applications use the [standard][alphabet::STANDARD] alphabet specified\nin [RFC 4648][rfc-alphabet].  If that’s all you need, you can get started\nquickly by using the pre-configured\n[`STANDARD`][engine::general_purpose::STANDARD] engine, which is also available\nin the [`prelude`] module as shown here, if you prefer a minimal `use`\nfootprint.\n\n```\nuse base64::prelude::*;\n\n# fn main() -> Result<(), base64::DecodeError> {\nassert_eq!(BASE64_STANDARD.decode(b\"+uwgVQA=\")?, b\"\\xFA\\xEC\\x20\\x55\\0\");\nassert_eq!(BASE64_STANDARD.encode(b\"\\xFF\\xEC\\x20\\x55\\0\"), \"/+wgVQA=\");\n# Ok(())\n# }\n```\n\n[rfc-alphabet]: https://datatracker.ietf.org/doc/html/rfc4648#section-4\n\nOther common alphabets are available in the [`alphabet`] module.\n\n#### URL-safe alphabet\n\nThe standard alphabet uses `+` and `/` as its two non-alphanumeric tokens,\nwhich cannot be safely used in URL’s without encoding them as `%2B` and\n`%2F`.\n\nTo avoid that, some applications use a [“URL-safe” alphabet][alphabet::URL_SAFE],\nwhich uses `-` and `_` instead. To use that alternative alphabet, use the\n[`URL_SAFE`][engine::general_purpose::URL_SAFE] engine. This example doesn't\nuse [`prelude`] to show what a more explicit `use` would look like.\n\n```\nuse base64::{engine::general_purpose::URL_SAFE, Engine as _};\n\n# fn main() -> Result<(), base64::DecodeError> {\nassert_eq!(URL_SAFE.decode(b\"-uwgVQA=\")?, b\"\\xFA\\xEC\\x20\\x55\\0\");\nassert_eq!(URL_SAFE.encode(b\"\\xFF\\xEC\\x20\\x55\\0\"), \"_-wgVQA=\");\n# Ok(())\n# }\n```\n\n### Padding characters\n\nEach base64 character represents 6 bits (2⁶ = 64) of the original binary\ndata, and every 3 bytes of input binary data will encode to 4 base64\ncharacters (8 bits × 3 = 6 bits × 4 = 24 bits).\n\nWhen the input is not an even multiple of 3 bytes in length, [canonical][]\nbase64 encoders insert padding characters at the end, so that the output\nlength is always a multiple of 4:\n\n[canonical]: https://datatracker.ietf.org/doc/html/rfc4648#section-3.5\n\n```\nuse base64::{engine::general_purpose::STANDARD, Engine as _};\n\nassert_eq!(STANDARD.encode(b\"\"),    \"\");\nassert_eq!(STANDARD.encode(b\"f\"),   \"Zg==\");\nassert_eq!(STANDARD.encode(b\"fo\"),  \"Zm8=\");\nassert_eq!(STANDARD.encode(b\"foo\"), \"Zm9v\");\n```\n\nCanonical encoding ensures that base64 encodings will be exactly the same,\nbyte-for-byte, regardless of input length. But the `=` padding characters\naren’t necessary for decoding, and they may be omitted by using a\n[`NO_PAD`][engine::general_purpose::NO_PAD] configuration:\n\n```\nuse base64::{engine::general_purpose::STANDARD_NO_PAD, Engine as _};\n\nassert_eq!(STANDARD_NO_PAD.encode(b\"\"),    \"\");\nassert_eq!(STANDARD_NO_PAD.encode(b\"f\"),   \"Zg\");\nassert_eq!(STANDARD_NO_PAD.encode(b\"fo\"),  \"Zm8\");\nassert_eq!(STANDARD_NO_PAD.encode(b\"foo\"), \"Zm9v\");\n```\n\nThe pre-configured `NO_PAD` engines will reject inputs containing padding\n`=` characters. To encode without padding and still accept padding while\ndecoding, create an [engine][engine::general_purpose::GeneralPurpose] with\nthat [padding mode][engine::DecodePaddingMode].\n\n```\n# use base64::{engine::general_purpose::STANDARD_NO_PAD, Engine as _};\nassert_eq!(STANDARD_NO_PAD.decode(b\"Zm8=\"), Err(base64::DecodeError::InvalidPadding));\n```\n\n### Further customization\n\nDecoding and encoding behavior can be customized by creating an\n[engine][engine::GeneralPurpose] with an [alphabet][alphabet::Alphabet] and\n[padding configuration][engine::GeneralPurposeConfig]:\n\n```\nuse base64::{engine, alphabet, Engine as _};\n\n// bizarro-world base64: +/ as the first symbols instead of the last\nlet alphabet =\n    alphabet::Alphabet::new(\"+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")\n    .unwrap();\n\n// a very weird config that encodes with padding but requires no padding when decoding...?\nlet crazy_config = engine::GeneralPurposeConfig::new()\n    .with_decode_allow_trailing_bits(true)\n    .with_encode_padding(true)\n    .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n\nlet crazy_engine = engine::GeneralPurpose::new(&alphabet, crazy_config);\n\nlet encoded = crazy_engine.encode(b\"abc 123\");\n\n```\n\n## Memory allocation\n\nThe [decode][Engine::decode()] and [encode][Engine::encode()] engine methods\nallocate memory for their results – `decode` returns a `Vec<u8>` and\n`encode` returns a `String`. To instead decode or encode into a buffer that\nyou allocated, use one of the alternative methods:\n\n#### Decoding\n\n| Method                     | Output                        | Allocates memory              |\n| -------------------------- | ----------------------------- | ----------------------------- |\n| [`Engine::decode`]         | returns a new `Vec<u8>`       | always                        |\n| [`Engine::decode_vec`]     | appends to provided `Vec<u8>` | if `Vec` lacks capacity       |\n| [`Engine::decode_slice`]   | writes to provided `&[u8]`    | never\n\n#### Encoding\n\n| Method                     | Output                       | Allocates memory               |\n| -------------------------- | ---------------------------- | ------------------------------ |\n| [`Engine::encode`]         | returns a new `String`       | always                         |\n| [`Engine::encode_string`]  | appends to provided `String` | if `String` lacks capacity     |\n| [`Engine::encode_slice`]   | writes to provided `&[u8]`   | never                          |\n\n## Input and output\n\nThe `base64` crate can [decode][Engine::decode()] and\n[encode][Engine::encode()] values in memory, or\n[`DecoderReader`][read::DecoderReader] and\n[`EncoderWriter`][write::EncoderWriter] provide streaming decoding and\nencoding for any [readable][std::io::Read] or [writable][std::io::Write]\nbyte stream.\n\n#### Decoding\n\n```\n# use std::io;\nuse base64::{engine::general_purpose::STANDARD, read::DecoderReader};\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet mut input = io::stdin();\nlet mut decoder = DecoderReader::new(&mut input, &STANDARD);\nio::copy(&mut decoder, &mut io::stdout())?;\n# Ok(())\n# }\n```\n\n#### Encoding\n\n```\n# use std::io;\nuse base64::{engine::general_purpose::STANDARD, write::EncoderWriter};\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet mut output = io::stdout();\nlet mut encoder = EncoderWriter::new(&mut output, &STANDARD);\nio::copy(&mut io::stdin(), &mut encoder)?;\n# Ok(())\n# }\n```\n\n#### Display\n\nIf you only need a base64 representation for implementing the\n[`Display`][std::fmt::Display] trait, use\n[`Base64Display`][display::Base64Display]:\n\n```\nuse base64::{display::Base64Display, engine::general_purpose::STANDARD};\n\nlet value = Base64Display::new(b\"\\0\\x01\\x02\\x03\", &STANDARD);\nassert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", value));\n```\n\n# Panics\n\nIf length calculations result in overflowing `usize`, a panic will result.","links":{"alphabet::URL_SAFE":"0:395:2688","std::fmt::Display":"2:10136:130","engine::general_purpose::GeneralPurposeConfig":"0:490:2096","engine::general_purpose::STANDARD":"0:322:2093","engine::general_purpose::GeneralPurpose":"0:480:2095","engine::GeneralPurpose":"0:480:2095","`Engine::decode`":"0:350:590","`Engine`":"0:331:1934","alphabet::Alphabet":"0:526:2580","`Engine::encode_slice`":"0:346:2317","engine::DecodePaddingMode":"0:499:2567","Engine::encode()":"0:338:662","`Engine::decode_slice`":"0:358:2543","`Engine::encode_string`":"0:342:2131","std::io::Read":"1:3507:2175","alphabet::STANDARD":"0:394:2093","write::EncoderWriter":"0:140:2246","read::DecoderReader":"0:85:2155","`Engine::encode`":"0:338:662","`Engine::decode_vec`":"0:354:2529","Engine::decode()":"0:350:590","std::io::Write":"1:3564:2281","display::Base64Display":"0:47:2139","engine::general_purpose::URL_SAFE":"0:324:2688","engine::general_purpose::NO_PAD":"0:327:2686","engine::GeneralPurposeConfig":"0:490:2096","`alphabet`":"0:376:1935","`prelude`":"0:473:1180"},"attrs":["#![deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)]","#![forbid(unsafe_code)]","#![allow(clippy::single_component_path_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:38:1930","0:72:1931","0:127:1932","0:229:1933","0:376:1935","0:473:1180","0:375-0:331:1934","0:428-0:409:662","0:429-0:411:1936","0:430-0:414:1937","0:432-0:417:1938","0:433-0:422:1939","0:434-0:558:1940","0:465-0:452:590","0:466-0:454:1941","0:467-0:457:1942","0:469-0:460:1943","0:470-0:463:1944","0:471-0:570:1945","0:472-0:592:1946"],"is_stripped":false}}},"0:242:2094":{"id":"0:242:2094","crate_id":0,"name":"general_purpose","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[1,0],"end":[352,62]},"visibility":"public","docs":"Provides the [GeneralPurpose] engine and associated config types.","links":{"GeneralPurpose":"0:480:2095"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:480:2095","0:490:2096","0:322:2093","0:323:2685","0:324:2688","0:325:2690","0:326:2097","0:327:2686"],"is_stripped":false}}},"2:13134:34465":{"id":"2:13134:34465","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4794:34465"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44526:3785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:516:2457":{"id":"b:2:2789-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13083:3126":{"id":"2:13083:3126","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::rmatches":"2:13086:34451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44431:3780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533":{"id":"0:533","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[54,23],"end":[54,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2789-0:526:2580":{"id":"b:2:2789-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:2369":{"id":"0:209:2369","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder_string_writer.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448":{"id":"0:448","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[67,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2837:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:449:2960"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13013:34445":{"id":"2:13013:34445","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:189:2247":{"id":"b:2:2784-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42468:3504-0:499:2567":{"id":"a:2:42468:3504-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:297:2059":{"id":"0:297:2059","crate_id":0,"name":"Config","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[45,4],"end":[45,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:399:2839":{"id":"0:399:2839","crate_id":0,"name":"BIN_HEX","span":{"filename":"src/alphabet.rs","begin":[204,0],"end":[206,2]},"visibility":"public","docs":"The alphabet used in BinHex 4.0 files.\n\nSee [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:525:724":{"id":"0:525:724","crate_id":0,"name":"fmt","span":{"filename":"src/engine/mod.rs","begin":[451,24],"end":[451,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:570:1945":{"id":"b:2:3610-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:325:2690":{"id":"0:325:2690","crate_id":0,"name":"URL_SAFE_NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[341,0],"end":[341,93]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [NO_PAD] config.","links":{"alphabet::URL_SAFE":"0:395:2688","GeneralPurpose":"0:480:2095","NO_PAD":"0:327:2686"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"a:2:32833:237-0:499:2567":{"id":"a:2:32833:237-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2774-0:47:2139":{"id":"b:2:2774-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13029:29887":{"id":"2:13029:29887","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13028:29886"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:2059":{"id":"0:332:2059","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[41,4],"end":[41,24]},"visibility":"default","docs":"The config type used by this engine","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Config","id":"0:369:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"b:2:2784-0:539:2802":{"id":"b:2:2784-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:588":{"id":"0:588","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:589:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387:336":{"id":"0:387:336","crate_id":0,"name":"as_str","span":{"filename":"src/alphabet.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Create a `&str` from the symbols in the `Alphabet`","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32890:3555-0:490:2096":{"id":"a:2:32890:3555-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32890:3555-0:539:2802":{"id":"a:2:32890:3555-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2774-0:539:2802":{"id":"b:2:2774-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472-0:592:1946":{"id":"0:472-0:592:1946","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,80],"end":[271,96]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::DecodeSliceError","name":"DecodeSliceError","id":"0:592:1946","glob":false}}},"0:545:2805":{"id":"0:545:2805","crate_id":0,"name":"UnprintableByte","span":{"filename":"src/alphabet.rs","begin":[149,4],"end":[149,23]},"visibility":"default","docs":"All bytes must be printable (in the range `[32, 126]`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:547:1764"]},"discriminant":null}}},"b:2:2471-0:570:1945":{"id":"b:2:2471-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:595:1764":{"id":"0:595:1764","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[50,16],"end":[50,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:346:2317":{"id":"0:346:2317","crate_id":0,"name":"encode_slice","span":{"filename":"src/engine/mod.rs","begin":[197,4],"end":[225,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 into a supplied slice.\nWrites into the supplied output buffer.\n\nThis is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\nor statically-allocated buffer).\n\n# Example\n\n```\nuse base64::{Engine as _, engine::general_purpose};\nlet s = b\"hello internet!\";\nlet mut buf = Vec::new();\n// make sure we'll have a slice big enough for base64 + padding\nbuf.resize(s.len() * 4 / 3 + 4, 0);\n\nlet bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();\n\n// shorten our vec down to just what was written\nbuf.truncate(bytes_written);\n\nassert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}],["output_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:499:2567":{"id":"a:2:2997:246-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2473:3115":{"id":"2:2473:3115","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,29],"end":[440,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13016:29857":{"id":"2:13016:29857","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5868:1606":{"id":"5:5868:1606","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:3504-0:516:2457":{"id":"a:2:42468:3504-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[244,9],"end":[244,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:495:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[47,9],"end":[47,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:599:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2471-0:140:2246":{"id":"b:2:2471-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[154,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:392:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:414:1937":{"id":"0:414:1937","crate_id":0,"name":"encode_engine_string","span":{"filename":"src/encode.rs","begin":[38,0],"end":[44,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 into a supplied `String`.\n\n See [Engine::encode_string].","links":{"Engine::encode_string":"0:342:2131"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode_string\")]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode_string"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["output_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5609:35165":{"id":"5:5609:35165","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:3165","`String`":"5:7629:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3165","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2399":{"id":"0:214:2399","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,40],"end":[440,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:189:2247":{"id":"0:189:2247","crate_id":0,"name":"EncoderStringWriter","span":{"filename":"src/write/encoder_string_writer.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"A `Write` implementation that base64-encodes data using the provided config and accumulates the\nresulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is\nthen exposed via `into_inner()`.\n\n# Examples\n\nBuffer base64 in a new String:\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\nlet mut enc = base64::write::EncoderStringWriter::new(&general_purpose::STANDARD);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// get the resulting String\nlet b64_string = enc.into_inner();\n\nassert_eq!(\"YXNkZg==\", &b64_string);\n```\n\nOr, append to an existing `String`, which implements `StrConsumer`:\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\nlet mut buf = String::from(\"base64: \");\n\nlet mut enc = base64::write::EncoderStringWriter::from_consumer(\n    &mut buf,\n    &general_purpose::STANDARD);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// release the &mut reference on buf\nlet _ = enc.into_inner();\n\nassert_eq!(\"base64: YXNkZg==\", &buf);\n```\n\n# Performance\n\nBecause it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain\nbytes to a `io::Write`.","links":{"StrConsumer":"0:210:2248"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:194","0:200","a:2:42468:3504-0:189:2247","a:2:2997:246-0:189:2247","a:2:42469:3503-0:189:2247","a:2:32833:237-0:189:2247","a:2:32890:3555-0:189:2247","b:2:3610-0:189:2247","b:2:2471-0:189:2247","b:2:2789-0:189:2247","b:2:2784-0:189:2247","b:2:2778-0:189:2247","b:2:2774-0:189:2247","b:2:2474-0:189:2247","0:204"]}}},"a:2:32890:3555-0:558:1940":{"id":"a:2:32890:3555-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:425:724":{"id":"0:425:724","crate_id":0,"name":"fmt","span":{"filename":"src/encode.rs","begin":[152,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:140:2246":{"id":"b:2:2784-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[47,23],"end":[47,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:2806":{"id":"0:548:2806","crate_id":0,"name":"ReservedByte","span":{"filename":"src/alphabet.rs","begin":[151,4],"end":[151,20]},"visibility":"default","docs":"`=` cannot be used","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:550:1764"]},"discriminant":null}}},"b:2:2789-0:189:2247":{"id":"b:2:2789-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:530:458":{"id":"0:530:458","crate_id":0,"name":"clone","span":{"filename":"src/alphabet.rs","begin":[54,9],"end":[54,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:882":{"id":"2:13004:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12073:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:490:2096":{"id":"b:2:2784-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2474-0:47:2139":{"id":"b:2:2474-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13007:34443":{"id":"2:13007:34443","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:189:2247":{"id":"b:2:2774-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225-0:140:2246":{"id":"0:225-0:140:2246","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[6,4],"end":[6,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::encoder::EncoderWriter","name":"EncoderWriter","id":"0:140:2246","glob":false}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[166,0],"end":[166,43]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2837:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[151,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:425:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5600:35163":{"id":"5:5600:35163","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[55,0],"end":[73,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:198:2390","0:199:2223"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32890:3555-0:189:2247":{"id":"a:2:32890:3555-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13015:29861":{"id":"2:13015:29861","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[142,20],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370:2082":{"id":"0:370:2082","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/mod.rs","begin":[419,4],"end":[419,37]},"visibility":"default","docs":"Returns `true` if padding should be added after the encoded output.\n\nPadding is added outside the engine's encode() since the engine may be used\nto encode only a chunk of the overall output, so it can't always know when\nthe output is \"done\" and would therefore need padding (if configured).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2784-0:516:2457":{"id":"b:2:2784-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[160,0],"end":[160,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2837:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[251,0],"end":[316,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:314:1048","0:315:2661","0:316:2669","0:317:2680"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:451:751":{"id":"0:451:751","crate_id":0,"name":"from","span":{"filename":"src/decode.rs","begin":[77,4],"end":[79,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:592:1946":{"id":"b:5:5866-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13097:34455":{"id":"2:13097:34455","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:85:2155":{"id":"b:2:2784-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13031:6662":{"id":"2:13031:6662","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44197:3168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:558:1940":{"id":"b:2:2471-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2471-0:592:1946":{"id":"b:2:2471-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2784-0:570:1945":{"id":"b:2:2784-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2997:246-0:47:2139":{"id":"a:2:2997:246-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2778-0:189:2247":{"id":"b:2:2778-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42469:3503-0:558:1940":{"id":"a:2:42469:3503-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32833:237-0:47:2139":{"id":"a:2:32833:237-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:38:1930":{"id":"0:38:1930","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[88,1]},"visibility":"public","docs":"Enables base64'd output anywhere you might use a `Display` implementation, like a format string.\n\n```\nuse base64::{display::Base64Display, engine::general_purpose::STANDARD};\n\nlet data = vec![0x0, 0x1, 0x2, 0x3];\nlet wrapper = Base64Display::new(&data, &STANDARD);\n\nassert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:47:2139"],"is_stripped":false}}},"0:586:724":{"id":"0:586:724","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[9,16],"end":[9,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[451,24],"end":[451,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:525:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:1931":{"id":"0:124:1931","crate_id":0,"name":"read","span":{"filename":"src/read/decoder.rs","begin":[213,4],"end":[315,5]},"visibility":"default","docs":"Decode input from the wrapped reader.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nwritten in `buf`.\n\nWhere possible, this function buffers base64 to minimize the number of read() calls to the\ndelegate reader.\n\n# Errors\n\nAny errors emitted by the delegate reader are returned. Decoding errors due to invalid\nbase64 are also possible, and will have `io::ErrorKind::InvalidData`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:3691":{"id":"2:13052:3691","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42346:191","prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:3503-0:47:2139":{"id":"a:2:42469:3503-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32890:3555-0:570:1945":{"id":"a:2:32890:3555-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[142,20],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:557:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2789-0:570:1945":{"id":"b:2:2789-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:526:2580":{"id":"b:2:2778-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13068:34450":{"id":"2:13068:34450","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12697:3175","str::split":"2:13056:28212","prim@char":"1:12073:454","str::split_terminator":"2:13065:34449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44295:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[318,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:319:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498:724":{"id":"0:498:724","crate_id":0,"name":"fmt","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[244,22],"end":[244,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:516:2457":{"id":"b:2:2778-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2774-0:570:1945":{"id":"b:2:2774-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326:2097":{"id":"0:326:2097","crate_id":0,"name":"PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[347,0],"end":[347,66]},"visibility":"public","docs":"Include padding bytes when encoding, and require that they be present when decoding.\n\nThis is the standard per the base64 RFC, but consider using [NO_PAD] instead as padding serves\nlittle purpose in practice.","links":{"NO_PAD":"0:327:2686"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"2:13129:29683":{"id":"2:13129:29683","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:480:2095":{"id":"b:2:3610-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2471-0:85:2155":{"id":"b:2:2471-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32890:3555-0:526:2580":{"id":"a:2:32890:3555-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[106,0],"end":[110,1]},"visibility":"default","docs":"Pushes the str onto the end of the String","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:2399"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13045:29901":{"id":"2:13045:29901","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13127:31071":{"id":"2:13127:31071","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40317:14857","Self::is_ascii":"2:13126:29686"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40317:14857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584:458":{"id":"0:584:458","crate_id":0,"name":"clone","span":{"filename":"src/decode.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:499:2567":{"id":"b:2:2789-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42468:3504-0:47:2139":{"id":"a:2:42468:3504-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2997:246-0:490:2096":{"id":"a:2:2997:246-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:444:724":{"id":"0:444:724","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[31,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:490:2096":{"id":"b:2:2778-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:434-0:558:1940":{"id":"0:434-0:558:1940","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[264,58],"end":[264,74]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::EncodeSliceError","name":"EncodeSliceError","id":"0:558:1940","glob":false}}},"2:13014:334":{"id":"2:13014:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13015:29861","`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:85:2155":{"id":"b:2:3610-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32833:237-0:189:2247":{"id":"a:2:32833:237-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:342:2131":{"id":"0:342:2131","crate_id":0,"name":"encode_string","span":{"filename":"src/engine/mod.rs","begin":[158,4],"end":[171,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 into a supplied `String`.\nWrites into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n\n# Example\n\n```rust\nuse base64::{Engine as _, engine::{self, general_purpose}, alphabet};\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n\nfn main() {\n    let mut buf = String::new();\n    general_purpose::STANDARD.encode_string(b\"hello world~\", &mut buf);\n    println!(\"{}\", buf);\n\n    buf.clear();\n    CUSTOM_ENGINE.encode_string(b\"hello internet~\", &mut buf);\n    println!(\"{}\", buf);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", test))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}],["output_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:2213":{"id":"0:575:2213","crate_id":0,"name":"InvalidLength","span":{"filename":"src/decode.rs","begin":[19,4],"end":[19,17]},"visibility":"default","docs":"The length of the input is invalid.\nA typical cause of this is stray trailing whitespace or other separator bytes.\nIn the case where excess trailing bytes have produced an invalid length *and* the last byte\nis also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\nwill be emitted instead of `InvalidLength` to make the issue easier to debug.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13132:31075":{"id":"2:13132:31075","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36345"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:724":{"id":"0:447:724","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[58,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:34446":{"id":"2:13024:34446","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12079:1549","str::slice_mut_unchecked":"2:13025:34447","crate::ops::Index":"2:39963:3161"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5610:2995":{"id":"5:5610:2995","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:480:2095":{"id":"a:2:32833:237-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:364:2550":{"id":"0:364:2550","crate_id":0,"name":"decode_slice_unchecked","span":{"filename":"src/engine/mod.rs","begin":[387,4],"end":[406,5]},"visibility":"default","docs":"Decode the input into the provided output slice.\n\nReturns the number of bytes written to the slice.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nSee [crate::decoded_len_estimate] for calculating buffer sizes.\n\nSee [Engine::decode_slice] for a version that returns an error instead of panicking if the output\nbuffer is too small.\n\n# Panics\n\nPanics if the provided output buffer is too small for the decoded data.","links":{"crate::decoded_len_estimate":"0:463:1944","Engine::decode_slice":"0:358:2543"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:2431":{"id":"0:371:2431","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[427,0],"end":[434,1]},"visibility":"public","docs":"The decode estimate used by an engine implementation. Users do not need to interact with this;\nit is only for engine implementors.\n\nImplementors may store relevant data here when constructing this to avoid having to calculate\nthem again during actual decoding.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:372:1944"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:397:2831":{"id":"0:397:2831","crate_id":0,"name":"BCRYPT","span":{"filename":"src/alphabet.rs","begin":[190,0],"end":[192,2]},"visibility":"public","docs":"The bcrypt alphabet.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"a:2:42468:3504-0:570:1945":{"id":"a:2:42468:3504-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13012:2799":{"id":"2:13012:2799","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12243:2086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465-0:452:590":{"id":"0:465-0:452:590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,24],"end":[269,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::decode","name":"decode","id":"0:452:590","glob":false}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[142,9],"end":[142,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:552:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:2155":{"id":"0:85:2155","crate_id":0,"name":"DecoderReader","span":{"filename":"src/read/decoder.rs","begin":[33,0],"end":[58,1]},"visibility":"public","docs":"A `Read` implementation that decodes base64 data read from an underlying reader.\n\n# Examples\n\n```\nuse std::io::Read;\nuse std::io::Cursor;\nuse base64::engine::general_purpose;\n\n// use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.\nlet mut wrapped_reader = Cursor::new(b\"YXNkZg==\");\nlet mut decoder = base64::read::DecoderReader::new(\n    &mut wrapped_reader,\n    &general_purpose::STANDARD);\n\n// handle errors as you normally would\nlet mut result = Vec::new();\ndecoder.read_to_end(&mut result).unwrap();\n\nassert_eq!(b\"asdf\", &result[..]);\n\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3507:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:106","a:2:42468:3504-0:85:2155","a:2:2997:246-0:85:2155","a:2:42469:3503-0:85:2155","a:2:32833:237-0:85:2155","a:2:32890:3555-0:85:2155","b:2:3610-0:85:2155","b:2:2471-0:85:2155","b:2:2789-0:85:2155","b:2:2784-0:85:2155","b:2:2778-0:85:2155","b:2:2774-0:85:2155","b:2:2474-0:85:2155","0:101","0:120"]}}},"2:13037:34448":{"id":"2:13037:34448","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44491:3774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[248,0],"end":[398,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_vectored","write_all","write_all_vectored","write_fmt","by_ref","is_write_vectored"],"trait":{"name":"Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["0:175:1932","0:179:2369"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:589:667":{"id":"0:589:667","crate_id":0,"name":"eq","span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:31074":{"id":"2:13131:31074","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36345"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:354:2529":{"id":"0:354:2529","crate_id":0,"name":"decode_vec","span":{"filename":"src/engine/mod.rs","begin":[299,4],"end":[330,5]},"visibility":"default","docs":"Decode the `input` into the supplied `buffer`.\n\nWrites into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\nReturns a `Result` containing an empty tuple, aka `()`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, alphabet, engine::{self, general_purpose}};\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);\n\nfn main() {\n    use base64::Engine;\n    let mut buffer = Vec::<u8>::new();\n    // with the default engine\n    general_purpose::STANDARD\n        .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();\n    println!(\"{:?}\", buffer);\n\n    buffer.clear();\n\n    // with a custom engine\n    CUSTOM_ENGINE.decode_vec(\n        \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n        &mut buffer,\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", test))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Vec","id":"5:7052:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:526:2580":{"id":"a:2:2997:246-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:417:1938":{"id":"0:417:1938","crate_id":0,"name":"encode_engine_slice","span":{"filename":"src/encode.rs","begin":[51,0],"end":[57,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 into a supplied slice.\n\nSee [Engine::encode_slice].","links":{"Engine::encode_slice":"0:346:2317"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode_slice\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode_slice"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["output_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:2081":{"id":"0:305:2081","crate_id":0,"name":"config","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[187,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:331:1934","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475-0:322:2093":{"id":"0:475-0:322:2093","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[17,0],"end":[17,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::engine::general_purpose::STANDARD","name":"BASE64_STANDARD","id":"0:322:2093","glob":false}}},"b:2:2474-0:592:1946":{"id":"b:2:2474-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,22],"end":[440,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32890:3555-0:516:2457":{"id":"a:2:32890:3555-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:579:1764":{"id":"0:579:1764","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:105:724":{"id":"0:105:724","crate_id":0,"name":"fmt","span":{"filename":"src/read/decoder.rs","begin":[61,4],"end":[71,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499:2567":{"id":"0:499:2567","crate_id":0,"name":"DecodePaddingMode","span":{"filename":"src/engine/mod.rs","begin":[441,0],"end":[448,1]},"visibility":"public","docs":"Controls how pad bytes are handled when decoding.\n\nEach [Engine] must support at least the behavior indicated by\n[DecodePaddingMode::RequireCanonical], and may support other modes.","links":{"DecodePaddingMode::RequireCanonical":"0:502:2571","Engine":"0:331:1934"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:500:2569","0:502:2571","0:504:2573"],"impls":["a:2:42468:3504-0:499:2567","a:2:2997:246-0:499:2567","a:2:42469:3503-0:499:2567","a:2:32833:237-0:499:2567","a:2:32890:3555-0:499:2567","b:2:3610-0:499:2567","b:2:2471-0:499:2567","b:2:2789-0:499:2567","b:2:2784-0:499:2567","b:2:2778-0:499:2567","b:2:2774-0:499:2567","b:2:2474-0:499:2567","b:5:725-0:499:2567","0:508","0:506","0:512","0:511","0:509","0:514"]}}},"b:5:725-0:526:2580":{"id":"b:5:725-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3610-0:490:2096":{"id":"b:2:3610-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[82,0],"end":[90,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_vectored","write_all","write_all_vectored","write_fmt","by_ref","is_write_vectored"],"trait":{"name":"Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:208:1932","0:209:2369"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429-0:411:1936":{"id":"0:429-0:411:1936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,32],"end":[262,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::encode_engine","name":"encode_engine","id":"0:411:1936","glob":false}}},"0:321:2082":{"id":"0:321:2082","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[326,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:480:2095":{"id":"a:2:2997:246-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210:2248":{"id":"0:210:2248","crate_id":0,"name":"StrConsumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[93,0],"end":[96,1]},"visibility":"public","docs":"An abstraction around consuming `str`s produced by base64 encoding.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:211:2399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:215","0:212"]}}},"0:376:1935":{"id":"0:376:1935","crate_id":0,"name":"alphabet","span":{"filename":"src/alphabet.rs","begin":[1,0],"end":[285,1]},"visibility":"public","docs":"Provides [Alphabet] and constants for alphabets commonly used in the wild.","links":{"Alphabet":"0:526:2580"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:526:2580","0:539:2802","0:394:2093","0:395:2688","0:396:2828","0:397:2831","0:398:2835","0:399:2839"],"is_stripped":false}}},"2:13034:32089":{"id":"2:13034:32089","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13035:32109"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44501:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330-0:490:2096":{"id":"0:330-0:490:2096","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[22,42],"end":[22,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"general_purpose::GeneralPurposeConfig","name":"GeneralPurposeConfig","id":"0:490:2096","glob":false}}},"b:2:2784-0:47:2139":{"id":"b:2:2784-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2788:1631":{"id":"2:2788:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13112:29902":{"id":"2:13112:29902","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:480:2095":{"id":"b:2:2784-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:500:2569":{"id":"0:500:2569","crate_id":0,"name":"Indifferent","span":{"filename":"src/engine/mod.rs","begin":[443,4],"end":[443,15]},"visibility":"default","docs":"Canonical padding is allowed, but any fewer padding bytes than that is also allowed.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2784-0:526:2580":{"id":"b:2:2784-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:460:1943":{"id":"0:460:1943","crate_id":0,"name":"decode_engine_slice","span":{"filename":"src/decode.rs","begin":[121,0],"end":[127,1]},"visibility":"public","docs":"Decode the input into the provided output slice.\n\nSee [Engine::decode_slice].","links":{"Engine::decode_slice":"0:358:2543"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode_slice"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[244,22],"end":[244,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2474-0:570:1945":{"id":"b:2:2474-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:599:458":{"id":"0:599:458","crate_id":0,"name":"clone","span":{"filename":"src/decode.rs","begin":[47,9],"end":[47,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13121:34463":{"id":"2:13121:34463","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471-0:570:1945":{"id":"0:471-0:570:1945","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,67],"end":[271,78]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::DecodeError","name":"DecodeError","id":"0:570:1945","glob":false}}},"0:532:724":{"id":"0:532:724","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[54,16],"end":[54,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:584:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162:1048":{"id":"0:162:1048","crate_id":0,"name":"new","span":{"filename":"src/write/encoder.rs","begin":[98,4],"end":[108,5]},"visibility":"public","docs":"Create a new encoder that will write to the provided delegate writer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["delegate",{"generic":"W"}],["engine",{"borrowed_ref":{"lifetime":"'e","mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:480:2095":{"id":"b:2:2789-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:728:3746":{"id":"5:728:3746","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:140:2246":{"id":"b:2:2789-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,34],"end":[9,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516:2457":{"id":"0:516:2457","crate_id":0,"name":"DecodeMetadata","span":{"filename":"src/engine/mod.rs","begin":[452,0],"end":[457,1]},"visibility":"public","docs":"Metadata about the result of a decode operation","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42468:3504-0:516:2457","a:2:2997:246-0:516:2457","a:2:42469:3503-0:516:2457","a:2:32833:237-0:516:2457","a:2:32890:3555-0:516:2457","b:2:3610-0:516:2457","b:2:2471-0:516:2457","b:2:2789-0:516:2457","b:2:2784-0:516:2457","b:2:2778-0:516:2457","b:2:2774-0:516:2457","b:2:2474-0:516:2457","0:524","0:522","0:519","0:520"]}}},"0:604:667":{"id":"0:604:667","crate_id":0,"name":"eq","span":{"filename":"src/decode.rs","begin":[47,23],"end":[47,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1048":{"id":"0:57:1048","crate_id":0,"name":"new","span":{"filename":"src/display.rs","begin":[25,4],"end":[30,5]},"visibility":"public","docs":"Create a `Base64Display` with the provided engine.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["engine",{"borrowed_ref":{"lifetime":"'e","mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110:1048":{"id":"0:110:1048","crate_id":0,"name":"new","span":{"filename":"src/read/decoder.rs","begin":[76,4],"end":[89,5]},"visibility":"public","docs":"Create a new decoder that will read from the provided reader `r`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["reader",{"generic":"R"}],["engine",{"borrowed_ref":{"lifetime":"'e","mutable":false,"type":{"generic":"E"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:47:2139":{"id":"b:2:3610-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5593:35161":{"id":"5:5593:35161","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3165","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:3165","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:662":{"id":"0:409:662","crate_id":0,"name":"encode","span":{"filename":"src/encode.rs","begin":[18,0],"end":[20,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the [`STANDARD` engine](STANDARD).\n\nSee [Engine::encode].","links":{"STANDARD":"0:322:2093","Engine::encode":"0:338:662"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}]],"output":{"resolved_path":{"name":"alloc::string::String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:539:2802":{"id":"b:2:2778-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42468:3504-0:526:2580":{"id":"a:2:42468:3504-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[325,0],"end":[329,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Config","id":"0:369:2059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:321:2082"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3610-0:499:2567":{"id":"b:2:3610-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:521:667":{"id":"0:521:667","crate_id":0,"name":"eq","span":{"filename":"src/engine/mod.rs","begin":[451,9],"end":[451,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[23,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:57:1048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13102:34458":{"id":"2:13102:34458","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:526:2580":{"id":"b:2:2774-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:47:2139":{"id":"b:2:2778-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13128:29687":{"id":"2:13128:29687","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:85:2155":{"id":"b:2:2774-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:317:2680":{"id":"0:317:2680","crate_id":0,"name":"with_decode_padding_mode","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[310,4],"end":[315,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_padding_mode` setting.\n\nPadding is not useful in terms of representing encoded data -- it makes no difference to\nthe decoder if padding is present or not, so if you have some un-padded input to decode, it\nis perfectly fine to use `DecodePaddingMode::Indifferent` to prevent errors from being\nemitted.\n\nHowever, since in practice\n[people who learned nothing from BER vs DER seem to expect base64 to have one canonical encoding](https://eprint.iacr.org/2022/361),\nthe default setting is the stricter `DecodePaddingMode::RequireCanonicalPadding`.\n\nOr, if \"canonical\" in your circumstance means _no_ padding rather than padding to the\nnext multiple of four, there's `DecodePaddingMode::RequireNoPadding`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["mode",{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:452:590":{"id":"0:452:590","crate_id":0,"name":"decode","span":{"filename":"src/decode.rs","begin":[87,0],"end":[89,1]},"visibility":"public","docs":"Decode base64 using the [`STANDARD` engine](STANDARD).\n\nSee [Engine::decode].","links":{"STANDARD":"0:322:2093","Engine::decode":"0:350:590"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7052:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:140:2246":{"id":"a:2:32833:237-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:580:1765":{"id":"0:580:1765","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[24,29],"end":[24,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"a:2:42469:3503-0:140:2246":{"id":"a:2:42469:3503-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"W"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42468:3504-0:592:1946":{"id":"a:2:42468:3504-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2471-0:490:2096":{"id":"b:2:2471-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:1931":{"id":"0:72:1931","crate_id":0,"name":"read","span":{"filename":"src/read/mod.rs","begin":[1,0],"end":[6,18]},"visibility":"public","docs":"Implementations of `io::Read` to transparently decode base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:126-0:85:2155"],"is_stripped":false}}},"2:13118:34462":{"id":"2:13118:34462","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:490:2096":{"id":"a:2:32833:237-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:2223":{"id":"0:170:2223","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder.rs","begin":[241,4],"end":[245,5]},"visibility":"public","docs":"Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\nto.\n\nNormally this method should not be needed, since `finish()` returns the inner writer if\nit completes successfully. That will also ensure all data has been flushed, which the\n`into_inner()` function does *not* do.\n\nCalling this method after `finish()` has completed successfully will panic, since the\nwriter has already been returned.\n\nThis method may be useful if the writer implements additional APIs beyond the `Write`\ntrait. Note that the inner writer might be in an error state or have an incomplete\nbase64 string written to it.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"W"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:458":{"id":"0:489:458","crate_id":0,"name":"clone","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[23,16],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476-0:323:2685":{"id":"0:476-0:323:2685","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[18,0],"end":[18,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::engine::general_purpose::STANDARD_NO_PAD","name":"BASE64_STANDARD_NO_PAD","id":"0:323:2685","glob":false}}},"2:13033:2072":{"id":"2:13033:2072","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44213:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:29899":{"id":"2:13039:29899","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[451,20],"end":[451,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:467-0:457:1942":{"id":"0:467-0:457:1942","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,47],"end":[269,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::decode_engine_vec","name":"decode_engine_vec","id":"0:457:1942","glob":false}}},"0:567:667":{"id":"0:567:667","crate_id":0,"name":"eq","span":{"filename":"src/encode.rs","begin":[145,23],"end":[145,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:29858":{"id":"2:13018:29858","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:2835":{"id":"0:398:2835","crate_id":0,"name":"IMAP_MUTF7","span":{"filename":"src/alphabet.rs","begin":[197,0],"end":[199,2]},"visibility":"public","docs":"The alphabet used in IMAP-modified UTF-7 (with `+` and `,`).\n\nSee [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:490:2096":{"id":"0:490:2096","crate_id":0,"name":"GeneralPurposeConfig","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[245,0],"end":[249,1]},"visibility":"public","docs":"Contains configuration parameters for base64 encoding and decoding.\n\n```\n# use base64::engine::GeneralPurposeConfig;\nlet config = GeneralPurposeConfig::new()\n    .with_encode_padding(false);\n    // further customize using `.with_*` methods as needed\n```\n\nThe constants [PAD] and [NO_PAD] cover most use cases.\n\nTo specify the characters used, see [Alphabet].","links":{"PAD":"0:326:2097","Alphabet":"0:526:2580","NO_PAD":"0:327:2686"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:313","a:2:42468:3504-0:490:2096","a:2:2997:246-0:490:2096","a:2:42469:3503-0:490:2096","a:2:32833:237-0:490:2096","a:2:32890:3555-0:490:2096","b:2:3610-0:490:2096","b:2:2471-0:490:2096","b:2:2789-0:490:2096","b:2:2784-0:490:2096","b:2:2778-0:490:2096","b:2:2774-0:490:2096","b:2:2474-0:490:2096","b:5:725-0:490:2096","0:494","0:320","0:318","0:497","0:496"]}}},"b:2:2474-0:499:2567":{"id":"b:2:2474-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:227-0:189:2247":{"id":"0:227-0:189:2247","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[7,28],"end":[7,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::encoder_string_writer::EncoderStringWriter","name":"EncoderStringWriter","id":"0:189:2247","glob":false}}},"0:487:724":{"id":"0:487:724","crate_id":0,"name":"fmt","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[23,9],"end":[23,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[54,27],"end":[54,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:581:2215":{"id":"0:581:2215","crate_id":0,"name":"InvalidPadding","span":{"filename":"src/decode.rs","begin":[27,4],"end":[27,18]},"visibility":"default","docs":"The nature of the padding was not as configured: absent or incorrect when it must be\ncanonical, or present when it must be absent, etc.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:2792:138":{"id":"2:2792:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32761:3303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32890:3555-0:140:2246":{"id":"a:2:32890:3555-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:570:1945":{"id":"0:570:1945","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[10,0],"end":[28,1]},"visibility":"public","docs":"Errors that can occur while decoding.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:571:2211","0:575:2213","0:577:2214","0:581:2215"],"impls":["a:2:42468:3504-0:570:1945","a:2:2997:246-0:570:1945","a:2:42469:3503-0:570:1945","a:2:32833:237-0:570:1945","a:2:32890:3555-0:570:1945","b:2:3610-0:570:1945","b:2:2471-0:570:1945","b:2:2789-0:570:1945","b:2:2784-0:570:1945","b:2:2778-0:570:1945","b:2:2774-0:570:1945","b:2:2474-0:570:1945","b:5:5866-0:570:1945","b:5:725-0:570:1945","0:583","0:585","0:590","0:588","0:587","0:443","0:445","0:450"]}}},"2:13026:29882":{"id":"2:13026:29882","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13028:29886","str::split_at_mut":"2:13027:29883"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:189:2247":{"id":"b:2:3610-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13086:34451":{"id":"2:13086:34451","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::matches":"2:13083:3126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44449:3781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:3503-0:539:2802":{"id":"a:2:42469:3503-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13109:26692":{"id":"2:13109:26692","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,16],"end":[9,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:586:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:592:1946":{"id":"b:5:725-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:480:2095":{"id":"0:480:2095","crate_id":0,"name":"GeneralPurpose","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[24,0],"end":[28,1]},"visibility":"public","docs":"A general-purpose base64 engine.\n\n- It uses no vector CPU instructions, so it will work on any system.\n- It is reasonably fast (~2-3GiB/s).\n- It is not constant-time, though, so it is vulnerable to timing side-channel attacks. For loading cryptographic keys, etc, it is suggested to use the forthcoming constant-time implementation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:294","a:2:42468:3504-0:480:2095","a:2:2997:246-0:480:2095","a:2:42469:3503-0:480:2095","a:2:32833:237-0:480:2095","a:2:32890:3555-0:480:2095","b:2:3610-0:480:2095","b:2:2471-0:480:2095","b:2:2789-0:480:2095","b:2:2784-0:480:2095","b:2:2778-0:480:2095","b:2:2774-0:480:2095","b:2:2474-0:480:2095","b:5:725-0:480:2095","0:296","0:488","0:486"]}}},"0:337:2081":{"id":"0:337:2081","crate_id":0,"name":"config","span":{"filename":"src/engine/mod.rs","begin":[99,4],"end":[99,38]},"visibility":"default","docs":"Returns the config for this engine.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:331:1934","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:725-0:480:2095":{"id":"b:5:725-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[145,9],"end":[145,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:570:1945":{"id":"b:5:725-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42469:3503-0:499:2567":{"id":"a:2:42469:3503-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:369:2059":{"id":"0:369:2059","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[410,0],"end":[420,1]},"visibility":"public","docs":"The minimal level of configuration that engines must support.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:370:2082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:320"]}}},"b:5:5866-0:570:1945":{"id":"b:5:5866-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:338:662":{"id":"0:338:662","crate_id":0,"name":"encode","span":{"filename":"src/engine/mod.rs","begin":[118,4],"end":[134,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 using the provided `Engine`.\nReturns a `String`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n\nlet b64 = general_purpose::STANDARD.encode(b\"hello world~\");\nprintln!(\"{}\", b64);\n\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n\nlet b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");","links":{},"attrs":["#[cfg(any(feature = \"alloc\", test))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:29682":{"id":"2:13130:29682","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5594:2935":{"id":"5:5594:2935","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:2686":{"id":"0:327:2686","crate_id":0,"name":"NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[350,0],"end":[352,62]},"visibility":"public","docs":"Don't add padding when encoding, and require no padding when decoding.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:469-0:460:1943":{"id":"0:469-0:460:1943","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,24],"end":[271,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::decode::decode_engine_slice","name":"decode_engine_slice","id":"0:460:1943","glob":false}}},"a:2:2997:246-0:140:2246":{"id":"a:2:2997:246-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:562:458":{"id":"0:562:458","crate_id":0,"name":"clone","span":{"filename":"src/encode.rs","begin":[145,9],"end":[145,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:570:1945":{"id":"a:2:2997:246-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3610-0:558:1940":{"id":"b:2:3610-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540:2213":{"id":"0:540:2213","crate_id":0,"name":"InvalidLength","span":{"filename":"src/alphabet.rs","begin":[145,4],"end":[145,17]},"visibility":"default","docs":"Alphabets must be 64 ASCII bytes","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:323:2685":{"id":"0:323:2685","crate_id":0,"name":"STANDARD_NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[335,0],"end":[335,93]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [NO_PAD] config.","links":{"NO_PAD":"0:327:2686","GeneralPurpose":"0:480:2095","alphabet::STANDARD":"0:394:2093"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[145,16],"end":[145,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:564:724":{"id":"0:564:724","crate_id":0,"name":"fmt","span":{"filename":"src/encode.rs","begin":[145,16],"end":[145,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:593:1945":{"id":"0:593:1945","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[50,4],"end":[50,28]},"visibility":"default","docs":"A [DecodeError] occurred","links":{"DecodeError":"0:570:1945"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:595:1764"]},"discriminant":null}}},"b:2:2774-0:499:2567":{"id":"b:2:2774-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:314:1048":{"id":"0:314:1048","crate_id":0,"name":"new","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[257,4],"end":[264,5]},"visibility":"public","docs":"Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and\n`decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.\n\nThis probably matches most people's expectations, but consider disabling padding to save\na few bytes unless you specifically need it for compatibility with some legacy system.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2476:26458":{"id":"2:2476:26458","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:2571":{"id":"0:502:2571","crate_id":0,"name":"RequireCanonical","span":{"filename":"src/engine/mod.rs","begin":[445,4],"end":[445,20]},"visibility":"default","docs":"Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32833:237-0:558:1940":{"id":"a:2:32833:237-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:724":{"id":"0:157:724","crate_id":0,"name":"fmt","span":{"filename":"src/write/encoder.rs","begin":[84,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2139":{"id":"0:47:2139","crate_id":0,"name":"Base64Display","span":{"filename":"src/display.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"A convenience wrapper for base64'ing bytes into a format string without heap allocation.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:53","a:2:42468:3504-0:47:2139","a:2:2997:246-0:47:2139","a:2:42469:3503-0:47:2139","a:2:32833:237-0:47:2139","a:2:32890:3555-0:47:2139","b:2:3610-0:47:2139","b:2:2471-0:47:2139","b:2:2789-0:47:2139","b:2:2784-0:47:2139","b:2:2778-0:47:2139","b:2:2774-0:47:2139","b:2:2474-0:47:2139","b:5:5866-0:47:2139","0:58"]}}},"0:372:1944":{"id":"0:372:1944","crate_id":0,"name":"decoded_len_estimate","span":{"filename":"src/engine/mod.rs","begin":[433,4],"end":[433,44]},"visibility":"default","docs":"Returns a conservative (err on the side of too big) estimate of the decoded length to use\nfor pre-allocating buffers, etc.\n\nThe estimate must be no larger than the next largest complete triple of decoded bytes.\nThat is, the final quad of tokens to decode may be assumed to be complete with no padding.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13124:34464":{"id":"2:13124:34464","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12658:137","`FromStr`":"2:12657:3171"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12657:3171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12657:3171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:592:1946":{"id":"b:2:3610-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:499:2567":{"id":"b:2:2778-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32890:3555-0:592:1946":{"id":"a:2:32890:3555-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2474-0:140:2246":{"id":"b:2:2474-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[23,16],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2474-0:539:2802":{"id":"b:2:2474-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[145,23],"end":[145,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2778-0:592:1946":{"id":"b:2:2778-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,16],"end":[440,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:592:1946":{"id":"0:592:1946","crate_id":0,"name":"DecodeSliceError","span":{"filename":"src/decode.rs","begin":[48,0],"end":[55,1]},"visibility":"public","docs":"Errors that can occur while decoding into a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:593:1945","0:596:2496"],"impls":["a:2:42468:3504-0:592:1946","a:2:2997:246-0:592:1946","a:2:42469:3503-0:592:1946","a:2:32833:237-0:592:1946","a:2:32890:3555-0:592:1946","b:2:3610-0:592:1946","b:2:2471-0:592:1946","b:2:2789-0:592:1946","b:2:2784-0:592:1946","b:2:2778-0:592:1946","b:2:2774-0:592:1946","b:2:2474-0:592:1946","b:5:5866-0:592:1946","b:5:725-0:592:1946","0:603","0:600","0:602","0:605","0:598","0:450","0:448","0:446"]}}},"0:216:2399":{"id":"0:216:2399","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[107,4],"end":[109,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:490:2096":{"id":"b:2:2474-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2784-0:558:1940":{"id":"b:2:2784-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2784-0:499:2567":{"id":"b:2:2784-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[74,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3507:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:110:1048","0:119:2223"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2997:246-0:189:2247":{"id":"a:2:2997:246-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5608:35164":{"id":"5:5608:35164","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:85:2155":{"id":"a:2:2997:246-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42468:3504-0:539:2802":{"id":"a:2:42468:3504-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13101:34457":{"id":"2:13101:34457","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:2802":{"id":"0:539:2802","crate_id":0,"name":"ParseAlphabetError","span":{"filename":"src/alphabet.rs","begin":[143,0],"end":[152,1]},"visibility":"public","docs":"Possible errors when constructing an [Alphabet] from a `str`.","links":{"Alphabet":"0:526:2580"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:540:2213","0:542:2809","0:545:2805","0:548:2806"],"impls":["a:2:42468:3504-0:539:2802","a:2:2997:246-0:539:2802","a:2:42469:3503-0:539:2802","a:2:32833:237-0:539:2802","a:2:32890:3555-0:539:2802","b:2:3610-0:539:2802","b:2:2471-0:539:2802","b:2:2789-0:539:2802","b:2:2784-0:539:2802","b:2:2778-0:539:2802","b:2:2774-0:539:2802","b:2:2474-0:539:2802","b:5:5866-0:539:2802","0:556","0:555","0:391","0:393","0:553","0:551"]}}},"b:2:2789-0:539:2802":{"id":"b:2:2789-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13003":{"id":"2:13003","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13004:882","2:13005:2194","2:13006:34442","2:13007:34443","2:13009:34444","2:13012:2799","2:13013:34445","2:13014:334","2:13015:29861","2:13016:29857","2:13018:29858","2:13020:29859","2:13022:29860","2:13024:34446","2:13025:34447","2:13026:29882","2:13027:29883","2:13028:29886","2:13029:29887","2:13031:6662","2:13032:6784","2:13033:2072","2:13034:32089","2:13035:32109","2:13036:28213","2:13037:34448","2:13038:32105","2:13039:29899","2:13042:29900","2:13045:29901","2:13048:3725","2:13052:3691","2:13056:28212","2:13059:29889","2:13062:29891","2:13065:34449","2:13068:34450","2:13071:29893","2:13074:29895","2:13077:29897","2:13080:29898","2:13083:3126","2:13086:34451","2:13089:34452","2:13092:34453","2:13095:34454","2:13097:34455","2:13099:34456","2:13101:34457","2:13102:34458","2:13103:34459","2:13106:34460","2:13109:26692","2:13112:29902","2:13115:34461","2:13118:34462","2:13121:34463","2:13124:34464","2:13126:29686","2:13127:31071","2:13128:29687","2:13129:29683","2:13130:29682","2:13131:31074","2:13132:31075","2:13133:31076","2:13134:34465","2:13136:9413","2:13137:34466"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2474-0:189:2247":{"id":"b:2:2474-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[60,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3507:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:105:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:499:2567":{"id":"b:5:725-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:557:667":{"id":"0:557:667","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[142,20],"end":[142,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:3503-0:526:2580":{"id":"a:2:42469:3503-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:422:1939":{"id":"0:422:1939","crate_id":0,"name":"encoded_len","span":{"filename":"src/encode.rs","begin":[97,0],"end":[125,1]},"visibility":"public","docs":"Calculate the base64 encoded length for a given input length, optionally including any\nappropriate padding bytes.\n\nReturns `None` if the encoded length can't be represented in `usize`. This will happen for\ninput lengths in approximately the top quarter of the range of `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes_len",{"primitive":"usize"}],["padding",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:558:1940":{"id":"b:5:5866-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13056:28212":{"id":"2:13056:28212","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::split_whitespace":"2:13034:32089","str::rsplit":"2:13062:29891"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44227:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13059:29889":{"id":"2:13059:29889","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12513:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:3504-0:189:2247":{"id":"a:2:42468:3504-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5597:35162":{"id":"5:5597:35162","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126-0:85:2155":{"id":"0:126-0:85:2155","crate_id":0,"name":null,"span":{"filename":"src/read/mod.rs","begin":[3,0],"end":[3,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::decoder::DecoderReader","name":"DecoderReader","id":"0:85:2155","glob":false}}},"0:350:590":{"id":"0:350:590","crate_id":0,"name":"decode","span":{"filename":"src/engine/mod.rs","begin":[247,4],"end":[265,5]},"visibility":"default","docs":"Decode the input into a new `Vec`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n\nlet bytes = general_purpose::STANDARD\n    .decode(\"aGVsbG8gd29ybGR+Cg==\").unwrap();\nprintln!(\"{:?}\", bytes);\n\n// custom engine setup\nlet bytes_url = engine::GeneralPurpose::new(\n             &alphabet::URL_SAFE,\n             general_purpose::NO_PAD)\n    .decode(\"aGVsbG8gaW50ZXJuZXR-Cg\").unwrap();\nprintln!(\"{:?}\", bytes_url);\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", test))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7052:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:526:2580":{"id":"b:2:3610-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42468:3504-0:140:2246":{"id":"a:2:42468:3504-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"W"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42469:3503-0:592:1946":{"id":"a:2:42469:3503-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:574:1765":{"id":"0:574:1765","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[13,23],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"2:13095:34454":{"id":"2:13095:34454","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:516:2457":{"id":"b:2:2474-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:324:2688":{"id":"0:324:2688","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[338,0],"end":[338,83]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [PAD] config.","links":{"PAD":"0:326:2097","alphabet::URL_SAFE":"0:395:2688","GeneralPurpose":"0:480:2095"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"a:2:42469:3503-0:490:2096":{"id":"a:2:42469:3503-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13062:29891":{"id":"2:13062:29891","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::split":"2:13056:28212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44245:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:526:2580":{"id":"b:2:2474-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:1048":{"id":"0:295:1048","crate_id":0,"name":"new","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[35,4],"end":[41,5]},"visibility":"public","docs":"Create a `GeneralPurpose` engine from an [Alphabet].\n\nWhile not very expensive to initialize, ideally these should be cached\nif the engine will be used repeatedly.","links":{"Alphabet":"0:526:2580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alphabet",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["config",{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13074:29895":{"id":"2:13074:29895","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12073:454","str::splitn":"2:13071:29893","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44349:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13071:29893":{"id":"2:13071:29893","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175","str::rsplitn":"2:13074:29895"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44331:3779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:558:1940":{"id":"b:2:2474-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2780:751":{"id":"2:2780:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[54,16],"end":[54,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:532:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2784-0:592:1946":{"id":"b:2:2784-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13103:34459":{"id":"2:13103:34459","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12722:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:3504-0:85:2155":{"id":"a:2:42468:3504-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:430-0:414:1937":{"id":"0:430-0:414:1937","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[262,47],"end":[262,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::encode_engine_string","name":"encode_engine_string","id":"0:414:1937","glob":false}}},"b:2:3610-0:516:2457":{"id":"b:2:3610-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:228-0:210:2248":{"id":"0:228-0:210:2248","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[7,49],"end":[7,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::encoder_string_writer::StrConsumer","name":"StrConsumer","id":"0:210:2248","glob":false}}},"a:2:32833:237-0:570:1945":{"id":"a:2:32833:237-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:396:2828":{"id":"0:396:2828","crate_id":0,"name":"CRYPT","span":{"filename":"src/alphabet.rs","begin":[185,0],"end":[187,2]},"visibility":"public","docs":"The `crypt(3)` alphabet (with `.` and `/` as the _first_ two characters).\n\nNot standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:208:1932":{"id":"0:208:1932","crate_id":0,"name":"write","span":{"filename":"src/write/encoder_string_writer.rs","begin":[83,4],"end":[85,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478-0:325:2690":{"id":"0:478-0:325:2690","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[20,0],"end":[20,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::engine::general_purpose::URL_SAFE_NO_PAD","name":"BASE64_URL_SAFE_NO_PAD","id":"0:325:2690","glob":false}}},"0:175:1932":{"id":"0:175:1932","crate_id":0,"name":"write","span":{"filename":"src/write/encoder.rs","begin":[265,4],"end":[384,5]},"visibility":"default","docs":"Encode input and then write to the delegate writer.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nof `input` consumed. The value may be `0`, which interacts poorly with `write_all`, which\ninterprets `Ok(0)` as an error, despite it being allowed by the contract of `write`. See\n<https://github.com/rust-lang/rust/issues/56889> for more on that.\n\nIf the previous call to `write` provided more (encoded) data than the delegate writer could\naccept in a single call to its `write`, the remaining data is buffered. As long as buffered\ndata is present, subsequent calls to `write` will try to write the remaining buffered data\nto the delegate and return either `Ok(0)` -- and therefore not consume any of `input` -- or\nan error.\n\n# Errors\n\nAny errors emitted by the delegate writer are returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596:2496":{"id":"0:596:2496","crate_id":0,"name":"OutputSliceTooSmall","span":{"filename":"src/decode.rs","begin":[54,4],"end":[54,23]},"visibility":"default","docs":"The provided slice _may_ be too small.\n\nThe check is conservative (assumes the last triplet of output bytes will all be needed).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2778-0:570:1945":{"id":"b:2:2778-0:570:1945","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165:2186":{"id":"0:165:2186","crate_id":0,"name":"finish","span":{"filename":"src/write/encoder.rs","begin":[126,4],"end":[138,5]},"visibility":"public","docs":"Encode all remaining buffered data and write it, including any trailing incomplete input\ntriples and associated padding.\n\nOnce this succeeds, no further writes or calls to this method are allowed.\n\nThis may write to the delegate writer multiple times if the delegate writer does not accept\nall input provided to its `write` each invocation.\n\nIf you don't care about error handling, it is not necessary to call this function, as the\nequivalent finalization is done by the Drop impl.\n\nReturns the writer that this was constructed around.\n\n# Errors\n\nThe first error that is not of `ErrorKind::Interrupted` will be returned.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:2573":{"id":"0:504:2573","crate_id":0,"name":"RequireNone","span":{"filename":"src/engine/mod.rs","begin":[447,4],"end":[447,15]},"visibility":"default","docs":"Padding must be absent -- for when you want predictable padding, without any wasted bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13126:29686":{"id":"2:13126:29686","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:667":{"id":"0:513:667","crate_id":0,"name":"eq","span":{"filename":"src/engine/mod.rs","begin":[440,29],"end":[440,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:2431":{"id":"0:333:2431","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[43,4],"end":[43,40]},"visibility":"default","docs":"The decode estimate used by this engine","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"DecodeEstimate","id":"0:371:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"b:2:3610-0:539:2802":{"id":"b:2:3610-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477-0:324:2688":{"id":"0:477-0:324:2688","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[19,0],"end":[19,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::engine::general_purpose::URL_SAFE","name":"BASE64_URL_SAFE","id":"0:324:2688","glob":false}}},"0:179:2369":{"id":"0:179:2369","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder.rs","begin":[391,4],"end":[397,5]},"visibility":"default","docs":"Because this is usually treated as OK to call multiple times, it will *not* flush any\nincomplete chunks of input or write padding.\n# Errors\n\nThe first error that is not of [`ErrorKind::Interrupted`] will be returned.","links":{"`ErrorKind::Interrupted`":"1:8187:2336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[54,27],"end":[54,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[44,0],"end":[44,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","type_id","description","cause"],"trait":{"name":"Error","id":"2:2837:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:433-0:422:1939":{"id":"0:433-0:422:1939","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[264,45],"end":[264,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::encode::encoded_len","name":"encoded_len","id":"0:422:1939","glob":false}}},"a:2:32890:3555-0:499:2567":{"id":"a:2:32890:3555-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:392:724":{"id":"0:392:724","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[155,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:140:2246":{"id":"b:2:2778-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:538:667":{"id":"0:538:667","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[54,27],"end":[54,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[451,9],"end":[451,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2997:246-0:516:2457":{"id":"a:2:2997:246-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526:2580":{"id":"0:526:2580","crate_id":0,"name":"Alphabet","span":{"filename":"src/alphabet.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"An alphabet defines the 64 ASCII characters (symbols) used for base64.\n\nCommon alphabets are provided as constants, and custom alphabets\ncan be made via `from_str` or the `TryFrom<str>` implementation.\n\n# Examples\n\nBuilding and using a custom Alphabet:\n\n```\nlet custom = base64::alphabet::Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap();\n\nlet engine = base64::engine::GeneralPurpose::new(\n    &custom,\n    base64::engine::general_purpose::PAD);\n```\n\nBuilding a const:\n\n```\nuse base64::alphabet::Alphabet;\n\nstatic CUSTOM: Alphabet = {\n    // Result::unwrap() isn't const yet, but panic!() is OK\n    match Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\") {\n        Ok(x) => x,\n        Err(_) => panic!(\"creation of alphabet failed\"),\n    }\n};\n```\n\nBuilding lazily:\n\n```\nuse base64::{\n    alphabet::Alphabet,\n    engine::{general_purpose::GeneralPurpose, GeneralPurposeConfig},\n};\nuse once_cell::sync::Lazy;\n\nstatic CUSTOM: Lazy<Alphabet> = Lazy::new(||\n    Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap()\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:383","a:2:42468:3504-0:526:2580","a:2:2997:246-0:526:2580","a:2:42469:3503-0:526:2580","a:2:32833:237-0:526:2580","a:2:32890:3555-0:526:2580","b:2:3610-0:526:2580","b:2:2471-0:526:2580","b:2:2789-0:526:2580","b:2:2784-0:526:2580","b:2:2778-0:526:2580","b:2:2774-0:526:2580","b:2:2474-0:526:2580","b:5:725-0:526:2580","0:533","0:529","0:531","0:536","0:537","0:388"]}}},"2:13048:3725":{"id":"2:13048:3725","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42346:191","prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:29883":{"id":"2:13027:29883","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13026:29882","str::split_at_mut_checked":"2:13029:29887"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:499:2567":{"id":"b:2:2471-0:499:2567","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:480:2095":{"id":"b:2:2778-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:640":{"id":"0:184:640","crate_id":0,"name":"drop","span":{"filename":"src/write/encoder.rs","begin":[401,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:1933":{"id":"0:229:1933","crate_id":0,"name":"engine","span":{"filename":"src/engine/mod.rs","begin":[1,0],"end":[466,1]},"visibility":"public","docs":"Provides the [Engine] abstraction and out of the box implementations.","links":{"Engine":"0:331:1934"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:242:2094","0:329-0:480:2095","0:330-0:490:2096","0:331:1934","0:369:2059","0:371:2431","0:499:2567","0:516:2457"],"is_stripped":false}}},"0:395:2688":{"id":"0:395:2688","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/alphabet.rs","begin":[178,0],"end":[180,2]},"visibility":"public","docs":"The URL-safe alphabet (with `-` and `_`) specified in [RFC 4648][].\n\n[RFC 4648]: https://datatracker.ietf.org/doc/html/rfc4648#section-5","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"b:2:2774-0:558:1940":{"id":"b:2:2774-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:486":{"id":"0:486","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[23,9],"end":[23,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:487:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2774-0:480:2095":{"id":"b:2:2774-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:449:2960":{"id":"0:449:2960","crate_id":0,"name":"source","span":{"filename":"src/decode.rs","begin":[68,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2837:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:3504-0:490:2096":{"id":"a:2:42468:3504-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32890:3555-0:85:2155":{"id":"a:2:32890:3555-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:315:2661":{"id":"0:315:2661","crate_id":0,"name":"with_encode_padding","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[276,4],"end":[281,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `padding` setting.\n\nIf `padding` is `true`, encoding will append either 1 or 2 `=` padding characters as needed\nto produce an output whose length is a multiple of 4.\n\nPadding is not needed for correct decoding and only serves to waste bytes, but it's in the\n[spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).\n\nFor new applications, consider not using padding if the decoders you're using don't require\npadding to be present.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["padding",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:490:2096":{"id":"b:5:725-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3745","5:728:3746","5:729:3747"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2223":{"id":"0:119:2223","crate_id":0,"name":"into_inner","span":{"filename":"src/read/decoder.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded\ninput from.\n\nBecause `DecoderReader` performs internal buffering, the state of the inner reader is\nunspecified. This function is mainly provided because the inner reader type may provide\nadditional functionality beyond the `Read` implementation which may still be useful.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:480:2095":{"id":"b:2:2471-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571:2211":{"id":"0:571:2211","crate_id":0,"name":"InvalidByte","span":{"filename":"src/decode.rs","begin":[13,4],"end":[13,26]},"visibility":"default","docs":"An invalid byte was found in the input. The offset and offending byte are provided.\nPadding characters (`=`) interspersed in the encoded form will be treated as invalid bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:573:1764","0:574:1765"]},"discriminant":null}}},"2:13025:34447":{"id":"2:13025:34447","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12079:1549","crate::ops::IndexMut":"2:3272:3162","str::slice_unchecked":"2:13024:34446"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[400,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3233:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["0:184:640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:1932":{"id":"0:127:1932","crate_id":0,"name":"write","span":{"filename":"src/write/mod.rs","begin":[1,0],"end":[11,18]},"visibility":"public","docs":"Implementations of `io::Write` to transparently handle base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:225-0:140:2246","0:227-0:189:2247","0:228-0:210:2248"],"is_stripped":false}}},"0:544:1764":{"id":"0:544:1764","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[147,19],"end":[147,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"b:2:2789-0:592:1946":{"id":"b:2:2789-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[451,9],"end":[451,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:521:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32833:237-0:592:1946":{"id":"a:2:32833:237-0:592:1946","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13115:34461":{"id":"2:13115:34461","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:558:1940":{"id":"b:2:2789-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32833:237-0:516:2457":{"id":"a:2:32833:237-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42469:3503-0:189:2247":{"id":"a:2:42469:3503-0:189:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:2399":{"id":"0:211:2399","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[95,4],"end":[95,37]},"visibility":"default","docs":"Consume the base64 encoded data in `buf`","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[244,16],"end":[244,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[59,0],"end":[131,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:386:1048","0:387:336"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13133:31076":{"id":"2:13133:31076","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36345"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:1934":{"id":"0:331:1934","crate_id":0,"name":"Engine","span":{"filename":"src/engine/mod.rs","begin":[39,0],"end":[407,1]},"visibility":"public","docs":"An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.\n\nDifferent implementations offer different characteristics. The library currently ships with\n[GeneralPurpose] that offers good speed and works on any CPU, with more choices\ncoming later, like a constant-time one when side channel resistance is called for, and vendor-specific vectorized ones for more speed.\n\nSee [general_purpose::STANDARD_NO_PAD] if you just want standard base64. Otherwise, when possible, it's\nrecommended to store the engine in a `const` so that references to it won't pose any lifetime\nissues, and to avoid repeating the cost of engine setup.\n\nSince almost nobody will need to implement `Engine`, docs for internal methods are hidden.","links":{"GeneralPurpose":"0:480:2095","general_purpose::STANDARD_NO_PAD":"0:323:2685"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:332:2059","0:333:2431","0:337:2081","0:338:662","0:342:2131","0:346:2317","0:350:590","0:354:2529","0:358:2543","0:364:2550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:296"]}}},"0:559:2496":{"id":"0:559:2496","crate_id":0,"name":"OutputSliceTooSmall","span":{"filename":"src/encode.rs","begin":[148,4],"end":[148,23]},"visibility":"default","docs":"The provided slice is too small.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32890:3555-0:47:2139":{"id":"a:2:32890:3555-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:3555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:512":{"id":"0:512","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[440,29],"end":[440,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:513:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:577:2214":{"id":"0:577:2214","crate_id":0,"name":"InvalidLastSymbol","span":{"filename":"src/decode.rs","begin":[24,4],"end":[24,32]},"visibility":"default","docs":"The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\nThis is indicative of corrupted or truncated Base64.\nUnlike `InvalidByte`, which reports symbols that aren't in the alphabet, this error is for\nsymbols that are in the alphabet but represent nonsensical encodings.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:579:1764","0:580:1765"]},"discriminant":null}}},"2:13092:34453":{"id":"2:13092:34453","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::match_indices":"2:13089:34452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44395:3783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[33,0],"end":[38,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:62:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:724":{"id":"0:62:724","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[34,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43387:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:85:2155":{"id":"b:2:2789-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:573:1764":{"id":"0:573:1764","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[13,16],"end":[13,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:2:2997:246-0:539:2802":{"id":"a:2:2997:246-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:542:2809":{"id":"0:542:2809","crate_id":0,"name":"DuplicatedByte","span":{"filename":"src/alphabet.rs","begin":[147,4],"end":[147,22]},"visibility":"default","docs":"All bytes must be unique","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:544:1764"]},"discriminant":null}}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[47,16],"end":[47,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:601:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32833:237-0:539:2802":{"id":"a:2:32833:237-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeError","id":"0:570:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42469:3503-0:480:2095":{"id":"a:2:42469:3503-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2474-0:85:2155":{"id":"b:2:2474-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13036:28213":{"id":"2:13036:28213","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44481:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[47,34],"end":[47,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:411:1936":{"id":"0:411:1936","crate_id":0,"name":"encode_engine","span":{"filename":"src/encode.rs","begin":[28,0],"end":[30,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the provided `Engine` into a new `String`.\n\n See [Engine::encode].","links":{"Engine::encode":"0:338:662"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")]","#[cfg(any(feature = \"alloc\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode"},"inner":{"function":{"decl":{"inputs":[["input",{"generic":"T"}],["engine",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}]],"output":{"resolved_path":{"name":"alloc::string::String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:47:2139":{"id":"b:5:5866-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2471-0:516:2457":{"id":"b:2:2471-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13089:34452":{"id":"2:13089:34452","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12697:3175","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::rmatch_indices":"2:13092:34453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44377:3782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[133,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:389:138","0:390:1629"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:601:724":{"id":"0:601:724","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[47,16],"end":[47,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:34444":{"id":"2:13009:34444","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13007:34443"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:3747":{"id":"5:729:3747","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:3745":{"id":"5:727:3745","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:2777:2544":{"id":"2:2777:2544","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2751:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:480:2095":{"id":"b:2:2474-0:480:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26458"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329-0:480:2095":{"id":"0:329-0:480:2095","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[22,26],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"general_purpose::GeneralPurpose","name":"GeneralPurpose","id":"0:480:2095","glob":false}}},"a:2:32833:237-0:526:2580":{"id":"a:2:32833:237-0:526:2580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:140:2246":{"id":"0:140:2246","crate_id":0,"name":"EncoderWriter","span":{"filename":"src/write/encoder.rs","begin":[63,0],"end":[81,1]},"visibility":"public","docs":"A `Write` implementation that base64 encodes data before delegating to the wrapped writer.\n\nBecause base64 has special handling for the end of the input data (padding, etc), there's a\n`finish()` method on this type that encodes any leftover input bytes and adds padding if\nappropriate. It's called automatically when deallocated (see the `Drop` implementation), but\nany error that occurs when invoking the underlying writer will be suppressed. If you want to\nhandle such errors, call `finish()` yourself.\n\n# Examples\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\n// use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.\nlet mut enc = base64::write::EncoderWriter::new(Vec::new(), &general_purpose::STANDARD);\n\n// handle errors as you normally would\nenc.write_all(b\"asdf\").unwrap();\n\n// could leave this out to be called by Drop, if you don't care\n// about handling errors or getting the delegate writer back\nlet delegate = enc.finish().unwrap();\n\n// base64 was written to the writer\nassert_eq!(b\"YXNkZg==\", &delegate[..]);\n\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Errors\n\nBase64 encoding itself does not generate errors, but errors from the wrapped writer will be\nreturned as per the contract of `Write`.\n\n# Performance\n\nIt has some minor performance loss compared to encoding slices (a couple percent).\nIt does not do any heap allocation.\n\n# Limitations\n\nOwing to the specification of the `write` and `flush` methods on the `Write` trait and their\nimplications for a buffering implementation, these methods may not behave as expected. In\nparticular, calling `write_all` on this interface may fail with `io::ErrorKind::WriteZero`.\nSee the documentation of the `Write` trait implementation for further details.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3564:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:158","a:2:42468:3504-0:140:2246","a:2:2997:246-0:140:2246","a:2:42469:3503-0:140:2246","a:2:32833:237-0:140:2246","a:2:32890:3555-0:140:2246","b:2:3610-0:140:2246","b:2:2471-0:140:2246","b:2:2789-0:140:2246","b:2:2784-0:140:2246","b:2:2778-0:140:2246","b:2:2774-0:140:2246","b:2:2474-0:140:2246","0:180","0:153","0:171"]}}},"2:2787:138":{"id":"2:2787:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2774-0:140:2246":{"id":"b:2:2774-0:140:2246","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EncoderWriter","id":"0:140:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"W"}}],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[30,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:1048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2774-0:516:2457":{"id":"b:2:2774-0:516:2457","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeMetadata","id":"0:516:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:2544"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2471-0:47:2139":{"id":"b:2:2471-0:47:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Base64Display","id":"0:47:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322:2093":{"id":"0:322:2093","crate_id":0,"name":"STANDARD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[332,0],"end":[332,83]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [PAD] config.","links":{"PAD":"0:326:2097","GeneralPurpose":"0:480:2095","alphabet::STANDARD":"0:394:2093"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"0:603":{"id":"0:603","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[47,23],"end":[47,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:604:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42468:3504-0:558:1940":{"id":"a:2:42468:3504-0:558:1940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:319:60":{"id":"0:319:60","crate_id":0,"name":"default","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":"Delegates to [GeneralPurposeConfig::new].","links":{"GeneralPurposeConfig::new":"0:314:1048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:1048":{"id":"0:203:1048","crate_id":0,"name":"new","span":{"filename":"src/write/encoder_string_writer.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will encode into a new `String` with the provided config.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["engine",{"borrowed_ref":{"lifetime":"'e","mutable":false,"type":{"generic":"E"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:539:2802":{"id":"b:2:2471-0:539:2802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2070","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseAlphabetError","id":"0:539:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:3115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2543":{"id":"0:358:2543","crate_id":0,"name":"decode_slice","span":{"filename":"src/engine/mod.rs","begin":[344,4],"end":[370,5]},"visibility":"default","docs":"Decode the input into the provided output slice.\n\nReturns the number of bytes written to the slice, or an error if `output` is smaller than\nthe estimated decoded length.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nSee [crate::decoded_len_estimate] for calculating buffer sizes.\n\nSee [Engine::decode_slice_unchecked] for a version that panics instead of returning an error\nif the output buffer is too small.","links":{"crate::decoded_len_estimate":"0:463:1944","Engine::decode_slice_unchecked":"0:364:2550"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["input",{"generic":"T"}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"DecodeSliceError","id":"0:592:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2742:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13038:32105":{"id":"2:13038:32105","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44519:3784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2793:1629":{"id":"2:2793:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[145,23],"end":[145,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EncodeSliceError","id":"0:558:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:567:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:198:2390":{"id":"0:198:2390","crate_id":0,"name":"from_consumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[57,4],"end":[61,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will append to the provided `StrConsumer`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["str_consumer",{"generic":"S"}],["engine",{"borrowed_ref":{"lifetime":"'e","mutable":false,"type":{"generic":"E"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[54,9],"end":[54,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Alphabet","id":"0:526:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:530:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13032:6784":{"id":"2:13032:6784","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44203:3772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:490:2096":{"id":"b:2:2789-0:490:2096","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurposeConfig","id":"0:490:2096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375-0:331:1934":{"id":"0:375-0:331:1934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[255,0],"end":[255,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"engine::Engine","name":"Engine","id":"0:331:1934","glob":false}}},"0:507:458":{"id":"0:507:458","crate_id":0,"name":"clone","span":{"filename":"src/engine/mod.rs","begin":[440,9],"end":[440,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DecodePaddingMode","id":"0:499:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13106:34460":{"id":"2:13106:34460","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:3175"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:3503-0:85:2155":{"id":"a:2:42469:3503-0:85:2155","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:3503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecoderReader","id":"0:85:2155","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:463:1944":{"id":"0:463:1944","crate_id":0,"name":"decoded_len_estimate","span":{"filename":"src/decode.rs","begin":[147,0],"end":[151,1]},"visibility":"public","docs":"Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up\nto the next group of 3 decoded bytes).\n\nThe resulting length will be a safe choice for the size of a decode buffer, but may have up to\n2 trailing bytes that won't end up being needed.\n\n# Examples\n\n```\nuse base64::decoded_len_estimate;\n\nassert_eq!(3, decoded_len_estimate(1));\nassert_eq!(3, decoded_len_estimate(2));\nassert_eq!(3, decoded_len_estimate(3));\nassert_eq!(3, decoded_len_estimate(4));\n// start of the next quad of encoded symbols\nassert_eq!(6, decoded_len_estimate(5));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["encoded_len",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[44,0],"end":[190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["decode","encode_slice","decode_slice_unchecked","decode_slice","decode_vec","encode","encode_string"],"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"GeneralPurpose","id":"0:480:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:297:2059","0:298:2431","0:305:2081"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13035:32109":{"id":"2:13035:32109","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13034:32089"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44510:3788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[75,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:331:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EncoderStringWriter","id":"0:189:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"generic":"E"}},{"type":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:203:1048"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"0:394:2093":{"crate_id":0,"path":["base64","alphabet","STANDARD"],"kind":"constant"},"2:4234:6612":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46572:6824":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:15289:5744":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13252:5253":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2854:6063":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:44076:6768":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3919:6914":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46323:6815":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:46442:6820":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:6531:6626":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:4986:4869":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13797:5377":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15092:5700":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:38725:14933":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6381:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"14:214:6484":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:832:6504":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"10:0:3019":{"crate_id":10,"path":["adler"],"kind":"module"},"6:7485:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4315:6916":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:14475:5500":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:6928:3296":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14402:5484":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40054:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6120:22190":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:16032:5253":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:6738:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:3483:14783":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5671:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12768:22240":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14449:5498":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:2234:4857":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21513:33137":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:491:4786":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:7947:4917":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:36684:6328":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11431:8858":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:481:4785":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46217:6811":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5064:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:7999:14905":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:0:3021":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46171:6809":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8341:9507":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43080:3185":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4504:4653":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1883:3899":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10155:4970":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:46816:6832":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40918:4666":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"10:44:6515":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13235:4506":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10769:35448":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10467:3257":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:5191:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13024:22264":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:1142:6503":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:31580:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:9204:6938":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:7493:26800":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:44137:6772":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:42535:3900":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21745:9648":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:44749:6664":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41115:6726":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40930:9468":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:6514:6937":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7379:35435":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14489:5501":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6982:4325":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"0:242:2094":{"crate_id":0,"path":["base64","engine","general_purpose"],"kind":"module"},"1:7693:4328":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12089:5132":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14986:5678":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14325:5471":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42469:3503":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:43073:3183":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2035:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6634:6073":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4861:14847":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:44449:3781":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4990:9578":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8403:6968":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7433:3293":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10905:4989":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:44947:3759":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4243:9549":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7098:6302":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1555:6489":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12201:5142":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11583:5055":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:13638:3287":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1978:711":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15356:5766":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4072:9527":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11859:4344":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8259:6364":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:8247:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:10087:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:1610:6510":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5665:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"14:7:4503":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:22927:6683":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:624:4064":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:80:26434":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:4246:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15266:5741":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:5135:6924":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3660:3900":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:5208:4255":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2728:6057":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14025:5410":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1910:6508":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:33310:6321":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:102:7680":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"13:0:3015":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:41083:6722":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5769:6104":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:2352:6500":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:46147:6808":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"0:548:2806":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","ReservedByte"],"kind":"variant"},"1:10757:3232":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"9:178:9146":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2443:9488":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:597:4847":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13173:5236":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11138:8852":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:7359:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12225:5144":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12647:5185":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:4824:9539":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:1917:6509":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6442:6219":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:11022:3789":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"7:31:21162":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:10136:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:15324:5755":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5927:6119":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15126:5703":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1517:7791":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6519:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7580:6399":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5565:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6560:6068":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:39304:14934":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:6720:6633":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8311:3237":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:32803:6364":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:43306:8833":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15197:5724":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:13312:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:22518:32462":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:16079:5970":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:10144:3186":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5336:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:7828:9418":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7497:6384":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1692:7905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7559:6398":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13999:5407":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:10148:3187":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:44722:6787":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:570:7765":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3592:3227":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13412:5285":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5830:6931":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11559:6913":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10710:4985":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:2037:4851":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:403:4843":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:15023:5685":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2534:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10887:35452":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11153:4987":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1686:7904":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3475:3214":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:9498:4332":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:7348:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2338:6033":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:48466:6880":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"9:357:21191":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:11740:6658":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:7815:4312":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11419:4986":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41055:6721":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15151:5711":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:4802:4490":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:7604:6082":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4145:3900":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:40757:31960":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:3132:6323":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9493:6952":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:6409:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11095:26731":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6962:6076":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13877:5391":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10671:35454":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14599:5522":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3564:2281":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1593:7840":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16069:5969":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:15748:5889":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:4882:4309":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13089:5219":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"0:371:2431":{"crate_id":0,"path":["base64","engine","DecodeEstimate"],"kind":"trait"},"17:15313:5751":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5307:4501":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6478:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:22919:6682":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:22894:4521":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:2234:8747":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11715:5070":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:5736:3214":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:10584:4292":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:41357:6639":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11242:5018":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8274:3233":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12572:4986":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:46624:6826":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:8496:3155":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:41581:4287":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:44834:3766":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:8543:33007":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5831:6108":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5048:3492":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"0:376:1935":{"crate_id":0,"path":["base64","alphabet"],"kind":"module"},"16:7144:22196":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10395:6650":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:34152:14926":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:669:4513":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5031:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:8040:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5817:6105":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44975:8841":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5376:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:8202:6086":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44971:3756":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42084:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5624:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"11:1566:21256":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:22383:9731":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:351:35419":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:22173:6672":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2453:9493":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5536:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7473:6145":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22620:9727":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:47196:6840":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10930:3899":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:941:3899":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4870:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5002:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:2203:4854":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44036:6763":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6698:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"18:735:26445":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7061:6298":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8941:3899":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:279:4223":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1653:7888":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6494:6224":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5546:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7606:4520":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6412:22191":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:45017:4691":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:4723:8611":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:9148:8844":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:689:4819":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:15078:5697":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:44227:3238":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7910:22200":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6047:6134":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46424:6819":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:7857:6417":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"13:226:7679":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:726:9511":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5266:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6624:4708":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6788:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6263:6177":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46891:6834":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11662:6945":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:1062:4223":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7755:6074":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11799:5083":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11214:5016":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"0:398:2835":{"crate_id":0,"path":["base64","alphabet","IMAP_MUTF7"],"kind":"constant"},"16:8188:6470":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5489:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:10106:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5528:8241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:896:3152":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:2403:3900":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:6775:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:48475:6881":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:6246:4317":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3233:2370":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:7986:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40131:6706":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:553:7757":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44519:3784":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:42968:6649":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41557:3910":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:6504:6225":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3070:14780":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:12092:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:41208:6729":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2748:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6524:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"0:480:2095":{"crate_id":0,"path":["base64","engine","general_purpose","GeneralPurpose"],"kind":"struct"},"2:38615:14931":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7428:22197":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44331:3779":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11227:5017":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10092:22260":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:5655:9596":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11231:4714":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44055:6766":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6466:6221":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13899:5392":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6821:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"0:327:2686":{"crate_id":0,"path":["base64","engine","general_purpose","NO_PAD"],"kind":"constant"},"16:5897:6113":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:13548:6671":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:12717:3764":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1581:3293":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10661:4984":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:6714:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:5400:4971":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:43361:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"0:540:2213":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","InvalidLength"],"kind":"variant"},"6:8294:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2997:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:564:7762":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48306:6874":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:473:7709":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46301:6814":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:5716:4318":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:538:4794":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11496:4340":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:8282:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8395:6974":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7389:8614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:0:3025":{"crate_id":17,"path":["object"],"kind":"module"},"2:3043:3156":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6532:6227":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:6731:4286":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13972:5100":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12478:5172":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:10567:4291":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:2425:8760":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11042:4999":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10273:26613":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7085:6299":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40978:3265":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:9007:9614":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:44628:6777":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15569:5834":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"9:424:21178":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:539:2802":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError"],"kind":"enum"},"6:1680:7901":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11026:22272":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:9608:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12078:1517":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45190:6800":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:41005:6716":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3243:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6927:6277":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10116:7017":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7321:3500":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:3597:4861":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4064:9526":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41106:6625":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:4502:4481":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11405:5035":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2139:4734":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7369:3293":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6915:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6491:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11898:5095":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:3925:4476":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12485:22385":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8030:3249":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12530:5181":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:4641:4486":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:31037:3285":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10256:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:6729:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:5079:3264":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:4497:4249":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9056:7001":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:45236:4692":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2745:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7656:22198":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:11817:3769":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:2706:3304":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4916:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12371:5205":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16249:6009":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:6768:8502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:42468:3504":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13387:5280":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12929:5205":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4424:4479":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:13528:4302":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1580:7833":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14788:5575":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:1087:35412":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:710:6488":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"0:504:2573":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireNone"],"kind":"variant"},"1:7642:4847":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:0:3016":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:12080:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13606:5332":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:10787:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:21856:9496":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10170:4971":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44607:14815":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:8499:3901":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:12074:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22649:9728":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:10390:9501":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:12087:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"9:447:21176":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8957:3293":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4985:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9737:22237":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:2465:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2019:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:229:1933":{"crate_id":0,"path":["base64","engine"],"kind":"module"},"18:706:3765":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21496:33125":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:12513:3789":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:8118:6461":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11702:5069":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5995:6128":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:7377:6600":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:506:4241":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3237:3899":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11877:5093":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12422:5165":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"0:127:1932":{"crate_id":0,"path":["base64","write"],"kind":"module"},"16:5107:4500":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10828:35446":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40958:6713":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:9067:7004":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2512:465":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"17:10915:35450":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:883:6497":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15410:5780":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11071:4701":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5006:4497":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:917:6488":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13738:5363":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"0:331:1934":{"crate_id":0,"path":["base64","engine","Engine"],"kind":"trait"},"17:15931:5237":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15814:5901":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5212:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10355:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5588:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:22605:9496":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:13583:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:113:26436":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:3525:3223":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:7366:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"0:542:2809":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","DuplicatedByte"],"kind":"variant"},"1:8013:6957":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:4122:9530":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8038:3251":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6609:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:48603:6889":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:598:35460":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12949:4862":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1971:4063":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:8328:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:4628:4279":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5653:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:7446:8621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:2124:6308":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:42393:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9181:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:1927:14951":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12264:5147":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2837:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:44674:6786":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:5864:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:22963:31966":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4235:9548":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7052:6295":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:4264:9551":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44027:6762":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7769:6407":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3396:3290":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:7419:33861":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3036:34208":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:883:6491":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:7585:14899":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:3899:4475":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:2383:3899":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:4718:4487":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2374:6041":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4876:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9176:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:10347:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:2612:6052":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13455:5295":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12175:5137":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12251:5146":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46402:6818":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46127:6807":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11764:5077":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:31005:3284":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14545:5508":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:16176:5997":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11121:6938":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:3026:34207":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44157:6774":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1025:6498":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4909:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:774:6490":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:700:3293":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47432:6844":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1043:6308":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:10140:3184":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:16235:6008":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:7755:3262":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11186:8853":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:48455:6879":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15368:5769":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4467:6918":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:8317:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40735:6708":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:484:4304":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:13510:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6657:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"14:165:21262":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:15734:5882":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:42693:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9074:26702":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:948:6496":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9239:7014":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:7561:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44065:6767":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10961:4335":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6071:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:2355:6035":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14051:5414":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:507:4787":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4134:9533":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13753:5368":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15206:5725":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5617:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11557:5047":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5352:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:10573:35447":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9671:22238":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7132:6307":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44544:3787":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3058:6322":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1559:7819":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5909:4311":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:912:6504":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:2469:3290":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:2443:3152":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:872:4841":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:1485:7778":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12433:5167":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:3473:4860":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12024:7043":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:4771:4489":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8336:6970":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5472:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:1663:7894":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"0:473:1180":{"crate_id":0,"path":["base64","prelude"],"kind":"module"},"16:5756:6099":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:1941:8758":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13946:5398":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:6895:9643":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40887:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15678:5874":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:4919:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13844:5383":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"14:160:4503":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2660:6054":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:12096:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:15383:5773":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14284:5466":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2768:6059":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:41343:6638":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:2742:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:3272:3162":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:7399:4235":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6427:6217":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12887:5202":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15582:5840":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7121:4274":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:479:7712":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:7339:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:16151:5989":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:43584:6750":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40772:4656":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:41136:6632":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:497:7720":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11510:5043":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7653:4716":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12516:5179":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:40841:4663":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5102:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14079:5418":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1828:3290":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8002:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2756:8755":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:30781:9510":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:3402:3244":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9990:6741":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:2751:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:14311:5468":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8008:6911":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"7:78:21169":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10738:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:8049:3557":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5483:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:15769:5895":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11825:5088":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5166:6924":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5320:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:3810:4473":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:44939:3754":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:3871:3290":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:5121:862":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:0:1541":{"crate_id":1,"path":["std"],"kind":"module"},"17:11497:5042":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44349:3778":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42122:4672":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:1066:21255":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13959:5401":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:6951:3297":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10350:4838":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4942:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21865:9646":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10317:4837":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44821:6793":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:42284:6915":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11016:4998":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:44128:6771":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40814:3786":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14560:5512":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43615:6758":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6680:9611":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:8093:6459":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7652:3154":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15655:5861":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:7711:3290":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8646:6995":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9061:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8330:6968":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:491:7717":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:531:4791":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2992:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:31058:3193":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:39963:3161":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:862:3293":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:5041:33364":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7355:6344":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2748:6058":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:9486:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:42250:31942":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"0:38:1930":{"crate_id":0,"path":["base64","display"],"kind":"module"},"11:2536:7686":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10875:4697":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:3851:3293":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14298:5467":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13399:5283":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:46770:6830":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:8073:6458":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40829:14853":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3278:3258":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9984:22258":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3752:9509":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:521:26447":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:800:3152":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:875:6496":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21484:33125":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15333:5758":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11853:5091":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11812:5086":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5296:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:7618:4256":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:718:4824":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:787:6491":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4784:9580":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:396:4216":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:5723:6930":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12300:22383":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10114:7018":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:11386:6942":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40034:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"14:220:6486":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:32891:3633":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6991:35442":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8022:6958":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:40795:4657":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13046:5215":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12724:22261":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:7550:3908":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:6608:4223":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14386:5480":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1699:7908":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13785:5375":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4235:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1490:7780":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:12475:3794":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:9935:3207":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:11172:6655":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43370:3193":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1478:3900":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:6055:4318":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6627:9609":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:12459:3792":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:43808:6760":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:48512:6884":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13363:5276":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7957:6953":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44147:6773":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7888:6421":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3237:7118":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:6550:4322":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:437:4845":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7813:6409":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11256:5020":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:42543:3293":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11661:5066":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:8271:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:811:3290":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:32810:6700":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:12071:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7360:3288":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43316:3193":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21867:6673":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:6726:8761":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:48501:6883":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:6022:6624":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:10534:35451":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:1903:6507":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8428:6978":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7633:35440":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4637:3197":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11089:5007":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:1676:4218":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2478:6046":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:40855:14854":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:14876:5638":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4826:9541":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:31043:6698":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:48244:6873":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12671:5187":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:2369:6513":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46718:6828":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3573:29670":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:8226:22201":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15102:5701":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:7461:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:2101:6583":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11291:4715":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:4965:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10694:8848":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5390:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:3278:6507":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:40124:6705":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12095:856":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15176:5719":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"0:516:2457":{"crate_id":0,"path":["base64","engine","DecodeMetadata"],"kind":"struct"},"6:6542:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:670:4816":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14356:5477":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2572:6050":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:3791:3251":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9186:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6880:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:12076:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11324:5028":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:2175:22317":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:40144:4524":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:5837:6934":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2487:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5502:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:5781:6070":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:1855:1200":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:14111:5422":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10883:6929":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:1160:4511":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22520:14941":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:14994:5679":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:698:4820":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:7584:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4721:8609":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:41333:3236":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11336:4338":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:942:6495":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6278:6179":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2151:6500":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10524:4982":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10982:22271":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:1891:3152":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:4976:4496":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3647:3899":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12089:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:4265:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:1812:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5385:4970":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15701:5875":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:586:7774":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15400:5777":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:13334:33123":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:23005:8765":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:545:7752":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11915:22359":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12863:5201":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"9:0:3018":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3445:3263":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10997:4996":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3814:6912":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3028:8748":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10513:3912":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:7863:4697":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:2736:3250":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:651:4787":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44657:6785":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:21474:3644":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:44377:3782":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6872:6272":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8304:3236":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5802:22187":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6976:6281":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4959:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6606:6237":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"0:369:2059":{"crate_id":0,"path":["base64","engine","Config"],"kind":"trait"},"17:14968:5673":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15190:5722":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44045:6765":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3240:7232":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:32761:3303":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11605:5060":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45139:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12362:5161":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44510:3788":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12318:4862":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1525:6491":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12093:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40903:31973":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2231:5052":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15445:5788":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:42654:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:11255:6657":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7566:4517":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:502:2571":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireCanonical"],"kind":"variant"},"17:10399:3237":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4897:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12086:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5146:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3048:9641":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6694:4323":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:6410:9739":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15720:5880":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7397:35441":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14977:5677":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:42402:3899":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8630:6920":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:2423:3293":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:2708:6056":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14341:5473":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:430:35421":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:23012:4522":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:96:26435":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:12657:3171":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12076:5131":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:2195:4241":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:217:4221":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5361:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:5831:3214":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:754:4832":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7741:6084":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12088:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6471:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5260:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16050:5263":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:9325:6908":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:8197:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8552:6754":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11166:5013":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:6728:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:635:4809":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:12697:3175":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:40822:3785":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9102:7009":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44955:3762":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4971:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"14:202:3151":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1510:7788":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7686:6404":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41127:6631":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15778:5897":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:31231:31949":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:9938:22257":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10728:6954":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:33682:14923":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:3014:21329":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:364:4214":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3276:3257":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42458:3501":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22943:31939":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:434:35413":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4468:4480":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5415:6093":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7096:4712":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12030:5127":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42418:3293":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:5584:6929":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:4434:4249":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43087:3186":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16138:5983":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:2548:6049":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:4891:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11730:5072":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:2383:14942":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:6447:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11743:5073":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11115:5010":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12084:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5250:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5236:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12127:5134":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11425:8857":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:852:3900":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:6071:15219":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12107:4986":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5306:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"15:394:21291":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:32824:6701":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:7535:9431":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10018:22239":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5014:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3740:4223":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15635:5858":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15301:5750":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:925:6492":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:42849:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:46602:6825":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41543:6641":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8377:6915":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12056:26741":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2539:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:34808:6327":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15010:5680":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"0:395:2688":{"crate_id":0,"path":["base64","alphabet","URL_SAFE"],"kind":"constant"},"11:742:6489":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6648:6241":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2418:6043":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:22428:9732":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:1950:6606":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48390:6876":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:22560:9737":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11648:28465":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13538:5312":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43576:6749":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43623:6759":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:906:3290":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2838:6062":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43568:6747":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4952:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:33975:9642":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:44491:3774":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:47308:6842":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13774:5372":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:3582:3224":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:6278:6936":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:42427:3500":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12094:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:6417:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13187:5237":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14246:5461":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5636:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10218:4834":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12213:5143":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11103:8841":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6098:22189":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11102:5008":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8949:6999":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:48446:6878":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14012:5409":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:573:4787":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5219:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6948:6075":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:14723:5524":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14752:5544":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:4830:724":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:8216:6472":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:8505:14903":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3520:14786":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40874:4665":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10182:9336":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:22491:9496":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6650:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7429:8616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8657:4700":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:328:7684":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:4251:9550":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:48104:6871":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12464:22384":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:42732:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44643:6782":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"9:502:6566":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10699:8850":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4940:4495":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"9:392:21177":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:22787:6675":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11414:4713":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5037:4498":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14271:5464":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:5020:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12079:1549":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10146:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1544:6488":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14147:5428":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2508:6047":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4743:4488":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:48486:6882":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6160:21299":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:359:6895":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11537:5045":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1865:6907":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12085:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"18:581:3644":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44102:6714":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:2394:6042":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7006:6284":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5112:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10704:6953":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:8324:3234":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:3209:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:2562:7690":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5415:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5445:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:15473:5796":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12238:5145":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14847:5627":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13855:5384":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:43066:3184":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:7516:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9755:22235":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12040:9157":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11443:5039":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:32835:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5846:6110":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:13386:6668":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15456:5789":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:591:9412":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:16269:5285":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:44501:3773":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6532:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7579:31973":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6050:4255":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6636:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:15039:5688":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:3329:6090":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:485:7715":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11359:7039":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2303:21300":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:2548:7688":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11674:5067":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:8933:6997":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"15:0:3023":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43345:6436":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41149:6727":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:4821:4867":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15249:5733":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14177:5447":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:6018:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:921:6489":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6398:6065":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1066:6500":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1325:6500":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44295:3776":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5466:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13594:5329":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2274:1931":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:3318:3259":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:43408:3194":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45259:6806":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:4464:3214":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5083:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11688:5068":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:12702:3163":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11580:6914":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7509:6385":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11269:22289":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:45220:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2279:3222":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:4531:4482":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4992:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12388:5162":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:12097:1259":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12399:5163":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2570:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12584:4987":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:31126:31975":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:22574:14941":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"18:563:4796":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"0:325:2690":{"crate_id":0,"path":["base64","engine","general_purpose","URL_SAFE_NO_PAD"],"kind":"constant"},"17:13832:5381":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13424:5286":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13308:5268":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15616:5852":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:42771:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:12928:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6379:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44277:3777":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"0:545:2805":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","UnprintableByte"],"kind":"variant"},"17:12408:5164":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2990:3627":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:6961:3298":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5212:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1534:6504":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:22467:9733":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:7727:3291":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14855:5630":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12073:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11647:5065":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11547:4916":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:5392:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:643:4787":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:10599:4297":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1639:7877":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5863:22188":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13325:5270":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41168:6634":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10775:26740":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:47462:6845":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9916:22256":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1628:7869":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:10954:3900":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4837:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6460:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1896:3290":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:1107:6502":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:47226:6841":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5557:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:4288:14830":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:42487:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:12399:3793":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44115:6770":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1547:7811":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:40806:3787":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48580:6888":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14503:5504":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11467:5040":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:45028:15026":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42166:8832":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41184:4807":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10284:4836":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8640:3899":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15058:5689":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7052:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46938:6835":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4828:9542":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:7594:4518":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:532:7746":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:15342:5759":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:8187:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6749:6245":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12342:5156":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12900:5204":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:48642:6890":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12707:5190":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:8259:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6441:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7984:8708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:7533:32110":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10972:4336":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:10777:9496":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:32890:3555":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6441:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2636:6053":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13723:5359":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5181:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14260:5463":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22734:6674":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8241:3262":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:3237:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9261:26844":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:41550:6642":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:22185:33134":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:34462:14928":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15992:5955":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:868:4229":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:12211:14991":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:7780:6948":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:4684:3198":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:6597:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4932:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21684:9496":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:47852:6869":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:41198:6636":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9107:7010":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:3075:14781":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:2525:8752":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:8306:8734":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44786:6788":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6385:6213":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13375:5279":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12557:5006":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12597:5183":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:34093:14924":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46992:6837":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6079:6020":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:38560:14930":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5722:6071":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:8175:6467":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47150:6839":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:2140:6498":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:7409:4516":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:34034:14925":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:1565:7821":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3614:6092":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:8265:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4653:9571":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2808:6061":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8411:6976":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:8253:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14463:5499":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6678:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"8:0:3017":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15214:5727":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10419:4842":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:10088:2281":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:1169:33761":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:648:9415":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1887:3293":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:8155:6466":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:15:1932":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6721:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:9095:7008":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5244:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14372:5478":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8111:6960":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:7546:8680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12683:5188":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:4014:9524":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:15608:5849":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:4882:4493":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:839:3899":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8116:2216":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10766:26728":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12056:5130":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:7412:8615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7642:3153":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1621:7865":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4126:9531":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9781:22253":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:39994:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:46271:6813":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15624:5853":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11493:5041":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:4657:3199":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12045:9420":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:673:3899":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5039:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:16187:5998":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13568:5324":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:26457:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1007:6308":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4575:9554":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4924:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:31607:3644":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21542:33130":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:44526:3785":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8890:6996":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:11134:3775":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6811:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10251:4835":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:6448:1719":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"1:8106:6959":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9222:4711":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4213:26846":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10979:3238":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:5530:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:1463:3899":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7823:22199":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:4062:4477":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6620:6239":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5400:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10137:22236":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:578:7770":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:42615:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:7757:4694":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2684:6055":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3608:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12189:5141":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11354:5032":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:513:4846":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2371:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6670:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8896:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:15760:5891":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:43605:6754":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"18:608:4803":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7952:6952":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:870:6490":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7712:4330":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:15521:5833":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6317:6200":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9115:7012":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2591:3247":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:15168:5716":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12508:5177":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:2304:6308":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:5908:6622":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:4573:4278":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2592:6051":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4999:9579":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7964:6954":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:11773:6659":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:23036:9522":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:4560:4483":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5643:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3039:3631":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1588:3290":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6342:35436":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:39919:14785":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:48550:6886":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13526:5309":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4430:3195":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1603:6506":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3320:3260":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:4305:3899":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14066:5417":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:43976:6761":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:726:4827":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5277:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:2499:2157":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:31069:31978":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:7468:14906":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:4500:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:22295:9496":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41097:6725":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11341:5031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:11400:6943":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5477:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:294:3165":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:15273:5742":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:10138:3183":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14933:5672":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8250:2062":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:33496:6318":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44481:3234":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5314:8153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5347:4502":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10470:3259":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7168:7012":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44943:3757":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5515:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:7602:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4709:9528":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10675:7027":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:1827:6905":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:1923:6510":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9022:9616":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"15:327:9133":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:6175:3214":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:4509:4654":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13485:5299":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:517:7737":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:1207:4850":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10915:6997":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4885:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10877:4988":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:3191:14784":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:13922:5397":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:3244:6508":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8454:6919":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5465:6925":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:11213:3779":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3240:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:14038:5412":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11142:4986":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2705:9496":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:22506:9736":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:41027:6717":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:8131:3556":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44173:3169":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7800:3912":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7539:6079":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:680:4817":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11084:4702":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6510:3910":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"11:2498:21251":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:6230:4302":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:7139:4326":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:417:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:523:7740":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:5709:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15418:5781":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4587:4484":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:47496:6846":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2788:6060":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:45149:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13581:5328":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"0:396:2828":{"crate_id":0,"path":["base64","alphabet","CRYPT"],"kind":"constant"},"17:11524:5044":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12443:5169":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:725:9496":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:24057:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:12722:3763":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:15434:5784":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11063:5004":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14516:5505":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:32922:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:16259:5280":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:42527:3899":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7842:9419":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6813:6259":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:765:26446":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5442:3924":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5134:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:465:7704":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:10095:6907":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6231:6172":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12543:5182":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:41591:6644":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8980:4706":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4073:3152":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10898:26739":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43387:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2878:6064":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:45211:6805":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:43823:8840":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2674:4292":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:7469:3293":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3080:14782":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:5:1719":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"1:7974:6955":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1526:7796":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6026:6014":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:7467:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:21758:6673":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:11061:6653":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2271:6910":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:44993:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8432:8596":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:40016:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"14:40:4506":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:47994:6870":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:4553:9553":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2826:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:365:6896":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:34289:14927":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"15:288:21281":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:3270:6509":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:256:4840":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:46969:6836":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6895:6273":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:3806:6583":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:7477:3293":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11567:5049":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:536:4305":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41599:6646":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13986:5406":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21511:33132":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:7452:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:48182:6872":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:12436:3795":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:7306:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1516:6490":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:21530:33128":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11353:6939":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5020:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7648:6403":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:931:9432":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:7537:8677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:1731:3214":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"17:15281:5743":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:16105:5976":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6353:6025":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:9603:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"11:844:9432":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:45157:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6664:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3283:33864":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:4145:3214":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13344:5275":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6562:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:46794:6831":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5382:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1575:6581":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1340:6498":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:12768:14809":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11655:6945":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5344:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:1153:33857":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5046:8069":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44213:3237":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:8301:6479":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8920:4702":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:640:6898":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1671:7895":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:589:4797":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1582:6505":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:41159:6728":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5407:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:7756:9496":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14235:5459":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14575:5167":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6782:22194":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:6689:3293":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:44245:3775":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:5934:3152":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11574:5052":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13509:5301":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:41065:6618":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:47646:6847":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15116:5702":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:299:7681":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:8300:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:3029:4872":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:48527:6885":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"10:36:7692":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11156:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:10068:22242":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4787:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6756:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:4050:9525":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11293:22290":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13766:5370":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:40746:4655":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11189:5014":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:860:6027":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:1723:7917":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11051:5001":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:0:3020":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7799:6072":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"9:238:6754":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12454:5170":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:5446:3925":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1577:3899":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2754:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11621:5062":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:23025:4523":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12043:5128":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:38670:14932":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1535:7802":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:32834:2070":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6802:6258":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:4103:4223":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:40892:4667":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9795:9155":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6689:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:3455:14827":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:15822:5904":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8575:6990":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:8078:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15390:5774":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"0:0:1950":{"crate_id":0,"path":["base64"],"kind":"module"},"9:53:9136":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42344:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44431:3780":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44800:14816":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:12098:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:5499:6927":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1593:6507":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:7469:14907":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10978:4337":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46840:6833":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40094:9425":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:10150:3188":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"0:399:2839":{"crate_id":0,"path":["base64","alphabet","BIN_HEX"],"kind":"constant"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"5:1494:3293":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11788:5082":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14091:5419":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3438:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46341:6816":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46193:6810":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:954:6497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10759:4986":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10720:35453":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2087:3251":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2758:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:22143:9496":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:5700:6069":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:4856:4492":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10044:22259":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:15138:5706":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7330:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12077:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:1707:7912":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14912:5667":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:44959:3760":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:2307:8751":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:14436:5497":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15944:5251":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:22978:31969":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4112:9529":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5742:6095":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10501:4289":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:1057:6498":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7528:6394":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11099:6654":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8384:8842":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10365:6996":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:9769:724":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"6:8012:8711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5122:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:9175:3502":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15596:5846":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5283:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1051:6500":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:3304:6510":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5075:4499":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5423:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:10142:3185":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5457:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:542:6018":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:1503:7786":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1829:6906":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6706:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:643:6900":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:21528:33136":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4905:9538":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6665:22193":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3475:6091":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:2902:21327":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:837:6492":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:42470:3392":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2381:14941":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:3507:2175":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42576:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:34635:14929":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:3428:14935":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22905:31972":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:48428:6877":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10717:7031":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44395:3783":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2878:4067":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:12278:5148":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21739:9645":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1724:4223":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13553:5318":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5686:6066":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22148:9651":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:42106:4670":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7524:3166":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40948:4280":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41014:3235":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15799:5900":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:1098:4848":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10473:3255":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:8136:6463":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:5515:6928":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"0:326:2097":{"crate_id":0,"path":["base64","engine","general_purpose","PAD"],"kind":"constant"},"5:1309:6308":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:40985:6714":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14587:5515":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12808:5198":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16165:5992":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7449:6601":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4830:4491":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6900:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7575:8696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:41036:6718":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12150:5135":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:3842:4474":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:187:21269":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:924:4231":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:3717:3152":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7618:6400":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:261:4841":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:10131:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13015:5167":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:16223:6005":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:3032:3629":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3249:33860":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11313:5026":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:1075:4511":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:7441:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:3025:3745":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7549:6397":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40785:6711":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13064:5218":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42410:3900":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12695:5189":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:6746:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:6940:6279":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3222:3239":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8487:3496":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5630:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:1496:7783":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22654:9726":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14868:5637":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"9:330:7693":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:4419:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"0:397:2831":{"crate_id":0,"path":["base64","alphabet","BCRYPT"],"kind":"constant"},"1:4719:8607":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8262:3232":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4800:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2287:35263":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:1605:6509":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11367:5006":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:4356:6613":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13437:5287":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:42324:4676":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:15376:5772":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1599:6508":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15836:5907":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1932:2768":{"crate_id":1,"path":["std","error"],"kind":"module"},"17:16121:5981":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:5367:22186":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2441:9487":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:4583:3196":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5436:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:7249:28206":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"0:499:2567":{"crate_id":0,"path":["base64","engine","DecodePaddingMode"],"kind":"enum"},"6:4811:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4614:4485":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:11241:6656":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:45247:4693":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5200:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7848:9457":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44967:3755":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:22871:6677":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1942:4062":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10818:4987":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:41572:3263":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5652:8517":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4222:6611":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:3778:4472":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"0:500:2569":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","Indifferent"],"kind":"variant"},"1:5864:6935":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:46239:6812":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:44203:3772":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8992:9615":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8590:9591":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11755:5076":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5914:6118":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10954:22270":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8389:9552":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:40317:14857":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:39883:3903":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6333:4318":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:48352:6875":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7314:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:32817:3196":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:3002:3201":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7570:6080":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4020:9523":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2468:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1890:6909":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14529:5506":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6480:6067":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:6081":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:8029:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:687:3900":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1449:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:8003:14904":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5370:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9886:22255":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13814:5380":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"9:482:21175":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:6771:4223":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:44535:3786":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43333:32921":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42306:4674":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:8288:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6629:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2323:21326":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15426:5783":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14131:5423":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"0:72:1931":{"crate_id":0,"path":["base64","read"],"kind":"module"},"5:1189:33854":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:12091:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:40729:3786":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:8351:8745":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12494:5174":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:11227:3778":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4387:6614":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13497:5300":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5160:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12353:5160":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:47386:6843":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:4269:14779":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:8006:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6758:6246":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"0:490:2096":{"crate_id":0,"path":["base64","engine","general_purpose","GeneralPurposeConfig"],"kind":"struct"},"2:40848:4664":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:13361:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:41566:6643":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13211:5251":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3032:34209":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44963:3761":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12824:22262":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:3365:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10622:35449":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:16093:5974":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:8294:3235":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"13:109:35424":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:0:3026":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:41045:6719":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2458:6045":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45198:6802":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:44811:6789":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:41074:6621":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46479:6822":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:538:7749":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:659:4810":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11519:6912":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:5398:4223":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:1818:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:2542:7687":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2998:6087":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:2326:6498":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:44186:3771":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:42479:3902":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:7629:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5225:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:22297:9647":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10439:4972":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8317:3238":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"0:323:2685":{"crate_id":0,"path":["base64","engine","general_purpose","STANDARD_NO_PAD"],"kind":"constant"},"2:44197:3168":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7389:3152":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:2438:6044":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13473:5296":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6456:22192":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:150:4210":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6763:8501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:726:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5329:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:13146:5228":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:48565:6887":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4787:9553":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14414:5486":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:45136:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"0:47:2139":{"crate_id":0,"path":["base64","display","Base64Display"],"kind":"struct"},"17:11865:5092":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3817:6913":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9807:22243":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6543:6228":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:1585:7835":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46372:6817":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9858:22254":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:44852:3164":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:42272:4673":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:3468:32915":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6621:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9171:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6433:6218":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:42138:9508":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:7096:4270":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6505:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6874:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12792:4936":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:9790:33008":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13674:5334":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:42890:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2528:6048":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:1354:4511":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7695:6405":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:42929:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:21686:9649":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42810:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:613:35461":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:44951:3758":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:515:4784":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"0:324:2688":{"crate_id":0,"path":["base64","engine","general_purpose","URL_SAFE"],"kind":"constant"},"17:13292:5264":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10185:4833":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12993:22263":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4352:4478":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:7363:3699":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10747:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11634:5064":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:0:3024":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4979:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12328:5151":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:3264:4858":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12072:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5174:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43593:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:1825:6605":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11595:5059":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2427:9483":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1584:3152":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:12090:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:12243:2086":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:2936:21328":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:21737:9496":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:560:6897":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6849:6271":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8907:4701":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"15:306:21282":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13116:5224":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:12236:1549":{"crate_id":2,"path":["core","str"],"kind":"module"},"1:8504:6987":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:12227:4687":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5598:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2569:3166":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:12711:3765":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5581:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11392:5034":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7306:35439":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:15957:5925":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11075:5006":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22855:8762":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:3443:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:46672:6827":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2695:2581":{"crate_id":2,"path":["core","convert"],"kind":"module"},"5:2112:6584":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:10408:4333":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:7014:22195":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2554:35422":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5677:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1888:6908":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:2985:4308":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:3357:3255":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5290:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3449:14828":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:39967:6704":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"0:526:2580":{"crate_id":0,"path":["base64","alphabet","Alphabet"],"kind":"struct"},"17:11841:5090":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6429:9740":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5052:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:9286:3163":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:16198:5999":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:6300:6194":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5960:6125":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4078:9528":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:14189:5449":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:32833:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:39979:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12969:5207":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:6154:4313":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4395:6917":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:22840:6676":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7111:6305":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11128:4961":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2696:3240":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6335:6210":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6066:6141":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4824:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4913:4494":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11636:7040":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6435:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14212:5458":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11773:5078":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:33916:3157":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:15222:5729":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2576:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3359:3256":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9043:7000":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:828:4226":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:856:6495":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:40:3289":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:3196:6032":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3243:7233":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6562:3152":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:7775:6946":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12289:5149":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:3669:4877":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6574:6085":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:9128:26725":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:5479:6926":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:2205:6585":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:42552:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12659:5186":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13272:5263":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5707:3296":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10612:4983":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:15463:5791":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:623:35463":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46526:6823":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:47072:6838":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4864:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6588:6229":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12621:5184":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:2660:3248":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:123:4212":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12851:5200":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"0:322:2093":{"crate_id":0,"path":["base64","engine","general_purpose","STANDARD"],"kind":"constant"},"16:867:4840":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:32799:6699":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"14:31:4503":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:5058:3214":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:8036:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:43827:4686":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:8341:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:559:7760":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15646:5859":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8963:4703":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:46461:6821":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"14:0:3022":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:16212:6003":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:7727:6083":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46748:6829":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:32920:3632":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}