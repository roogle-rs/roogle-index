{"root":"0:0:1707","crate_version":"0.21.0","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,22],"end":[402,27]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:486:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11967:34296":{"id":"2:11967:34296","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:1825":{"id":"2:11920:1825","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:34292":{"id":"2:11924:34292","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:3498","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:926":{"id":"0:59:926","crate_id":0,"name":"new","span":{"filename":"src/display.rs","begin":[25,4],"end":[30,5]},"visibility":"public","docs":"Create a `Base64Display` with the provided engine.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211:2171":{"id":"0:211:2171","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[100,4],"end":[100,37]},"visibility":"default","docs":"Consume the base64 encoded data in `buf`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:126-0:86:1931":{"id":"0:126-0:86:1931","crate_id":0,"name":null,"span":{"filename":"src/read/mod.rs","begin":[3,0],"end":[3,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::decoder::DecoderReader","name":"DecoderReader","id":"0:86:1931","glob":false}},"0:563:1703":{"id":"0:563:1703","crate_id":0,"name":"DecodeSliceError","span":{"filename":"src/decode.rs","begin":[52,0],"end":[59,1]},"visibility":"public","docs":"Errors that can occur while decoding into a slice.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:564:1702","0:567:2262"],"impls":["a:2:2709:225-0:563:1703","a:2:8216:3233-0:563:1703","a:2:8217:3232-0:563:1703","a:2:2759:3289-0:563:1703","a:2:2695:217-0:563:1703","b:2:3354-0:563:1703","b:2:2565-0:563:1703","b:2:2560-0:563:1703","b:2:2622-0:563:1703","b:2:2550-0:563:1703","b:2:2554-0:563:1703","b:2:2258-0:563:1703","b:2:2261-0:563:1703","b:5:5617-0:563:1703","b:5:681-0:563:1703","0:571","0:432","0:436","0:574","0:434","0:569","0:576","0:577","0:573"]}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[104,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:185:2018","path":"::write::encoder_string_writer"}},"docs":"As for io::Write, `StrConsumer` is implemented automatically for `&mut S`.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"S"}}},"items":["0:214:2171"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:354:2316":{"id":"0:354:2316","crate_id":0,"name":"decode_slice_unchecked","span":{"filename":"src/engine/mod.rs","begin":[351,4],"end":[363,5]},"visibility":"default","docs":"Decode the input into the provided output slice.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nSee [crate::decoded_len_estimate] for calculating buffer sizes.\n\nSee [Engine::decode_slice] for a version that returns an error instead of panicking if the output\nbuffer is too small.\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.\n\nPanics if the provided output buffer is too small for the decoded data.","links":{"crate::decoded_len_estimate":"0:449:1701","Engine::decode_slice":"0:351:2311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,9],"end":[9,14]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:554:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8217:3232-0:49:1915":{"id":"a:2:8217:3232-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[83,0],"end":[94,1]},"visibility":{"restricted":{"parent":"0:128:1908","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:157:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2261-0:140:2019":{"id":"b:2:2261-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:225-0:475:2333":{"id":"a:2:2709:225-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:229:1690":{"id":"0:229:1690","crate_id":0,"name":"engine","span":{"filename":"src/engine/mod.rs","begin":[1,0],"end":[410,1]},"visibility":"public","docs":"Provides the [Engine] abstraction and out of the box implementations.","links":{"Engine":"0:334:1691"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:242:1856","0:332-0:291:1857","0:333-0:466:1858","0:334:1691","0:356:1807","0:358:2197","0:475:2333"],"is_stripped":false}},"a:2:2695:217-0:140:2019":{"id":"a:2:2695:217-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11973:34297":{"id":"2:11973:34297","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:2858"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:3505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:475:2333":{"id":"a:2:8216:3233-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:374:657":{"id":"0:374:657","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:493:2341":{"id":"b:2:2550-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2565-0:291:1857":{"id":"b:2:2565-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[96,0],"end":[246,1]},"visibility":{"restricted":{"parent":"0:128:1908","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:162:926","0:165:1960","0:170:1997"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:225-0:140:2019":{"id":"a:2:2709:225-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:210:2021":{"id":"0:210:2021","crate_id":0,"name":"StrConsumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[98,0],"end":[101,1]},"visibility":"public","docs":"An abstraction around consuming `str`s produced by base64 encoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:211:2171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:212","0:215"]}},"b:2:2554-0:86:1931":{"id":"b:2:2554-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2695:217-0:466:1858":{"id":"a:2:2695:217-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:49:1915":{"id":"0:49:1915","crate_id":0,"name":"Base64Display","span":{"filename":"src/display.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"A convenience wrapper for base64'ing bytes into a format string without heap allocation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:55","a:2:2709:225-0:49:1915","a:2:8216:3233-0:49:1915","a:2:8217:3232-0:49:1915","a:2:2759:3289-0:49:1915","a:2:2695:217-0:49:1915","b:2:3354-0:49:1915","b:2:2565-0:49:1915","b:2:2560-0:49:1915","b:2:2550-0:49:1915","b:2:2554-0:49:1915","b:2:2258-0:49:1915","b:2:2261-0:49:1915","b:5:5617-0:49:1915","0:60"]}},"0:554:414":{"id":"0:554:414","crate_id":0,"name":"clone","span":{"filename":"src/decode.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:1695":{"id":"0:399:1695","crate_id":0,"name":"encode_engine_slice","span":{"filename":"src/encode.rs","begin":[51,0],"end":[57,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 into a supplied slice.\n\nSee [Engine::encode_slice].","links":{"Engine::encode_slice":"0:345:2090"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode_slice\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode_slice"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:356:1807":{"id":"0:356:1807","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[367,0],"end":[377,1]},"visibility":"public","docs":"The minimal level of configuration that engines must support.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:357:1823"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:323"]}},"a:2:8217:3232-0:540:1702":{"id":"a:2:8217:3232-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:140:2019":{"id":"b:2:2565-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:343:1906":{"id":"0:343:1906","crate_id":0,"name":"encode_string","span":{"filename":"src/engine/mod.rs","begin":[154,4],"end":[164,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 into a supplied `String`.\nWrites into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n\n# Example\n\n```rust\nuse base64::{Engine as _, engine::{self, general_purpose}, alphabet};\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n\nfn main() {\n    let mut buf = String::new();\n    general_purpose::STANDARD.encode_string(b\"hello world~\", &mut buf);\n    println!(\"{}\", buf);\n\n    buf.clear();\n    CUSTOM_ENGINE.encode_string(b\"hello internet~\", &mut buf);\n    println!(\"{}\", buf);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:507:2538":{"id":"0:507:2538","crate_id":0,"name":"ParseAlphabetError","span":{"filename":"src/alphabet.rs","begin":[106,0],"end":[115,1]},"visibility":"public","docs":"Possible errors when constructing an [Alphabet] from a `str`.","links":{"Alphabet":"0:493:2341"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:508:1987","0:510:2545","0:513:2541","0:516:2542"],"impls":["a:2:2709:225-0:507:2538","a:2:8216:3233-0:507:2538","a:2:8217:3232-0:507:2538","a:2:2759:3289-0:507:2538","a:2:2695:217-0:507:2538","b:2:3354-0:507:2538","b:2:2565-0:507:2538","b:2:2560-0:507:2538","b:2:2622-0:507:2538","b:2:2550-0:507:2538","b:2:2554-0:507:2538","b:2:2258-0:507:2538","b:2:2261-0:507:2538","b:5:5617-0:507:2538","0:375","0:524","0:519","0:522","0:373","0:521","0:525"]}},"2:11984:34301":{"id":"2:11984:34301","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:493:2341":{"id":"a:2:8216:3233-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2759:3289-0:49:1915":{"id":"a:2:2759:3289-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:380:2570":{"id":"0:380:2570","crate_id":0,"name":"IMAP_MUTF7","span":{"filename":"src/alphabet.rs","begin":[160,0],"end":[162,2]},"visibility":"public","docs":"The alphabet used in IMAP-modified UTF-7 (uses `+` and `,`).\n\nSee [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:360-0:334:1691":{"id":"0:360-0:334:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"engine::Engine","name":"Engine","id":"0:334:1691","glob":false}},"0:460-0:334:1691":{"id":"0:460-0:334:1691","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[14,0],"end":[14,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::engine::Engine","name":"Engine","id":"0:334:1691","glob":false}},"b:5:681-0:563:1703":{"id":"b:5:681-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11923:30628":{"id":"2:11923:30628","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:2970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[30,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:429:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:461-0:325:1855":{"id":"0:461-0:325:1855","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[16,0],"end":[16,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::engine::general_purpose::STANDARD","name":"BASE64_STANDARD","id":"0:325:1855","glob":false}},"0:516:2542":{"id":"0:516:2542","crate_id":0,"name":"ReservedByte","span":{"filename":"src/alphabet.rs","begin":[114,4],"end":[114,20]},"visibility":"default","docs":"`=` cannot be used","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:518:1575"]},"discriminant":null}},"0:520:657":{"id":"0:520:657","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[105,9],"end":[105,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5368:34964":{"id":"5:5368:34964","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:189:2020":{"id":"b:2:2554-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5371:27724":{"id":"5:5371:27724","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:27727"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:563:1703":{"id":"b:2:2261-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:510:2545":{"id":"0:510:2545","crate_id":0,"name":"DuplicatedByte","span":{"filename":"src/alphabet.rs","begin":[110,4],"end":[110,22]},"visibility":"default","docs":"All bytes must be unique","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:512:1575"]},"discriminant":null}},"2:11912:28011":{"id":"2:11912:28011","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:25201":{"id":"2:11996:25201","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:1692":{"id":"0:361:1692","crate_id":0,"name":"alphabet","span":{"filename":"src/alphabet.rs","begin":[1,0],"end":[241,1]},"visibility":"public","docs":"Provides [Alphabet] and constants for alphabets commonly used in the wild.","links":{"Alphabet":"0:493:2341"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:493:2341","0:507:2538","0:376:1855","0:377:2448","0:378:2563","0:379:2566","0:380:2570","0:381:2574"],"is_stripped":false}},"0:334:1691":{"id":"0:334:1691","crate_id":0,"name":"Engine","span":{"filename":"src/engine/mod.rs","begin":[39,0],"end":[364,1]},"visibility":"public","docs":"An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.\n\nDifferent implementations offer different characteristics. The library currently ships with\n[GeneralPurpose] that offers good speed and works on any CPU, with more choices\ncoming later, like a constant-time one when side channel resistance is called for, and vendor-specific vectorized ones for more speed.\n\nSee [general_purpose::STANDARD_NO_PAD] if you just want standard base64. Otherwise, when possible, it's\nrecommended to store the engine in a `const` so that references to it won't pose any lifetime\nissues, and to avoid repeating the cost of engine setup.\n\nSince almost nobody will need to implement `Engine`, docs for internal methods are hidden.","links":{"GeneralPurpose":"0:291:1857","general_purpose::STANDARD_NO_PAD":"0:326:2445"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:335:1807","0:336:2197","0:340:1822","0:341:597","0:343:1906","0:345:2090","0:347:531","0:349:2297","0:351:2311","0:354:2316"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:299"]}},"5:5352":{"id":"5:5352","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5263:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5353:34961","5:5354:2667","5:5357:34962","5:5360:34963","5:5368:34964","5:5369:34965","5:5370:2725","5:5371:27724","5:5372:27725"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:349:2297":{"id":"0:349:2297","crate_id":0,"name":"decode_vec","span":{"filename":"src/engine/mod.rs","begin":[281,4],"end":[303,5]},"visibility":"default","docs":"Decode from string reference as octets.\nWrites into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\nReturns a `Result` containing an empty tuple, aka `()`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, alphabet, engine::{self, general_purpose}};\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);\n\nfn main() {\n    use base64::Engine;\n    let mut buffer = Vec::<u8>::new();\n    // with the default engine\n    general_purpose::STANDARD\n        .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();\n    println!(\"{:?}\", buffer);\n\n    buffer.clear();\n\n    // with a custom engine\n    CUSTOM_ENGINE.decode_vec(\n        \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n        &mut buffer,\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n}\n```\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6671:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:411:388":{"id":"0:411:388","crate_id":0,"name":"cause","span":{"filename":"src/encode.rs","begin":[153,4],"end":[155,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:486:657":{"id":"0:486:657","crate_id":0,"name":"fmt","span":{"filename":"src/engine/mod.rs","begin":[402,22],"end":[402,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:34298":{"id":"2:11976:34298","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:34299"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:3506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:335:1807":{"id":"0:335:1807","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[41,4],"end":[41,24]},"visibility":"default","docs":"The config type used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Config","id":"0:356:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"b:2:2560-0:291:1857":{"id":"b:2:2560-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5617-0:527:1697":{"id":"b:5:5617-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8217:3232-0:86:1931":{"id":"a:2:8217:3232-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:572:657":{"id":"0:572:657","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[51,16],"end":[51,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:538":{"id":"0:538","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,34],"end":[137,36]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2759:3289-0:540:1702":{"id":"a:2:2759:3289-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11919:6130":{"id":"2:11919:6130","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:3496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455-0:446:1700":{"id":"0:455-0:446:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,24],"end":[172,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_slice","name":"decode_engine_slice","id":"0:446:1700","glob":false}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,40],"end":[402,42]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3354-0:475:2333":{"id":"b:2:3354-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:198:2162":{"id":"0:198:2162","crate_id":0,"name":"from_consumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[62,4],"end":[66,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will append to the provided `StrConsumer`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["str_consumer",{"kind":"generic","inner":"S"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:3464":{"id":"5:685:3464","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433:657":{"id":"0:433:657","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[62,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2624:3774":{"id":"2:2624:3774","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3415:5955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:570:414":{"id":"0:570:414","crate_id":0,"name":"clone","span":{"filename":"src/decode.rs","begin":[51,9],"end":[51,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:449:1701":{"id":"0:449:1701","crate_id":0,"name":"decoded_len_estimate","span":{"filename":"src/decode.rs","begin":[156,0],"end":[160,1]},"visibility":"public","docs":"Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up\nto the next group of 3 decoded bytes).\n\nThe resulting length will be a safe choice for the size of a decode buffer, but may have up to\n2 trailing bytes that won't end up being needed.\n\n# Examples\n\n```\nuse base64::decoded_len_estimate;\n\nassert_eq!(3, decoded_len_estimate(1));\nassert_eq!(3, decoded_len_estimate(2));\nassert_eq!(3, decoded_len_estimate(3));\nassert_eq!(3, decoded_len_estimate(4));\n// start of the next quad of encoded symbols\nassert_eq!(6, decoded_len_estimate(5));\n```\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["encoded_len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2568:127":{"id":"2:2568:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31737:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:371:127":{"id":"0:371:127","crate_id":0,"name":"Error","span":{"filename":"src/alphabet.rs","begin":[97,4],"end":[97,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2550-0:563:1703":{"id":"b:2:2550-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[41,0],"end":[187,1]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["encode","encode_string","encode_slice","decode_slice","decode_vec","decode_slice_unchecked","decode"],"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:300:1807","0:301:2197","0:308:1822"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5372:27725":{"id":"5:5372:27725","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:27728"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:59":{"id":"0:322:59","crate_id":0,"name":"default","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[317,4],"end":[319,5]},"visibility":"default","docs":"Delegates to [GeneralPurposeConfig::new].","links":{"GeneralPurposeConfig::new":"0:317:926"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:926":{"id":"0:162:926","crate_id":0,"name":"new","span":{"filename":"src/write/encoder.rs","begin":[98,4],"end":[108,5]},"visibility":"public","docs":"Create a new encoder that will write to the provided delegate writer.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["delegate",{"kind":"generic","inner":"W"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:507:2538":{"id":"b:2:2554-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:458-0:563:1703":{"id":"0:458-0:563:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,80],"end":[172,96]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::DecodeSliceError","name":"DecodeSliceError","id":"0:563:1703","glob":false}},"0:105:657":{"id":"0:105:657","crate_id":0,"name":"fmt","span":{"filename":"src/read/decoder.rs","begin":[59,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:34306":{"id":"2:11993:34306","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:49:1915":{"id":"b:2:2261-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[27,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:298:926"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:216:2171":{"id":"0:216:2171","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[112,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5369:34965":{"id":"5:5369:34965","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2894","`String`":"5:7228:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:540:1702":{"id":"a:2:8216:3233-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2261-0:507:2538":{"id":"b:2:2261-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:351:2311":{"id":"0:351:2311","crate_id":0,"name":"decode_slice","span":{"filename":"src/engine/mod.rs","begin":[320,4],"end":[334,5]},"visibility":"default","docs":"Decode the input into the provided output slice.\n\nReturns an error if `output` is smaller than the estimated decoded length.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nSee [crate::decoded_len_estimate] for calculating buffer sizes.\n\nSee [Engine::decode_slice_unchecked] for a version that panics instead of returning an error\nif the output buffer is too small.\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.","links":{"crate::decoded_len_estimate":"0:449:1701","Engine::decode_slice_unchecked":"0:354:2316"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:49:1915":{"id":"b:2:2258-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:369:926":{"id":"0:369:926","crate_id":0,"name":"new","span":{"filename":"src/alphabet.rs","begin":[47,4],"end":[93,5]},"visibility":"public","docs":"Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n\nThe `=` byte is not allowed as it is used for padding.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:396:1694":{"id":"0:396:1694","crate_id":0,"name":"encode_engine_string","span":{"filename":"src/encode.rs","begin":[38,0],"end":[44,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 into a supplied `String`.\n\n See [Engine::encode_string].","links":{"Engine::encode_string":"0:343:1906"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode_string\")]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode_string"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:466:1858":{"id":"b:2:2550-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[60,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:185:2018","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:198:2162","0:199:1997"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2554-0:493:2341":{"id":"b:2:2554-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11914:34290":{"id":"2:11914:34290","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:34291","crate::ops::Index":"2:3016:2889"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[33,0],"end":[38,1]},"visibility":{"restricted":{"parent":"0:40:1687","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:64:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:326:2445":{"id":"0:326:2445","crate_id":0,"name":"STANDARD_NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[332,0],"end":[332,93]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [NO_PAD] config.","links":{"NO_PAD":"0:330:2446","GeneralPurpose":"0:291:1857","alphabet::STANDARD":"0:376:1855"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:446:1700":{"id":"0:446:1700","crate_id":0,"name":"decode_engine_slice","span":{"filename":"src/decode.rs","begin":[125,0],"end":[131,1]},"visibility":"public","docs":"Decode the input into the provided output slice.\n\nSee [Engine::decode_slice].","links":{"Engine::decode_slice":"0:351:2311"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode_slice"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,16],"end":[9,21]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:556:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2695:217-0:189:2020":{"id":"a:2:2695:217-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11952:34293":{"id":"2:11952:34293","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:2905","str::split":"2:11943:28042","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:34294"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:3501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:508:1987":{"id":"0:508:1987","crate_id":0,"name":"InvalidLength","span":{"filename":"src/alphabet.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":"Alphabets must be 64 ASCII bytes","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:2759:3289-0:527:1697":{"id":"a:2:2759:3289-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[174,0],"end":[295,1]},"visibility":{"restricted":{"parent":"0:75:1930","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3373:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["take","read_buf_exact","read_to_end","bytes","read_to_string","by_ref","read_exact","read_vectored","chain","read_buf","is_read_vectored"],"trait":{"name":"Read","id":"1:3373:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:123:1688"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[322,0],"end":[326,1]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Config","id":"0:356:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:324:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11939:3407":{"id":"2:11939:3407","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:493:2341":{"id":"a:2:2709:225-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:391:597":{"id":"0:391:597","crate_id":0,"name":"encode","span":{"filename":"src/encode.rs","begin":[18,0],"end":[20,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the [`STANDARD` engine](STANDARD).\n\nSee [Engine::encode].","links":{"STANDARD":"0:325:1855","Engine::encode":"0:341:597"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2556:683":{"id":"2:2556:683","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:189:2020":{"id":"b:2:2565-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:328:2450":{"id":"0:328:2450","crate_id":0,"name":"URL_SAFE_NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[338,0],"end":[338,93]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [NO_PAD] config.","links":{"alphabet::URL_SAFE":"0:377:2448","GeneralPurpose":"0:291:1857","NO_PAD":"0:330:2446"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[248,0],"end":[313,1]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:317:926","0:318:2421","0:319:2429","0:320:2440"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:5617-0:540:1702":{"id":"b:5:5617-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11970:2858":{"id":"2:11970:2858","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:2858"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:3504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:140:2019":{"id":"b:2:2560-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2622-0:507:2538":{"id":"b:2:2622-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:13862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:3774"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:2:2261-0:540:1702":{"id":"b:2:2261-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8216:3233-0:527:1697":{"id":"a:2:8216:3233-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[143,0],"end":[149,1]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11964:34295":{"id":"2:11964:34295","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2550-0:291:1857":{"id":"b:2:2550-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2560-0:540:1702":{"id":"b:2:2560-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,23],"end":[22,25]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11932:28054":{"id":"2:11932:28054","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:34304":{"id":"2:11989:34304","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:214:2171":{"id":"0:214:2171","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[105,4],"end":[107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5370:2725":{"id":"5:5370:2725","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:527:1697":{"id":"0:527:1697","crate_id":0,"name":"EncodeSliceError","span":{"filename":"src/encode.rs","begin":[138,0],"end":[141,1]},"visibility":"public","docs":"Errors that can occur while encoding into a slice.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:528:2262"],"impls":["a:2:2709:225-0:527:1697","a:2:8216:3233-0:527:1697","a:2:8217:3232-0:527:1697","a:2:2759:3289-0:527:1697","a:2:2695:217-0:527:1697","b:2:3354-0:527:1697","b:2:2565-0:527:1697","b:2:2560-0:527:1697","b:2:2622-0:527:1697","b:2:2550-0:527:1697","b:2:2554-0:527:1697","b:2:2258-0:527:1697","b:2:2261-0:527:1697","b:5:5617-0:527:1697","b:5:681-0:527:1697","0:537","0:535","0:538","0:530","0:408","0:532","0:534","0:410"]}},"0:497:414":{"id":"0:497:414","crate_id":0,"name":"clone","span":{"filename":"src/alphabet.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:86:1931":{"id":"b:2:2258-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:536:602":{"id":"0:536:602","crate_id":0,"name":"eq","span":{"filename":"src/encode.rs","begin":[137,23],"end":[137,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:3289-0:140:2019":{"id":"a:2:2759:3289-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2709:225-0:291:1857":{"id":"a:2:2709:225-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:576":{"id":"0:576","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,34],"end":[51,36]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:684:3463":{"id":"5:684:3463","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[241,22],"end":[241,27]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:208:1689":{"id":"0:208:1689","crate_id":0,"name":"write","span":{"filename":"src/write/encoder_string_writer.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:566:1575":{"id":"0:566:1575","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[54,16],"end":[54,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"2:11902:2535":{"id":"2:11902:2535","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:1848"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:2429":{"id":"0:319:2429","crate_id":0,"name":"with_decode_allow_trailing_bits","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[287,4],"end":[292,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.\n\nMost users will not need to configure this. It's useful if you need to decode base64\nproduced by a buggy encoder that has bits set in the unused space on the last base64\ncharacter as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).\nIf invalid trailing bits are present and this is `true`, those bits will\nbe silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["allow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1931":{"id":"0:86:1931","crate_id":0,"name":"DecoderReader","span":{"filename":"src/read/decoder.rs","begin":[33,0],"end":[56,1]},"visibility":"public","docs":"A `Read` implementation that decodes base64 data read from an underlying reader.\n\n# Examples\n\n```\nuse std::io::Read;\nuse std::io::Cursor;\nuse base64::engine::general_purpose;\n\n// use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.\nlet mut wrapped_reader = Cursor::new(b\"YXNkZg==\");\nlet mut decoder = base64::read::DecoderReader::new(\n    &mut wrapped_reader,\n    &general_purpose::STANDARD);\n\n// handle errors as you normally would\nlet mut result = Vec::new();\ndecoder.read_to_end(&mut result).unwrap();\n\nassert_eq!(b\"asdf\", &result[..]);\n\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3373:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:106","a:2:2709:225-0:86:1931","a:2:8216:3233-0:86:1931","a:2:8217:3232-0:86:1931","a:2:2759:3289-0:86:1931","a:2:2695:217-0:86:1931","b:2:3354-0:86:1931","b:2:2565-0:86:1931","b:2:2560-0:86:1931","b:2:2550-0:86:1931","b:2:2554-0:86:1931","b:2:2258-0:86:1931","b:2:2261-0:86:1931","0:101","0:119"]}},"0:317:926":{"id":"0:317:926","crate_id":0,"name":"new","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[254,4],"end":[261,5]},"visibility":"public","docs":"Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and\n`decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.\n\nThis probably matches most people's expectations, but consider disabling padding to save\na few bytes unless you specifically need it for compatibility with some legacy system.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[27,0],"end":[94,1]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:369:926"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2560-0:563:1703":{"id":"b:2:2560-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8217:3232-0:527:1697":{"id":"a:2:8217:3232-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[111,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:185:2018","path":"::write::encoder_string_writer"}},"docs":"Pushes the str onto the end of the String","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:2171"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3354-0:493:2341":{"id":"b:2:3354-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11955:34294":{"id":"2:11955:34294","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:2905","str::split":"2:11943:28042","prim@char":"1:11864:410","str::split_terminator":"2:11952:34293"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:189:2020":{"id":"a:2:8216:3233-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:123:1688":{"id":"0:123:1688","crate_id":0,"name":"read","span":{"filename":"src/read/decoder.rs","begin":[187,4],"end":[294,5]},"visibility":"default","docs":"Decode input from the wrapped reader.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nwritten in `buf`.\n\nWhere possible, this function buffers base64 to minimize the number of read() calls to the\ndelegate reader.\n\n# Errors\n\nAny errors emitted by the delegate reader are returned. Decoding errors due to invalid\nbase64 are also possible, and will have `io::ErrorKind::InvalidData`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:1693":{"id":"0:393:1693","crate_id":0,"name":"encode_engine","span":{"filename":"src/encode.rs","begin":[28,0],"end":[30,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the provided `Engine` into a new `String`.\n\n See [Engine::encode].","links":{"Engine::encode":"0:341:597"},"attrs":["#[allow(unused)]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::encode"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:563:1703":{"id":"b:2:2554-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[129,0],"end":[129,43]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","type_id","provide"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:300:1807":{"id":"0:300:1807","crate_id":0,"name":"Config","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[42,4],"end":[42,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11946:28044":{"id":"2:11946:28044","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:49:1915":{"id":"a:2:8216:3233-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:329:1859":{"id":"0:329:1859","crate_id":0,"name":"PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[344,0],"end":[344,66]},"visibility":"public","docs":"Include padding bytes when encoding, and require that they be present when decoding.\n\nThis is the standard per the base64 RFC, but consider using [NO_PAD] instead as padding serves\nlittle purpose in practice.","links":{"NO_PAD":"0:330:2446"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"a:2:2695:217-0:527:1697":{"id":"a:2:2695:217-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2554-0:527:1697":{"id":"b:2:2554-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8216:3233-0:563:1703":{"id":"a:2:8216:3233-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:574":{"id":"0:574","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,23],"end":[51,32]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:575:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8216:3233-0:140:2019":{"id":"a:2:8216:3233-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2695:217-0:86:1931":{"id":"a:2:2695:217-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:478:2337":{"id":"0:478:2337","crate_id":0,"name":"RequireCanonical","span":{"filename":"src/engine/mod.rs","begin":[407,4],"end":[407,20]},"visibility":"default","docs":"Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:5:681-0:466:1858":{"id":"b:5:681-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2550-0:475:2333":{"id":"b:2:2550-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:475:2333":{"id":"b:5:681-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:550:1576":{"id":"0:550:1576","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[24,29],"end":[24,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"b:2:2258-0:493:2341":{"id":"b:2:2258-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:513:2541":{"id":"0:513:2541","crate_id":0,"name":"UnprintableByte","span":{"filename":"src/alphabet.rs","begin":[112,4],"end":[112,23]},"visibility":"default","docs":"All bytes must be printable (in the range `[32, 126]`).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:515:1575"]},"discriminant":null}},"2:11982:34300":{"id":"2:11982:34300","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:28048":{"id":"2:11958:28048","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905","str::rsplitn":"2:11961:28050"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:3503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:291:1857":{"id":"b:2:3354-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:459:1052":{"id":"0:459:1052","crate_id":0,"name":"prelude","span":{"filename":"src/prelude.rs","begin":[1,0],"end":[19,82]},"visibility":"public","docs":"Preconfigured engines for common use cases.\n\nThese are re-exports of `const` engines in [crate::engine::general_purpose], renamed with a `BASE64_`\nprefix for those who prefer to `use` the entire path to a name.\n\n# Examples\n\n```\nuse base64::prelude::{Engine as _, BASE64_STANDARD_NO_PAD};\n\nassert_eq!(\"c29tZSBieXRlcw\", &BASE64_STANDARD_NO_PAD.encode(b\"some bytes\"));\n```","links":{"crate::engine::general_purpose":"0:242:1856"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:460-0:334:1691","0:461-0:325:1855","0:462-0:326:2445","0:463-0:327:2448","0:464-0:328:2450"],"is_stripped":false}},"2:12019:8514":{"id":"2:12019:8514","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:8514"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:3510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:28034":{"id":"2:11916:28034","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:28035"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1997":{"id":"0:118:1997","crate_id":0,"name":"into_inner","span":{"filename":"src/read/decoder.rs","begin":[169,4],"end":[171,5]},"visibility":"public","docs":"Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded\ninput from.\n\nBecause `DecoderReader` performs internal buffering, the state of the inner reader is\nunspecified. This function is mainly provided because the inner reader type may provide\nadditional functionality beyond the `Read` implementation which may still be useful.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:1696":{"id":"0:404:1696","crate_id":0,"name":"encoded_len","span":{"filename":"src/encode.rs","begin":[97,0],"end":[117,1]},"visibility":"public","docs":"Calculate the base64 encoded length for a given input length, optionally including any\nappropriate padding bytes.\n\nReturns `None` if the encoded length can't be represented in `usize`. This will happen for\ninput lengths in approximately the top quarter of the range of `usize`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes_len",{"kind":"primitive","inner":"usize"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[248,0],"end":[398,1]},"visibility":{"restricted":{"parent":"0:128:1908","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_vectored","by_ref","write_all_vectored","write_fmt","is_write_vectored","write_all"],"trait":{"name":"Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:175:1689","0:179:2141"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:419-0:527:1697":{"id":"0:419-0:527:1697","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,58],"end":[165,74]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::EncodeSliceError","name":"EncodeSliceError","id":"0:527:1697","glob":false}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,40],"end":[402,42]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:551:1989":{"id":"0:551:1989","crate_id":0,"name":"InvalidPadding","span":{"filename":"src/decode.rs","begin":[27,4],"end":[27,18]},"visibility":"default","docs":"The nature of the padding was not as configured: absent or incorrect when it must be\ncanonical, or present when it must be absent, etc.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:27728":{"id":"2:12016:27728","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:189:2020":{"id":"b:2:2560-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:466:1858":{"id":"0:466:1858","crate_id":0,"name":"GeneralPurposeConfig","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[242,0],"end":[246,1]},"visibility":"public","docs":"Contains configuration parameters for base64 encoding and decoding.\n\n```\n# use base64::engine::GeneralPurposeConfig;\nlet config = GeneralPurposeConfig::new()\n    .with_encode_padding(false);\n    // further customize using `.with_*` methods as needed\n```\n\nThe constants [PAD] and [NO_PAD] cover most use cases.\n\nTo specify the characters used, see [Alphabet].","links":{"PAD":"0:329:1859","Alphabet":"0:493:2341","NO_PAD":"0:330:2446"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:316","a:2:2709:225-0:466:1858","a:2:8216:3233-0:466:1858","a:2:8217:3232-0:466:1858","a:2:2759:3289-0:466:1858","a:2:2695:217-0:466:1858","b:2:3354-0:466:1858","b:2:2565-0:466:1858","b:2:2560-0:466:1858","b:2:2550-0:466:1858","b:2:2554-0:466:1858","b:2:2258-0:466:1858","b:2:2261-0:466:1858","b:5:681-0:466:1858","0:472","0:473","0:321","0:470","0:323"]}},"0:512:1575":{"id":"0:512:1575","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[110,19],"end":[110,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"a:2:2759:3289-0:507:2538":{"id":"a:2:2759:3289-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12011:34310":{"id":"2:12011:34310","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:2900"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:2900","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:2900","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[87,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:185:2018","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_vectored","by_ref","write_all_vectored","write_fmt","is_write_vectored","write_all"],"trait":{"name":"Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:208:1689","0:209:2141"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:489:602":{"id":"0:489:602","crate_id":0,"name":"eq","span":{"filename":"src/engine/mod.rs","begin":[402,29],"end":[402,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:2563":{"id":"0:378:2563","crate_id":0,"name":"CRYPT","span":{"filename":"src/alphabet.rs","begin":[148,0],"end":[150,2]},"visibility":"public","docs":"The `crypt(3)` alphabet (uses `.` and `/` as the first two values).\n\nNot standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"b:2:2565-0:49:1915":{"id":"b:2:2565-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2563:127":{"id":"2:2563:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"a:2:2709:225-0:563:1703":{"id":"a:2:2709:225-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:414-0:393:1693":{"id":"0:414-0:393:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,32],"end":[163,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine","name":"encode_engine","id":"0:393:1693","glob":false}},"2:12015:27727":{"id":"2:12015:27727","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:28050":{"id":"2:11961:28050","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:28048","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:3502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:189:2020":{"id":"a:2:2709:225-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:475:2333":{"id":"b:2:2565-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:452-0:440:1698":{"id":"0:452-0:440:1698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,32],"end":[170,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine","name":"decode_engine","id":"0:440:1698","glob":false}},"b:2:2258-0:291:1857":{"id":"b:2:2258-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:140:2019":{"id":"b:2:3354-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:333-0:466:1858":{"id":"0:333-0:466:1858","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[22,42],"end":[22,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"general_purpose::GeneralPurposeConfig","name":"GeneralPurposeConfig","id":"0:466:1858","glob":false}},"a:2:2759:3289-0:189:2020":{"id":"a:2:2759:3289-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5619:1428":{"id":"5:5619:1428","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:189:2020":{"id":"b:2:2258-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11986:34302":{"id":"2:11986:34302","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:657":{"id":"0:157:657","crate_id":0,"name":"fmt","span":{"filename":"src/write/encoder.rs","begin":[84,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:291:1857":{"id":"b:2:2554-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:199:1997":{"id":"0:199:1997","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder_string_writer.rs","begin":[72,4],"end":[77,5]},"visibility":"public","docs":"Encode all remaining buffered data, including any trailing incomplete input triples and\nassociated padding.\n\nReturns the base64-encoded form of the accumulated written data.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"S"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:31344":{"id":"2:11922:31344","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:31315"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:3512","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:140:2019":{"id":"b:2:2550-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:540:1702":{"id":"b:5:681-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[23,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:40:1687","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:59:926"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:483:414":{"id":"0:483:414","crate_id":0,"name":"clone","span":{"filename":"src/engine/mod.rs","begin":[402,9],"end":[402,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:527:1697":{"id":"b:2:2261-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11925:31308":{"id":"2:11925:31308","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:3508","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377:2448":{"id":"0:377:2448","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/alphabet.rs","begin":[141,0],"end":[143,2]},"visibility":"public","docs":"The URL safe alphabet (uses `-` and `_`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:415-0:396:1694":{"id":"0:415-0:396:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,47],"end":[163,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_string","name":"encode_engine_string","id":"0:396:1694","glob":false}},"2:11895:1969":{"id":"2:11895:1969","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:493:2341":{"id":"b:2:2261-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2759:3289-0:475:2333":{"id":"a:2:2759:3289-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:475:2333":{"id":"0:475:2333","crate_id":0,"name":"DecodePaddingMode","span":{"filename":"src/engine/mod.rs","begin":[403,0],"end":[410,1]},"visibility":"public","docs":"Controls how pad bytes are handled when decoding.\n\nEach [Engine] must support at least the behavior indicated by\n[DecodePaddingMode::RequireCanonical], and may support other modes.","links":{"DecodePaddingMode::RequireCanonical":"0:478:2337","Engine":"0:334:1691"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:476:2335","0:478:2337","0:480:2339"],"impls":["a:2:2709:225-0:475:2333","a:2:8216:3233-0:475:2333","a:2:8217:3232-0:475:2333","a:2:2759:3289-0:475:2333","a:2:2695:217-0:475:2333","b:2:3354-0:475:2333","b:2:2565-0:475:2333","b:2:2560-0:475:2333","b:2:2550-0:475:2333","b:2:2554-0:475:2333","b:2:2258-0:475:2333","b:2:2261-0:475:2333","b:5:681-0:475:2333","0:490","0:482","0:485","0:491","0:487","0:484","0:488"]}},"2:12002:34307":{"id":"2:12002:34307","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140:2019":{"id":"0:140:2019","crate_id":0,"name":"EncoderWriter","span":{"filename":"src/write/encoder.rs","begin":[63,0],"end":[81,1]},"visibility":"public","docs":"A `Write` implementation that base64 encodes data before delegating to the wrapped writer.\n\nBecause base64 has special handling for the end of the input data (padding, etc), there's a\n`finish()` method on this type that encodes any leftover input bytes and adds padding if\nappropriate. It's called automatically when deallocated (see the `Drop` implementation), but\nany error that occurs when invoking the underlying writer will be suppressed. If you want to\nhandle such errors, call `finish()` yourself.\n\n# Examples\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\n// use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.\nlet mut enc = base64::write::EncoderWriter::new(Vec::new(), &general_purpose::STANDARD);\n\n// handle errors as you normally would\nenc.write_all(b\"asdf\").unwrap();\n\n// could leave this out to be called by Drop, if you don't care\n// about handling errors or getting the delegate writer back\nlet delegate = enc.finish().unwrap();\n\n// base64 was written to the writer\nassert_eq!(b\"YXNkZg==\", &delegate[..]);\n\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Errors\n\nBase64 encoding itself does not generate errors, but errors from the wrapped writer will be\nreturned as per the contract of `Write`.\n\n# Performance\n\nIt has some minor performance loss compared to encoding slices (a couple percent).\nIt does not do any heap allocation.\n\n# Limitations\n\nOwing to the specification of the `write` and `flush` methods on the `Write` trait and their\nimplications for a buffering implementation, these methods may not behave as expected. In\nparticular, calling `write_all` on this interface may fail with `io::ErrorKind::WriteZero`.\nSee the documentation of the `Write` trait implementation for further details.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:158","a:2:2709:225-0:140:2019","a:2:8216:3233-0:140:2019","a:2:8217:3232-0:140:2019","a:2:2759:3289-0:140:2019","a:2:2695:217-0:140:2019","b:2:3354-0:140:2019","b:2:2565-0:140:2019","b:2:2560-0:140:2019","b:2:2550-0:140:2019","b:2:2554-0:140:2019","b:2:2258-0:140:2019","b:2:2261-0:140:2019","0:153","0:180","0:171"]}},"0:184:578":{"id":"0:184:578","crate_id":0,"name":"drop","span":{"filename":"src/write/encoder.rs","begin":[401,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:381:2574":{"id":"0:381:2574","crate_id":0,"name":"BIN_HEX","span":{"filename":"src/alphabet.rs","begin":[167,0],"end":[169,2]},"visibility":"public","docs":"The alphabet used in BinHex 4.0 files.\n\nSee [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"a:2:8216:3233-0:507:2538":{"id":"a:2:8216:3233-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:165:1960":{"id":"0:165:1960","crate_id":0,"name":"finish","span":{"filename":"src/write/encoder.rs","begin":[126,4],"end":[138,5]},"visibility":"public","docs":"Encode all remaining buffered data and write it, including any trailing incomplete input\ntriples and associated padding.\n\nOnce this succeeds, no further writes or calls to this method are allowed.\n\nThis may write to the delegate writer multiple times if the delegate writer does not accept\nall input provided to its `write` each invocation.\n\nIf you don't care about error handling, it is not necessary to call this function, as the\nequivalent finalization is done by the Drop impl.\n\nReturns the writer that this was constructed around.\n\n# Errors\n\nThe first error that is not of `ErrorKind::Interrupted` will be returned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:531:414":{"id":"0:531:414","crate_id":0,"name":"clone","span":{"filename":"src/encode.rs","begin":[137,9],"end":[137,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:379:2566":{"id":"0:379:2566","crate_id":0,"name":"BCRYPT","span":{"filename":"src/alphabet.rs","begin":[153,0],"end":[155,2]},"visibility":"public","docs":"The bcrypt alphabet.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:540:1702":{"id":"0:540:1702","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[10,0],"end":[28,1]},"visibility":"public","docs":"Errors that can occur while decoding.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:541:1985","0:545:1987","0:547:1988","0:551:1989"],"impls":["a:2:2709:225-0:540:1702","a:2:8216:3233-0:540:1702","a:2:8217:3232-0:540:1702","a:2:2759:3289-0:540:1702","a:2:2695:217-0:540:1702","b:2:3354-0:540:1702","b:2:2565-0:540:1702","b:2:2560-0:540:1702","b:2:2622-0:540:1702","b:2:2550-0:540:1702","b:2:2554-0:540:1702","b:2:2258-0:540:1702","b:2:2261-0:540:1702","b:5:5617-0:540:1702","b:5:681-0:540:1702","0:436","0:557","0:558","0:428","0:561","0:553","0:560","0:430","0:555"]}},"5:5353:34961":{"id":"5:5353:34961","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2894","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:3289-0:466:1858":{"id":"a:2:2759:3289-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:528:2262":{"id":"0:528:2262","crate_id":0,"name":"OutputSliceTooSmall","span":{"filename":"src/encode.rs","begin":[140,4],"end":[140,23]},"visibility":"default","docs":"The provided slice is too small.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:301:2197":{"id":"0:301:2197","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[43,4],"end":[43,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"GeneralPurposeEstimate","id":"0:265:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:3354-0:189:2020":{"id":"b:2:3354-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:28012","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:507:2538":{"id":"b:2:2560-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:525":{"id":"0:525","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:526:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2553:2312":{"id":"2:2553:2312","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2527:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:506:602":{"id":"0:506:602","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:493:2341":{"id":"b:2:2565-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,16],"end":[105,18]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:464-0:328:2450":{"id":"0:464-0:328:2450","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[19,0],"end":[19,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::engine::general_purpose::URL_SAFE_NO_PAD","name":"BASE64_URL_SAFE_NO_PAD","id":"0:328:2450","glob":false}},"b:2:2560-0:475:2333":{"id":"b:2:2560-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:577":{"id":"0:577","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,34],"end":[51,36]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3354-0:466:1858":{"id":"b:2:3354-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5617-0:507:2538":{"id":"b:5:5617-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:558":{"id":"0:558","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:559:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11999:28055":{"id":"2:11999:28055","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443:1699":{"id":"0:443:1699","crate_id":0,"name":"decode_engine_vec","span":{"filename":"src/decode.rs","begin":[113,0],"end":[119,1]},"visibility":"public","docs":"Decode from string reference as octets.\n\nSee [Engine::decode_vec].","links":{"Engine::decode_vec":"0:349:2297"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]","#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_vec\")]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode_vec"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6671:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:540:1702":{"id":"a:2:2695:217-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:86:1931":{"id":"b:2:2565-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:86:1931":{"id":"b:2:3354-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5617-0:563:1703":{"id":"b:5:5617-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:462-0:326:2445":{"id":"0:462-0:326:2445","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[17,0],"end":[17,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::engine::general_purpose::STANDARD_NO_PAD","name":"BASE64_STANDARD_NO_PAD","id":"0:326:2445","glob":false}},"b:2:2258-0:507:2538":{"id":"b:2:2258-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,34],"end":[137,36]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2565-0:466:1858":{"id":"b:2:2565-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[61,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[315,0],"end":[320,1]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2601:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:322:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:225-0:527:1697":{"id":"a:2:2709:225-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:409:657":{"id":"0:409:657","crate_id":0,"name":"fmt","span":{"filename":"src/encode.rs","begin":[144,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228-0:210:2021":{"id":"0:228-0:210:2021","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[7,49],"end":[7,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::StrConsumer","name":"StrConsumer","id":"0:210:2021","glob":false}},"0:376:1855":{"id":"0:376:1855","crate_id":0,"name":"STANDARD","span":{"filename":"src/alphabet.rs","begin":[134,0],"end":[136,2]},"visibility":"public","docs":"The standard alphabet (uses `+` and `/`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"2:11896:34286":{"id":"2:11896:34286","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:140:2019":{"id":"b:2:2554-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:515:1575":{"id":"0:515:1575","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[112,20],"end":[112,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"a:2:2695:217-0:49:1915":{"id":"a:2:2695:217-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:227-0:189:2020":{"id":"0:227-0:189:2020","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[7,28],"end":[7,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::EncoderStringWriter","name":"EncoderStringWriter","id":"0:189:2020","glob":false}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,34],"end":[9,36]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,16],"end":[105,18]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2554-0:475:2333":{"id":"b:2:2554-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2695:217-0:493:2341":{"id":"a:2:2695:217-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5617-0:49:1915":{"id":"b:5:5617-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8217:3232-0:466:1858":{"id":"a:2:8217:3232-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,29],"end":[402,38]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:225-0:49:1915":{"id":"a:2:2709:225-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:291:1857":{"id":"0:291:1857","crate_id":0,"name":"GeneralPurpose","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[21,0],"end":[25,1]},"visibility":"public","docs":"A general-purpose base64 engine.\n\n- It uses no vector CPU instructions, so it will work on any system.\n- It is reasonably fast (~2-3GiB/s).\n- It is not constant-time, though, so it is vulnerable to timing side-channel attacks. For loading cryptographic keys, etc, it is suggested to use the forthcoming constant-time implementation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:297","a:2:2709:225-0:291:1857","a:2:8216:3233-0:291:1857","a:2:8217:3232-0:291:1857","a:2:2759:3289-0:291:1857","a:2:2695:217-0:291:1857","b:2:3354-0:291:1857","b:2:2565-0:291:1857","b:2:2560-0:291:1857","b:2:2550-0:291:1857","b:2:2554-0:291:1857","b:2:2258-0:291:1857","b:2:2261-0:291:1857","0:299"]}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,23],"end":[51,32]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:556:657":{"id":"0:556:657","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[9,16],"end":[9,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[241,9],"end":[241,14]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2695:217-0:475:2333":{"id":"a:2:2695:217-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12008:34309":{"id":"2:12008:34309","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:527:1697":{"id":"b:2:2550-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11908:28009":{"id":"2:11908:28009","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:28010":{"id":"2:11910:28010","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:49:1915":{"id":"b:2:3354-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,16],"end":[51,21]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:572:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:438:531":{"id":"0:438:531","crate_id":0,"name":"decode","span":{"filename":"src/decode.rs","begin":[91,0],"end":[93,1]},"visibility":"public","docs":"Decode base64 using the [`STANDARD` engine](STANDARD).\n\nSee [Engine::decode].","links":{"STANDARD":"0:325:1855","Engine::decode":"0:347:531"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6671:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:926":{"id":"0:203:926","crate_id":0,"name":"new","span":{"filename":"src/write/encoder_string_writer.rs","begin":[82,4],"end":[84,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will encode into a new `String` with the provided config.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:540:1702":{"id":"a:2:2709:225-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:471:414":{"id":"0:471:414","crate_id":0,"name":"clone","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[241,9],"end":[241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:1822":{"id":"0:308:1822","crate_id":0,"name":"config","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:334:1691","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347:531":{"id":"0:347:531","crate_id":0,"name":"decode","span":{"filename":"src/engine/mod.rs","begin":[234,4],"end":[244,5]},"visibility":"default","docs":"Decode from string reference as octets using the specified [Engine].\nReturns a `Result` containing a `Vec<u8>`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n\nlet bytes = general_purpose::STANDARD\n    .decode(\"aGVsbG8gd29ybGR+Cg==\").unwrap();\nprintln!(\"{:?}\", bytes);\n\n// custom engine setup\nlet bytes_url = engine::GeneralPurpose::new(\n             &alphabet::URL_SAFE,\n             general_purpose::NO_PAD)\n    .decode(\"aGVsbG8gaW50ZXJuZXR-Cg\").unwrap();\nprintln!(\"{:?}\", bytes_url);\n```\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.","links":{"Engine":"0:334:1691"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6671:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:476:2335":{"id":"0:476:2335","crate_id":0,"name":"Indifferent","span":{"filename":"src/engine/mod.rs","begin":[405,4],"end":[405,15]},"visibility":"default","docs":"Canonical padding is allowed, but any fewer padding bytes than that is also allowed.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"b:2:2550-0:49:1915":{"id":"b:2:2550-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:544:1576":{"id":"0:544:1576","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[13,23],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"b:2:3354-0:563:1703":{"id":"b:2:3354-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,29],"end":[402,38]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2263:24619":{"id":"2:2263:24619","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:657":{"id":"0:64:657","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[34,4],"end":[37,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:41699:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[51,9],"end":[51,14]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:431:388":{"id":"0:431:388","crate_id":0,"name":"cause","span":{"filename":"src/decode.rs","begin":[45,4],"end":[47,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:926":{"id":"0:110:926","crate_id":0,"name":"new","span":{"filename":"src/read/decoder.rs","begin":[73,4],"end":[85,5]},"visibility":"public","docs":"Create a new decoder that will read from the provided reader `r`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["reader",{"kind":"generic","inner":"R"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:86:1931":{"id":"b:2:2560-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:127:1689":{"id":"0:127:1689","crate_id":0,"name":"write","span":{"filename":"src/write/mod.rs","begin":[1,0],"end":[11,18]},"visibility":"public","docs":"Implementations of `io::Write` to transparently handle base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:225-0:140:2019","0:227-0:189:2020","0:228-0:210:2021"],"is_stripped":false}},"b:2:2565-0:563:1703":{"id":"b:2:2565-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:480:2339":{"id":"0:480:2339","crate_id":0,"name":"RequireNone","span":{"filename":"src/engine/mod.rs","begin":[409,4],"end":[409,15]},"visibility":"default","docs":"Padding must be absent -- for when you want predictable padding, without any wasted bytes.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[96,0],"end":[102,1]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:127","0:372:1448"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2258-0:466:1858":{"id":"b:2:2258-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:324:1823":{"id":"0:324:1823","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[323,4],"end":[325,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[71,0],"end":[172,1]},"visibility":{"restricted":{"parent":"0:75:1930","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3373:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:110:926","0:118:1997"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:298:926":{"id":"0:298:926","crate_id":0,"name":"new","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a `GeneralPurpose` engine from an [Alphabet].\n\nWhile not very expensive to initialize, ideally these should be cached\nif the engine will be used repeatedly.","links":{"Alphabet":"0:493:2341"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["config",{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:466:1858":{"id":"b:2:2554-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2554-0:49:1915":{"id":"b:2:2554-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:359:1701":{"id":"0:359:1701","crate_id":0,"name":"decoded_len_estimate","span":{"filename":"src/engine/mod.rs","begin":[395,4],"end":[395,44]},"visibility":"default","docs":"Returns a conservative (err on the side of too big) estimate of the decoded length to use\nfor pre-allocating buffers, etc.\n\nThe estimate must be no larger than the next largest complete triple of decoded bytes.\nThat is, the final quad of tokens to decode may be assumed to be complete with no padding.\n\n# Panics\n\nPanics if decoded length estimation overflows.\nThis would happen for sizes within a few bytes of the maximum value of `usize`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,23],"end":[22,25]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:358:2197":{"id":"0:358:2197","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[384,0],"end":[396,1]},"visibility":"public","docs":"The decode estimate used by an engine implementation. Users do not need to interact with this;\nit is only for engine implementors.\n\nImplementors may store relevant data here when constructing this to avoid having to calculate\nthem again during actual decoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:359:1701"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:533:657":{"id":"0:533:657","crate_id":0,"name":"fmt","span":{"filename":"src/encode.rs","begin":[137,16],"end":[137,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2622-0:540:1702":{"id":"b:2:2622-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:13862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:3774"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11943:28042":{"id":"2:11943:28042","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:31315","str::rsplit":"2:11949:28046"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:2969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,16],"end":[22,21]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:499:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[58,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:75:1930","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3373:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:105:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2261-0:189:2020":{"id":"b:2:2261-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11929:28053":{"id":"2:11929:28053","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:507:2538":{"id":"a:2:2709:225-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8216:3233-0:466:1858":{"id":"a:2:8216:3233-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:453-0:443:1699":{"id":"0:453-0:443:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,47],"end":[170,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_vec","name":"decode_engine_vec","id":"0:443:1699","glob":false}},"0:340:1822":{"id":"0:340:1822","crate_id":0,"name":"config","span":{"filename":"src/engine/mod.rs","begin":[105,4],"end":[105,38]},"visibility":"default","docs":"Returns the config for this engine.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:334:1691","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:463-0:327:2448":{"id":"0:463-0:327:2448","crate_id":0,"name":null,"span":{"filename":"src/prelude.rs","begin":[18,0],"end":[18,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::engine::general_purpose::URL_SAFE","name":"BASE64_URL_SAFE","id":"0:327:2448","glob":false}},"0:413-0:391:597":{"id":"0:413-0:391:597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[163,24],"end":[163,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode","name":"encode","id":"0:391:597","glob":false}},"b:5:681-0:527:1697":{"id":"b:5:681-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:547:1988":{"id":"0:547:1988","crate_id":0,"name":"InvalidLastSymbol","span":{"filename":"src/decode.rs","begin":[24,4],"end":[24,32]},"visibility":"default","docs":"The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\nThis is indicative of corrupted or truncated Base64.\nUnlike `InvalidByte`, which reports symbols that aren't in the alphabet, this error is for\nsymbols that are in the alphabet but represent nonsensical encodings.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:549:1575","0:550:1576"]},"discriminant":null}},"0:327:2448":{"id":"0:327:2448","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[335,0],"end":[335,83]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [PAD] config.","links":{"PAD":"0:329:1859","alphabet::URL_SAFE":"0:377:2448","GeneralPurpose":"0:291:1857"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"2:11906:28008":{"id":"2:11906:28008","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:86:1931":{"id":"b:2:2261-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:209:2141":{"id":"0:209:2141","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder_string_writer.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:526:602":{"id":"0:526:602","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:540:1702":{"id":"b:2:3354-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2622-0:527:1697":{"id":"b:2:2622-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:13862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:3774"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[9,34],"end":[9,36]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2706:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2261-0:291:1857":{"id":"b:2:2261-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2560-0:493:2341":{"id":"b:2:2560-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2564:1449":{"id":"2:2564:1449","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:140:2019":{"id":"b:2:2258-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:345:2090":{"id":"0:345:2090","crate_id":0,"name":"encode_slice","span":{"filename":"src/engine/mod.rs","begin":[188,4],"end":[207,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 into a supplied slice.\nWrites into the supplied output buffer.\n\nThis is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\nor statically-allocated buffer).\n\n# Example\n\n```rust\nuse base64::{Engine as _, engine::general_purpose};\nlet s = b\"hello internet!\";\nlet mut buf = Vec::new();\n// make sure we'll have a slice big enough for base64 + padding\nbuf.resize(s.len() * 4 / 3 + 4, 0);\n\nlet bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();\n\n// shorten our vec down to just what was written\nbuf.truncate(bytes_written);\n\nassert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[117,0],"end":[126,1]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:543:1575":{"id":"0:543:1575","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[13,16],"end":[13,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"b:2:2261-0:475:2333":{"id":"b:2:2261-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:541:1985":{"id":"0:541:1985","crate_id":0,"name":"InvalidByte","span":{"filename":"src/decode.rs","begin":[13,4],"end":[13,26]},"visibility":"default","docs":"An invalid byte was found in the input. The offset and offending byte are provided.\nPadding characters (`=`) interspersed in the encoded form will be treated as invalid bytes.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:543:1575","0:544:1576"]},"discriminant":null}},"b:2:3354-0:527:1697":{"id":"b:2:3354-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11915:34291":{"id":"2:11915:34291","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:2890","str::slice_unchecked":"2:11914:34290"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:3232-0:475:2333":{"id":"a:2:8217:3232-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11988:34303":{"id":"2:11988:34303","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:2141":{"id":"0:179:2141","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder.rs","begin":[391,4],"end":[397,5]},"visibility":"default","docs":"Because this is usually treated as OK to call multiple times, it will *not* flush any\nincomplete chunks of input or write padding.\n# Errors\n\nThe first error that is not of [`ErrorKind::Interrupted`] will be returned.","links":{"`ErrorKind::Interrupted`":"1:8024:2108"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12005:34308":{"id":"2:12005:34308","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:27726":{"id":"2:12014:27726","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1688":{"id":"0:74:1688","crate_id":0,"name":"read","span":{"filename":"src/read/mod.rs","begin":[1,0],"end":[6,18]},"visibility":"public","docs":"Implementations of `io::Read` to transparently decode base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:126-0:86:1931"],"is_stripped":false}},"0:435:388":{"id":"0:435:388","crate_id":0,"name":"cause","span":{"filename":"src/decode.rs","begin":[72,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332-0:291:1857":{"id":"0:332-0:291:1857","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[22,26],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"general_purpose::GeneralPurpose","name":"GeneralPurpose","id":"0:291:1857","glob":false}},"0:189:2020":{"id":"0:189:2020","crate_id":0,"name":"EncoderStringWriter","span":{"filename":"src/write/encoder_string_writer.rs","begin":[56,0],"end":[58,1]},"visibility":"public","docs":"A `Write` implementation that base64-encodes data using the provided config and accumulates the\nresulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is\nthen exposed via `into_inner()`.\n\n# Examples\n\nBuffer base64 in a new String:\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\nlet mut enc = base64::write::EncoderStringWriter::new(&general_purpose::STANDARD);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// get the resulting String\nlet b64_string = enc.into_inner();\n\nassert_eq!(\"YXNkZg==\", &b64_string);\n```\n\nOr, append to an existing `String`, which implements `StrConsumer`:\n\n```\nuse std::io::Write;\nuse base64::engine::general_purpose;\n\nlet mut buf = String::from(\"base64: \");\n\nlet mut enc = base64::write::EncoderStringWriter::from_consumer(\n    &mut buf,\n    &general_purpose::STANDARD);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// release the &mut reference on buf\nlet _ = enc.into_inner();\n\nassert_eq!(\"base64: YXNkZg==\", &buf);\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Performance\n\nBecause it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain\nbytes to a `io::Write`.","links":{"StrConsumer":"0:210:2021"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:210:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:194","0:200","a:2:2709:225-0:189:2020","a:2:8216:3233-0:189:2020","a:2:8217:3232-0:189:2020","a:2:2759:3289-0:189:2020","a:2:2695:217-0:189:2020","b:2:3354-0:189:2020","b:2:2565-0:189:2020","b:2:2560-0:189:2020","b:2:2550-0:189:2020","b:2:2554-0:189:2020","b:2:2258-0:189:2020","b:2:2261-0:189:2020","0:204"]}},"a:2:2695:217-0:291:1857":{"id":"a:2:2695:217-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11921:31315":{"id":"2:11921:31315","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:31344"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:3497","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,23],"end":[137,32]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2705:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2261-0:466:1858":{"id":"b:2:2261-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:24619"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2560-0:527:1697":{"id":"b:2:2560-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:320:2440":{"id":"0:320:2440","crate_id":0,"name":"with_decode_padding_mode","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[307,4],"end":[312,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_padding_mode` setting.\n\nPadding is not useful in terms of representing encoded data -- it makes no difference to\nthe decoder if padding is present or not, so if you have some un-padded input to decode, it\nis perfectly fine to use `DecodePaddingMode::Indifferent` to prevent errors from being\nemitted.\n\nHowever, since in practice\n[people who learned nothing from BER vs DER seem to expect base64 to have one canonical encoding](https://eprint.iacr.org/2022/361),\nthe default setting is the stricter `DecodePaddingMode::RequireCanonicalPadding`.\n\nOr, if \"canonical\" in your circumstance means _no_ padding rather than padding to the\nnext multiple of four, there's `DecodePaddingMode::RequireNoPadding`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["mode",{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:175:1689":{"id":"0:175:1689","crate_id":0,"name":"write","span":{"filename":"src/write/encoder.rs","begin":[265,4],"end":[384,5]},"visibility":"default","docs":"Encode input and then write to the delegate writer.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nof `input` consumed. The value may be `0`, which interacts poorly with `write_all`, which\ninterprets `Ok(0)` as an error, despite it being allowed by the contract of `write`. See\n<https://github.com/rust-lang/rust/issues/56889> for more on that.\n\nIf the previous call to `write` provided more (encoded) data than the delegate writer could\naccept in a single call to its `write`, the remaining data is buffered. As long as buffered\ndata is present, subsequent calls to `write` will try to write the remaining buffered data\nto the delegate and return either `Ok(0)` -- and therefore not consume any of `input` -- or\nan error.\n\n# Errors\n\nAny errors emitted by the delegate writer are returned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2867:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:1855":{"id":"0:325:1855","crate_id":0,"name":"STANDARD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[329,0],"end":[329,83]},"visibility":"public","docs":"A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [PAD] config.","links":{"PAD":"0:329:1859","GeneralPurpose":"0:291:1857","alphabet::STANDARD":"0:376:1855"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"b:2:2258-0:563:1703":{"id":"b:2:2258-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:518:1575":{"id":"0:518:1575","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[114,17],"end":[114,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"b:2:2554-0:540:1702":{"id":"b:2:2554-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8217:3232-0:189:2020":{"id":"a:2:8217:3232-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2550-0:86:1931":{"id":"b:2:2550-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2622-0:563:1703":{"id":"b:2:2622-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:13862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:3774"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:417-0:399:1695":{"id":"0:417-0:399:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,24],"end":[165,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_slice","name":"encode_engine_slice","id":"0:399:1695","glob":false}},"0:418-0:404:1696":{"id":"0:418-0:404:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,45],"end":[165,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encoded_len","name":"encoded_len","id":"0:404:1696","glob":false}},"2:11918:6003":{"id":"2:11918:6003","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:2897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:3232-0:291:1857":{"id":"a:2:8217:3232-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2258-0:540:1702":{"id":"b:2:2258-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:330:2446":{"id":"0:330:2446","crate_id":0,"name":"NO_PAD","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[347,0],"end":[349,62]},"visibility":"public","docs":"Don't add padding when encoding, and require no padding when decoding.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:341:597":{"id":"0:341:597","crate_id":0,"name":"encode","span":{"filename":"src/engine/mod.rs","begin":[123,4],"end":[131,5]},"visibility":"default","docs":"Encode arbitrary octets as base64 using the provided `Engine`.\nReturns a `String`.\n\n# Example\n\n```rust\nuse base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n\nlet b64 = general_purpose::STANDARD.encode(b\"hello world~\");\nprintln!(\"{}\", b64);\n\nconst CUSTOM_ENGINE: engine::GeneralPurpose =\n    engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n\nlet b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:34288":{"id":"2:11899:34288","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:34287"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:49:1915":{"id":"b:2:2560-0:49:1915","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2759:3289-0:493:2341":{"id":"a:2:2759:3289-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2550-0:540:1702":{"id":"b:2:2550-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11903:34289":{"id":"2:11903:34289","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,9],"end":[105,14]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2759:3289-0:291:1857":{"id":"a:2:2759:3289-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:507:2538":{"id":"b:2:2565-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:564:1702":{"id":"0:564:1702","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[54,4],"end":[54,28]},"visibility":"default","docs":"A [DecodeError] occurred","links":{"DecodeError":"0:540:1702"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:566:1575"]},"discriminant":null}},"b:5:681-0:493:2341":{"id":"b:5:681-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:3462","5:684:3463","5:685:3464"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11926:28052":{"id":"2:11926:28052","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:291:1857":{"id":"a:2:8216:3233-0:291:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurpose","id":"0:291:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:434":{"id":"0:434","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[71,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","type_id","provide"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:435:388"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:225-0:86:1931":{"id":"a:2:2709:225-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:336:2197":{"id":"0:336:2197","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[43,4],"end":[43,40]},"visibility":"default","docs":"The decode estimate used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"DecodeEstimate","id":"0:358:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:11949:28046":{"id":"2:11949:28046","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:28042"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:657":{"id":"0:499:657","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,9],"end":[137,14]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:531:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5360:34963":{"id":"5:5360:34963","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:3233-0:86:1931":{"id":"a:2:8216:3233-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:3233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:318:2421":{"id":"0:318:2421","crate_id":0,"name":"with_encode_padding","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[273,4],"end":[278,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `padding` setting.\n\nIf `padding` is `true`, encoding will append either 1 or 2 `=` padding characters as needed\nto produce an output whose length is a multiple of 4.\n\nPadding is not needed for correct decoding and only serves to waste bytes, but it's in the\n[spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).\n\nFor new applications, consider not using padding if the decoders you're using don't require\npadding to be present.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:3443":{"id":"2:11935:3443","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:466:1858":{"id":"a:2:2709:225-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:527:1697":{"id":"b:2:2565-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:225-0:140:2019":{"id":"0:225-0:140:2019","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[6,4],"end":[6,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder::EncoderWriter","name":"EncoderWriter","id":"0:140:2019","glob":false}},"2:11905:28012":{"id":"2:11905:28012","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:34305":{"id":"2:11990:34305","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2905"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[80,0],"end":[84,1]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:683"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:549:1575":{"id":"0:549:1575","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[400,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:128:1908","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3430:2054","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2957:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:184:578"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2550-0:507:2538":{"id":"b:2:2550-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:357:1823":{"id":"0:357:1823","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/mod.rs","begin":[376,4],"end":[376,37]},"visibility":"default","docs":"Returns `true` if padding should be added after the encoded output.\n\nPadding is added outside the engine's encode() since the engine may be used\nto encode only a chunk of the overall output, so it can't always know when\nthe output is \"done\" and would therefore need padding (if configured).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3354-0:507:2538":{"id":"b:2:3354-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1707":{"id":"0:0:1707","crate_id":0,"name":"base64","span":{"filename":"src/lib.rs","begin":[1,0],"end":[179,26]},"visibility":"public","docs":"# Getting started\n\n1. Perhaps one of the preconfigured engines in [engine::general_purpose] will suit, e.g.\n[engine::general_purpose::STANDARD_NO_PAD].\n    - These are re-exported in [prelude] with a `BASE64_` prefix for those who prefer to\n      `use base64::prelude::*` or equivalent, e.g. [prelude::BASE64_STANDARD_NO_PAD]\n1. If not, choose which alphabet you want. Most usage will want [alphabet::STANDARD] or [alphabet::URL_SAFE].\n1. Choose which [Engine] implementation you want. For the moment there is only one: [engine::GeneralPurpose].\n1. Configure the engine appropriately using the engine's `Config` type.\n    - This is where you'll select whether to add padding (when encoding) or expect it (when\n    decoding). If given the choice, prefer no padding.\n1. Build the engine using the selected alphabet and config.\n\nFor more detail, see below.\n\n## Alphabets\n\nAn [alphabet::Alphabet] defines what ASCII symbols are used to encode to or decode from.\n\nConstants in [alphabet] like [alphabet::STANDARD] or [alphabet::URL_SAFE] provide commonly used\nalphabets, but you can also build your own custom [alphabet::Alphabet] if needed.\n\n## Engines\n\nOnce you have an `Alphabet`, you can pick which `Engine` you want. A few parts of the public\nAPI provide a default, but otherwise the user must provide an `Engine` to use.\n\nSee [Engine] for more.\n\n## Config\n\nIn addition to an `Alphabet`, constructing an `Engine` also requires an [engine::Config]. Each\n`Engine` has a corresponding `Config` implementation since different `Engine`s may offer different\nlevels of configurability.\n\n# Encoding\n\nSeveral different encoding methods on [Engine] are available to you depending on your desire for\nconvenience vs performance.\n\n| Method                   | Output                       | Allocates                      |\n| ------------------------ | ---------------------------- | ------------------------------ |\n| [Engine::encode]         | Returns a new `String`       | Always                         |\n| [Engine::encode_string]  | Appends to provided `String` | Only if `String` needs to grow |\n| [Engine::encode_slice]   | Writes to provided `&[u8]`   | Never - fastest                |\n\nAll of the encoding methods will pad as per the engine's config.\n\n# Decoding\n\nJust as for encoding, there are different decoding methods available.\n\n| Method                   | Output                        | Allocates                      |\n| ------------------------ | ----------------------------- | ------------------------------ |\n| [Engine::decode]         | Returns a new `Vec<u8>`       | Always                         |\n| [Engine::decode_vec]     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |\n| [Engine::decode_slice]   | Writes to provided `&[u8]`    | Never - fastest                |\n\nUnlike encoding, where all possible input is valid, decoding can fail (see [DecodeError]).\n\nInput can be invalid because it has invalid characters or invalid padding. The nature of how\npadding is checked depends on the engine's config.\nWhitespace in the input is invalid, just like any other non-base64 byte.\n\n# `Read` and `Write`\n\nTo decode a [std::io::Read] of b64 bytes, wrap a reader (file, network socket, etc) with\n[read::DecoderReader].\n\nTo write raw bytes and have them b64 encoded on the fly, wrap a [std::io::Write] with\n[write::EncoderWriter].\n\nThere is some performance overhead (15% or so) because of the necessary buffer shuffling --\nstill fast enough that almost nobody cares. Also, these implementations do not heap allocate.\n\n# `Display`\n\nSee [display] for how to transparently base64 data via a `Display` implementation.\n\n# Examples\n\n## Using predefined engines\n\n```\nuse base64::{Engine as _, engine::general_purpose};\n\nlet orig = b\"data\";\nlet encoded: String = general_purpose::STANDARD_NO_PAD.encode(orig);\nassert_eq!(\"ZGF0YQ\", encoded);\nassert_eq!(orig.as_slice(), &general_purpose::STANDARD_NO_PAD.decode(encoded).unwrap());\n\n// or, URL-safe\nlet encoded_url = general_purpose::URL_SAFE_NO_PAD.encode(orig);\n```\n\n## Custom alphabet, config, and engine\n\n```\nuse base64::{engine, alphabet, Engine as _};\n\n// bizarro-world base64: +/ as the first symbols instead of the last\nlet alphabet =\n    alphabet::Alphabet::new(\"+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")\n    .unwrap();\n\n// a very weird config that encodes with padding but requires no padding when decoding...?\nlet crazy_config = engine::GeneralPurposeConfig::new()\n    .with_decode_allow_trailing_bits(true)\n    .with_encode_padding(true)\n    .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n\nlet crazy_engine = engine::GeneralPurpose::new(&alphabet, crazy_config);\n\nlet encoded = crazy_engine.encode(b\"abc 123\");\n\n```\n\n# Panics\n\nIf length calculations result in overflowing `usize`, a panic will result.","links":{"alphabet::URL_SAFE":"0:377:2448","Engine::encode_slice":"0:345:2090","Engine":"0:334:1691","Engine::decode":"0:347:531","Engine::encode":"0:341:597","std::io::Read":"1:3373:1950","engine::GeneralPurpose":"0:291:1857","alphabet::Alphabet":"0:493:2341","engine::Config":"0:356:1807","Engine::decode_slice":"0:351:2311","prelude::BASE64_STANDARD_NO_PAD":"0:326:2445","prelude":"0:459:1052","alphabet":"0:361:1692","DecodeError":"0:540:1702","alphabet::STANDARD":"0:376:1855","engine::general_purpose":"0:242:1856","read::DecoderReader":"0:86:1931","std::io::Write":"1:3430:2054","write::EncoderWriter":"0:140:2019","Engine::encode_string":"0:343:1906","engine::general_purpose::STANDARD_NO_PAD":"0:326:2445","Engine::decode_vec":"0:349:2297","display":"0:40:1687"},"attrs":["#![deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:40:1687","0:74:1688","0:127:1689","0:229:1690","0:361:1692","0:459:1052","0:360-0:334:1691","0:413-0:391:597","0:414-0:393:1693","0:415-0:396:1694","0:417-0:399:1695","0:418-0:404:1696","0:419-0:527:1697","0:451-0:438:531","0:452-0:440:1698","0:453-0:443:1699","0:455-0:446:1700","0:456-0:449:1701","0:457-0:540:1702","0:458-0:563:1703"],"is_stripped":false}},"0:429:657":{"id":"0:429:657","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[31,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,16],"end":[137,21]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:533:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:683:3462":{"id":"5:683:3462","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:484":{"id":"0:484","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,16],"end":[402,20]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2707:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:440:1698":{"id":"0:440:1698","crate_id":0,"name":"decode_engine","span":{"filename":"src/decode.rs","begin":[101,0],"end":[106,1]},"visibility":"public","docs":" Decode from string reference as octets using the specified [Engine].\n\n See [Engine::decode].\nReturns a `Result` containing a `Vec<u8>`.","links":{"Engine::decode":"0:347:531","Engine":"0:334:1691"},"attrs":["#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":{"since":"0.21.0","note":"Use Engine::decode"},"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6671:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2518:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,9],"end":[22,14]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:497:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:559:602":{"id":"0:559:602","crate_id":0,"name":"eq","span":{"filename":"src/decode.rs","begin":[9,23],"end":[9,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:28035":{"id":"2:11917:28035","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:28034"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[137,23],"end":[137,32]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8217:3232-0:140:2019":{"id":"a:2:8217:3232-0:140:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:140:2019","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:567:2262":{"id":"0:567:2262","crate_id":0,"name":"OutputSliceTooSmall","span":{"filename":"src/decode.rs","begin":[58,4],"end":[58,23]},"visibility":"default","docs":"The provided slice _may_ be too small.\n\nThe check is conservative (assumes the last triplet of output bytes will all be needed).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:8217:3232-0:507:2538":{"id":"a:2:8217:3232-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[44,0],"end":[48,1]},"visibility":{"restricted":{"parent":"0:420:531","path":"::decode"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","type_id","provide"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:388"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:170:1997":{"id":"0:170:1997","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder.rs","begin":[241,4],"end":[245,5]},"visibility":"public","docs":"Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\nto.\n\nNormally this method should not be needed, since `finish()` returns the inner writer if\nit completes successfully. That will also ensure all data has been flushed, which the\n`into_inner()` function does *not* do.\n\nCalling this method after `finish()` has completed successfully will panic, since the\nwriter has already been returned.\n\nThis method may be useful if the writer implements additional APIs beyond the `Write`\ntrait. Note that the inner writer might be in an error state or have an incomplete\nbase64 string written to it.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"W"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2667":{"id":"5:5354:2667","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:34299":{"id":"2:11979:34299","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:2905","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:34298"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:3507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:475:2333":{"id":"b:2:2258-0:475:2333","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:457-0:540:1702":{"id":"0:457-0:540:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,67],"end":[172,78]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::DecodeError","name":"DecodeError","id":"0:540:1702","glob":false}},"2:2260:2847":{"id":"2:2260:2847","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:189:2020":{"id":"b:2:2550-0:189:2020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2553:2312"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2759:3289-0:563:1703":{"id":"a:2:2759:3289-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[402,9],"end":[402,14]},"visibility":{"restricted":{"parent":"0:229:1690","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:475:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:483:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:456-0:449:1701":{"id":"0:456-0:449:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,45],"end":[172,65]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decoded_len_estimate","name":"decoded_len_estimate","id":"0:449:1701","glob":false}},"5:5357:34962":{"id":"5:5357:34962","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493:2341":{"id":"0:493:2341","crate_id":0,"name":"Alphabet","span":{"filename":"src/alphabet.rs","begin":[23,0],"end":[25,1]},"visibility":"public","docs":"An alphabet defines the 64 ASCII characters (symbols) used for base64.\n\nCommon alphabets are provided as constants, and custom alphabets\ncan be made via `from_str` or the `TryFrom<str>` implementation.\n\n```\nlet custom = base64::alphabet::Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap();\n\nlet engine = base64::engine::GeneralPurpose::new(\n    &custom,\n    base64::engine::general_purpose::PAD);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:366","a:2:2709:225-0:493:2341","a:2:8216:3233-0:493:2341","a:2:8217:3232-0:493:2341","a:2:2759:3289-0:493:2341","a:2:2695:217-0:493:2341","b:2:3354-0:493:2341","b:2:2565-0:493:2341","b:2:2560-0:493:2341","b:2:2550-0:493:2341","b:2:2554-0:493:2341","b:2:2258-0:493:2341","b:2:2261-0:493:2341","b:5:681-0:493:2341","0:498","0:504","0:370","0:496","0:501","0:505","0:500"]}},"2:12017:34311":{"id":"2:12017:34311","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:34311"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:3509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372:1448":{"id":"0:372:1448","crate_id":0,"name":"try_from","span":{"filename":"src/alphabet.rs","begin":[99,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:2534:234","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/engine/general_purpose/mod.rs","begin":[241,16],"end":[241,20]},"visibility":{"restricted":{"parent":"0:242:1856","path":"::engine::general_purpose"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2707:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2569:1448":{"id":"2:2569:1448","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40:1687":{"id":"0:40:1687","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[88,1]},"visibility":"public","docs":"Enables base64'd output anywhere you might use a `Display` implementation, like a format string.\n\n```\nuse base64::{display::Base64Display, engine::general_purpose::STANDARD};\n\nlet data = vec![0x0, 0x1, 0x2, 0x3];\nlet wrapper = Base64Display::new(&data, &STANDARD);\n\nassert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:49:1915"],"is_stripped":false}},"a:2:2695:217-0:563:1703":{"id":"a:2:2695:217-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:575:602":{"id":"0:575:602","crate_id":0,"name":"eq","span":{"filename":"src/decode.rs","begin":[51,23],"end":[51,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:27723":{"id":"2:12013:27723","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:3232-0:563:1703":{"id":"a:2:8217:3232-0:563:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeSliceError","id":"0:563:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11897:34287":{"id":"2:11897:34287","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:507:2538":{"id":"a:2:2695:217-0:507:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:507:2538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:451-0:438:531":{"id":"0:451-0:438:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,24],"end":[170,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode","name":"decode","id":"0:438:531","glob":false}},"b:2:2560-0:466:1858":{"id":"b:2:2560-0:466:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"GeneralPurposeConfig","id":"0:466:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:545:1987":{"id":"0:545:1987","crate_id":0,"name":"InvalidLength","span":{"filename":"src/decode.rs","begin":[19,4],"end":[19,17]},"visibility":"default","docs":"The length of the input is invalid.\nA typical cause of this is stray trailing whitespace or other separator bytes.\nIn the case where excess trailing bytes have produced an invalid length *and* the last byte\nis also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\nwill be emitted instead of `InvalidLength` to make the issue easier to debug.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:1969","2:11896:34286","2:11897:34287","2:11899:34288","2:11902:2535","2:11903:34289","2:11904:310","2:11905:28012","2:11906:28008","2:11908:28009","2:11910:28010","2:11912:28011","2:11914:34290","2:11915:34291","2:11916:28034","2:11917:28035","2:11918:6003","2:11919:6130","2:11920:1825","2:11921:31315","2:11922:31344","2:11923:30628","2:11924:34292","2:11925:31308","2:11926:28052","2:11929:28053","2:11932:28054","2:11935:3443","2:11939:3407","2:11943:28042","2:11946:28044","2:11949:28046","2:11952:34293","2:11955:34294","2:11958:28048","2:11961:28050","2:11964:34295","2:11967:34296","2:11970:2858","2:11973:34297","2:11976:34298","2:11979:34299","2:11982:34300","2:11984:34301","2:11986:34302","2:11988:34303","2:11989:34304","2:11990:34305","2:11993:34306","2:11996:25201","2:11999:28055","2:12002:34307","2:12005:34308","2:12008:34309","2:12011:34310","2:12013:27723","2:12014:27726","2:12015:27727","2:12016:27728","2:12017:34311","2:12019:8514","2:12020:34312"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:474:657":{"id":"0:474:657","crate_id":0,"name":"fmt","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[241,22],"end":[241,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":{"restricted":{"parent":"0:361:1692","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:506:602"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2258-0:527:1697":{"id":"b:2:2258-0:527:1697","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/encode.rs","begin":[152,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:382:597","path":"::encode"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","cause","type_id","provide"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncodeSliceError","id":"0:527:1697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:388"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3356:1462":{"id":"2:3356:1462","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38976:6047","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:1856":{"id":"0:242:1856","crate_id":0,"name":"general_purpose","span":{"filename":"src/engine/general_purpose/mod.rs","begin":[1,0],"end":[349,62]},"visibility":"public","docs":"Provides the [GeneralPurpose] engine and associated config types.","links":{"GeneralPurpose":"0:291:1857"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:291:1857","0:466:1858","0:325:1855","0:326:2445","0:327:2448","0:328:2450","0:329:1859","0:330:2446"],"is_stripped":false}},"a:2:2759:3289-0:86:1931":{"id":"a:2:2759:3289-0:86:1931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:86:1931","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2565-0:540:1702":{"id":"b:2:2565-0:540:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:437:683":{"id":"0:437:683","crate_id":0,"name":"from","span":{"filename":"src/decode.rs","begin":[81,4],"end":[83,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:540:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:34312":{"id":"2:12020:34312","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:34312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:3232-0:493:2341":{"id":"a:2:8217:3232-0:493:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:3232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:493:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[80,0],"end":[85,1]},"visibility":{"restricted":{"parent":"0:185:2018","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:334:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:189:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:203:926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"2:3269:13824":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2831:13966":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:4363:3901":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13031:5188":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41410:2918":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:1554:2950":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:6488:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:5005:3907":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:7559:13945":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4422:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:45601:6190":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10466:4637":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:42430:6111":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:2784:3371":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6059:35150":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"0:229:1690":{"crate_id":0,"path":["base64","engine"],"kind":"module"},"1:11511:6299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:153:3857":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9031:35159":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9751:4541":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12278:4947":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:8981:4477":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7708:6041":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4841:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10796:4662":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:9589:3943":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10270:4612":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5878:19804":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6842:5648":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:2103:5930":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9401:4504":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:30189:31325":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11436:4776":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"0:380:2570":{"crate_id":0,"path":["base64","alphabet","IMAP_MUTF7"],"kind":"constant"},"2:2823:8742":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3161:2990":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7543:5419":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:38985:5707":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:3283:2976":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13071:5197":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4757:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10752:4660":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12884:5149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:4404:8643":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"0:516:2542":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","ReservedByte"],"kind":"variant"},"8:0:2748":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12674:5109":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11997:4901":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2868:5671":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10182:4602":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13176:5227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40840:3028":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:4635:4148":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:2069:5838":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:4385:4141":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12909:5157":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7070:3028":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5716:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:755:4348":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4781:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:44:5851":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:7622:3980":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:7275:27681":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7135:8531":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9094:2919":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:5525:5455":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4568:7619":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:1836:3028":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4483:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46533:6221":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5235:5440":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:420:4361":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9658:4526":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:4696:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:7522:3974":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:0:2756":{"crate_id":17,"path":["object"],"kind":"module"},"13:110:35141":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:6939:3960":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1559:6871":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2862:5670":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:43266:2893":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:8510:4467":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6298:5573":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:42450:6113":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:8339:20754":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:3744:3025":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:21293:6241":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7659:20700":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:10762:6000":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:8393:20756":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3177:13977":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8300:6270":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:4884:2950":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4274:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4408:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12730:5115":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9073:6290":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:933:5832":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:962:5837":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4539:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:3457:4387":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4769:31270":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"13:226:6746":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11841:4860":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4520:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:1921:5952":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2345:8583":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13126:5215":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:939:8532":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7704:4228":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9193:35157":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2798:5664":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"0:326:2445":{"crate_id":0,"path":["base64","engine","general_purpose","STANDARD_NO_PAD"],"kind":"constant"},"16:2261:19805":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6554:3031":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:624:35168":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10419:2991":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10774:4377":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:3455:2964":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"0:508:1987":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","InvalidLength"],"kind":"variant"},"5:2132:7755":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1244:5838":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12926:5162":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6528:8702":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:3402:5439":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4263:4183":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11356:4771":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:5681:2882":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:8991:35162":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:20456:31455":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4144:4135":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9185:6258":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:4217:4136":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:29989:6040":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11137:4721":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9712:4536":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10672:6381":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"12:1534:5844":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:39610:5973":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:42361:6107":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12756:5121":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3346:2950":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9165:35155":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:45097:6181":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12291:4948":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40722:3229":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:553:6820":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:38785:6045":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5900:3957":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:242:4356":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:574:4303":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:3204:13880":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3963:8616":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13527:5341":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:505:3890":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"0:478:2337":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireCanonical"],"kind":"variant"},"1:7688:8547":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:5363:6279":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:8951:35156":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"0:459:1052":{"crate_id":0,"path":["base64","prelude"],"kind":"module"},"17:10822:20762":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11974:4900":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10997:4163":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4673:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8117:2962":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5472:5417":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3180:35038":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:42684:3501":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13478:5326":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:2882:13974":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42634:2969":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"12:1044:19768":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:4721:4151":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"7:79:19608":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10724:25206":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:10011:3513":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13518:5337":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2386:1933":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1571:6880":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7003:2882":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11186:4728":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13100:5205":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:45331:6185":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:30083:31328":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:44823:6172":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5990:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:12190:13913":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:7555:3616":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3134:3614":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9263:4488":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:7601:6302":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10845:4634":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:39206:31327":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:44276:6153":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6161:20692":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13374:5298":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:20424:31115":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:0:2757":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11330:4766":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:2213:1688":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:751:2882":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:39619:5974":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3716:4133":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11125:4718":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7059:3229":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5014:6275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1677:6957":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:10684:6309":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9805:4545":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8921:6355":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4727:3955":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:6879:2994":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13039:5189":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"12:2184:6754":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2847:13969":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:3546:3614":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8056:2997":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:7218:7732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13059:5196":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6542:3970":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"12:98:6747":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"12:1065:35135":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1213:5651":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:594:6843":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8168:2970":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"13:0:2746":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:20853:8627":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46495:6220":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6363:6289":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2930:19832":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7435:5747":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10490:4639":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6399:3969":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11576:4822":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8096:1809":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11170:6388":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6634:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:7195:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:31773:6041":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:0:2755":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8424:6344":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:39469:6059":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:5477:5965":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:9092:2918":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9475:4513":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10445:4634":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:493:6783":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:2922:33929":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:286:2894":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:8666:4353":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9691:4529":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11005:4232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4327:4139":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2481:8627":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:4426:8644":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10161:5996":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4844:8667":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9831:4550":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7329:5428":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:10244:5998":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:39246:4187":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:46685:6232":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:42620:2967":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:8752:2967":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7483:5431":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6284:5432":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46655:6230":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12251:4943":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:3198:13881":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:11419:3513":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:123:14371":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7956:5433":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:38738:13826":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"12:1138:4168":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5163:4159":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10642:20761":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4681:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:586:6759":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:20671:8755":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:45491:6187":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:39406:8568":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:7309:5427":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"0:476:2335":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","Indifferent"],"kind":"variant"},"16:5949:5516":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2411:5392":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:43603:6146":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4440:2933":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9501:4496":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:3605:8606":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7567:20699":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"14:31:4160":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7357:5742":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"9:33:8242":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13536:5343":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:21598:6015":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:39920:5983":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"0:358:2197":{"crate_id":0,"path":["base64","engine","DecodeEstimate"],"kind":"trait"},"1:8483:6271":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12060:4909":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40755:3230":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:525:6805":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12768:5126":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13047:5190":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8979:6364":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13158:5223":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4662:4149":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6743:20695":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3415:5955":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10520:4644":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:4566:7617":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:20439:31115":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"12:985:5651":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:505:6788":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7211:4176":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5660:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3439:30141":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4720:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5460:5451":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:20774:6011":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:736:24508":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11034:4705":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5628:5465":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4416:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13114:5212":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7034:27288":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12860:5147":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"14:0:2753":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8351:6341":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10321:4616":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12349:4957":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:11203:6296":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:3199:2991":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9722:4537":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9526:4516":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4727:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6829:5645":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:8881:35161":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12748:5120":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"6:6757:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2705:5404":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"12:1852:5846":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:7452:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:9766:8627":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:2093:3890":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:6222:2882":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8333:3222":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:20684:8627":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:46580:6225":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:862:3881":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4656:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7319:5741":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8967:6362":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:41757:2915":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:6979:3023":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"0:330:2446":{"crate_id":0,"path":["base64","engine","general_purpose","NO_PAD"],"kind":"constant"},"2:40552:31302":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4714:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3146:35039":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13007:5179":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:7041:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:10123:3499":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40705:3615":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3532:2882":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:9671:4527":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:8811:8268":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4389:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3114:2891":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"12:387:35137":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4662:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9644:4525":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:42542:6120":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7372:35148":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5951:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5759:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10062:4594":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12103:4915":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4743:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11161:4725":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42898:3498":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:43429:4220":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"12:0:2752":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:2657:5402":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:1827:3021":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1509:6847":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:39185:6049":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"9:188:8247":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:878:5830":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4983:6275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:6988:3028":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5690:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:1962:4372":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4820:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:14:1689":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43373:3485":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:45177:6182":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46209:6215":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9317:4497":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"12:1518:19769":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4501:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:2916:4373":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40832:3615":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2301:421":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:44875:6174":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:1903:20800":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7288:5739":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2746:3366":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:5433:5442":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1732:3025":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13492:5328":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:21793:7772":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:39581:6070":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42500:6116":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:42933:3509":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4457:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:4604:13897":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:659:3028":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:7498:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:1786:6255":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:11235:4738":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2367:5390":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12617:5072":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39179:3510":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:2190:35134":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:41417:2919":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:43369:3484":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:1609:6904":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12797:5134":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:12398:3948":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43134:6133":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"12:1840:2882":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:7681:6306":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"14:7:4160":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:6472:4239":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:39913:5982":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4649:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:11308:3517":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:8944:25198":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2815:5665":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:8494:4466":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11106:4717":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7469:5430":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7343:5429":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40697:3614":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:5209:3634":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12836:5143":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:6635:13949":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11468:6389":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43381:3487":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44631:6167":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5755:3959":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:8218:3231":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2465:5394":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:1849:6259":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7428:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46670:6231":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"14:160:4160":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8839:4237":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:870:3028":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2300:5382":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:42908:3497":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6903:6366":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2759:3289":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:11556:2900":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:9090:2917":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4929:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5679:6282":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9371:4480":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:4330:3924":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:487:6780":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:4051:13822":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2631:5401":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12148:4922":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:1479:5927":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:39632:6072":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7872:5803":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:7584:8627":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:904:2882":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:50283:6243":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:10216:3502":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:3854:4134":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7278:5426":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9293:4494":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7557:5751":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:42421:6109":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"12:2205:2895":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4597:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6619:5616":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7093:5687":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44729:6170":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11199:4729":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8907:6354":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:834:5835":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21635:7769":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11721:4843":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:44777:6171":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8806:6353":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:39567:6067":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40588:6266":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"1:11037:7847":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:41949:6096":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8820:4234":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10950:3984":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11706:3993":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11056:6291":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:43233:6139":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5823:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:879:3614":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7076:3028":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:8561:4350":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"12:1845:3025":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6316:5581":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:39194:4185":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44446:6160":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3923:8614":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8148:2966":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:11218:6297":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:1832:3614":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:6583:3033":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:5780:5487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:1859:5847":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4962:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10434:4632":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:42532:6119":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4357:4140":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"0:334:1691":{"crate_id":0,"path":["base64","engine","Engine"],"kind":"trait"},"17:10394:4628":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11029:25212":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6611:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:11620:3489":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:6573:3032":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:3249:4376":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6594:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9100:2921":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8155:2967":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:10088:5995":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2573:2972":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6000:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5374:5413":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8814:3028":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:21727:31337":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:11600:2892":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12896:5152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42652:3499":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7825:5800":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3403:13862":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:9681:4420":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44707:6169":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8274:6332":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9118:35163":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4697:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:4285:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46632:6229":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4554:8615":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"14:215:5824":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:20477:31453":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5:1535":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:5724:31534":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:4353:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:1429:5831":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4346:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:5554:5967":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4871:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11233:4244":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42487:6059":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:652:4303":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:690:4335":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:2928:33930":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:7473:4363":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13134:5218":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4297:4138":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:39691:6074":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5945:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:3973:8617":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:10462:3980":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6517:5601":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6200:5568":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:39312:4194":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:10050:5994":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7596:6300":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4101:2950":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2772:3368":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1645:6934":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13459:5321":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5878:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43018:13850":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7948:6314":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4882:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:11133:14049":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9791:4544":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9223:20768":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4611:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10001:25650":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:5959:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8499:6349":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:11666:13852":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:1891:2522":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:2539:2980":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:20608:8753":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:5378:6280":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9627:4523":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4334:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7970:5814":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1568:3028":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10385:4627":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:6884:4243":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5510:5452":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:43365:3483":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9350:4461":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4086:8636":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11830:8270":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2282:5380":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10051:4245":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8185:8603":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6667:7646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:39006:4182":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:676:19622":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:40532:7839":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10921:4673":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:29763:8607":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21710:6024":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11288:4751":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7469:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11149:4722":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:3626:3873":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13393:5304":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:697:5829":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:42412:6108":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:7127:13946":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:4011:3615":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:2080:5839":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1710:6973":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1589:6890":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:473:6772":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:10202:3503":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7440:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5761:5480":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3120:6554":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6781:5638":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2827:13967":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:8526:4349":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4262:4137":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8256:6330":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9844:4553":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3217:31702":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:21826:8608":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12307:4950":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9092:6291":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46099:6214":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44507:6162":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:44945:6177":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40503:8605":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:847:3614":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7463:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:6268:3873":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:6690:5423":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:3201:5849":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:9088:2916":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43198:6134":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:8441:20758":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:4849:4155":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1847:6258":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10332:20867":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11500:4805":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4218:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:8596:4351":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:815:5832":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4476:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1065:5838":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10944:3983":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:7173:3293":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:8701:4354":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5492:7525":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"0:378:2563":{"crate_id":0,"path":["base64","alphabet","CRYPT"],"kind":"constant"},"17:9303:4496":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:562:4363":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:10729:5999":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4606:4147":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3123:6658":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:8822:35164":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3373:1950":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3939:2882":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:21764:31314":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43389:7847":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1695:6964":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:572:6830":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:5615:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45957:6213":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:1586:5847":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7011:3885":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10088:4597":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:247:4357":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2683:5403":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:20725:8627":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:578:6833":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4402:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7198:4174":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:567:6828":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"12:393:35138":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:962:3873":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43641:4221":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:11384:3518":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3871:8610":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13572:5347":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2874:13972":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"0:475:2333":{"crate_id":0,"path":["base64","engine","DecodePaddingMode"],"kind":"enum"},"2:45567:6189":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7847:5801":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13184:5229":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12164:4926":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6528:5602":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39289:13904":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:7792:4421":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8493:3614":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"0:379:2566":{"crate_id":0,"path":["base64","alphabet","BCRYPT"],"kind":"constant"},"17:9021:4478":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13082:5201":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"15:175:19786":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11893:4865":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:4748:8521":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12337:4634":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9071:35160":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12073:4910":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:21651:6018":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11074:7858":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6463:5589":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9022:7850":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:44298:6154":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:45074:6180":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:30581:3373":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5664:5471":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:5815:20690":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3985:8620":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10209:6280":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:22837:4180":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:540:6814":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7019:35043":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"12:274:6748":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:39236:6052":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:39927:6077":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:646:3615":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12046:4908":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:8631:4352":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:967:4364":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:538:4310":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"12:2178:6753":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"12:762:3025":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:4671:8629":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9283:4491":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9358:5992":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6475:8700":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:44344:6156":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"0:291:1857":{"crate_id":0,"path":["base64","engine","general_purpose","GeneralPurpose"],"kind":"struct"},"15:193:19787":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5981:5521":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5000:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2967:3291":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4468:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43653:4222":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42838:3504":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5737:5365":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1716:6974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:4413:4142":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"12:2198:6756":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7497:5421":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:39702:2966":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"7:32:19601":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5347:6278":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40623:4207":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:9353:13915":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4237:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"0:127:1689":{"crate_id":0,"path":["base64","write"],"kind":"module"},"2:43361:3482":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:481:6777":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1420:5830":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6496:20694":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7201:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:621:3768":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3126:6659":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2819:2885":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:6123:5412":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6530:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:8295:20753":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:41933:6093":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:491:4302":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"0:327:2448":{"crate_id":0,"path":["base64","engine","general_purpose","URL_SAFE"],"kind":"constant"},"14:221:5826":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6171:5565":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:7552:2883":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5686:6285":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11485:4801":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:46606:6227":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:39319:4195":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:20696:8745":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11606:4825":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"0:74:1688":{"crate_id":0,"path":["base64","read"],"kind":"module"},"1:4835:8666":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:1367:3614":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43069:6131":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:558:6246":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9601:4522":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4893:3221":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:42802:3507":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11853:4861":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:660:4326":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4313:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:5807:14290":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:39266:13903":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8240:6328":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11147:3985":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"9:896:19615":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4628:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:38992:6048":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:39511:6062":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"0:325:1855":{"crate_id":0,"path":["base64","engine","general_purpose","STANDARD"],"kind":"constant"},"12:853:5836":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21545:6014":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:39392:4197":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8790:6351":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8852:8703":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11828:4859":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7237:5727":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3175:5846":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42942:3510":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43055:6128":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2509:5396":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2549:3938":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3448:2961":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9339:4500":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:10659:6308":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:8137:20748":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11486:7862":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:4786:4153":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:6546:3417":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:6994:5943":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"12:1628:3868":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10528:4646":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:39449:6058":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:5948:5969":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1663:6946":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:9098:2920":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5556:3957":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39667:4323":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46349:6217":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11639:4833":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10121:4599":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:2185:35124":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:2343:7768":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39489:6061":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:60:35136":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11748:4848":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8798:3614":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2793:5408":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:10654:7856":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6241:5571":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:1739:13997":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:5880:2950":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21401:8748":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:39961:5985":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39345:4196":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:2613:2982":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6210:5569":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:45751:6191":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:119:14370":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9422:4506":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:681:4333":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4307:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:355:6244":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:45255:6183":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11245:7859":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:6342:3028":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:766:24509":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8868:8704":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6571:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:11595:2905":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10314:6350":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6109:5559":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:956:19617":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:44428:6159":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:46411:6218":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2320:5388":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:8368:20755":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3687:5929":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6330:5583":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8222:6266":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8278:7604":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9274:4489":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:42578:2898":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6790:5641":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:39942:2995":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11617:4826":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:8110:20735":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1541:6860":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6719:35149":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:21136:8750":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:588:8512":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"0:40:1687":{"crate_id":0,"path":["base64","display"],"kind":"module"},"11:0:2751":{"crate_id":11,"path":["adler"],"kind":"module"},"2:43441:14083":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4733:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11271:4743":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:46747:6234":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6186:5414":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6123:6287":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5203:4466":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:42610:3496":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11528:4812":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:7446:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41941:6095":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9111:4242":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:1029:5839":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:7802:6308":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11800:4854":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12609:5069":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"0:242:1856":{"crate_id":0,"path":["base64","engine","general_purpose"],"kind":"module"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3959:2950":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13354:5292":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:6075:3948":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10497:20869":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:8806:32455":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2011:5929":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:20733:8749":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:7123:13947":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1571:2882":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:8162:20749":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:22438:4224":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:40764:3126":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3969:3873":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9738:4539":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7182:31324":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5432:6281":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:361:6245":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44899:6175":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:42173:6106":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:42604:2897":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:3159:2989":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6345:5420":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"0:49:1915":{"crate_id":0,"path":["base64","display","Base64Display"],"kind":"struct"},"17:11787:4852":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41988:6105":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:5839:20691":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"0:356:1807":{"crate_id":0,"path":["base64","engine","Config"],"kind":"trait"},"12:1872:5849":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:699:4336":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"0:507:2538":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError"],"kind":"enum"},"6:4571:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4429:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11174:4727":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:271:3873":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:10849:25196":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1824:6257":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7943:6313":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9250:4487":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1747:6986":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11734:4567":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12265:4946":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4246:6268":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10207:4604":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5786:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"0:510:2545":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","DuplicatedByte"],"kind":"variant"},"6:5800:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"0:361:1692":{"crate_id":0,"path":["base64","alphabet"],"kind":"module"},"16:3599:4130":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6512:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:914:3025":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:44376:6157":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11536:4814":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4248:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9873:4557":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:6682:31775":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:4268:4184":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:6154:3912":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4766:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9458:4510":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:42784:3506":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11368:4774":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:11615:3490":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12850:5146":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4439:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:9919:3614":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:7173:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:9030:2054":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:727:4343":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10233:4609":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42461:6114":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4775:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43246:3492":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:481:4301":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10682:4656":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:929:5829":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5614:5464":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:6178:3957":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11327:3989":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2433:5393":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1704:6970":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9061:4479":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11594:4823":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11163:1848":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4149:5959":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:31786:3367":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:11368:3516":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7135:35152":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7044:35151":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44853:6173":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7481:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:4888:4156":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:40824:3614":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:39549:5962":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41274:5990":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1687:6963":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9382:4503":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39642:6073":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:3010:19833":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4414:2934":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:21814:4179":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46551:6222":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:44566:6165":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4669:8626":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12322:4954":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9577:4521":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8161:2969":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:3559:3615":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4981:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"0:328:2450":{"crate_id":0,"path":["base64","engine","general_purpose","URL_SAFE_NO_PAD"],"kind":"constant"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2835:13968":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:499:6785":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9553:4479":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11217:4737":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:534:3951":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3293:3025":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:2852:13970":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:1459:5829":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:1382:3615":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11014:4695":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:5205:3633":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:534:5369":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:21305:31113":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:42926:3508":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5541:5457":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:9943:3615":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13148:5220":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9885:4558":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8762:4232":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2771:5407":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39364:4198":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9475:3934":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:1997:2983":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13580:5350":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13279:5279":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:782:3876":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:977:5912":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:8774:4358":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:39222:4186":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:636:4325":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:8212:20750":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:8475:20736":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:2894:19831":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:3763:3873":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13214:5235":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10708:4657":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6704:5624":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6816:5642":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:80:24497":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:5327:6277":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7929:5809":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5388:5416":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:39498:2965":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:644:4303":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:5495:8687":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12739:5119":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:505:8260":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:39305:3509":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:1021:4365":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5931:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:6091:3965":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6735:5627":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:4788:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:6730:13941":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:8785:657":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:39651:5975":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3915:8613":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:6715:3912":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39326:13905":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2535:5397":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6421:3873":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12008:4903":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10226:25652":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:1056:33970":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2868:5411":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:31777:6042":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:3188:5437":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:9488:4514":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9155:4481":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4115:8639":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1550:6865":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:6088:1535":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"16:8014:5707":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11813:4856":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4952:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2389:5391":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:7475:7744":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4564:7615":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:20858:8746":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7637:5763":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1575:3025":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:1398:3028":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:39951:3932":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:0:2747":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12972:5173":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12630:5079":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"0:377:2448":{"crate_id":0,"path":["base64","alphabet","URL_SAFE"],"kind":"constant"},"6:4877:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10420:4631":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4545:4145":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:42738:3503":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6496:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10310:4615":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:6359:6077":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13141:5219":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2825:5409":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43611:6148":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:8418:20757":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8138:2965":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:8911:35158":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:10649:7854":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8401:6100":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:4102:8638":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"0:381:2574":{"crate_id":0,"path":["base64","alphabet","BIN_HEX"],"kind":"constant"},"1:860:3615":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12134:4920":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:43377:3486":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4890:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:725:5830":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12176:4928":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:599:35169":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3316:2995":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:40611:4205":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6827:3987":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"15:214:8237":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:1330:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5712:6286":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:8272:20752":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2998:13825":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:7226:3292":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9382:6307":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4805:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4489:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3670:6264":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9820:4549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:20727:8747":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13168:5226":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:42522:6118":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11267:3987":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5902:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9108:4480":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12225:4941":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10283:4613":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2341:5389":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:10630:6377":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:3167:5848":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:5313:6276":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1564:3614":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4749:4152":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1898:3766":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10075:4595":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2803:5661":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5184:19803":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2878:13973":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:42951:3511":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5558:20689":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:20645:8754":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:7521:7753":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7228:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:43223:6135":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6270:5415":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10714:2960":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2840:5666":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"12:738:5831":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:39730:5980":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6643:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2482:3039":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:7585:4225":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10476:20868":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46708:6233":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9947:20842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:7487:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3201:2992":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:4817:4154":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41980:6104":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:39558:5964":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:11149:4216":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:29949:3018":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:12211:31848":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44677:6168":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40486:4203":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:7434:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44529:6163":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1534:6857":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:39439:3926":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:12263:6009":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12510:3022":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3141:5847":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2788:2884":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2842:5410":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10837:6281":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:4340:2931":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7426:5746":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7166:20697":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39520:6063":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11515:4810":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11547:4817":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6865:5650":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:2205:7759":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11835:8520":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11951:4891":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8932:6358":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:46560:6223":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1527:6855":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1604:6902":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:653:14728":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4945:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13557:5346":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:7865:2981":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:217:3871":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"12:1120:5842":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4441:4143":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12695:5114":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5772:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11708:4840":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:9029:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:46457:6219":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4224:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5411:5418":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4673:8630":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:46617:6228":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7386:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:43353:3479":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"12:1555:5845":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1074:5839":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7168:4173":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8180:6324":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7890:5805":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:22240:4223":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11017:4233":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10875:4669":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:43040:6123":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:45537:6188":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2964:3290":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10867:6351":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39258:3511":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:7305:3025":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11873:4864":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:1003:5838":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21687:31331":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8974:6363":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3016:2889":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1583:6888":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:1723:6977":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:4016:5957":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9857:4555":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4900:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:9001:25195":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40575:4204":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2831:3954":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12022:4905":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10108:4598":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10506:4641":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:9968:2969":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8884:8705":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4451:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:1092:33967":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2809:13965":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42917:3512":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10608:4441":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:2932:33927":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7151:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7298:5740":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11761:4849":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12514:4986":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5219:4467":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"15:0:2754":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1731:6981":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"0:0:1707":{"crate_id":0,"path":["base64"],"kind":"module"},"17:8241:20751":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:1438:5843":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8510:4231":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6671:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11087:4712":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8105:2960":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8174:6322":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10828:4246":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:4629:8668":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:7541:3976":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5698:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6764:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13413:5307":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6773:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:36:3024":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12198:4939":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:45413:6186":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42702:3500":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10583:20760":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"9:622:19634":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:7249:5728":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:487:4362":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"0:493:2341":{"crate_id":0,"path":["base64","alphabet","Alphabet"],"kind":"struct"},"1:8776:4233":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4574:4146":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1580:5846":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2891:13976":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6728:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6094:7564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5447:5446":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11251:7860":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10139:4479":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10546:20759":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5805:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3238:2987":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:4300:3901":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:41970:6100":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4498:8659":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1617:6909":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7650:8515":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3901:8612":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1520:6852":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7484:4247":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:5563:3958":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46591:6226":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6791:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:609:4319":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:8217:3232":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3535:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12874:5148":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4394:2932":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:39681:5977":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11391:6264":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:21619:6017":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2210:6260":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"18:507:4303":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2487:5395":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:707:3491":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6611:6288":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9328:4498":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4318:6269":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:2652:7763":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:41403:2916":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3667:6263":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44547:6164":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"14:187:19781":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4687:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:1771:4366":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9183:4482":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6070:5556":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:3125:4375":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7909:5808":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12948:5168":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:8055:20737":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12964:5171":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13436:5320":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:8216:3233":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40469:4201":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4166:6267":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:2793:8741":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5843:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:43086:6132":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:39599:6071":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42192:4215":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4385:3925":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10138:8461":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10296:4614":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11054:4706":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8441:8678":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10360:4618":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11939:4889":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4787:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1229:5839":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4862:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9574:3938":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12638:5080":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:920:5843":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:29983:3019":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1051:5651":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"14:202:2881":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:5999:3961":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3051:2996":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:2703:3364":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10403:4660":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:43357:3481":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9446:4508":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7049:5944":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:20886:6011":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42440:6112":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46571:6224":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6541:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2371:8593":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11259:4742":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:592:19633":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:2727:5405":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5494:20688":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43212:13855":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6146:5562":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7511:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:531:4307":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12118:4919":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7511:5749":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:2359:8587":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6521:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:8796:4468":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:8056:5821":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:39936:5984":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9877:6087":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:5967:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44232:6151":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6376:20693":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11518:6299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:4119:5958":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1899:15709":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:515:4300":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:10824:4228":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13594:5353":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12361:4964":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7873:2983":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:2053:5651":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13192:5230":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:5791:3907":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:31737:3038":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:4828:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12955:5170":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:0:2749":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"9:800:6761":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5722:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:382:8250":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44252:6152":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7239:2878":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11909:4870":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10422:2987":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10670:4655":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1592:5848":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:11609:3491":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:590:4313":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6747:8743":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8323:2892":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10455:4636":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:1931:4369":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5793:5371":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:1645:5948":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10159:4601":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7267:5736":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5996:5523":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:4004:5956":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7942:5812":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:649:19635":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:45301:6184":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:19:8240":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:5703:5474":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6698:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10854:20763":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:586:6838":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6649:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:39283:3510":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:38958:6046":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8229:7848":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11164:6293":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1652:6938":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11350:6263":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8234:8640":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:484:3950":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:7665:8517":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:113:24499":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10933:3982":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10221:4608":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4519:4144":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2749:5406":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1514:6849":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:4330:2950":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9539:4517":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21800:4178":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:9119:25724":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"16:2557:5398":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:42513:6117":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42856:3505":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10350:4377":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:7033:3028":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:614:35171":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4171:3614":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4261:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:300:6751":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:8941:4476":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:329:1859":{"crate_id":0,"path":["base64","engine","general_purpose","PAD"],"kind":"constant"},"16:6017:5537":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13024:5187":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:561:6825":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11247:4741":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6034:5543":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5728:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9362:4479":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9778:4543":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13382:5299":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:950:5835":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10374:4623":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40713:3028":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"12:119:3859":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13506:5335":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"0:513:2541":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","UnprintableByte"],"kind":"variant"},"1:891:5831":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9897:4559":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:21399:8627":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39376:31324":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:20479:31456":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4795:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4751:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:777:3867":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:956:5836":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:7819:6310":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:9387:3978":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:5161:3873":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9764:4542":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4583:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3232:13823":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1597:5849":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:3675:2983":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:7322:3026":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:6322:6288":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9909:4560":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:38926:8525":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:3632:4131":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:646:8518":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10973:4692":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"0:466:1858":{"crate_id":0,"path":["base64","engine","general_purpose","GeneralPurposeConfig"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7953:1990":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10721:4659":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9433:4507":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9557:3937":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:38999:2931":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7388:5745":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10949:4678":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4632:8643":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:62:14316":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:5457:3031":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:1753:7766":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:2423:7760":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7396:20698":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:320:3861":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6719:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2714:2936":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:810:5843":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:7809:6309":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:5890:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"9:827:19706":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:30025:31326":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4988:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6593:5615":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11070:4710":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7123:2895":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:3772:6265":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13327:5280":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1258:4168":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4549:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42888:2970":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4064:27291":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"9:863:19614":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:719:4340":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"12:1866:5848":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:21702:6023":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5122:4158":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4637:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10245:4610":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8089:2994":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:38976:6047":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2217:2958":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7980:20701":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:21141:8773":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4910:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:2921:3462":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:20411:3373":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12033:4906":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5596:5460":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4328:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2361:8588":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:6740:3920":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4396:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39969:5987":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:50262:6242":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:11315:4760":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:531:6808":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5813:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4921:4157":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:3566:4129":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:40688:3410":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10416:2989":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:1762:5949":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:1085:5841":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6052:5553":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12237:4942":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13404:5305":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3667:3028":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:48552:8782":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4921:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:1448:5828":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10625:4653":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:21675:4177":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3929:8615":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5938:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9700:4532":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:671:4332":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:632:3614":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:822:8532":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9982:6257":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11774:4851":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:546:6817":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"0:376:1855":{"crate_id":0,"path":["base64","alphabet","STANDARD"],"kind":"constant"},"16:6359:5585":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11684:4839":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4301:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12211:4940":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6567:5614":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3105:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:7596:32456":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4559:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:834:3879":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:386:4359":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:6069:8784":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:43385:3488":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:9234:5991":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:679:8519":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:7250:2879":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6877:20696":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:3020:2890":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5917:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8744:6350":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:25647:4181":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2579:5399":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:41396:2917":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4618:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:39716:5979":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:21492:6013":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:39529:6064":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:638:6247":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6079:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:45043:6179":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:42188:7846":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2857:13971":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"9:111:8243":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:4191:2930":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"0:480:2339":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireNone"],"kind":"variant"},"6:4379:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7603:5759":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3430:2054":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:8871:4475":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2476:2979":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9631:4524":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12816:5135":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:4131:2950":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:36:6758":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10230:5997":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"9:920:19616":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4850:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:165:19774":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"12:861:5837":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3263:5438":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:11345:3519":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6676:5422":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:11158:1374":{"crate_id":2,"path":["core","str"],"kind":"module"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6252:5572":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13091:5204":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13203:5234":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11093:6290":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2886:13975":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:3026:4383":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2605:5400":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11846:25202":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:1072:33919":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:39539:6066":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2957:2142":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:3977:8618":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:521:24510":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:40:4163":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6654:5620":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44477:6161":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42592:3495":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:44921:6176":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12087:4913":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43161:6005":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12550:5017":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12781:5131":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13221:5237":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1083:4168":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10257:4611":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5771:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13366:5295":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:20884:8751":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5752:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6059:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1628:3873":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"10:0:2750":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4369:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11661:4834":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:42756:3502":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8248:6322":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3865:8611":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4750:8625":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:630:4170":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:7797:6307":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13340:5286":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:1788:6256":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"9:709:6100":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5741:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:669:5828":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12485:4966":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3689:4132":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:641:6249":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11559:4819":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44584:6166":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10357:3979":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11343:4770":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7117:35153":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46287:6216":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21748:31323":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:925:5828":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:6926:3972":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:96:24498":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:7671:6254":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4322:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:564:4312":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:11412:6265":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6548:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2702:1819":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:44996:6178":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:44322:6155":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:38699:3617":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12934:5165":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5910:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7211:5491":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10894:4672":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:1927:3767":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2924:7756":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4994:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1470:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6743:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3391:2959":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6668:5622":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9930:4562":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4361:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6628:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3240:2988":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13231:5242":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:2961:2730":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:582:3373":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:20458:31451":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:39590:5968":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4703:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2946:2971":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6053:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:20877:8627":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12980:5175":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8987:6366":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:4094:8637":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"12:353:3863":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11300:4754":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:4689:4150":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2993:5434":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6137:5561":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44406:6158":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6472:5590":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:7857:6312":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}