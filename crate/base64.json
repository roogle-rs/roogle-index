{"root":"0:0:1645","crate_version":"0.20.0","includes_private":false,"index":{"0:320:1742":{"id":"0:320:1742","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[28,4],"end":[28,24]},"visibility":"default","docs":"The config type used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Config","id":"0:326:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:11376:54515":{"id":"2:11376:54515","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7062:120","self::pattern":"2:11022:2795","prim@char":"1:12357:2664","str::split":"2:11370:54511"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50014:3414","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:590":{"id":"0:322:590","crate_id":0,"name":"encode","span":{"filename":"src/engine/mod.rs","begin":[41,4],"end":[41,63]},"visibility":"default","docs":"Encode the `input` bytes into the `output` buffer based on the mapping in `encode_table`.\n\n`output` will be long enough to hold the encoded data.\n\nReturns the number of bytes written.\n\nNo padding should be written; that is handled separately.\n\nMust not write any bytes into the output slice other than the encoded data.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,40],"end":[108,42]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,32],"end":[116,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine","name":"encode_engine","id":"0:366:1634","glob":false}},"0:491:1547":{"id":"0:491:1547","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[28,29],"end":[28,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"a:2:2660:222-0:142:1953":{"id":"a:2:2660:222-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3305-0:447:2177":{"id":"b:2:3305-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11447:60595":{"id":"2:11447:60595","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4452:60595"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50313:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,9],"end":[22,14]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:451:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2225-0:87:1867":{"id":"b:2:2225-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3305-0:420:1792":{"id":"b:2:3305-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:328:2129":{"id":"0:328:2129","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[94,0],"end":[98,1]},"visibility":"public","docs":"The decode estimate used by an engine implementation. Users do not need to interact with this;\nit is only for engine implementors.\n\nImplementors may store relevant data here when constructing this to avoid having to calculate\nthem again during actual decoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:329:2138"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:2660:222-0:481:1641":{"id":"a:2:2660:222-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5093:2544":{"id":"5:5093:2544","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:481:1641":{"id":"b:5:671-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3377","5:674:3378","5:675:3379"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7718:3157-0:429:2169":{"id":"a:2:7718:3157-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:201:2095":{"id":"0:201:2095","crate_id":0,"name":"from_consumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[62,4],"end":[66,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will append to the provided `StrConsumer`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["str_consumer",{"kind":"generic","inner":"S"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:54522":{"id":"2:11356:54522","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2512-0:429:2169":{"id":"b:2:2512-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[248,0],"end":[398,1]},"visibility":{"restricted":{"parent":"0:129:1841","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:177:1631","0:181:2074"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11400:60581":{"id":"2:11400:60581","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664","`DoubleEndedIterator`":"2:7062:120","str::matches":"2:11397:2745"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50218:3420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:60590":{"id":"2:11420:60590","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11335:54478":{"id":"2:11335:54478","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:54337":{"id":"2:11443:54337","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[111,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:187:1952","path":"::write::encoder_string_writer"}},"docs":"Pushes the str onto the end of the String","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:219:2104"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11379:60577":{"id":"2:11379:60577","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11370:54511","self::pattern":"2:11022:2795","str::rsplit_terminator":"2:11382:60578","prim@char":"1:12357:2664","`DoubleEndedIterator`":"2:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50046:3416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:3157-0:283:1791":{"id":"a:2:7718:3157-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:300:1757":{"id":"0:300:1757","crate_id":0,"name":"config","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[183,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:500:595":{"id":"0:500:595","crate_id":0,"name":"eq","span":{"filename":"src/decode.rs","begin":[13,23],"end":[13,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:420:1792":{"id":"b:5:671-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3377","5:674:3378","5:675:3379"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2497-0:447:2177":{"id":"b:2:2497-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:444":{"id":"0:444","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,40],"end":[108,42]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:428:650":{"id":"0:428:650","crate_id":0,"name":"fmt","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[240,22],"end":[240,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:481:1641":{"id":"0:481:1641","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[14,0],"end":[32,1]},"visibility":"public","docs":"Errors that can occur while decoding.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:482:1919","0:486:1921","0:488:1922","0:492:1923"],"impls":["a:2:7719:3156-0:481:1641","a:2:2646:214-0:481:1641","a:2:7718:3157-0:481:1641","a:2:2660:222-0:481:1641","a:2:2710:3221-0:481:1641","b:2:2222-0:481:1641","b:2:2569-0:481:1641","b:2:2507-0:481:1641","b:2:2501-0:481:1641","b:2:2225-0:481:1641","b:2:2512-0:481:1641","b:2:3305-0:481:1641","b:2:2497-0:481:1641","b:5:671-0:481:1641","b:5:5360-0:481:1641","0:494","0:496","0:498","0:499","0:501","0:502","0:395","0:397"]}},"b:2:2222-0:447:2177":{"id":"b:2:2222-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:372:1636":{"id":"0:372:1636","crate_id":0,"name":"encode_engine_slice","span":{"filename":"src/encode.rs","begin":[130,0],"end":[145,1]},"visibility":"public","docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer.\n\nThis is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\nor statically-allocated buffer).\n\n# Panics\n\nIf `output` is too small to hold the encoded version of `input`, a panic will result.\n\n# Example\n\n```rust\nlet s = b\"hello internet!\";\nlet mut buf = Vec::new();\n// make sure we'll have a slice big enough for base64 + padding\nbuf.resize(s.len() * 4 / 3 + 4, 0);\n\nlet bytes_written = base64::encode_engine_slice(\n    s,\n    &mut buf,\n    &base64::engine::DEFAULT_ENGINE);\n\n// shorten our vec down to just what was written\nbuf.truncate(bytes_written);\n\nassert_eq!(s, base64::decode(&buf).unwrap().as_slice());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[87,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:187:1952","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","write_vectored","write_all_vectored","write_all","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:211:1631","0:212:2074"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[85,0],"end":[96,1]},"visibility":{"restricted":{"parent":"0:129:1841","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:159:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59:668":{"id":"0:59:668","crate_id":0,"name":"from","span":{"filename":"src/display.rs","begin":[26,4],"end":[31,5]},"visibility":"public","docs":"Create a `Base64Display` with the provided engine.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211:1631":{"id":"0:211:1631","crate_id":0,"name":"write","span":{"filename":"src/write/encoder_string_writer.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2497-0:192:1954":{"id":"b:2:2497-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3305-0:429:2169":{"id":"b:2:3305-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11441:54341":{"id":"2:11441:54341","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:447:2177":{"id":"b:2:2507-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,16],"end":[105,18]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,34],"end":[13,36]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:159:650":{"id":"0:159:650","crate_id":0,"name":"fmt","span":{"filename":"src/write/encoder.rs","begin":[86,4],"end":[95,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:61230":{"id":"5:5107:61230","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:54479":{"id":"2:11337:54479","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2497-0:420:1792":{"id":"b:2:2497-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[48,0],"end":[61,1]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","cause","source","type_id","description"],"trait":{"name":"Error","id":"2:2562:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:2564","0:399:383"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5108:61231":{"id":"5:5108:61231","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2784","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2784","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:650":{"id":"0:346:650","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[118,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:283:1791":{"id":"b:2:2222-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,16],"end":[22,21]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:453:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:327:1758":{"id":"0:327:1758","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/mod.rs","begin":[86,4],"end":[86,37]},"visibility":"default","docs":"Returns `true` if padding should be added after the encoded output.\n\nPadding is added outside the engine's encode() since the engine may be used\nto encode only a chunk of the overall output, so it can't always know when\nthe output is \"done\" and would therefore need padding (if configured).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3305-0:142:1953":{"id":"b:2:3305-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7718:3157-0:447:2177":{"id":"a:2:7718:3157-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[34,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:40:1629","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:64:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5111:54339":{"id":"5:5111:54339","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11443:54337"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:1905":{"id":"2:11322:1905","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2225-0:192:1954":{"id":"b:2:2225-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:329:2138":{"id":"0:329:2138","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/mod.rs","begin":[97,4],"end":[97,47]},"visibility":"default","docs":"Returns a conservative (err on the side of too big) estimate of the decoded length to use\nfor pre-allocating buffers, etc.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5099:61229":{"id":"5:5099:61229","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:3377":{"id":"5:673:3377","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:7719:3156-0:283:1791":{"id":"a:2:7719:3156-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:451:409":{"id":"0:451:409","crate_id":0,"name":"clone","span":{"filename":"src/alphabet.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:447:2177":{"id":"a:2:2710:3221-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2512-0:447:2177":{"id":"b:2:2512-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[26,0],"end":[38,1]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:290:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:87:1867":{"id":"0:87:1867","crate_id":0,"name":"DecoderReader","span":{"filename":"src/read/decoder.rs","begin":[32,0],"end":[55,1]},"visibility":"public","docs":"A `Read` implementation that decodes base64 data read from an underlying reader.\n\n# Examples\n\n```\nuse std::io::Read;\nuse std::io::Cursor;\n\n// use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.\nlet mut wrapped_reader = Cursor::new(b\"YXNkZg==\");\nlet mut decoder = base64::read::DecoderReader::from(\n    &mut wrapped_reader,\n    &base64::engine::DEFAULT_ENGINE);\n\n// handle errors as you normally would\nlet mut result = Vec::new();\ndecoder.read_to_end(&mut result).unwrap();\n\nassert_eq!(b\"asdf\", &result[..]);\n\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3400:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:107","a:2:7719:3156-0:87:1867","a:2:2646:214-0:87:1867","a:2:7718:3157-0:87:1867","a:2:2660:222-0:87:1867","a:2:2710:3221-0:87:1867","b:2:2222-0:87:1867","b:2:2507-0:87:1867","b:2:2501-0:87:1867","b:2:2225-0:87:1867","b:2:2512-0:87:1867","b:2:3305-0:87:1867","b:2:2497-0:87:1867","0:102","0:120"]}},"2:11346:4281":{"id":"2:11346:4281","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12357:2664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49972:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343:127":{"id":"0:343:127","crate_id":0,"name":"Error","span":{"filename":"src/alphabet.rs","begin":[97,4],"end":[97,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:111:668":{"id":"0:111:668","crate_id":0,"name":"from","span":{"filename":"src/read/decoder.rs","begin":[72,4],"end":[84,5]},"visibility":"public","docs":"Create a new decoder that will read from the provided reader `r`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["reader",{"kind":"generic","inner":"R"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:461:2371":{"id":"b:2:2222-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2497-0:87:1867":{"id":"b:2:2497-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2516:1419":{"id":"2:2516:1419","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3305-0:192:1954":{"id":"b:2:3305-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:488:1922":{"id":"0:488:1922","crate_id":0,"name":"InvalidLastSymbol","span":{"filename":"src/decode.rs","begin":[28,4],"end":[28,32]},"visibility":"default","docs":"The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\nThis is indicative of corrupted or truncated Base64.\nUnlike `InvalidByte`, which reports symbols that aren't in the alphabet, this error is for\nsymbols that are in the alphabet but represent nonsensical encodings.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:490:1546","0:491:1547"]}},"0:119:1931":{"id":"0:119:1931","crate_id":0,"name":"into_inner","span":{"filename":"src/read/decoder.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded\ninput from.\n\nBecause `DecoderReader` performs internal buffering, the state of the inner reader is\nunspecified. This function is mainly provided because the inner reader type may provide\nadditional functionality beyond the `Read` implementation which may still be useful.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:1931":{"id":"0:172:1931","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder.rs","begin":[241,4],"end":[245,5]},"visibility":"public","docs":"Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\nto.\n\nNormally this method should not be needed, since `finish()` returns the inner writer if\nit completes successfully. That will also ensure all data has been flushed, which the\n`into_inner()` function does *not* do.\n\nCalling this method after `finish()` has completed successfully will panic, since the\nwriter has already been returned.\n\nThis method may be useful if the writer implements additional APIs beyond the `Write`\ntrait. Note that the inner writer might be in an error state or have an incomplete\nbase64 string written to it.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"W"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:461:2371":{"id":"a:2:2710:3221-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:486:1921":{"id":"0:486:1921","crate_id":0,"name":"InvalidLength","span":{"filename":"src/decode.rs","begin":[23,4],"end":[23,17]},"visibility":"default","docs":"The length of the input is invalid.\nA typical cause of this is stray trailing whitespace or other separator bytes.\nIn the case where excess trailing bytes have produced an invalid length *and* the last byte\nis also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\nwill be emitted instead of `InvalidLength` to make the issue easier to debug.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:11397:2745":{"id":"2:11397:2745","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12357:2664","`DoubleEndedIterator`":"2:7062:120","self::pattern":"2:11022:2795","str::matches":"2:11397:2745"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50200:3419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2512-0:481:1641":{"id":"b:2:2512-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11341:60574":{"id":"2:11341:60574","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2971:2779","`str`":"1:12363:2669","str::slice_mut_unchecked":"2:11342:60575"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:212:2074":{"id":"0:212:2074","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder_string_writer.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:3156-0:429:2169":{"id":"a:2:7719:3156-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2512-0:461:2371":{"id":"b:2:2512-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11438:4389":{"id":"2:11438:4389","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10984:126","`FromStr`":"2:10983:2790"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10983:2790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10983:2790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[240,22],"end":[240,27]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:428:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:440:650":{"id":"0:440:650","crate_id":0,"name":"fmt","span":{"filename":"src/engine/mod.rs","begin":[108,22],"end":[108,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:420:1792":{"id":"b:2:2501-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2497-0:481:1641":{"id":"b:2:2497-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:160":{"id":"0:160","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[98,0],"end":[246,1]},"visibility":{"restricted":{"parent":"0:129:1841","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:164:668","0:167:1896","0:172:1931"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:396:650":{"id":"0:396:650","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[35,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:3378":{"id":"5:674:3378","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11426:54524":{"id":"2:11426:54524","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:60573":{"id":"2:11330:60573","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:192:1954":{"id":"b:2:2507-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11382:60578":{"id":"2:11382:60578","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12357:2664","str::split_terminator":"2:11379:60577","str::split":"2:11370:54511","self::pattern":"2:11022:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50064:3415","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,47],"end":[121,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_vec","name":"decode_engine_vec","id":"0:406:1639","glob":false}},"a:2:7718:3157-0:461:2371":{"id":"a:2:7718:3157-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:351:2400":{"id":"0:351:2400","crate_id":0,"name":"BCRYPT","span":{"filename":"src/alphabet.rs","begin":[153,0],"end":[155,2]},"visibility":"public","docs":"The bcrypt alphabet.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:495:409":{"id":"0:495:409","crate_id":0,"name":"clone","span":{"filename":"src/decode.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:283:1791":{"id":"a:2:2710:3221-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:353:2408":{"id":"0:353:2408","crate_id":0,"name":"BIN_HEX","span":{"filename":"src/alphabet.rs","begin":[167,0],"end":[169,2]},"visibility":"public","docs":"The alphabet used in BinHex 4.0 files.\n\nSee [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"b:2:2501-0:87:1867":{"id":"b:2:2501-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:458":{"id":"0:458","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11345:3439":{"id":"2:11345:3439","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12357:2664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49966:2787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:481:1641":{"id":"b:2:2507-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3305-0:283:1791":{"id":"b:2:3305-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:326:1742":{"id":"0:326:1742","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[77,0],"end":[87,1]},"visibility":"public","docs":"The minimal level of configuration that engines must support.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:327:1758"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:315"]}},"0:366:1634":{"id":"0:366:1634","crate_id":0,"name":"encode_engine","span":{"filename":"src/encode.rs","begin":[48,0],"end":[56,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the provided `Engine`.\nReturns a `String`.\n\n# Example\n\n```rust\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::NO_PAD);\n\n    let b64 = base64::encode_engine(\n        b\"hello world~\",\n        &base64::engine::DEFAULT_ENGINE\n        );\n    println!(\"{}\", b64);\n\n    let b64_url = base64::encode_engine(\n        b\"hello internet~\",\n        &URL_SAFE_ENGINE\n        );\n    println!(\"{}\", b64_url);\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,24],"end":[117,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_slice","name":"encode_engine_slice","id":"0:372:1636","glob":false}},"2:11406:60583":{"id":"2:11406:60583","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7062:120","prim@char":"1:12357:2664","self::pattern":"2:11022:2795","str::match_indices":"2:11403:60582"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50164:3422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:466:1546":{"id":"0:466:1546","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[110,19],"end":[110,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:11349:59183":{"id":"2:11349:59183","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11348:59169"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50279:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:182":{"id":"0:182","crate_id":0,"name":null,"span":{"filename":"src/write/encoder.rs","begin":[400,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:129:1841","path":"::write::encoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2912:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["0:186:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:432:2173":{"id":"0:432:2173","crate_id":0,"name":"RequireCanonical","span":{"filename":"src/engine/mod.rs","begin":[113,4],"end":[113,20]},"visibility":"default","docs":"Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:202:1931":{"id":"0:202:1931","crate_id":0,"name":"into_inner","span":{"filename":"src/write/encoder_string_writer.rs","begin":[72,4],"end":[77,5]},"visibility":"public","docs":"Encode all remaining buffered data, including any trailing incomplete input triples and\nassociated padding.\n\nReturns the base64-encoded form of the accumulated written data.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"S"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377:1637":{"id":"0:377:1637","crate_id":0,"name":"encoded_len","span":{"filename":"src/encode.rs","begin":[184,0],"end":[204,1]},"visibility":"public","docs":"Calculate the base64 encoded length for a given input length, optionally including any\nappropriate padding bytes.\n\nReturns `None` if the encoded length can't be represented in `usize`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes_len",{"kind":"primitive","inner":"usize"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:429:2169":{"id":"b:2:2501-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11323:60570":{"id":"2:11323:60570","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[171,0],"end":[292,1]},"visibility":{"restricted":{"parent":"0:75:1866","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3400:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["bytes","read_to_string","read_buf","is_read_vectored","chain","read_buf_exact","read_to_end","take","read_exact","read_vectored","by_ref"],"trait":{"name":"Read","id":"1:3400:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:124:1630"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11344:54504":{"id":"2:11344:54504","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11343:54503"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339:54480":{"id":"2:11339:54480","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:3156-0:447:2177":{"id":"a:2:7719:3156-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:323:2138":{"id":"0:323:2138","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/mod.rs","begin":[46,4],"end":[46,80]},"visibility":"default","docs":"As an optimization to prevent the decoded length from being calculated twice, it is\nsometimes helpful to have a conservative estimate of the decoded size before doing the\ndecoding, so this calculation is done separately and passed to [Engine::decode()] as needed.","links":{"Engine::decode()":"0:324:525"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input_len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:406:1639":{"id":"0:406:1639","crate_id":0,"name":"decode_engine_vec","span":{"filename":"src/decode.rs","begin":[149,0],"end":[171,1]},"visibility":"public","docs":"Decode from string reference as octets.\nWrites into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\nReturns a `Result` containing an empty tuple, aka `()`.\n\n# Example\n\n```rust\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::PAD);\n\nfn main() {\n    let mut buffer = Vec::<u8>::new();\n    // with the default engine\n    base64::decode_engine_vec(\n        \"aGVsbG8gd29ybGR+Cg==\",\n        &mut buffer,\n        &base64::engine::DEFAULT_ENGINE\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n\n    buffer.clear();\n\n    // with a custom engine\n    base64::decode_engine_vec(\n        \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n        &mut buffer,\n        &URL_SAFE_ENGINE\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:192:1954":{"id":"b:2:2501-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7719:3156-0:192:1954":{"id":"a:2:7719:3156-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:472:1546":{"id":"0:472:1546","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[114,17],"end":[114,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"0:309:909":{"id":"0:309:909","crate_id":0,"name":"new","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[253,4],"end":[260,5]},"visibility":"public","docs":"Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and\n`decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.\n\nThis probably matches most people's expectations, but consider disabling padding to save\na few bytes unless you specifically need it for compatibility with some legacy system.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:54338":{"id":"2:11442:54338","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:87:1867":{"id":"a:2:2646:214-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:235:1790":{"id":"0:235:1790","crate_id":0,"name":"fast_portable","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[1,0],"end":[336,62]},"visibility":"public","docs":"Provides the [FastPortable] engine and associated config types.","links":{"FastPortable":"0:283:1791"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:281","0:283:1791","0:420:1792","0:317:1793","0:318:2284"],"is_stripped":false}},"0:469:1546":{"id":"0:469:1546","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[112,20],"end":[112,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:11347:1760":{"id":"2:11347:1760","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49982:2870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320":{"id":"2:11320","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10585:1345","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11321:783","2:11322:1905","2:11323:60570","2:11324:60571","2:11326:60572","2:11329:2367","2:11330:60573","2:11331:306","2:11332:54481","2:11333:54477","2:11335:54478","2:11337:54479","2:11339:54480","2:11341:60574","2:11342:60575","2:11343:54503","2:11344:54504","2:11345:3439","2:11346:4281","2:11347:1760","2:11348:59169","2:11349:59183","2:11350:4969","2:11351:60576","2:11352:59178","2:11353:54521","2:11356:54522","2:11359:54523","2:11362:3358","2:11366:3322","2:11370:54511","2:11373:54513","2:11376:54515","2:11379:60577","2:11382:60578","2:11385:54517","2:11388:54519","2:11391:60579","2:11394:60580","2:11397:2745","2:11400:60581","2:11403:60582","2:11406:60583","2:11409:60584","2:11411:60585","2:11413:60586","2:11415:60587","2:11416:60588","2:11417:60589","2:11420:60590","2:11423:54301","2:11426:54524","2:11429:60591","2:11432:60592","2:11435:60593","2:11438:4389","2:11440:4654","2:11441:54341","2:11442:54338","2:11443:54337","2:11444:60594","2:11446:4013","2:11447:60595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:485:1547":{"id":"0:485:1547","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[17,23],"end":[17,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[240,9],"end":[240,14]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:425:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2222-0:429:2169":{"id":"b:2:2222-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2225-0:481:1641":{"id":"b:2:2225-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3305-0:461:2371":{"id":"b:2:3305-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2710:3221-0:87:1867":{"id":"a:2:2710:3221-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2660:222-0:192:1954":{"id":"a:2:2660:222-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:325:1757":{"id":"0:325:1757","crate_id":0,"name":"config","span":{"filename":"src/engine/mod.rs","begin":[73,4],"end":[73,38]},"visibility":"default","docs":"Returns the config for this engine.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,16],"end":[105,18]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:460:595":{"id":"0:460:595","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:192:1954":{"id":"a:2:2646:214-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:470:2375":{"id":"0:470:2375","crate_id":0,"name":"ReservedByte","span":{"filename":"src/alphabet.rs","begin":[114,4],"end":[114,20]},"visibility":"default","docs":"`=` cannot be used","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:472:1546"]}},"0:292:1742":{"id":"0:292:1742","crate_id":0,"name":"Config","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[41,4],"end":[41,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:7719:3156-0:420:1792":{"id":"a:2:7719:3156-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2501-0:142:1953":{"id":"b:2:2501-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2222-0:420:1792":{"id":"b:2:2222-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2225-0:429:2169":{"id":"b:2:2225-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:461:2371":{"id":"0:461:2371","crate_id":0,"name":"ParseAlphabetError","span":{"filename":"src/alphabet.rs","begin":[106,0],"end":[115,1]},"visibility":"public","docs":"Possible errors when constructing an [Alphabet] from a `str`.","links":{"Alphabet":"0:447:2177"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:462:1921","0:464:2378","0:467:2374","0:470:2375"],"impls":["a:2:7719:3156-0:461:2371","a:2:2646:214-0:461:2371","a:2:7718:3157-0:461:2371","a:2:2660:222-0:461:2371","a:2:2710:3221-0:461:2371","b:2:2222-0:461:2371","b:2:2569-0:461:2371","b:2:2507-0:461:2371","b:2:2501-0:461:2371","b:2:2225-0:461:2371","b:2:2512-0:461:2371","b:2:3305-0:461:2371","b:2:2497-0:461:2371","b:5:5360-0:461:2371","0:473","0:475","0:476","0:478","0:479","0:345","0:347"]}},"0:74:1630":{"id":"0:74:1630","crate_id":0,"name":"read","span":{"filename":"src/read/mod.rs","begin":[1,0],"end":[6,18]},"visibility":"public","docs":"Implementations of `io::Read` to transparently decode base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:127"],"is_stripped":false}},"2:11385:54517":{"id":"2:11385:54517","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795","str::rsplitn":"2:11388:54519"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50100:3418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:4013":{"id":"2:11446:4013","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4455:4013"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50304:3425","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:461:2371":{"id":"b:2:2501-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:350:2397":{"id":"0:350:2397","crate_id":0,"name":"CRYPT","span":{"filename":"src/alphabet.rs","begin":[148,0],"end":[150,2]},"visibility":"public","docs":"The `crypt(3)` alphabet (uses `.` and `/` as the first two values).\n\nNot standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:0:1645":{"id":"0:0:1645","crate_id":0,"name":"base64","span":{"filename":"src/lib.rs","begin":[1,0],"end":[127,26]},"visibility":"public","docs":"\n# Alphabets\n\nAn [alphabet::Alphabet] defines what ASCII symbols are used to encode to or decode from.\n\nConstants in [alphabet] like [alphabet::STANDARD] or [alphabet::URL_SAFE] provide commonly used\nalphabets, but you can also build your own custom `Alphabet` if needed.\n\n# Engines\n\nOnce you have an `Alphabet`, you can pick which `Engine` you want. A few parts of the public\nAPI provide a default, but otherwise the user must provide an `Engine` to use.\n\nSee [engine::Engine] for more on what engine to choose, or use [engine::DEFAULT_ENGINE] if you\njust want plain old standard base64 and don't have other requirements.\n\n## Config\n\nIn addition to an `Alphabet`, constructing an `Engine` also requires an [engine::Config]. Each\n`Engine` has a corresponding `Config` implementation.\n\n[encode()] and [decode()] use the standard alphabet and default engine in an RFC 4648 standard\nsetup.\n\n# Encoding\n\nSeveral different encoding functions are available to you depending on your desire for\nconvenience vs performance.\n\n| Function                | Output                       | Allocates                      |\n| ----------------------- | ---------------------------- | ------------------------------ |\n| `encode`                | Returns a new `String`       | Always                         |\n| `encode_engine`         | Returns a new `String`       | Always                         |\n| `encode_engine_string`     | Appends to provided `String` | Only if `String` needs to grow |\n| `encode_engine_slice`   | Writes to provided `&[u8]`   | Never - fastest                |\n\nAll of the encoding functions that take an `Engine` will pad as per the engine's config.\n\n# Decoding\n\nJust as for encoding, there are different decoding functions available.\n\n| Function                | Output                        | Allocates                      |\n| ----------------------- | ----------------------------- | ------------------------------ |\n| `decode`                | Returns a new `Vec<u8>`       | Always                         |\n| `decode_engine`         | Returns a new `Vec<u8>`       | Always                         |\n| `decode_engine_vec`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |\n| `decode_engine_slice`   | Writes to provided `&[u8]`    | Never - fastest                |\n\nUnlike encoding, where all possible input is valid, decoding can fail (see [DecodeError]).\n\nInput can be invalid because it has invalid characters or invalid padding. (No padding at all is\nvalid, but excess padding is not.) Whitespace in the input is invalid, just like any other\nnon-base64 byte.\n\n# `Read` and `Write`\n\nTo decode a [std::io::Read] of b64 bytes, wrap a reader (file, network socket, etc) with\n[read::DecoderReader].\n\nTo write raw bytes and have them b64 encoded on the fly, wrap a [std::io::Write] with\n[write::EncoderWriter].\n\nThere is some performance overhead (15% or so) because of the necessary buffer shuffling --\nstill fast enough that almost nobody cares. Also, these implementations do not heap allocate.\n\n# `Display`\n\nSee [display] for how to transparently base64 data via a `Display` implementation.\n\n# Panics\n\nIf length calculations result in overflowing `usize`, a panic will result.\n\nThe `_slice` flavors of encode or decode will panic if the provided output slice is too small.","links":{"DecodeError":"0:481:1641","alphabet::Alphabet":"0:447:2177","engine::Config":"0:326:1742","display":"0:40:1629","alphabet::STANDARD":"0:348:1789","write::EncoderWriter":"0:142:1953","read::DecoderReader":"0:87:1867","engine::DEFAULT_ENGINE":"0:330:1856","engine::Engine":"0:319:1743","alphabet::URL_SAFE":"0:349:2393","decode()":"0:400:525","std::io::Write":"1:3457:1989","std::io::Read":"1:3400:1886","encode()":"0:364:590","alphabet":"0:331:1633"},"attrs":["#![deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)]","#![forbid(unsafe_code)]","#![allow(clippy :: single_component_path_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:40:1629","0:74:1630","0:128:1631","0:230:1632","0:331:1633","0:382","0:383","0:384","0:386","0:387","0:413","0:414","0:415","0:417","0:418"],"is_stripped":false}},"a:2:2660:222-0:49:1850":{"id":"a:2:2660:222-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:316:1758":{"id":"0:316:1758","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[322,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314:59":{"id":"0:314:59","crate_id":0,"name":"default","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[316,4],"end":[318,5]},"visibility":"default","docs":"Delegates to [FastPortableConfig::new].","links":{"FastPortableConfig::new":"0:309:909"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11394:60580":{"id":"2:11394:60580","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:474:650":{"id":"0:474:650","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[105,9],"end":[105,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:142:1953":{"id":"a:2:2646:214-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:462:1921":{"id":"0:462:1921","crate_id":0,"name":"InvalidLength","span":{"filename":"src/alphabet.rs","begin":[108,4],"end":[108,17]},"visibility":"default","docs":"Alphabets must be 64 ASCII bytes","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:11343:54503":{"id":"2:11343:54503","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11344:54504"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:3157-0:49:1850":{"id":"a:2:7718:3157-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:480:595":{"id":"0:480:595","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11409:60584":{"id":"2:11409:60584","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352:2404":{"id":"0:352:2404","crate_id":0,"name":"IMAP_MUTF7","span":{"filename":"src/alphabet.rs","begin":[160,0],"end":[162,2]},"visibility":"public","docs":"The alphabet used in IMAP-modified UTF-7 (uses `+` and `,`).\n\nSee [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:177:1631":{"id":"0:177:1631","crate_id":0,"name":"write","span":{"filename":"src/write/encoder.rs","begin":[265,4],"end":[384,5]},"visibility":"default","docs":"Encode input and then write to the delegate writer.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nof `input` consumed. The value may be `0`, which interacts poorly with `write_all`, which\ninterprets `Ok(0)` as an error, despite it being allowed by the contract of `write`. See\n<https://github.com/rust-lang/rust/issues/56889> for more on that.\n\nIf the previous call to `write` provided more (encoded) data than the delegate writer could\naccept in a single call to its `write`, the remaining data is buffered. As long as buffered\ndata is present, subsequent calls to `write` will try to write the remaining buffered data\nto the delegate and return either `Ok(0)` -- and therefore not consume any of `input` -- or\nan error.\n\n# Errors\n\nAny errors emitted by the delegate writer are returned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2500:3316":{"id":"2:2500:3316","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2474:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[57,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:75:1866","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3400:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:106:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:482:1919":{"id":"0:482:1919","crate_id":0,"name":"InvalidByte","span":{"filename":"src/decode.rs","begin":[17,4],"end":[17,26]},"visibility":"default","docs":"An invalid byte was found in the input. The offset and offending byte are provided.\nPadding characters (`=`) interspersed in the encoded form will be treated as invalid bytes.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:484:1546","0:485:1547"]}},"b:2:2512-0:283:1791":{"id":"b:2:2512-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:213:1955":{"id":"0:213:1955","crate_id":0,"name":"StrConsumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[98,0],"end":[101,1]},"visibility":"public","docs":"An abstraction around consuming `str`s produced by base64 encoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:214:2104"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:215","0:218"]}},"2:11416:60588":{"id":"2:11416:60588","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:481:1641":{"id":"a:2:2646:214-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11440:4654":{"id":"2:11440:4654","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:383":{"id":"0:399:383","crate_id":0,"name":"cause","span":{"filename":"src/decode.rs","begin":[58,4],"end":[60,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2562:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,9],"end":[13,14]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:495:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2225-0:283:1791":{"id":"b:2:2225-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2512-0:420:1792":{"id":"b:2:2512-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11331:306":{"id":"2:11331:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12374:2678","str::as_mut_ptr":"2:11332:54481"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11391:60579":{"id":"2:11391:60579","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2171":{"id":"0:430:2171","crate_id":0,"name":"Indifferent","span":{"filename":"src/engine/mod.rs","begin":[111,4],"end":[111,15]},"visibility":"default","docs":"Canonical padding is allowed, but any fewer padding bytes than that is also allowed.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"2:2571:3685":{"id":"2:2571:3685","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3366:3712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:61227":{"id":"5:5092:61227","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2784","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2784","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5110:54340":{"id":"5:5110:54340","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11442:54338"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:127":{"id":"2:2510:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"a:2:7718:3157-0:481:1641":{"id":"a:2:7718:3157-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[117,0],"end":[126,1]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7719:3156-0:87:1867":{"id":"a:2:7719:3156-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:425:409":{"id":"0:425:409","crate_id":0,"name":"clone","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[240,9],"end":[240,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:447:2177":{"id":"a:2:2646:214-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2569-0:481:1641":{"id":"b:2:2569-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2562:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3354:3713","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2571:3685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11373:54513":{"id":"2:11373:54513","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10846:3428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369:1635":{"id":"0:369:1635","crate_id":0,"name":"encode_engine_string","span":{"filename":"src/encode.rs","begin":[85,0],"end":[100,1]},"visibility":"public","docs":"Encode arbitrary octets as base64.\nWrites into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n\n# Example\n\n```rust\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::NO_PAD);\nfn main() {\n    let mut buf = String::new();\n    base64::encode_engine_string(\n        b\"hello world~\",\n        &mut buf,\n        &base64::engine::DEFAULT_ENGINE);\n    println!(\"{}\", buf);\n\n    buf.clear();\n    base64::encode_engine_string(\n        b\"hello internet~\",\n        &mut buf,\n        &URL_SAFE_ENGINE);\n    println!(\"{}\", buf);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/read/decoder.rs","begin":[70,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:75:1866","path":"::read::decoder"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3400:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["0:111:668","0:119:1931"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2569-0:461:2371":{"id":"b:2:2569-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2562:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3354:3713","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2571:3685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11350:4969":{"id":"2:11350:4969","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50250:2873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1896":{"id":"0:167:1896","crate_id":0,"name":"finish","span":{"filename":"src/write/encoder.rs","begin":[128,4],"end":[140,5]},"visibility":"public","docs":"Encode all remaining buffered data and write it, including any trailing incomplete input\ntriples and associated padding.\n\nOnce this succeeds, no further writes or calls to this method are allowed.\n\nThis may write to the delegate writer multiple times if the delegate writer does not accept\nall input provided to its `write` each invocation.\n\nIf you don't care about error handling, it is not necessary to call this function, as the\nequivalent finalization is done by the Drop impl.\n\nReturns the writer that this was constructed around.\n\n# Errors\n\nThe first error that is not of `ErrorKind::Interrupted` will be returned.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:420:1792":{"id":"0:420:1792","crate_id":0,"name":"FastPortableConfig","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[241,0],"end":[245,1]},"visibility":"public","docs":"Contains configuration parameters for base64 encoding and decoding.\n\n```\n# use base64::engine::fast_portable::FastPortableConfig;\nlet config = FastPortableConfig::new()\n    .with_encode_padding(false);\n    // further customize using `.with_*` methods as needed\n```\n\nThe constants [PAD] and [NO_PAD] cover most use cases.\n\nTo specify the characters used, see [crate::alphabet::Alphabet].","links":{"NO_PAD":"0:318:2284","crate::alphabet::Alphabet":"0:447:2177","PAD":"0:317:1793"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:308","a:2:7719:3156-0:420:1792","a:2:2646:214-0:420:1792","a:2:7718:3157-0:420:1792","a:2:2660:222-0:420:1792","a:2:2710:3221-0:420:1792","b:2:2222-0:420:1792","b:2:2507-0:420:1792","b:2:2501-0:420:1792","b:2:2225-0:420:1792","b:2:2512-0:420:1792","b:2:3305-0:420:1792","b:2:2497-0:420:1792","b:5:671-0:420:1792","0:424","0:426","0:427","0:313","0:315"]}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[314,0],"end":[319,1]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2548:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:314:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11432:60592":{"id":"2:11432:60592","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[321,0],"end":[325,1]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Config","id":"0:326:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:316:1758"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11417:60589":{"id":"2:11417:60589","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11047:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2660:222-0:447:2177":{"id":"a:2:2660:222-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11388:54519":{"id":"2:11388:54519","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795","str::splitn":"2:11385:54517"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50118:3417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[240,16],"end":[240,20]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:40:1629":{"id":"0:40:1629","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"Enables base64'd output anywhere you might use a `Display` implementation, like a format string.\n\n```\nuse base64::display::Base64Display;\nuse base64::engine::DEFAULT_ENGINE;\n\nlet data = vec![0x0, 0x1, 0x2, 0x3];\nlet wrapper = Base64Display::from(&data, &DEFAULT_ENGINE);\n\nassert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:49:1850"],"is_stripped":false}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,29],"end":[108,38]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:324:525":{"id":"0:324:525","crate_id":0,"name":"decode","span":{"filename":"src/engine/mod.rs","begin":[65,4],"end":[70,36]},"visibility":"default","docs":"Decode `input` base64 bytes into the `output` buffer.\n\n`decode_estimate` is the result of [Engine::decoded_length_estimate()], which is passed in to avoid\ncalculating it again (expensive on short inputs).`\n\nReturns the number of bytes written to `output`.\n\nEach complete 4-byte chunk of encoded data decodes to 3 bytes of decoded data, but this\nfunction must also handle the final possibly partial chunk.\nIf the input length is not a multiple of 4, or uses padding bytes to reach a multiple of 4,\nthe trailing 2 or 3 bytes must decode to 1 or 2 bytes, respectively, as per the\n[RFC](https://tools.ietf.org/html/rfc4648#section-3.5).\n\nDecoding must not write any bytes into the output slice other than the decoded data.\n\nNon-canonical trailing bits in the final tokens or non-canonical padding must be reported as\nerrors unless the engine is configured otherwise.","links":{"Engine::decoded_length_estimate()":"0:323:2138"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["decode_estimate",{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:2660:222-0:461:2371":{"id":"a:2:2660:222-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2646:214-0:461:2371":{"id":"a:2:2646:214-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2225-0:142:1953":{"id":"b:2:2225-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:192:1954":{"id":"0:192:1954","crate_id":0,"name":"EncoderStringWriter","span":{"filename":"src/write/encoder_string_writer.rs","begin":[56,0],"end":[58,1]},"visibility":"public","docs":"A `Write` implementation that base64-encodes data using the provided config and accumulates the\nresulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is\nthen exposed via `into_inner()`.\n\n# Examples\n\nBuffer base64 in a new String:\n\n```\nuse std::io::Write;\n\nlet mut enc = base64::write::EncoderStringWriter::from(\n    &base64::engine::DEFAULT_ENGINE);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// get the resulting String\nlet b64_string = enc.into_inner();\n\nassert_eq!(\"YXNkZg==\", &b64_string);\n```\n\nOr, append to an existing `String`, which implements `StrConsumer`:\n\n```\nuse std::io::Write;\n\nlet mut buf = String::from(\"base64: \");\n\nlet mut enc = base64::write::EncoderStringWriter::from_consumer(\n    &mut buf,\n    &base64::engine::DEFAULT_ENGINE);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// release the &mut reference on buf\nlet _ = enc.into_inner();\n\nassert_eq!(\"base64: YXNkZg==\", &buf);\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Performance\n\nBecause it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain\nbytes to a `io::Write`.","links":{"StrConsumer":"0:213:1955"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:197","0:203","a:2:7719:3156-0:192:1954","a:2:2646:214-0:192:1954","a:2:7718:3157-0:192:1954","a:2:2660:222-0:192:1954","a:2:2710:3221-0:192:1954","b:2:2222-0:192:1954","b:2:2507-0:192:1954","b:2:2501-0:192:1954","b:2:2225-0:192:1954","b:2:2512-0:192:1954","b:2:3305-0:192:1954","b:2:2497-0:192:1954","0:207"]}},"0:330:1856":{"id":"0:330:1856","crate_id":0,"name":"DEFAULT_ENGINE","span":{"filename":"src/engine/mod.rs","begin":[101,0],"end":[102,64]},"visibility":"public","docs":"A [FastPortable] engine using the [crate::alphabet::STANDARD] base64 alphabet and [crate::engine::fast_portable::PAD] config.","links":{"crate::alphabet::STANDARD":"0:348:1789","FastPortable":"0:283:1791","crate::engine::fast_portable::PAD":"0:317:1793"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:298:2138":{"id":"0:298:2138","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input_len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:1632":{"id":"0:230:1632","crate_id":0,"name":"engine","span":{"filename":"src/engine/mod.rs","begin":[1,0],"end":[116,1]},"visibility":"public","docs":"Provides the [Engine] abstraction and out of the box implementations.","links":{"Engine":"0:319:1743"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:235:1790","0:319:1743","0:326:1742","0:328:2129","0:330:1856","0:429:2169"],"is_stripped":false}},"0:484:1546":{"id":"0:484:1546","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[17,16],"end":[17,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,27],"end":[22,36]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:460:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,16],"end":[108,20]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2222-0:192:1954":{"id":"b:2:2222-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:310:2258":{"id":"0:310:2258","crate_id":0,"name":"with_encode_padding","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[272,4],"end":[277,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `padding` setting.\n\nIf `padding` is `true`, encoding will append either 1 or 2 `=` padding characters as needed\nto produce an output whose length is a multiple of 4.\n\nPadding is not needed for correct decoding and only serves to waste bytes, but it's in the\n[spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).\n\nFor new applications, consider not using padding if the decoders you're using don't require\npadding to be present.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:464:2378":{"id":"0:464:2378","crate_id":0,"name":"DuplicatedByte","span":{"filename":"src/alphabet.rs","begin":[110,4],"end":[110,22]},"visibility":"default","docs":"All bytes must be unique","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:466:1546"]}},"b:2:2507-0:420:1792":{"id":"b:2:2507-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2501-0:283:1791":{"id":"b:2:2501-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2646:214-0:429:2169":{"id":"a:2:2646:214-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2512-0:142:1953":{"id":"b:2:2512-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2222-0:142:1953":{"id":"b:2:2222-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3305-0:87:1867":{"id":"b:2:3305-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11362:3358":{"id":"2:11362:3358","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48030:174","prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:192:1954":{"id":"a:2:2710:3221-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3307:1433":{"id":"2:3307:1433","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46501:3714","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11411:60585":{"id":"2:11411:60585","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:492:1923":{"id":"0:492:1923","crate_id":0,"name":"InvalidPadding","span":{"filename":"src/decode.rs","begin":[31,4],"end":[31,18]},"visibility":"default","docs":"The nature of the padding was not as configured: absent or incorrect when it must be\ncanonical, or present when it must be absent, etc.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2225-0:420:1792":{"id":"b:2:2225-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:671-0:447:2177":{"id":"b:5:671-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3377","5:674:3378","5:675:3379"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2507-0:49:1850":{"id":"b:2:2507-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:311:2266":{"id":"0:311:2266","crate_id":0,"name":"with_decode_allow_trailing_bits","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[286,4],"end":[291,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.\n\nMost users will not need to configure this. It's useful if you need to decode base64\nproduced by a buggy encoder that has bits set in the unused space on the last base64\ncharacter as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).\nIf invalid trailing bits are present and this is `true`, those bits will\nbe silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["allow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2660:222-0:283:1791":{"id":"a:2:2660:222-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7718:3157-0:142:1953":{"id":"a:2:7718:3157-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:299:525":{"id":"0:299:525","crate_id":0,"name":"decode","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[167,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["estimate",{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:319:1743","args":null}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5362:1399":{"id":"5:5362:1399","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5360-0:49:1850":{"id":"b:5:5360-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["5:5362:1399"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2503:668":{"id":"2:2503:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317:1793":{"id":"0:317:1793","crate_id":0,"name":"PAD","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[331,0],"end":[331,62]},"visibility":"public","docs":"Include padding bytes when encoding, and require that they be present when decoding.\n\nThis is the standard per the base64 RFC, but consider using [NO_PAD] instead as padding serves\nlittle purpose in practice.","links":{"NO_PAD":"0:318:2284"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"2:11403:60582":{"id":"2:11403:60582","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:12357:2664","`DoubleEndedIterator`":"2:7062:120","self::pattern":"2:11022:2795","str::rmatch_indices":"2:11406:60583"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50146:3421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:783":{"id":"2:11321:783","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12357:2664"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2227:54032":{"id":"2:2227:54032","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:2367":{"id":"2:11329:2367","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10590:1782"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:3322":{"id":"2:11366:3322","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664","`None`":"2:48030:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/read/mod.rs","begin":[3,0],"end":[3,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::decoder::DecoderReader","name":"DecoderReader","id":"0:87:1867","glob":false}},"0:49:1850":{"id":"0:49:1850","crate_id":0,"name":"Base64Display","span":{"filename":"src/display.rs","begin":[19,0],"end":[22,1]},"visibility":"public","docs":"A convenience wrapper for base64'ing bytes into a format string without heap allocation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:55","a:2:7719:3156-0:49:1850","a:2:2646:214-0:49:1850","a:2:7718:3157-0:49:1850","a:2:2660:222-0:49:1850","a:2:2710:3221-0:49:1850","b:2:2222-0:49:1850","b:2:2507-0:49:1850","b:2:2501-0:49:1850","b:2:2225-0:49:1850","b:2:2512-0:49:1850","b:2:3305-0:49:1850","b:2:2497-0:49:1850","b:5:5360-0:49:1850","0:60"]}},"0:290:668":{"id":"0:290:668","crate_id":0,"name":"from","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[31,4],"end":[37,5]},"visibility":"public","docs":"Create a `FastPortable` engine from an [Alphabet].\n\nWhile not very expensive to initialize, ideally these should be cached\nif the engine will be used repeatedly.","links":{"Alphabet":"0:447:2177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["config",{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2497-0:429:2169":{"id":"b:2:2497-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11429:60591":{"id":"2:11429:60591","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11022:2795","prim@char":"1:12357:2664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:3156-0:481:1641":{"id":"a:2:7719:3156-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,23],"end":[22,25]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11333:54477":{"id":"2:11333:54477","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:283:1791":{"id":"a:2:2646:214-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2501-0:481:1641":{"id":"b:2:2501-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:283:1791":{"id":"0:283:1791","crate_id":0,"name":"FastPortable","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[20,0],"end":[24,1]},"visibility":"public","docs":"A general-purpose base64 engine.\n\n- It uses no vector CPU instructions, so it will work on any system.\n- It is reasonably fast (~2GiB/s).\n- It is not constant-time, though, so it is vulnerable to timing side-channel attacks. For loading cryptographic keys, etc, it is suggested to use the forthcoming constant-time implementation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:289","a:2:7719:3156-0:283:1791","a:2:2646:214-0:283:1791","a:2:7718:3157-0:283:1791","a:2:2660:222-0:283:1791","a:2:2710:3221-0:283:1791","b:2:2222-0:283:1791","b:2:2507-0:283:1791","b:2:2501-0:283:1791","b:2:2225-0:283:1791","b:2:2512-0:283:1791","b:2:3305-0:283:1791","b:2:2497-0:283:1791","0:291"]}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,47],"end":[116,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_string","name":"encode_engine_string","id":"0:369:1635","glob":false}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1345","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:61227","5:5093:2544","5:5096:61228","5:5099:61229","5:5107:61230","5:5108:61231","5:5109:2631","5:5110:54340","5:5111:54339"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11352:59178":{"id":"2:11352:59178","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50288:3423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:571":{"id":"0:186:571","crate_id":0,"name":"drop","span":{"filename":"src/write/encoder.rs","begin":[401,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,16],"end":[13,21]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:497:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2660:222-0:420:1792":{"id":"a:2:2660:222-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:142:1953":{"id":"0:142:1953","crate_id":0,"name":"EncoderWriter","span":{"filename":"src/write/encoder.rs","begin":[65,0],"end":[83,1]},"visibility":"public","docs":"A `Write` implementation that base64 encodes data before delegating to the wrapped writer.\n\nBecause base64 has special handling for the end of the input data (padding, etc), there's a\n`finish()` method on this type that encodes any leftover input bytes and adds padding if\nappropriate. It's called automatically when deallocated (see the `Drop` implementation), but\nany error that occurs when invoking the underlying writer will be suppressed. If you want to\nhandle such errors, call `finish()` yourself.\n\n# Examples\n\n```\nuse std::io::Write;\n\n// use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.\nlet mut enc = base64::write::EncoderWriter::from(\n    Vec::new(),\n    &base64::engine::DEFAULT_ENGINE);\n\n// handle errors as you normally would\nenc.write_all(b\"asdf\").unwrap();\n\n// could leave this out to be called by Drop, if you don't care\n// about handling errors or getting the delegate writer back\nlet delegate = enc.finish().unwrap();\n\n// base64 was written to the writer\nassert_eq!(b\"YXNkZg==\", &delegate[..]);\n\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Errors\n\nBase64 encoding itself does not generate errors, but errors from the wrapped writer will be\nreturned as per the contract of `Write`.\n\n# Performance\n\nIt has some minor performance loss compared to encoding slices (a couple percent).\nIt does not do any heap allocation.\n\n# Limitations\n\nOwing to the specification of the `write` and `flush` methods on the `Write` trait and their\nimplications for a buffering implementation, these methods may not behave as expected. In\nparticular, calling `write_all` on this interface may fail with `io::ErrorKind::WriteZero`.\nSee the documentation of the `Write` trait implementation for further details.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3457:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:160","a:2:7719:3156-0:142:1953","a:2:2646:214-0:142:1953","a:2:7718:3157-0:142:1953","a:2:2660:222-0:142:1953","a:2:2710:3221-0:142:1953","b:2:2222-0:142:1953","b:2:2507-0:142:1953","b:2:2501-0:142:1953","b:2:2225-0:142:1953","b:2:2512-0:142:1953","b:2:3305-0:142:1953","b:2:2497-0:142:1953","0:155","0:173","0:182"]}},"a:2:7719:3156-0:461:2371":{"id":"a:2:7719:3156-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2660:222-0:87:1867":{"id":"a:2:2660:222-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[22,23],"end":[22,25]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:294:590":{"id":"0:294:590","crate_id":0,"name":"encode","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[44,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:429:2169":{"id":"b:2:2507-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[34,0],"end":[45,1]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:396:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:106:650":{"id":"0:106:650","crate_id":0,"name":"fmt","span":{"filename":"src/read/decoder.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:344:1419":{"id":"0:344:1419","crate_id":0,"name":"try_from","span":{"filename":"src/alphabet.rs","begin":[99,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:2481:230","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11324:60571":{"id":"2:11324:60571","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[247,0],"end":[312,1]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:309:909","0:310:2258","0:311:2266","0:312:2277"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2225-0:49:1850":{"id":"b:2:2225-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:318:2284":{"id":"0:318:2284","crate_id":0,"name":"NO_PAD","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[334,0],"end":[336,62]},"visibility":"public","docs":"Don't add padding when encoding, and require no padding when decoding.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:319:1743":{"id":"0:319:1743","crate_id":0,"name":"Engine","span":{"filename":"src/engine/mod.rs","begin":[26,0],"end":[74,1]},"visibility":"public","docs":"An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.\n\nDifferent implementations offer different characteristics. The library currently ships with\na general-purpose [FastPortable] impl that offers good speed and works on any CPU, with more choices\ncoming later, like a constant-time one when side channel resistance is called for, and vendor-specific vectorized ones for more speed.\n\nSee [DEFAULT_ENGINE] if you just want standard base64. Otherwise, when possible, it's\nrecommended to store the engine in a `const` so that references to it won't pose any lifetime\nissues, and to avoid repeating the cost of engine setup.","links":{"FastPortable":"0:283:1791","DEFAULT_ENGINE":"0:330:1856"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:320:1742","0:321:2129","0:322:590","0:323:2138","0:324:525","0:325:1757"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:291"]}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,23],"end":[13,32]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7718:3157-0:192:1954":{"id":"a:2:7718:3157-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7718:3157-0:87:1867":{"id":"a:2:7718:3157-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,22],"end":[108,27]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:440:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2512-0:49:1850":{"id":"b:2:2512-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2710:3221-0:142:1953":{"id":"a:2:2710:3221-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[6,0],"end":[6,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::StrConsumer","name":"StrConsumer","id":"0:213:1955","glob":false}},"0:321:2129":{"id":"0:321:2129","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[30,4],"end":[30,40]},"visibility":"default","docs":"The decode estimate used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"DecodeEstimate","id":"0:328:2129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"b:2:3305-0:49:1850":{"id":"b:2:3305-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:443:595":{"id":"0:443:595","crate_id":0,"name":"eq","span":{"filename":"src/engine/mod.rs","begin":[108,29],"end":[108,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2512-0:192:1954":{"id":"b:2:2512-0:192:1954","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2497-0:142:1953":{"id":"b:2:2497-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:293:2129":{"id":"0:293:2129","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[42,4],"end":[42,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"FastPortableEstimate","id":"0:257:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5109:2631":{"id":"5:5109:2631","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348:1789":{"id":"0:348:1789","crate_id":0,"name":"STANDARD","span":{"filename":"src/alphabet.rs","begin":[134,0],"end":[136,2]},"visibility":"public","docs":"The standard alphabet (uses `+` and `/`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,29],"end":[108,38]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:443:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:181:2074":{"id":"0:181:2074","crate_id":0,"name":"flush","span":{"filename":"src/write/encoder.rs","begin":[391,4],"end":[397,5]},"visibility":"default","docs":"Because this is usually treated as OK to call multiple times, it will *not* flush any\nincomplete chunks of input or write padding.\n# Errors\n\nThe first error that is not of [`ErrorKind::Interrupted`] will be returned.","links":{"`ErrorKind::Interrupted`":"1:8284:2041"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:668":{"id":"0:206:668","crate_id":0,"name":"from","span":{"filename":"src/write/encoder_string_writer.rs","begin":[82,4],"end":[84,5]},"visibility":"public","docs":"Create a EncoderStringWriter that will encode into a new `String` with the provided config.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:54523":{"id":"2:11359:54523","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2497-0:283:1791":{"id":"b:2:2497-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11370:54511":{"id":"2:11370:54511","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11376:54515","self::pattern":"2:11022:2795","`DoubleEndedIterator`":"2:7062:120","str::split_whitespace":"2:11348:59169","prim@char":"1:12357:2664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49996:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:479":{"id":"0:479","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,20],"end":[105,29]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:480:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:434:2175":{"id":"0:434:2175","crate_id":0,"name":"RequireNone","span":{"filename":"src/engine/mod.rs","begin":[115,4],"end":[115,15]},"visibility":"default","docs":"Padding must be absent -- for when you want predictable padding, without any wasted bytes.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:2:2222-0:87:1867":{"id":"b:2:2222-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:164:668":{"id":"0:164:668","crate_id":0,"name":"from","span":{"filename":"src/write/encoder.rs","begin":[100,4],"end":[110,5]},"visibility":"public","docs":"Create a new encoder that will write to the provided delegate writer.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["delegate",{"kind":"generic","inner":"W"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:437:409":{"id":"0:437:409","crate_id":0,"name":"clone","span":{"filename":"src/engine/mod.rs","begin":[108,9],"end":[108,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:3157-0:420:1792":{"id":"a:2:7718:3157-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2497-0:461:2371":{"id":"b:2:2497-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5360-0:461:2371":{"id":"b:5:5360-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5362:1399"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2507-0:283:1791":{"id":"b:2:2507-0:283:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2710:3221-0:420:1792":{"id":"a:2:2710:3221-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:400:525":{"id":"0:400:525","crate_id":0,"name":"decode","span":{"filename":"src/decode.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Decode base64 using the [default engine](DEFAULT_ENGINE).\nReturns a `Result` containing a `Vec<u8>`.\n\n# Example\n\n```rust\n let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();\n println!(\"{:?}\", bytes);\n```","links":{"DEFAULT_ENGINE":"0:330:1856"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349:2393":{"id":"0:349:2393","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/alphabet.rs","begin":[141,0],"end":[143,2]},"visibility":"public","docs":"The URL safe alphabet (uses `-` and `_`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[96,0],"end":[102,1]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:343:127","0:344:1419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[32,1]},"visibility":{"restricted":{"parent":"0:40:1629","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["0:59:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11353:54521":{"id":"2:11353:54521","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[4,0],"end":[4,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder::EncoderWriter","name":"EncoderWriter","id":"0:142:1953","glob":false}},"a:2:7719:3156-0:49:1850":{"id":"a:2:7719:3156-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,34],"end":[13,36]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5096:61228":{"id":"5:5096:61228","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:481:1641":{"id":"a:2:2710:3221-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:128:1631":{"id":"0:128:1631","crate_id":0,"name":"write","span":{"filename":"src/write/mod.rs","begin":[1,0],"end":[9,18]},"visibility":"public","docs":"Implementations of `io::Write` to transparently handle base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:227","0:228","0:229"],"is_stripped":false}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[80,0],"end":[85,1]},"visibility":{"restricted":{"parent":"0:187:1952","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:206:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2501-0:447:2177":{"id":"b:2:2501-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:124:1630":{"id":"0:124:1630","crate_id":0,"name":"read","span":{"filename":"src/read/decoder.rs","begin":[184,4],"end":[291,5]},"visibility":"default","docs":"Decode input from the wrapped reader.\n\nUnder non-error circumstances, this returns `Ok` with the value being the number of bytes\nwritten in `buf`.\n\nWhere possible, this function buffers base64 to minimize the number of read() calls to the\ndelegate reader.\n\n# Errors\n\nAny errors emitted by the delegate reader are returned. Decoding errors due to invalid\nbase64 are also possible, and will have `io::ErrorKind::InvalidData`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2898:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:54481":{"id":"2:11332:54481","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:2678"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,45],"end":[117,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encoded_len","name":"encoded_len","id":"0:377:1637","glob":false}},"0:341:2370":{"id":"0:341:2370","crate_id":0,"name":"from_str","span":{"filename":"src/alphabet.rs","begin":[47,4],"end":[93,5]},"visibility":"public","docs":"Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n\nThe `=` byte is not allowed as it is used for padding.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:60593":{"id":"2:11435:60593","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:60594":{"id":"2:11444:60594","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4454:60594"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50295:3424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3305-0:481:1641":{"id":"b:2:3305-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[27,0],"end":[94,1]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:341:2370"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[60,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:187:1952","path":"::write::encoder_string_writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"EncoderStringWriter","id":"0:192:1954","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:201:2095","0:202:1931"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:417":{"id":"0:417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,24],"end":[122,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_slice","name":"decode_engine_slice","id":"0:409:1640","glob":false}},"0:214:2104":{"id":"0:214:2104","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[100,4],"end":[100,37]},"visibility":"default","docs":"Consume the base64 encoded data in `buf`","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11348:59169":{"id":"2:11348:59169","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11349:59183"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50270:3412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:461:2371":{"id":"b:2:2507-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:331:1633":{"id":"0:331:1633","crate_id":0,"name":"alphabet","span":{"filename":"src/alphabet.rs","begin":[1,0],"end":[243,1]},"visibility":"public","docs":"Provides [Alphabet] and constants for alphabets commonly used in the wild.","links":{"Alphabet":"0:447:2177"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:447:2177","0:461:2371","0:348:1789","0:349:2393","0:350:2397","0:351:2400","0:352:2404","0:353:2408"],"is_stripped":false}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[129,0],"end":[129,43]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","cause","source","type_id","description"],"trait":{"name":"Error","id":"2:2562:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,24],"end":[121,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode","name":"decode","id":"0:400:525","glob":false}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,45],"end":[122,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::DecodeError","name":"DecodeError","id":"0:481:1641","glob":false}},"0:409:1640":{"id":"0:409:1640","crate_id":0,"name":"decode_engine_slice","span":{"filename":"src/decode.rs","begin":[184,0],"end":[196,1]},"visibility":"public","docs":"Decode the input into the provided output slice.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nIf you don't know ahead of time what the decoded length should be, size your buffer with a\nconservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of\ninput, rounded up, or in other words `(input_len + 3) / 4 * 3`.\n\n# Panics\n\nIf the slice is not large enough, this will panic.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2646:214-0:49:1850":{"id":"a:2:2646:214-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11342:60575":{"id":"2:11342:60575","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2975:2780","str::slice_unchecked":"2:11341:60574","`str`":"1:12363:2669"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:402:1638":{"id":"0:402:1638","crate_id":0,"name":"decode_engine","span":{"filename":"src/decode.rs","begin":[100,0],"end":[113,1]},"visibility":"public","docs":"Decode from string reference as octets using the specified [Engine].\nReturns a `Result` containing a `Vec<u8>`.\n\n# Example\n\n```rust\n    let bytes = base64::decode_engine(\n        \"aGVsbG8gd29ybGR+Cg==\",\n        &base64::engine::DEFAULT_ENGINE,\n    ).unwrap();\n    println!(\"{:?}\", bytes);\n\n    // custom engine setup\n    let bytes_url = base64::decode_engine(\n        \"aGVsbG8gaW50ZXJuZXR-Cg\",\n        &base64::engine::fast_portable::FastPortable::from(\n            &base64::alphabet::URL_SAFE,\n            base64::engine::fast_portable::NO_PAD),\n\n    ).unwrap();\n    println!(\"{:?}\", bytes_url);\n```","links":{"Engine":"0:319:1743"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[11,0],"end":[11,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"decode::FastPortableEstimate","name":"FastPortableEstimate","id":"0:257:2180","glob":false}},"b:5:5360-0:481:1641":{"id":"b:5:5360-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5362:1399"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11413:60586":{"id":"2:11413:60586","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[5,0],"end":[5,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::EncoderStringWriter","name":"EncoderStringWriter","id":"0:192:1954","glob":false}},"0:312:2277":{"id":"0:312:2277","crate_id":0,"name":"with_decode_padding_mode","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[306,4],"end":[311,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_padding_mode` setting.\n\nPadding is not useful in terms of representing encoded data -- it makes no difference to\nthe decoder if padding is present or not, so if you have some un-padded input to decode, it\nis perfectly fine to use `DecodePaddingMode::Indifferent` to prevent errors from being\nemitted.\n\nHowever, since in practice\n[people who learned nothing from BER vs DER seem to expect base64 to have one canonical encoding](https://eprint.iacr.org/2022/361),\nthe default setting is the stricter `DecodePaddingMode::RequireCanonicalPadding`.\n\nOr, if \"canonical\" in your circumstance means _no_ padding rather than padding to the\nnext multiple of four, there's `DecodePaddingMode::RequireNoPadding`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["mode",{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2225-0:461:2371":{"id":"b:2:2225-0:461:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2507-0:142:1953":{"id":"b:2:2507-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2501-0:49:1850":{"id":"b:2:2501-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:64:650":{"id":"0:64:650","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:49070:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:2104":{"id":"0:219:2104","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[112,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2224:2734":{"id":"2:2224:2734","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[40,0],"end":[186,1]},"visibility":{"restricted":{"parent":"0:235:1790","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Engine","id":"0:319:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:283:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:1742","0:293:2129","0:294:590","0:298:2138","0:299:525","0:300:1757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,24],"end":[116,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode","name":"encode","id":"0:364:590","glob":false}},"2:11423:54301":{"id":"2:11423:54301","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12357:2664","self::pattern":"2:11022:2795"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:453:650":{"id":"0:453:650","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/decode.rs","begin":[13,23],"end":[13,32]},"visibility":{"restricted":{"parent":"0:388:525","path":"::decode"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:500:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:675:3379":{"id":"5:675:3379","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:49:1850":{"id":"b:2:2222-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2225-0:447:2177":{"id":"b:2:2225-0:447:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:447:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:54032"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/write/encoder_string_writer.rs","begin":[104,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:187:1952","path":"::write::encoder_string_writer"}},"docs":"As for io::Write, `StrConsumer` is implemented automatically for `&mut S`.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StrConsumer","id":"0:213:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"S"}}},"items":["0:217:2104"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2507-0:87:1867":{"id":"b:2:2507-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,32],"end":[121,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine","name":"decode_engine","id":"0:402:1638","glob":false}},"b:2:2512-0:87:1867":{"id":"b:2:2512-0:87:1867","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecoderReader","id":"0:87:1867","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2497-0:49:1850":{"id":"b:2:2497-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":["2:2500:3316"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:217:2104":{"id":"0:217:2104","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[105,4],"end":[107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:127":{"id":"2:2515:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39273:2911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11326:60572":{"id":"2:11326:60572","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11324:60571"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:467:2374":{"id":"0:467:2374","crate_id":0,"name":"UnprintableByte","span":{"filename":"src/alphabet.rs","begin":[112,4],"end":[112,23]},"visibility":"default","docs":"All bytes must be printable (in the range `[32, 126]`).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:469:1546"]}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[105,9],"end":[105,14]},"visibility":{"restricted":{"parent":"0:331:1633","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:461:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:490:1546":{"id":"0:490:1546","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"a:2:2710:3221-0:429:2169":{"id":"a:2:2710:3221-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2646:214-0:420:1792":{"id":"a:2:2646:214-0:420:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:420:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:497:650":{"id":"0:497:650","crate_id":0,"name":"fmt","span":{"filename":"src/decode.rs","begin":[13,16],"end":[13,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:2177":{"id":"0:447:2177","crate_id":0,"name":"Alphabet","span":{"filename":"src/alphabet.rs","begin":[23,0],"end":[25,1]},"visibility":"public","docs":"An alphabet defines the 64 ASCII characters (symbols) used for base64.\n\nCommon alphabets are provided as constants, and custom alphabets\ncan be made via `from_str` or the `TryFrom<str>` implementation.\n\n```\nlet custom = base64::alphabet::Alphabet::from_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap();\n\nlet engine = base64::engine::fast_portable::FastPortable::from(\n    &custom,\n    base64::engine::fast_portable::PAD);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:338","a:2:7719:3156-0:447:2177","a:2:2646:214-0:447:2177","a:2:7718:3157-0:447:2177","a:2:2660:222-0:447:2177","a:2:2710:3221-0:447:2177","b:2:2222-0:447:2177","b:2:2507-0:447:2177","b:2:2501-0:447:2177","b:2:2225-0:447:2177","b:2:2512-0:447:2177","b:2:3305-0:447:2177","b:2:2497-0:447:2177","b:5:671-0:447:2177","0:450","0:452","0:454","0:455","0:458","0:459","0:342"]}},"b:5:671-0:429:2169":{"id":"b:5:671-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:3377","5:674:3378","5:675:3379"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/engine/mod.rs","begin":[108,9],"end":[108,14]},"visibility":{"restricted":{"parent":"0:230:1632","path":"::engine"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:437:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:364:590":{"id":"0:364:590","crate_id":0,"name":"encode","span":{"filename":"src/encode.rs","begin":[20,0],"end":[22,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the [default engine](DEFAULT_ENGINE).\nReturns a `String`.\n\n# Example\n\n```rust\n let b64 = base64::encode(b\"hello world\");\n println!(\"{}\", b64);\n```","links":{"DEFAULT_ENGINE":"0:330:1856"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2465:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429:2169":{"id":"0:429:2169","crate_id":0,"name":"DecodePaddingMode","span":{"filename":"src/engine/mod.rs","begin":[109,0],"end":[116,1]},"visibility":"public","docs":"Controls how pad bytes are handled when decoding.\n\nEach [Engine] must support at least the behavior indicated by\n[DecodePaddingMode::RequireCanonical], and may support other modes.","links":{"Engine":"0:319:1743","DecodePaddingMode::RequireCanonical":"0:432:2173"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:430:2171","0:432:2173","0:434:2175"],"impls":["a:2:7719:3156-0:429:2169","a:2:2646:214-0:429:2169","a:2:7718:3157-0:429:2169","a:2:2660:222-0:429:2169","a:2:2710:3221-0:429:2169","b:2:2222-0:429:2169","b:2:2507-0:429:2169","b:2:2501-0:429:2169","b:2:2225-0:429:2169","b:2:2512-0:429:2169","b:2:3305-0:429:2169","b:2:2497-0:429:2169","b:5:671-0:429:2169","0:436","0:438","0:439","0:441","0:442","0:444","0:445"]}},"a:2:7719:3156-0:142:1953":{"id":"a:2:7719:3156-0:142:1953","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"W"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"EncoderWriter","id":"0:142:1953","args":{"angle_bracketed":{"args":[{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}},{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:398:2564":{"id":"0:398:2564","crate_id":0,"name":"description","span":{"filename":"src/decode.rs","begin":[49,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2511:1420":{"id":"2:2511:1420","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:60587":{"id":"2:11415:60587","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:3221-0:49:1850":{"id":"a:2:2710:3221-0:49:1850","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:49:1850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2660:222-0:429:2169":{"id":"a:2:2660:222-0:429:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodePaddingMode","id":"0:429:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11351:60576":{"id":"2:11351:60576","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50260:3413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:481:1641":{"id":"b:2:2222-0:481:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:481:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"12:2053:3835":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46966:4570":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4534:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8474:3760":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8873:3734":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2696:5306":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:4399:4211":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:21277:59065":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12211:6436":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47114:4038":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2953:4424":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:8948:3738":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:7279:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4690:967":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11186:6226":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7948:5034":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7412:3540":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:48645:4573":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:50146:3421":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11423:5691":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:8594:2814":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10310:6149":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3400:1886":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:575:7617":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39322:3301":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:12370:2674":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:7266:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:53794:4360":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:966:3829":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12199:5697":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:564:5556":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2548:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11519:56204":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5995:5096":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10476:47732":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11528:6310":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9250:6076":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4185:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:53732:4340":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10374:5462":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"12:1845:2939":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4239:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:5422:2769":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:7226:8483":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8117:4130":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12148:6418":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2424:5298":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8208:3822":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:52542:7203":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6323:5025":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11343:6268":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4307:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9371:6069":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:5759:3804":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13382:6794":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:52488:7201":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10774:5383":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4745:8066":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6352:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:1534:4933":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21095:4536":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7037:3153":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11684:6336":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4152:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:7723:5969":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12371:2675":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:1021:5505":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8699:4152":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:9372:3970":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2674:5305":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7245:5121":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:4932:3557":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:49864:3983":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:7008:4015":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4515:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50270:3412":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6424:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12850:6642":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1601:3538":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:842:4712":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:6035:4181":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"9:19:4847":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:6009:4180":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5684:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"9:505:4748":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12008:6399":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4890:3937":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4611:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4768:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3354:3713":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"12:725:3825":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"19:0:992":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2305:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:1033:61704":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:7772:5685":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1707:4164":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8305:4498":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7907:5131":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:7734:5875":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4536:5836":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:644:5942":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9844:5511":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9712:6090":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:8510:6058":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12381:2685":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8576:3765":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:51922:4345":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4187:4459":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:11690:7135":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5582:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2971:2779":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8133:2885":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1971:4724":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46535:2825":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:8796:5389":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1525:7649":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:669:3828":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7297:5126":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2607:2875":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:1636:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7266:5123":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:1695:7762":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:4043:4456":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12934:6662":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:52982:4339":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8599:3766":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:581:7620":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9382:6082":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47073:2868":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"12:1029:3837":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:48079:3325":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:54192:7237":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"13:108:61715":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4288:5829":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5656:3799":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6101:5019":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6926:4569":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50427:4261":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13148:6715":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:50492:4263":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6479:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1435:4719":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1216:3836":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4182:4458":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"12:274:7549":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6124:5069":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7208:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11315:6258":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2789:3892":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6030:5098":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6262:5032":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8092:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:21237:4392":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"14:7:5850":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4286:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10076:3998":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13039:6684":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6955:4698":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46753:3425":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"15:0:2641":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:52746:4359":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10708:5486":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7237:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"0:74:1630":{"crate_id":0,"path":["base64","read"],"kind":"module"},"12:2178:7552":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9475:5361":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10608:5388":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:999:3834":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6294:5049":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2764:3864":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:6879:3842":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8421:2872":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5606:5084":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9681:6014":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11217:2863":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:50118:3417":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:5676:3800":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47043:3982":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11559:6317":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6723:2937":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1201:3837":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:54025:7228":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6571:5110":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12695:6610":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4257:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:2253:2861":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:47530:5670":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1415:3829":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8752:2870":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2817:3900":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"9:0:2636":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:47503:3851":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9193:61719":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:19974:59305":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:2205:2785":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3002:3784":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:50444:4262":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:6156:5646":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8705:4173":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:49776:3993":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:20436:4307":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:7719:3156":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:46900:4637":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8890:3735":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6132:5675":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:4432:5834":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:12367:2671":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:1771:5401":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:3949:3768":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12797:6630":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2730:61500":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6768:5114":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:49092:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:4437:4216":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:614:61732":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:53402:4368":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:709:3733":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:1385:3826":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4300:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:6810:3852":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11853:6357":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:56920:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11022:2795":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:2406:4123":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46376:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:1931:5397":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:2583:5674":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4653:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:49555:3985":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4231:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2726:8499":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:4013:4151":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:560:7609":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"12:0:2639":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:47208:4052":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2646:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10894:5429":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6311:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:52390:4327":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12355:2662":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:20277:4016":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:5344:7258":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2724:3377":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2570:5355":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13393:6798":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:20949:3877":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"0:429:2169":{"crate_id":0,"path":["base64","engine","DecodePaddingMode"],"kind":"enum"},"18:755:5548":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4449:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10997:5852":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11635:5694":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:3152:4031":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:49312:7184":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:8339:47471":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6713:5043":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13327:6775":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12225:6437":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12972:6669":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12748:6616":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:51767:4344":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:595:3932":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4274:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4179:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:11042:3405":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:9465:4096":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:4808:5845":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6554:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46501:3714":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:29559:4562":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"9:586:4796":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:11774:6347":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:2468:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12768:6622":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11960:7323":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9700:5449":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13374:6793":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8310:4499":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:2935:3538":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10075:6133":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:47227:4054":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:9435:4007":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4804:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6188:5101":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:50100:3418":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7925:11459":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:10735:3432":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12361:2667":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"0:348:1789":{"crate_id":0,"path":["base64","alphabet","STANDARD"],"kind":"constant"},"2:48493:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:531:5554":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9722:6091":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:49007:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:50260:3413":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1928:2354":{"crate_id":1,"path":["std","error"],"kind":"module"},"17:8822:61725":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:3393:6869":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7920:5132":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6597:5111":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"0:420:1792":{"crate_id":0,"path":["base64","engine","fast_portable","FastPortableConfig"],"kind":"struct"},"2:51677:7195":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:2311:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11527:4579":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:6732:2942":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:1680:2939":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:592:7625":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:46321:4435":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:49725:4512":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:3094:2939":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:5713:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1701:7765":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12816:6631":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"0:462:1921":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","InvalidLength"],"kind":"variant"},"17:13192:6725":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"12:815:3830":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:2465:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"12:697:3829":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5720:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:7525:56871":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:1962:5448":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6881:5116":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:221:7039":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:1737:4602":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:48231:2942":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3845:5825":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:5547:4666":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:766:5549":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11708:6337":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:951:2939":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:6984:4047":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8850:3733":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4581:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5402:5074":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5510:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6495:4938":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:49144:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1518:7647":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8356:1745":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8959:3739":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2823:3903":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:7034:3226":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:941:2769":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:8272:5492":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:4626:5839":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:328:2129":{"crate_id":0,"path":["base64","engine","DecodeEstimate"],"kind":"trait"},"1:4421:4213":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6673:3851":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:8666:5961":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12884:6645":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10490:6157":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:5832:4045":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2816:5310":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:8475:5365":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11873:6360":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6164:5021":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2665:2830":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1678:7755":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4139:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:5887:3968":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:0:2638":{"crate_id":11,"path":["adler"],"kind":"module"},"2:49128:2809":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:9520:5116":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12638:6576":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11651:7320":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:8147:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7215:5119":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"0:434:2175":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireNone"],"kind":"variant"},"5:3337:3538":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:1872:3784":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9293:5504":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:58273:7244":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:20195:4303":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:8580:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7887:5038":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9501:5408":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7227:5120":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6545:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13413:6801":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:3548:5646":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:96:53872":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3892:2853":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10350:5383":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:21260:7145":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:9805:5507":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10394:5464":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:48774:2810":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6322:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:4740:5843":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4605:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5519:5081":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3188:2891":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13231:6737":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:7861:4095":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4762:3951":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12307:6446":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:487:7564":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2768:2775":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6524:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9791:6093":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:632:3538":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7475:5026":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4126:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:36:2938":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11843:4150":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:8854:3927":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"15:193:4942":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:29483:2932":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:2380:4113":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11174:6225":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"0:49:1850":{"crate_id":0,"path":["base64","display","Base64Display"],"kind":"struct"},"2:2710:3221":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:52936:4335":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4912:5848":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11978:8595":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:21823:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:46780:4249":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21889:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12073:6406":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1376:3825":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:8592:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4659:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10845:5487":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:7803:5129":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:716:11461":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5498:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"0:351:2400":{"crate_id":0,"path":["base64","alphabet","BCRYPT"],"kind":"constant"},"17:9303:5408":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:49851:3982":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:8881:61723":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10321:5519":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2758:3861":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10384:4165":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:7964:5866":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2888:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:48172:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6293:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1600:7696":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:3303:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7287:5125":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:50556:4265":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:53046:4324":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:9563:3417":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6506:5109":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5424:5075":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9671:5373":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:20434:4320":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11070:6208":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:44:4909":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:56933:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11787:6348":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:20234:3877":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47496:7129":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11106:6215":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11235:6236":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:48607:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6212:3967":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6759:5040":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:12360:2666":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:7366:5044":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2291:5326":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50723:3398":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8596:5959":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:51789:4332":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:51974:4337":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1608:7701":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:6867:2785":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:3680:5823":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46857:3425":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:51821:4365":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6981:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10752:5385":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1722:7772":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3600:2942":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4335:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:993:3833":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:11955:2936":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9947:47660":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2500:5314":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:1643:4446":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4010:4150":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5835:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8991:61726":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3081:2898":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:6988:4046":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:539:7597":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:5611:58862":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:8408:2869":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8398:2868":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2548:5304":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9778:5452":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6682:5041":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:39313:3711":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:4178:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11149:6220":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10670:5490":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4376:5832":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"14:40:5852":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:699:5544":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:49896:4001":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12514:6482":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:3557:5820":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3190:2892":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:50711:3394":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:9021:6068":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49025:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"0:283:1791":{"crate_id":0,"path":["base64","engine","fast_portable","FastPortable"],"kind":"struct"},"12:810:3827":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:2976:3781":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47512:7180":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3952:4378":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:48223:3539":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6415:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6793:4660":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:562:5969":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12376:2680":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9477:54159":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12349:6453":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:652:5942":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:36:7557":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:519:7580":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:3125:5973":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:5642:5085":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10682:5491":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7404:5046":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:5199:2945":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:7220:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13100:6700":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1394:3827":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:9595:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:5962:2769":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4450:4217":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3226:2893":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:2835:3909":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:4735:4665":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12251:6439":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2762:5309":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4461:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:11036:3406":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:861:3834":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"0:235:1790":{"crate_id":0,"path":["base64","engine","fast_portable"],"kind":"module"},"1:11904:4158":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:51952:4333":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4329:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10583:5387":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:4904:8365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:5772:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1636:7726":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4212:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:187:45781":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11515:6308":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:9358:3428":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2654:3298":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5534:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10420:5521":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:47218:4053":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6308:5104":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:6448:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:8034:5002":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2697:3300":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10590:1782":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:48265:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:4565:5837":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7374:5128":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:50918:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:49341:3733":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:54077:7232":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9458:5371":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9422:6084":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1511:7644":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7637:5018":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:7846:56895":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4778:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8457:3759":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10257:6145":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12485:6462":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:8871:6065":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49940:2788":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6337:5105":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11137:6219":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:11742:59448":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12955:6666":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:21376:4552":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9930:6100":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4598:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2648:5315":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21169:4396":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:10109:3999":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4206:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2421:1869":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5009:3885":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7350:5343":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:1552:2853":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:524:5276":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50398:4255":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11659:3814":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:50164:3422":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8561:5446":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8625:4152":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:9591:4005":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:1903:47555":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:21298:59073":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5536:5082":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11356:6269":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:8590:2813":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5692:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:54115:7234":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10949:6176":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"18:515:5553":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6037:5300":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:12378:2682":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:56563:4525":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5379:5073":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:247:5965":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10182:6136":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11713:7262":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:507:5942":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"12:320:4924":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:2039:4723":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4559:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9362:5410":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:727:5546":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:1760:4601":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11054:6204":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9317:5500":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:52441:7200":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:21364:4553":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8749:3883":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5194:6057":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12291:6444":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:4936:3558":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8491:3761":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:11617:33503":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:920:4757":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:9644:5395":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:21625:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11440:5693":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4659:11463":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:53856:4325":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:4680:5841":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:6738:4713":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9385:3971":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9590:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:50200:3419":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:8701:5962":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2573:2882":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11331:3718":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:2784:5311":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12361:6460":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:6912:4696":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:50715:3396":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13492:6822":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8563:4208":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"12:1866:3783":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6276:5048":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7791:5687":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:50727:3399":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50787:3962":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6668:5028":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:8577:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:20951:4308":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7189:5012":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6998:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"0:352:2404":{"crate_id":0,"path":["base64","alphabet","IMAP_MUTF7"],"kind":"constant"},"17:11661:6332":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2658:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6654:5027":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7615:5035":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11893:6361":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5592:5274":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2772:3867":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:11604:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:448:4074":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:545:7600":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:50735:3401":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5574:5083":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:51003:3917":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21148:7137":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:53902:4343":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7276:5124":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11434:5692":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1580:7682":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:48164:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46494:4292":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:5894:5658":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:884:3538":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10528:5483":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6375:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:12372:2676":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"9:649:4800":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:8520:8584":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:12356:2663":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11951:6387":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:21658:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:48379:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"9:800:7558":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:8295:47470":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:1120:4921":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"0:470:2375":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","ReservedByte"],"kind":"variant"},"1:9507:7301":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9539:5398":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5165:3955":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:29545:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:50953:4518":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11900:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11125:6216":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3792:3539":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:678:7248":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48767:2811":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1359:2942":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6302:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"0:319:1743":{"crate_id":0,"path":["base64","engine","Engine"],"kind":"trait"},"16:6843:5339":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11721:6340":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2471:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"0:349:2393":{"crate_id":0,"path":["base64","alphabet","URL_SAFE"],"kind":"constant"},"2:29523:4448":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:957:3827":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:135:39905":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:5808:16805":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12380:2684":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:5113:5849":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9820:5508":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:491:5941":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8723:3879":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5443:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"18:624:61731":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46580:4236":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:967:5970":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12730:6611":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46919:4253":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:6288:2945":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:625:4011":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3721:2769":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:671:5541":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4312:3939":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2921:5005":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:11638:60031":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:5502:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13168:6721":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4073:4457":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5856:5093":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5841:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:12339:56206":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10332:5527":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8434:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"17:10506:6159":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"12:1852:3781":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:7941:3839":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:683:11460":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6500:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:53654:4356":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:51721:4364":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:962:3828":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47013:5664":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:3220:4371":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:8418:5432":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5758:5089":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6953:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7825:5130":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:48113:3153":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39309:4730":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:9295:3805":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:48104:2942":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8636:4154":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10221:6142":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10931:2893":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:48303:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:4059:2853":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11327:5866":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:6972:8501":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:7581:5047":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13366:6790":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1887:41215":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5226:6870":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:9897:5689":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:8911:61718":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:38100:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2250:1630":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10643:3812":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10296:6148":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:47259:4056":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:50295:3424":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4427:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46336:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5504:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6178:5100":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3158:4243":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12609:6565":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8631:4153":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:707:3406":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12860:6643":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2752:3858":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11997:3311":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"17:13047:6685":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6012:5097":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:8814:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:822:3831":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7243:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:19961:3305":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:574:5942":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5681:5086":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:762:2939":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4644:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:22387:4427":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:48788:2813":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:9315:2872":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2269:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11547:6315":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:719:5545":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:970:3830":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2562:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13141:6714":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:10585:1345":{"crate_id":2,"path":["core","str"],"kind":"module"},"2:46810:4638":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2657:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21922:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:915:3825":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:215:7037":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13527:6835":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6048:5011":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:658:3682":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7882:4081":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:907:2942":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5007:3884":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11728:5874":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:2831:3907":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6807:5337":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:47551:7130":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:21757:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2784:3873":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10973:6190":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:1532:7652":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6409:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5587:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9512:7302":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:47095:4036":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7101:5873":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12980:6671":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1634:3784":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1668:7749":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:6705:3850":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:8526:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:2660:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2526:5303":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2968:3783":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5210:6058":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6763:60559":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2912:2075":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:1049:4721":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:20855:59303":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12374:2678":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8942:3538":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:49886:4003":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2265:416":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"1:11546:3959":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:2942:3782":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10466:6155":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:9600:3958":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:20221:4376":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:5727:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10385:5463":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1348:3539":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:487:5968":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:9109:3877":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2922:3224":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4398:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5690:3801":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"9:956:4756":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:53544:4336":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13594:6847":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5873:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13214:6730":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:4888:5646":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12011:4950":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:48028:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:6389:4520":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8727:8350":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:4680:60042":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:47165:4049":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:4879:5847":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:8415:2870":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"12:2069:3836":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:49954:3410":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9446:6086":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5625:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6794:5336":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4683:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1623:3782":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:9440:4186":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:52122:4354":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6392:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:507:7575":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4575:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2747:3856":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46396:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:54016:7227":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4437:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1584:5646":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:49966:2787":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1541:7657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11197:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:636:5953":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:6777:2942":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11259:6240":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:49794:3996":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"12:1840:2769":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4308:3938":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:2019:61604":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47142:7177":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12630:6575":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:5083:3881":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4096:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:646:3539":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1120:3838":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:50591:4268":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:46832:3426":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4258:3936":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13572:6841":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"9:592:4798":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:53012:4342":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2776:3869":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7289:8497":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:6755:4714":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:1138:3838":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12046:6404":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:20027:59372":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5570:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:542:4092":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:2358:5301":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5480:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:0:2634":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:52174:4361":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4527:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:3017:5978":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46879:3424":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:242:5964":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"0:353:2408":{"crate_id":0,"path":["base64","alphabet","BIN_HEX"],"kind":"constant"},"16:2596:5356":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:6750:2896":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"9:111:4815":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:50799:4581":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4475:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2919:3223":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5450:5077":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:21314:59080":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6677:4191":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10827:3803":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8316:2899":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:56959:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11199:6227":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:4840:5846":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:53196:4348":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:20008:59373":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2801:3789":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12674:6605":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7968:4730":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6149:5070":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:9638:3960":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:0:2643":{"crate_id":17,"path":["object"],"kind":"module"},"2:50064:3415":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4592:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:0:2642":{"crate_id":16,"path":["gimli"],"kind":"module"},"12:659:2942":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:590:5944":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11271:6241":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4250:3935":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13184:6724":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4304:4465":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13031:6683":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3466:57011":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12033:6402":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"0:330:1856":{"crate_id":0,"path":["base64","engine","DEFAULT_ENGINE"],"kind":"constant"},"17:11748:6344":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:620:5857":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9328:5501":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:481:5551":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11248:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47124:4039":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:2478:5302":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11883:4151":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5819:3808":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:9459:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5642:3798":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6248:5022":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13478:6820":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:834:3832":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8631:5960":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:6597:4025":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10108:5427":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:11665:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"13:220:7548":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10796:5484":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8540:4207":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:4540:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:113:53873":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"9:827:4755":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11583:3958":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:49040:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:52344:4323":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8125:2883":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4726:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13340:6781":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4489:4172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4810:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3472:4681":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5313:7258":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12022:6401":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6721:5113":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:4614:2853":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:50747:4579":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:3254:6868":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12323:8876":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:50624:2783":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:2916:5424":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:7025:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:8241:5489":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10934:2889":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:9309:3806":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10870:5690":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12739:6615":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2916:3222":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8079:3947":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:10846:3428":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4797:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:6449:5658":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:165:45775":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9061:5410":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3141:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:29517:2933":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47280:2869":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13518:6831":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11485:6299":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:50218:3420":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48146:3154":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:1628:5644":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:8849:3787":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47023:7176":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13158:6718":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6820:6922":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:738:3826":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7461:5031":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:52298:4338":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6329:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1574:7680":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:7823:2782":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12781:6627":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"14:160:5850":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6572:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12087:6409":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:0:1337":{"crate_id":1,"path":["std"],"kind":"module"},"2:48781:2812":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:49359:7190":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:48569:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:50250:2873":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12363:2669":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:49982:2870":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:54100:7233":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5782:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3457:1989":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47244:4055":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46950:4569":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9350:5503":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10088:6134":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2474:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11436:6274":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4777:5844":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4212:3875":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46759:7168":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1823:7253":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9071:61720":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"0:350:2397":{"crate_id":0,"path":["base64","alphabet","CRYPT"],"kind":"constant"},"5:771:4711":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:51851:4353":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2622:5316":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13404:6799":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:20246:4423":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:54051:7230":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11217:6235":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:4320:3941":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:6437:7259":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:1919:3924":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10455:5522":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:10488:7255":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:2311:5004":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:10576:4650":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7000:2766":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:420:4990":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9691:5450":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12909:6654":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:7856:4079":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1102:3836":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"9:896:4760":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9627:5406":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5704:3802":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:54153:7236":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4635:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:49814:3995":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39273:2911":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:153:5009":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:1067:4722":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:54036:7229":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4426:650":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11368:6272":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5523:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:32:45042":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10497:47733":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12369:2673":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:9353:3969":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:8582:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8584:2810":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:1751:8503":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:21252:7144":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:49304:3843":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5880:3967":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49825:3984":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11974:6396":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2432:3877":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1338:3538":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6636:7260":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:386:5966":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"9:188:4823":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:10751:3804":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:853:3833":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:571:4097":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:11207:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9764:6092":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2477:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2780:3871":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2433:2912":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:50961:4519":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5822:3810":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:52222:4346":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6219:5102":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:9347:2942":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7224:4147":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:52011:4322":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1605:2942":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:1629:3783":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1643:7730":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:9470:3414":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12550:6513":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:50766:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:276:2784":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46235:3541":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12358:2665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:2864:3824":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:495:7569":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46820:4639":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4135:5826":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12896:6648":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2647:2884":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8349:2896":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8691:4163":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:6600:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8730:7132":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:777:4917":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:11939:6385":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8203:3821":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"9:622:4799":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:46796:4251":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21856:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:50313:3426":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:4706:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6778:4187":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2332:5319":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:8951:61724":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12265:6442":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1500:7639":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9909:6098":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13114:6707":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:9701:7256":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:46886:4635":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:897:3539":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6115:5017":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4653:4170":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:7835:4070":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10507:56806":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:20427:3877":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:8588:2812":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:8774:5382":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2142:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50279:3427":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1686:7756":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:20403:3877":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:20006:59370":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13354:6787":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:11093:4257":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10121:5428":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8800:3723":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:660:5540":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2456:5325":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7535:5024":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:1654:7738":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47540:7181":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8213:1924":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:80:53871":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:131:39904":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:9577:4006":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5472:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:5367:4042":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12103:6411":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10712:3802":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46863:4634":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:20686:4309":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:6747:2769":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:46440:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1738:7777":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:56985:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6228:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10557:3719":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5438:5076":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2653:2106":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:20324:4307":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4267:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10186:5671":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:6230:5103":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46938:4568":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:12364:2670":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1825:7254":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10854:5447":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9339:3966":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7055:2939":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:12337:5487":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9619:3959":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9108:6069":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:21691:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13024:6682":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7413:5062":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5:1506":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:50974:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10245:6144":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:2742:3791":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10139:5410":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:6550:4420":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5503:5080":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10772:3434":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:8537:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:52320:4341":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7868:5036":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3460:2885":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13221:6732":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4242:3934":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:52858:4347":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:52366:4326":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:4259:2825":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4429:4214":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:6798:59288":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:8494:6057":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3590:3762":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"15:175:4941":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:4313:2826":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:12328:11462":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7214:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:609:5948":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3228:2894":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:6872:7260":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4417:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:1230:3838":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:2198:7555":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3964:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"0:317:1793":{"crate_id":0,"path":["base64","engine","fast_portable","PAD"],"kind":"constant"},"1:1612:2939":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:47310:4048":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10642:5493":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:6008:5646":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1964:3681":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:50991:3919":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4280:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5739:5088":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:8981:6067":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2975:2780":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12198:6435":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8526:5466":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:29723:4564":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:3987:3923":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"9:977:4761":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4565:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6354:5106":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6632:5112":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10875:5430":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9601:5400":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:52776:4362":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5741:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11740:8592":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:0:2644":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7307:5127":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12164:6422":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46840:4633":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:51891:7197":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:29617:4563":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:5733:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2901:2874":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9031:61717":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:4597:5838":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:48215:3538":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7143:5684":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4501:4160":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1595:7694":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:49351:7189":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5861:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6277:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6139:5099":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1088:3835":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:3350:3539":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:8137:47469":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4629:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8052:3950":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:50376:4254":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:38117:3305":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3153:4137":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8365:2863":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2510:2881":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"0:447:2177":{"crate_id":0,"path":["base64","alphabet","Alphabet"],"kind":"struct"},"17:11536:6312":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10973:4081":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:25197:4375":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:3707:5824":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4317:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9658:6088":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3267:2890":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9508:4004":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6540:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:54005:7226":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4834:3929":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2394:4117":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:1933:4092":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5672:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13071:6692":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:2718:5307":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4737:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:10983:2790":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:5444:4043":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11828:6355":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7095:5295":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"12:2184:7553":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8069:4109":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:7416:4024":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:3590:5821":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9751:5451":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:6417:3332":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:521:5550":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:2859:5283":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:7255:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:4404:5833":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:50288:3423":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4206:3876":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12134:6416":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:5827:1506":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"6:1562:7672":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:5619:2853":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8680:4212":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:47185:4050":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:20283:4018":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5974:5095":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:1518:4932":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2806:3790":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11617:6324":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9223:47517":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6837:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10546:47472":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:2725:61503":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46462:4565":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:2465:4726":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3183:4372":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12948:6664":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:1884:7256":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:49070:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:7166:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:7720:3155":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:54062:7231":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:21350:4599":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6269:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10625:5390":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11820:3770":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10721:6171":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:1825:2935":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:8142:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3475:2864":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2827:3905":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13203:6729":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:215:4695":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5488:5079":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"15:214:4946":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11495:3805":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6450:4939":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:47133:4040":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4551:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:119:4926":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47194:4051":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:2885:5317":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9895:4107":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4113:4158":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:608:7635":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:6989:2765":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10822:47473":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6814:2942":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10207:6138":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13059:6691":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5749:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13506:6829":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13126:6710":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:2740:5308":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8941:6066":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3146:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:4900:8361":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:8586:2811":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:3940:4377":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"12:393:61710":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:49031:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13580:6844":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:52152:4358":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:4092:5648":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:521:5672":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7210:4146":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:48417:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:6820:2942":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:1672:1048":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3343:2897":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:20843:4017":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:987:3832":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10062:6132":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:326:1742":{"crate_id":0,"path":["base64","engine","Config"],"kind":"trait"},"17:11500:6303":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2734:61501":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:4253:5828":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9553:5410":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6441:5107":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11288:6249":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4506:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:52268:4334":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13536:6837":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10520:6162":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:9323:3807":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:2981:4657":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:12375:2679":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4354:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4361:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4367:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"8:0:2635":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:1550:7663":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11161:6223":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:7021:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:48341:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12060:6405":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:6071:4190":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10233:6143":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:48455:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4496:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:21790:4100":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:1085:4920":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:939:5646":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:331:1633":{"crate_id":0,"path":["base64","alphabet"],"kind":"module"},"2:46352:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2216:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9897:6097":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11813:6352":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11175:7316":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:928:3826":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7256:5122":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:6307:2946":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12836:6639":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:14:1631":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:690:5543":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:50719:3397":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:8368:5384":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9165:61721":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:53940:4363":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:1859:3782":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9873:6095":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9631:5396":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7489:5001":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11997:6397":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7948:12455":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:600:7630":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5174:4021":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9118:61722":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7286:58841":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5605:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11698:7261":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5927:5094":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:50910:7194":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5175:45848":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4517:2771":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4816:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:8212:5485":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9331:3538":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:586:7622":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:47174:4044":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3310:2878":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:7409:2772":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:51992:7198":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3373:2853":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:6081:2942":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4346:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:11047:3404":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:47521:2897":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11762:5696":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:46274:4425":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6311:5675":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4965:3880":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2420:2178":{"crate_id":2,"path":["core","convert"],"kind":"module"},"1:4298:3933":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8782:3146":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:353:4923":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5541:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11034:6203":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:985:3835":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11141:3888":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9857:5435":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:11027:2782":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:3001:5312":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:47295:4058":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10360:5520":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10729:56805":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9433:6085":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4264:3937":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11564:8591":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7335:5042":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"0:467:2374":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","UnprintableByte"],"kind":"variant"},"18:582:3305":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21201:7139":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10403:5385":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2247:4108":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:4653:5840":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:9888:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2402:5320":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:4333:2828":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:513:7577":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:8800:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:48531:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:2244:4727":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11300:6252":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:4356:2827":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9488:5364":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:58294:7245":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"0:40:1629":{"crate_id":0,"path":["base64","display"],"kind":"module"},"2:48088:3538":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46768:4248":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4902:8363":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50743:3403":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5223:3145":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7144:5118":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5876:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11606:6323":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:4988:5656":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:12237:6438":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3418:2862":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:4348:5831":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:54130:7235":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:554:7606":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3366:3712":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:12874:6644":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7321:5029":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"9:33:4848":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11576:6320":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11227:56202":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5715:5087":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4224:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11187:4109":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:47104:4037":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11639:6331":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"0:461:2371":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError"],"kind":"enum"},"6:6538:8451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9155:6070":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"0:230:1632":{"crate_id":0,"path":["base64","engine"],"kind":"module"},"12:2190:61714":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4200:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11330:6264":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9401:3972":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:7085:3225":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7447:5030":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:49804:3994":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:8284:650":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:12362:2668":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10445:5487":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4665:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:1617:3781":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:9290:3539":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:8393:5370":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4249:4464":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1505:7641":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2947:4656":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:5060:3886":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3265:2889":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:50046:3416":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:49785:3992":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:454:4075":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47156:4041":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5154:5286":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:2380:5297":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12379:2683":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:49877:4000":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:8441:5488":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:11874:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:6545:5039":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1935:3680":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9500:7300":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5472:5078":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13436:6814":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9526:5399":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4191:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4740:3878":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:48155:3050":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"12:60:61709":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9283:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7992:5065":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5959:5280":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9183:6071":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:46528:7167":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6646:5334":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:7062:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:410:5696":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:46933:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:2396:4118":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:51873:4357":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50304:3425":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:50581:4267":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5793:5091":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12278:6443":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2737:2774":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4247:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10283:6147":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:7910:11457":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:6503:4034":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:681:5542":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:20029:59368":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11157:8589":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6087:5045":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2723:3302":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"10:0:2637":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:859:3538":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6317:2947":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:50014:3414":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:11833:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:646:40240":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"0:432:2173":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","RequireCanonical"],"kind":"variant"},"1:11340:54302":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:49996:2872":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:10560:4648":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:1608:2769":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:6474:5663":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:12377:2681":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12756:6617":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:7072:2940":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6942:4697":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7113:5296":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13082:6696":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:20408:16593":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:8055:5381":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:47269:4057":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4113:2824":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7022:5292":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:2796:3788":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11087:6210":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6474:5108":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4581:4169":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13279:6774":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10434:6152":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"12:1555:4934":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12926:6659":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11162:3946":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:8110:47465":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5365:5020":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4698:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4621:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7958:5066":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:52519:7202":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21185:8505":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8611:3767":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:12357:2664":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5699:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46418:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:538:5555":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:675:7246":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:7931:3793":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8062:3946":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:12373:2677":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10795:3431":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:3898:3538":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:52700:4355":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9454:7296":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21724:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:49551:4652":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12322:6450":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"14:0:2640":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3156:4138":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7934:5033":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13007:6675":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1404:3828":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:52622:4367":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:5005:3882":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9274:6078":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8673:3765":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8377:2865":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:20275:3877":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2378:4112":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12004:4950":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:21225:4391":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9339:5502":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:1044:4918":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21343:8508":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:567:7612":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8428:2873":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2984:5313":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2833:5282":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6697:5332":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8932:3736":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2811:3897":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6002:4178":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4318:5830":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8162:5433":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:46521:5065":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:6855:5115":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4716:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11734:6105":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4673:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10921:6173":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11800:6350":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"0:128:1631":{"crate_id":0,"path":["base64","write"],"kind":"module"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3068:2781":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11746:8593":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21042:4535":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"12:387:61713":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5771:5090":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:56998:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12617:6568":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2273:5284":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4379:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12964:6667":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:21988:4539":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:8685:4215":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:51743:4352":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4294:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12368:2672":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:29313:4594":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11594:6321":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:1836:2942":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11761:6345":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"9:676:4845":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10270:6146":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3150:4136":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13557:6840":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:5531:4665":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:2080:3837":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1111:3837":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:3417:5646":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3179:6867":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:8527:1989":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:7139:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"9:382:4753":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"0:318:2284":{"crate_id":0,"path":["base64","engine","fast_portable","NO_PAD"],"kind":"constant"},"17:9401:6083":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"14:202:2768":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5660:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7545:5050":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3168:4291":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:736:5547":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2840:3912":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5568:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11358:3807":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4706:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2239:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1714:7768":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3131:4566":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:863:4758":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9266:3538":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:1832:3538":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9283:6079":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:56972:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2481:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:50604:3407":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:49906:4002":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:48240:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:50413:4258":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"12:98:4922":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:501:7572":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10159:6135":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7521:5023":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:21955:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9577:5402":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:1065:4919":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"12:751:2769":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:0:788":{"crate_id":6,"path":["libc"],"kind":"module"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:9263:6077":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6509:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47064:4033":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:56946:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:599:61733":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:50731:3400":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:3249:5436":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:9119:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12118:6415":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12382:2686":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:4029:5648":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5817:5092":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2274:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"0:0:1645":{"crate_id":0,"path":["base64"],"kind":"module"},"2:8596:2815":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:50900:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13091:6699":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4968:3878":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:53978:4328":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:9417:3973":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:47086:4035":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13134:6713":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:3529:2939":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:62:39838":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:4974:5653":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:4510:5835":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4102:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2252:5285":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:51697:7196":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3448:5982":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:48096:3539":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:6492:3967":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:20158:4422":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:7834:3877":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:4712:5842":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"0:430:2171":{"crate_id":0,"path":["base64","engine","DecodePaddingMode","Indifferent"],"kind":"variant"},"6:6975:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13459:6815":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8057:4107":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9277:3803":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9738:5453":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:49329:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:50570:4266":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5595:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11507:3806":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:3623:5822":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"12:1003:3836":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6430:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:49972:3411":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1943:4659":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10928:2891":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11014:6193":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9534:54192":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:4208:5827":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8109:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:6781:3751":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9555:8586":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:19989:59305":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"12:300:4925":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11247:6239":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"13:0:2633":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9885:6096":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9831:5510":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3482:2867":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:49320:3928":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9397:3997":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2656:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:52076:4366":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:50739:3402":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4115:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5554:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13176:6722":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:9549:3418":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1185:3835":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:976:3831":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:50519:4264":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:11843:4520":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:52029:7199":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1886:7257":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"7:79:45049":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:1861:7255":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12176:6424":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9585:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4761:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:7249:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3751:5646":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:31:5850":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:53996:7225":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11841:6356":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11152:8587":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:46893:4636":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10811:3433":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4:977":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:20691:16611":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"0:464:2378":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","DuplicatedByte"],"kind":"variant"},"16:7071:5117":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:6405:5682":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7850:5037":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11909:6366":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2219:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:49058:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:7718:3157":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}