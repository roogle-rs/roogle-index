{"root":"0:0:1639","crate_version":"0.20.0-alpha.1","includes_private":false,"index":{"1:5739:3667":{"id":"1:5739:3667","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:6027","1:5741:7141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13078:3339":{"id":"2:13078:3339","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:3253","2:13081:59943","2:13082:59944"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5833:3500":{"id":"5:5833:3500","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3103:2864":{"id":"2:3103:2864","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7799:3834":{"id":"1:7799:3834","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:58063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10241:1983":{"id":"2:10241:1983","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1532","2:10243:54532","2:10245:3047"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3203:681":{"id":"2:3203:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:592:660":{"id":"0:592:660","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[108,9],"end":[108,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:56406":{"id":"2:13466:56406","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752","str::split_whitespace":"1:16011:2625","str::rsplit":"1:16011:2625","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:2826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4003:1428":{"id":"2:4003:1428","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46028:3637","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13540:60464":{"id":"2:13540:60464","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:3358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23771:4178":{"id":"2:23771:4178","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:4290"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13478:60448":{"id":"2:13478:60448","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:16011:2625","prim@char":"1:16005:2620","self::pattern":"2:13053:2752","str::split":"1:16011:2625"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:579:2335":{"id":"b:2:2868-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:590:1541":{"id":"0:590:1541","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[117,17],"end":[117,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13525:60461":{"id":"2:13525:60461","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:56415":{"id":"2:13449:56415","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13542:3713":{"id":"2:13542:3713","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:3359","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:9820":{"id":"2:13444:9820","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:2625"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:439:2372":{"id":"0:439:2372","crate_id":0,"name":"BIN_HEX","span":{"filename":"src/alphabet.rs","begin":[171,0],"end":[173,2]},"visibility":"public","docs":"The alphabet used in BinHex 4.0 files.\n\nSee [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"0:379:1752":{"id":"0:379:1752","crate_id":0,"name":"config","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5779:3671":{"id":"1:5779:3671","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:54597","1:5781:54598","1:5782:54599","1:5783:54600"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3309:3161-0:556:1787":{"id":"a:2:3309:3161-0:556:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9258:3103-0:556:1787":{"id":"a:2:9258:3103-0:556:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4752:2821":{"id":"1:4752:2821","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:58199","1:4754:2099","1:4755:58201","1:4757:2820","1:4758:58200","1:4760:56406","1:4761:4912"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:1867","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13435:56378":{"id":"2:13435:56378","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3504:2828":{"id":"2:3504:2828","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1639":{"id":"0:0:1639","crate_id":0,"name":"base64","span":{"filename":"src/lib.rs","begin":[1,0],"end":[124,26]},"visibility":"public","docs":"\n# Alphabets\n\nAn [alphabet::Alphabet] defines what ASCII symbols are used to encode to or decode from.\n\nConstants in [alphabet] like [alphabet::STANDARD] or [alphabet::URL_SAFE] provide commonly used\nalphabets, but you can also build your own custom `Alphabet` if needed.\n\n# Engines\n\nOnce you have an `Alphabet`, you can pick which `Engine` you want. A few parts of the public\nAPI provide a default, but otherwise the user must provide an `Engine` to use.\n\nSee [engine::Engine] for more on what engine to choose, or use [engine::DEFAULT_ENGINE] if you\njust want plain old standard base64 and don't have other requirements.\n\n## Config\n\nIn addition to an `Alphabet`, constructing an `Engine` also requires an [engine::Config]. Each\n`Engine` has a corresponding `Config` implementation.\n\n[encode()] and [decode()] use the standard alphabet and default engine in an RFC 4648 standard\nsetup.\n\n# Encoding\n\nSeveral different encoding functions are available to you depending on your desire for\nconvenience vs performance.\n\n| Function                | Output                       | Allocates                      |\n| ----------------------- | ---------------------------- | ------------------------------ |\n| `encode`                | Returns a new `String`       | Always                         |\n| `encode_engine`         | Returns a new `String`       | Always                         |\n| `encode_engine_string`     | Appends to provided `String` | Only if `String` needs to grow |\n| `encode_engine_slice`   | Writes to provided `&[u8]`   | Never - fastest                |\n\nAll of the encoding functions that take an `Engine` will pad as per the engine's config.\n\n# Decoding\n\nJust as for encoding, there are different decoding functions available.\n\n| Function                | Output                        | Allocates                      |\n| ----------------------- | ----------------------------- | ------------------------------ |\n| `decode`                | Returns a new `Vec<u8>`       | Always                         |\n| `decode_engine`         | Returns a new `Vec<u8>`       | Always                         |\n| `decode_engine_vec`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |\n| `decode_engine_slice`   | Writes to provided `&[u8]`    | Never - fastest                |\n\nUnlike encoding, where all possible input is valid, decoding can fail (see [DecodeError]).\n\nInput can be invalid because it has invalid characters or invalid padding. (No padding at all is\nvalid, but excess padding is not.) Whitespace in the input is invalid, just like any other\nnon-base64 byte.\n\n# `Read` and `Write`\n\nTo decode a [std::io::Read] of b64 bytes, wrap a reader (file, network socket, etc) with\n[read::DecoderReader].\n\nTo write raw bytes and have them b64 encoded on the fly, wrap a [std::io::Write] with\n[write::EncoderWriter].\n\nThere is some performance overhead (15% or so) because of the necessary buffer shuffling --\nstill fast enough that almost nobody cares. Also, these implementations do not heap allocate.\n\n# `Display`\n\nSee [display] for how to transparently base64 data via a `Display` implementation.\n\n# Panics\n\nIf length calculations result in overflowing `usize`, a panic will result.\n\nThe `_slice` flavors of encode or decode will panic if the provided output slice is too small.","links":{"display":"0:52:1623","write::EncoderWriter":"0:197:1947","std::io::Read":"1:4670:1867","std::io::Write":"1:4727:1983","encode()":"0:464:598","decode()":"0:522:532","engine::Config":"0:404:1737","engine::Engine":"0:397:1738","engine::DEFAULT_ENGINE":"0:408:1853","alphabet":"0:409:1627","alphabet::Alphabet":"0:564:2160","read::DecoderReader":"0:126:1864","DecodeError":"0:600:1635","alphabet::STANDARD":"0:434:1784","alphabet::URL_SAFE":"0:435:2357"},"attrs":["#![deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)]","#![forbid(unsafe_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:52:1623","0:98:1624","0:169:1625","0:299:1626","0:409:1627","0:482","0:485","0:488","0:492","0:495","0:539","0:542","0:545","0:549","0:552"],"is_stripped":false}},"0:582:2342":{"id":"0:582:2342","crate_id":0,"name":"DuplicatedByte","span":{"filename":"src/alphabet.rs","begin":[113,4],"end":[113,22]},"visibility":"default","docs":"All bytes must be unique","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u8"}]}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1339","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:2058","2:13419:9609","2:13420:60442","2:13422:60443","2:13425:2329","2:13426:60444","2:13427:304","2:13428:56379","2:13429:56375","2:13431:56376","2:13433:56377","2:13435:56378","2:13437:3766","2:13438:60445","2:13439:56398","2:13440:56399","2:13441:3371","2:13442:4239","2:13443:1755","2:13444:9820","2:13445:9818","2:13446:4912","2:13447:60446","2:13448:9558","2:13449:56415","2:13452:56416","2:13455:56417","2:13458:3294","2:13462:3258","2:13466:56406","2:13469:9819","2:13472:56409","2:13475:60447","2:13478:60448","2:13481:56411","2:13484:56413","2:13487:60449","2:13490:60450","2:13493:2701","2:13496:60451","2:13499:60452","2:13502:60453","2:13505:60454","2:13507:60455","2:13509:60456","2:13511:60457","2:13512:60458","2:13513:60459","2:13516:60460","2:13519:9210","2:13522:56418","2:13525:60461","2:13528:60462","2:13531:60463","2:13534:4394","2:13536:4612","2:13537:54497","2:13538:54498","2:13539:54499","2:13540:60464","2:13542:3713","2:13543:60465"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13493:2701":{"id":"2:13493:2701","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::matches":"1:16011:2625","self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:3353","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:552":{"id":"0:552","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,45],"end":[119,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::DecodeError","name":"DecodeError","id":"0:600:1635","glob":false}},"b:2:2871-0:362:1786":{"id":"b:2:2871-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:54481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[287,0],"end":[292,1]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:392:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,23],"end":[21,25]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3277:217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4727:1983":{"id":"1:4727:1983","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:1625","1:4729:3491","1:4731:3492","1:4732:2069","1:4733:2111","1:4734:3493","1:4735:3047","1:4744:3283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[242,0],"end":[285,1]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:388:920","0:389:2237","0:390:2245"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,24],"end":[113,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode","name":"encode","id":"0:464:598","glob":false}},"1:5651:3690":{"id":"1:5651:3690","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:54594","1:5653:3222"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:587:1541":{"id":"0:587:1541","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[115,20],"end":[115,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13531:60463":{"id":"2:13531:60463","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6867:3698":{"id":"1:6867:3698","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:58142"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:3102-0:564:2160":{"id":"a:2:9259:3102-0:564:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3410:4078":{"id":"2:3410:4078","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:402:532":{"id":"0:402:532","crate_id":0,"name":"decode","span":{"filename":"src/engine/mod.rs","begin":[62,4],"end":[67,36]},"visibility":"default","docs":"Decode `input` base64 bytes into the `output` buffer.\n\n`decode_estimate` is the result of [Engine::decoded_length_estimate()], which is passed in to avoid\ncalculating it again (expensive on short inputs).`\n\nReturns the number of bytes written to `output`.\n\nEach complete 4-byte chunk of encoded data decodes to 3 bytes of decoded data, but this\nfunction must also handle the final possibly partial chunk.\nIf the input length is not a multiple of 4, or uses padding bytes to reach a multiple of 4,\nthe trailing 2 or 3 bytes must decode to 1 or 2 bytes, respectively, as per the\n[RFC](https://tools.ietf.org/html/rfc4648#section-3.5).\n\nDecoding must not write any bytes into the output slice other than the decoded data.","links":{"Engine::decoded_length_estimate()":"0:397:1738"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["decode_estimate",{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6561:3719":{"id":"1:6561:3719","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:56197","1:6563:56198"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3201-0:579:2335":{"id":"b:2:3201-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2871-0:73:1847":{"id":"b:2:2871-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:2873:54481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:603:1541":{"id":"0:603:1541","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[16,16],"end":[16,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[108,16],"end":[108,18]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10312:2770":{"id":"2:10312:2770","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:787-0:556:1787":{"id":"b:5:787-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3312","5:790:3313","5:791:3314"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:556:1787":{"id":"0:556:1787","crate_id":0,"name":"FastPortableConfig","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[237,0],"end":[240,1]},"visibility":"public","docs":"Contains configuration parameters for base64 encoding and decoding.\n\n```\n# use base64::engine::fast_portable::FastPortableConfig;\nlet config = FastPortableConfig::new()\n    .with_encode_padding(false);\n    // further customize using `.with_*` methods as needed\n```\n\nThe constants [PAD] and [NO_PAD] cover most use cases.\n\nTo specify the characters used, see [crate::alphabet::Alphabet].","links":{"PAD":"0:395:1788","NO_PAD":"0:396:2251","crate::alphabet::Alphabet":"0:564:2160"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:387","a:2:3268:211-0:556:1787","a:2:3309:3161-0:556:1787","a:2:9258:3103-0:556:1787","a:2:3280:220-0:556:1787","a:2:9259:3102-0:556:1787","b:2:3212-0:556:1787","b:2:3207-0:556:1787","b:2:2871-0:556:1787","b:2:4001-0:556:1787","b:2:2868-0:556:1787","b:2:3197-0:556:1787","b:2:3201-0:556:1787","b:5:787-0:556:1787","0:559","0:561","0:562","0:391","0:393"]}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16022:2634","str::as_mut_ptr":"1:16011:2625"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:3253","2:8449:3254","2:8450:3255","2:8451:3256","2:8455:3257","2:8458:3258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:4001-0:362:1786":{"id":"b:2:4001-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13537:54497":{"id":"2:13537:54497","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23134:4293":{"id":"2:23134:4293","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:4178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3280:220-0:556:1787":{"id":"a:2:3280:220-0:556:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6463:3716":{"id":"1:6463:3716","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:54859","1:6465:8224","1:6466:54860","1:6467:54861","1:6468:54862","1:6469:54863"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9259:3102-0:362:1786":{"id":"a:2:9259:3102-0:362:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:585:2338":{"id":"0:585:2338","crate_id":0,"name":"UnprintableByte","span":{"filename":"src/alphabet.rs","begin":[115,4],"end":[115,23]},"visibility":"default","docs":"All bytes must be printable (in the range `[32, 126]`).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u8"}]}},"2:10300:2765":{"id":"2:10300:2765","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:60449":{"id":"2:13487:60449","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10306:2768":{"id":"2:10306:2768","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3811:4208":{"id":"2:3811:4208","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13426:60444":{"id":"2:13426:60444","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:2058":{"id":"2:13418:2058","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:6413-0:579:2335":{"id":"b:5:6413-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1396"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3341:3751":{"id":"2:3341:3751","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6865:3697":{"id":"1:6865:3697","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:54831"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5731:3669":{"id":"1:5731:3669","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:6027","1:5733:54805","1:5734:54806"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[236,9],"end":[236,14]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:560:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:588:2339":{"id":"0:588:2339","crate_id":0,"name":"ReservedByte","span":{"filename":"src/alphabet.rs","begin":[117,4],"end":[117,20]},"visibility":"default","docs":"`=` cannot be used","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u8"}]}},"2:13507:60455":{"id":"2:13507:60455","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:560:408":{"id":"0:560:408","crate_id":0,"name":"clone","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5801:3675":{"id":"1:5801:3675","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:6027"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:60458":{"id":"2:13512:60458","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:610:1542":{"id":"0:610:1542","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[27,29],"end":[27,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13441:3371":{"id":"2:13441:3371","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13522:56418":{"id":"2:13522:56418","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:54496":{"id":"5:6107:54496","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:2625"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4001-0:73:1847":{"id":"b:2:4001-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4745:2818":{"id":"1:4745:2818","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:56216","1:4747:40643","1:4748:56217","1:4749:56218"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:405:1753":{"id":"0:405:1753","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/mod.rs","begin":[83,4],"end":[83,37]},"visibility":"default","docs":"Returns `true` if padding should be added after the encoded output.\n\nPadding is added outside the engine's encode() since the engine may be used\nto encode only a chunk of the overall output, so it can't always know when\nthe output is \"done\" and would therefore need padding (if configured).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:395:1788":{"id":"0:395:1788","crate_id":0,"name":"PAD","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[304,0],"end":[304,62]},"visibility":"public","docs":"Include padding bytes when encoding.\n\nThis is the standard per the base64 RFC, but consider using [NO_PAD] instead as padding serves\nlittle purpose in practice.","links":{"NO_PAD":"0:396:2251"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"2:2873:54481":{"id":"2:2873:54481","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:549":{"id":"0:549","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,24],"end":[119,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_slice","name":"decode_engine_slice","id":"0:533:1634","glob":false}},"b:2:3212-0:556:1787":{"id":"b:2:3212-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6441:3704":{"id":"1:6441:3704","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:4002","1:6443:4003","1:6444:7136","1:6445:58439","1:6447:58443","1:6449:58440","1:6450:58441","1:6452:58442"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13437:3766":{"id":"2:13437:3766","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:16011:2625","crate::ops::Index":"2:3576:2737","str::slice_mut_unchecked":"1:16011:2625"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[8,0],"end":[8,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"decode::FastPortableEstimate","name":"FastPortableEstimate","id":"0:343:2161","glob":false}},"b:2:3207-0:362:1786":{"id":"b:2:3207-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:22837:4277":{"id":"2:22837:4277","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:58878","2:22839:1226","2:22840:1227","2:22841:58895","2:22842:58896","2:22843:58897","2:22844:58898","2:22845:60018","2:22846:60019","2:22847:60020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:466:1628":{"id":"0:466:1628","crate_id":0,"name":"encode_engine","span":{"filename":"src/encode.rs","begin":[56,0],"end":[64,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the provided `Engine`.\nReturns a `String`.\n\n# Example\n\n```rust\nextern crate base64;\n\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::NO_PAD);\n\nfn main() {\n    let b64 = base64::encode_engine(\n        b\"hello world~\",\n        &base64::engine::DEFAULT_ENGINE\n        );\n    println!(\"{}\", b64);\n\n    let b64_url = base64::encode_engine(\n        b\"hello internet~\",\n        &URL_SAFE_ENGINE\n        );\n    println!(\"{}\", b64_url);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3216:1415":{"id":"2:3216:1415","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:396:2251":{"id":"0:396:2251","crate_id":0,"name":"NO_PAD","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[307,0],"end":[307,92]},"visibility":"public","docs":"Don't add padding when encoding.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"2:3576:2737":{"id":"2:3576:2737","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[32,1]},"visibility":{"restricted":{"parent":"0:52:1623","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:83:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2865:3498":{"id":"2:2865:3498","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:54481"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13502:60453":{"id":"2:13502:60453","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::match_indices":"1:16011:2625","prim@char":"1:16005:2620","self::pattern":"2:13053:2752"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[108,16],"end":[108,18]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3277:217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[26,0],"end":[96,1]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:427:2334"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:378:532":{"id":"0:378:532","crate_id":0,"name":"decode","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[164,4],"end":[177,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["estimate",{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:598":{"id":"0:400:598","crate_id":0,"name":"encode","span":{"filename":"src/engine/mod.rs","begin":[41,4],"end":[41,63]},"visibility":"default","docs":"Encode the `input` bytes into the `output` buffer based on the mapping in `encode_table`.\n\n`output` will be long enough to hold the encoded data.\n\nReturns the number of bytes written.\n\nNo padding should be written; that is handled separately.\n\nMust not write any bytes into the output slice other than the encoded data.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:437:2364":{"id":"0:437:2364","crate_id":0,"name":"BCRYPT","span":{"filename":"src/alphabet.rs","begin":[157,0],"end":[159,2]},"visibility":"public","docs":"The bcrypt alphabet.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"0:166":{"id":"0:166","crate_id":0,"name":null,"span":{"filename":"src/read/mod.rs","begin":[3,0],"end":[3,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::decoder::DecoderReader","name":"DecoderReader","id":"0:126:1864","glob":false}},"b:2:2871-0:564:2160":{"id":"b:2:2871-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:54481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8362:4143":{"id":"2:8362:4143","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:3303"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:440:598":{"id":"0:440:598","crate_id":0,"name":"encode","span":{"filename":"src/encode.rs","begin":[1,0],"end":[607,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:464:598","0:466:1628","0:469:1629","0:472:1630","0:477:1631"],"is_stripped":true}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13455:56417":{"id":"2:13455:56417","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1339","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61089","5:6085:2516","5:6088:61090","5:6091:61091","5:6103:61092","5:6104:61093","5:6105:2848","5:6106:54495","5:6107:54496"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:568:408":{"id":"0:568:408","crate_id":0,"name":"clone","span":{"filename":"src/alphabet.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:604:1542":{"id":"0:604:1542","crate_id":0,"name":"1","span":{"filename":"src/decode.rs","begin":[16,23],"end":[16,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13516:60460":{"id":"2:13516:60460","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3434:4090":{"id":"2:3434:4090","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5723:3668":{"id":"1:5723:3668","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:58711","1:5725:58713","1:5726:58712","1:5727:58714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3336:2732":{"id":"2:3336:2732","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98:1624":{"id":"0:98:1624","crate_id":0,"name":"read","span":{"filename":"src/read/mod.rs","begin":[1,0],"end":[6,18]},"visibility":"public","docs":"Implementations of `io::Read` to transparently decode base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:166"],"is_stripped":false}},"2:13083:3338":{"id":"2:13083:3338","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22748:4342":{"id":"2:22748:4342","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:4290","2:22750:58878","2:22751:58879","2:22752:58880","2:22753:58881","2:22754:43616","2:22755:58882","2:22756:58883","2:22757:58884","2:22758:58885","2:22759:58886","2:22760:58887","2:22761:58888","2:22762:58889","2:22763:9611","2:22764:58890","2:22765:58891","2:22766:8942","2:22767:58892","2:22768:58893","2:22769:58894","2:22770:58895","2:22771:58896","2:22772:58897","2:22773:58898"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9258:3103":{"id":"2:9258:3103","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:73:1847":{"id":"b:2:3197-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3200:3252"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:1625","2:10542:54655","2:10543:54656","2:10544:54657","2:10545:2301","2:10546:54658","2:10547:54659","2:10548:54660","2:10549:54661","2:10550:54662","2:10551:54663","2:10552:54664","2:10553:54665","2:10554:54666","2:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3580:2738":{"id":"2:3580:2738","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2737","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3346:4149":{"id":"2:3346:4149","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:787-0:564:2160":{"id":"b:5:787-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3312","5:790:3313","5:791:3314"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[4,0],"end":[4,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder::EncoderWriter","name":"EncoderWriter","id":"0:197:1947","glob":false}},"a:2:3268:211-0:556:1787":{"id":"a:2:3268:211-0:556:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:404:1737":{"id":"0:404:1737","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[74,0],"end":[84,1]},"visibility":"public","docs":"The minimal level of configuration that engines must support.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:405:1753"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:393"]}},"b:2:3207-0:564:2160":{"id":"b:2:3207-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3515:2070":{"id":"2:3515:2070","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:3102-0:556:1787":{"id":"a:2:9259:3102-0:556:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23462:4291":{"id":"2:23462:4291","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1269","2:23464:1268","2:23465:1266","2:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:4343","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:54495":{"id":"5:6106:54495","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:2625"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6689:3670":{"id":"1:6689:3670","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:56149","1:6691:8148","1:6692:8149","1:6693:8151","1:6694:8150","1:6695:8152","1:6696:8153","1:6697:8155","1:6698:6068","1:6699:8158","1:6700:8159","1:6701:8160","1:6702:8161","1:6703:8162","1:6704:8163","1:6705:8156","1:6706:8157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3371:3776":{"id":"2:3371:3776","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:56398":{"id":"2:13439:56398","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:16011:2625"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13538:54498":{"id":"2:13538:54498","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:73:1847":{"id":"b:2:3207-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3212-0:579:2335":{"id":"b:2:3212-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:398:1737":{"id":"0:398:1737","crate_id":0,"name":"Config","span":{"filename":"src/engine/mod.rs","begin":[28,4],"end":[28,24]},"visibility":"default","docs":"The config type used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Config","id":"0:404:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:597":{"id":"0:597","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[108,20],"end":[108,29]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:598:604","0:599:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4050:3636":{"id":"2:4050:3636","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:3644"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:293":{"id":"0:293","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[5,0],"end":[5,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::EncoderStringWriter","name":"EncoderStringWriter","id":"0:255:1948","glob":false}},"0:389:2237":{"id":"0:389:2237","crate_id":0,"name":"with_encode_padding","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[265,4],"end":[270,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `padding` parameter.\n\nIf `true`, encoding will append either 1 or 2 `=` padding characters to produce an\noutput whose length is a multiple of 4.\n\nPadding is not needed for correct decoding and only serves to waste bytes, but it's in the\n[spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).\n\nFor new applications, consider not using padding if the decoders you're using don't require\npadding to be present.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:791:3314":{"id":"5:791:3314","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8879:2730":{"id":"2:8879:2730","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13442:4239":{"id":"2:13442:4239","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:1864":{"id":"0:126:1864","crate_id":0,"name":"DecoderReader","span":{"filename":"src/read/decoder.rs","begin":[34,0],"end":[57,1]},"visibility":"public","docs":"A `Read` implementation that decodes base64 data read from an underlying reader.\n\n# Examples\n\n```\nuse std::io::Read;\nuse std::io::Cursor;\n\n// use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.\nlet mut wrapped_reader = Cursor::new(b\"YXNkZg==\");\nlet mut decoder = base64::read::DecoderReader::from(\n    &mut wrapped_reader,\n    &base64::engine::DEFAULT_ENGINE);\n\n// handle errors as you normally would\nlet mut result = Vec::new();\ndecoder.read_to_end(&mut result).unwrap();\n\nassert_eq!(b\"asdf\", &result[..]);\n\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Read","id":"1:4670:1867","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:464:598":{"id":"0:464:598","crate_id":0,"name":"encode","span":{"filename":"src/encode.rs","begin":[24,0],"end":[26,1]},"visibility":"public","docs":"Encode arbitrary octets as base64 using the [default engine](DEFAULT_ENGINE).\nReturns a `String`.\n\n# Example\n\n```rust\nextern crate base64;\n\nfn main() {\n    let b64 = base64::encode(b\"hello world\");\n    println!(\"{}\", b64);\n}\n```","links":{"DEFAULT_ENGINE":"0:408:1853"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3207-0:579:2335":{"id":"b:2:3207-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:3261","2:8603:922","2:8604:3262","2:8607:3263","2:8608:495","2:8610:2266","2:8613:3264","2:8614:3265","2:8615:3266","2:8616:3267","2:8618:3268","2:8620:3269","2:8621:3270","2:8623:841","2:8626:3271","2:8633:3272","2:8635:3273","2:8638:2280","2:8639:3274","2:8640:3275","2:8642:3276","2:8644:3277","2:8647:1307","2:8648:2015","2:8649:3278","2:8653:3279","2:8656:3280","2:8657:3281","2:8658:3282","2:8660:3283","2:8661:2749","2:8663:3284","2:8666:3285","2:8668:3286","2:8678:3287","2:8693:3288","2:8695:3289","2:8699:3290","2:8708:3291","2:8711:3292","2:8713:3293","2:8716:276","2:8723:294","2:8730:3294","2:8737:3295","2:8746:3296","2:8756:1014","2:8763:3297","2:8770:3246","2:8771:1760","2:8772:3248","2:8784:3247","2:8791:3245","2:8803:3244","2:8810:3298","2:8811:3299","2:8816:3300","2:8819:3301","2:8822:3302","2:8823:3303","2:8825:3304","2:8827:415","2:8830:3305","2:8833:997","2:8836:3306","2:8839:604","2:8842:3307","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:3308","2:8856:3309","2:8864:3310"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14239:2888":{"id":"2:14239:2888","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:58377","2:14241:58378","2:14242:58379","2:14243:58380","2:14244:58381","2:14245:58382","2:14246:3283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:789:3312":{"id":"5:789:3312","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:6084:61089":{"id":"5:6084:61089","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2742","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2889","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2742","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2889","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3207-0:556:1787":{"id":"b:2:3207-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13496:60451":{"id":"2:13496:60451","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:16005:2620","str::matches":"1:16011:2625","self::pattern":"2:13053:2752","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:3354","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13534:4394":{"id":"2:13534:4394","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12992:2747","`FromStr`":"2:12992:2747"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:2747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:9588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:4105","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3379:4163":{"id":"2:3379:4163","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8366:4142":{"id":"2:8366:4142","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:3304"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5012:3723":{"id":"1:5012:3723","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:3468","1:5014:54825"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369:681":{"id":"0:369:681","crate_id":0,"name":"from","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[28,4],"end":[34,5]},"visibility":"public","docs":"Create a `FastPortable` engine from an [Alphabet].\n\nWhile not very expensive to initialize, ideally these should be cached\nif the engine will be used repeatedly.","links":{"Alphabet":"0:564:2160"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["config",{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:562":{"id":"0:562","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[236,22],"end":[236,27]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:563:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3375:4161":{"id":"2:3375:4161","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[294,0],"end":[298,1]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Config","id":"0:404:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:394:1753"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3212-0:73:1847":{"id":"b:2:3212-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6103:61092":{"id":"5:6103:61092","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22874:4343":{"id":"2:22874:4343","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:4290","2:22876:1246","2:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:60442":{"id":"2:13420:60442","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[133,0],"end":[133,43]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","type_id","description","provide","source"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3739:4105":{"id":"2:3739:4105","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:55548"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3426:4086":{"id":"2:3426:4086","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:61091":{"id":"5:6091:61091","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7927:4168":{"id":"2:7927:4168","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:59872","2:7929:59873","2:7930:59870","2:7931:59868","2:7932:59874","2:7933:59871","2:7934:59869"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:578:907":{"id":"0:578:907","crate_id":0,"name":"ne","span":{"filename":"src/alphabet.rs","begin":[21,27],"end":[21,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:599:907":{"id":"0:599:907","crate_id":0,"name":"ne","span":{"filename":"src/alphabet.rs","begin":[108,20],"end":[108,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13462:3258":{"id":"2:13462:3258","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:16005:2620","`None`":"2:47492:176","self::pattern":"2:13053:2752"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:600:1635":{"id":"0:600:1635","crate_id":0,"name":"DecodeError","span":{"filename":"src/decode.rs","begin":[14,0],"end":[28,1]},"visibility":"public","docs":"Errors that can occur while decoding.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:601:1914","0:605:1916","0:607:1917"],"impls":[]}},"1:9347:3706":{"id":"1:9347:3706","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:57814","1:9349:57815","1:9350:57816","1:9351:57817","1:9352:57818","1:9353:40253","1:9354:57813"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:579:2335":{"id":"0:579:2335","crate_id":0,"name":"ParseAlphabetError","span":{"filename":"src/alphabet.rs","begin":[109,0],"end":[118,1]},"visibility":"public","docs":"Possible errors when constructing an [Alphabet] from a `str`.","links":{"Alphabet":"0:564:2160"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:580:1916","0:582:2342","0:585:2338","0:588:2339"],"impls":["a:2:3268:211-0:579:2335","a:2:3309:3161-0:579:2335","a:2:9258:3103-0:579:2335","a:2:3280:220-0:579:2335","a:2:9259:3102-0:579:2335","b:2:3212-0:579:2335","b:2:3207-0:579:2335","b:2:2871-0:579:2335","b:2:4001-0:579:2335","b:2:2868-0:579:2335","b:2:3197-0:579:2335","b:2:3201-0:579:2335","b:5:6413-0:579:2335","0:591","0:593","0:594","0:596","0:597","0:431","0:433"]}},"2:13509:60456":{"id":"2:13509:60456","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3422:4084":{"id":"2:3422:4084","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13484:56413":{"id":"2:13484:56413","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752","str::splitn":"1:16011:2625"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3309:3161-0:73:1847":{"id":"a:2:3309:3161-0:73:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,45],"end":[114,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encoded_len","name":"encoded_len","id":"0:477:1631","glob":false}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:3643","1:2579:2532","1:2580:2536","1:2581:3644"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22937:3709":{"id":"2:22937:3709","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[99,0],"end":[105,1]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:429:127","0:430:1415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:570:660":{"id":"0:570:660","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[21,16],"end":[21,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9259:3102-0:73:1847":{"id":"a:2:9259:3102-0:73:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9258:3103-0:564:2160":{"id":"a:2:9258:3103-0:564:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3197-0:579:2335":{"id":"b:2:3197-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:3252"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3268:211-0:579:2335":{"id":"a:2:3268:211-0:579:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:373:598":{"id":"0:373:598","crate_id":0,"name":"encode","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[41,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:2357":{"id":"0:435:2357","crate_id":0,"name":"URL_SAFE","span":{"filename":"src/alphabet.rs","begin":[145,0],"end":[147,2]},"visibility":"public","docs":"The URL safe alphabet (uses `-` and `_`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"0:430:1415":{"id":"0:430:1415","crate_id":0,"name":"try_from","span":{"filename":"src/alphabet.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3181:227","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:1948":{"id":"0:255:1948","crate_id":0,"name":"EncoderStringWriter","span":{"filename":"src/write/encoder_string_writer.rs","begin":[56,0],"end":[58,1]},"visibility":"public","docs":"A `Write` implementation that base64-encodes data using the provided config and accumulates the\nresulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is\nthen exposed via `into_inner()`.\n\n# Examples\n\nBuffer base64 in a new String:\n\n```\nuse std::io::Write;\n\nlet mut enc = base64::write::EncoderStringWriter::from(\n    &base64::engine::DEFAULT_ENGINE);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// get the resulting String\nlet b64_string = enc.into_inner();\n\nassert_eq!(\"YXNkZg==\", &b64_string);\n```\n\nOr, append to an existing `String`, which implements `StrConsumer`:\n\n```\nuse std::io::Write;\n\nlet mut buf = String::from(\"base64: \");\n\nlet mut enc = base64::write::EncoderStringWriter::from_consumer(\n    &mut buf,\n    &base64::engine::DEFAULT_ENGINE);\n\nenc.write_all(b\"asdf\").unwrap();\n\n// release the &mut reference on buf\nlet _ = enc.into_inner();\n\nassert_eq!(\"base64: YXNkZg==\", &buf);\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Performance\n\nBecause it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain\nbytes to a `io::Write`.","links":{"StrConsumer":"0:276:1949"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"StrConsumer","id":"0:276:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:472:1630":{"id":"0:472:1630","crate_id":0,"name":"encode_engine_slice","span":{"filename":"src/encode.rs","begin":[144,0],"end":[159,1]},"visibility":"public","docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer.\n\nThis is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\nor statically-allocated buffer).\n\n# Panics\n\nIf `output` is too small to hold the encoded version of `input`, a panic will result.\n\n# Example\n\n```rust\nextern crate base64;\n\nfn main() {\n    let s = b\"hello internet!\";\n    let mut buf = Vec::new();\n    // make sure we'll have a slice big enough for base64 + padding\n    buf.resize(s.len() * 4 / 3 + 4, 0);\n\n    let bytes_written = base64::encode_engine_slice(\n        s,\n        &mut buf,\n        &base64::engine::DEFAULT_ENGINE);\n\n    // shorten our vec down to just what was written\n    buf.resize(bytes_written, 0);\n\n    assert_eq!(s, base64::decode(&buf).unwrap().as_slice());\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13452:56416":{"id":"2:13452:56416","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5745:3670":{"id":"1:5745:3670","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:7805","1:5747:58066","1:5748:6027","1:5749:58067","1:5750:4002","1:5751:4003","1:5752:58068","1:5753:1303","1:5754:58069","1:5755:58070","1:5756:58071","1:5757:58072","1:5758:58073","1:5759:58074","1:5760:58075","1:5761:58076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:9609":{"id":"2:13419:9609","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13433:56377":{"id":"2:13433:56377","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13543:60465":{"id":"2:13543:60465","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:2620"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:3360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372:2124":{"id":"0:372:2124","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[39,4],"end":[39,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"FastPortableEstimate","id":"0:343:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,47],"end":[118,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine_vec","name":"decode_engine_vec","id":"0:528:1633","glob":false}},"2:13472:56409":{"id":"2:13472:56409","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752","`DoubleEndedIterator`":"2:8447:120","str::split":"1:16011:2625"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[37,0],"end":[182,1]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:371:1737","0:372:2124","0:373:598","0:377:2133","0:378:532","0:379:1752"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6791:3702":{"id":"1:6791:3702","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:54622","1:6793:54623"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9258:3103-0:73:1847":{"id":"a:2:9258:3103-0:73:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[108,9],"end":[108,14]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:592:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:170:1836":{"id":"0:170:1836","crate_id":0,"name":"encoder","span":{"filename":"src/write/encoder.rs","begin":[1,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:169:1625","path":"::write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:197:1947"],"is_stripped":true}},"2:3363:4157":{"id":"2:3363:4157","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:56411":{"id":"2:13481:56411","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13053:2752","str::rsplitn":"1:16011:2625","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:3352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:533:1634":{"id":"0:533:1634","crate_id":0,"name":"decode_engine_slice","span":{"filename":"src/decode.rs","begin":[187,0],"end":[199,1]},"visibility":"public","docs":"Decode the input into the provided output slice.\n\nThis will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n\nIf you don't know ahead of time what the decoded length should be, size your buffer with a\nconservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of\ninput, rounded up, or in other words `(input_len + 3) / 4 * 3`.\n\n# Panics\n\nIf the slice is not large enough, this will panic.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output",{"kind":"borrowed_ref","inner":{"lifetime":"'o","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"'o","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:2690"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13499:60452":{"id":"2:13499:60452","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::rmatch_indices":"1:16011:2625","self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:3355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3439:4093":{"id":"2:3439:4093","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3357:4154":{"id":"2:3357:4154","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:3102-0:579:2335":{"id":"a:2:9259:3102-0:579:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:73:1847":{"id":"0:73:1847","crate_id":0,"name":"Base64Display","span":{"filename":"src/display.rs","begin":[19,0],"end":[22,1]},"visibility":"public","docs":"A convenience wrapper for base64'ing bytes into a format string without heap allocation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:79","a:2:3268:211-0:73:1847","a:2:3309:3161-0:73:1847","a:2:9258:3103-0:73:1847","a:2:3280:220-0:73:1847","a:2:9259:3102-0:73:1847","b:2:3212-0:73:1847","b:2:3207-0:73:1847","b:2:2871-0:73:1847","b:2:4001-0:73:1847","b:2:2868-0:73:1847","b:2:3197-0:73:1847","b:2:3201-0:73:1847","b:5:6413-0:73:1847","0:84"]}},"0:377:2133":{"id":"0:377:2133","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[160,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input_len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:577:604":{"id":"0:577:604","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[21,27],"end":[21,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:362:1786":{"id":"b:2:3201-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[108,20],"end":[108,29]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3276:218","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4782:4210":{"id":"2:4782:4210","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:3261","2:4784:59121","2:4785:3263"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:564:2160":{"id":"b:2:3197-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:3252"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3201-0:556:1787":{"id":"b:2:3201-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13440:56399":{"id":"2:13440:56399","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:16011:2625"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:3261","2:8405:2894","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,47],"end":[113,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_string","name":"encode_engine_string","id":"0:469:1629","glob":false}},"2:3351:4151":{"id":"2:3351:4151","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6963:3682":{"id":"1:6963:3682","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:54894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:276:1949":{"id":"0:276:1949","crate_id":0,"name":"StrConsumer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[98,0],"end":[101,1]},"visibility":"public","docs":"An abstraction around consuming `str`s produced by base64 encoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:277:2099"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10310:2769":{"id":"2:10310:2769","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,16],"end":[21,21]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:570:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23467:17526":{"id":"2:23467:17526","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:58893","2:23469:58892","2:23470:58894"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:4291","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3388:4073":{"id":"2:3388:4073","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3309:3161-0:564:2160":{"id":"a:2:3309:3161-0:564:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:371:1737":{"id":"0:371:1737","crate_id":0,"name":"Config","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[38,4],"end":[38,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:427:2334":{"id":"0:427:2334","crate_id":0,"name":"from_str","span":{"filename":"src/alphabet.rs","begin":[49,4],"end":[95,5]},"visibility":"public","docs":"Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n\nThe `=` byte is not allowed as it is used for padding.\n\nThe `const`-ness of this function isn't useful as of rust 1.54.0 since `const` `unwrap()`,\netc, haven't shipped yet, but that's [on the roadmap](https://github.com/rust-lang/rust/issues/85194).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["alphabet",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13536:4612":{"id":"2:13536:4612","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3774:4209":{"id":"2:3774:4209","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8472:3162":{"id":"2:8472:3162","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:2058"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:477:1631":{"id":"0:477:1631","crate_id":0,"name":"encoded_len","span":{"filename":"src/encode.rs","begin":[198,0],"end":[218,1]},"visibility":"public","docs":"Calculate the base64 encoded length for a given input length, optionally including any\nappropriate padding bytes.\n\nReturns `None` if the encoded length can't be represented in `usize`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes_len",{"kind":"primitive","inner":"usize"}],["padding",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3395:3748":{"id":"2:3395:3748","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:56375","2:10937:56376","2:10938:56377","2:10939:56378","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3273:2101":{"id":"2:3273:2101","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:572":{"id":"0:572","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,23],"end":[21,25]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:469:1629":{"id":"0:469:1629","crate_id":0,"name":"encode_engine_string","span":{"filename":"src/encode.rs","begin":[95,0],"end":[110,1]},"visibility":"public","docs":"Encode arbitrary octets as base64.\nWrites into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n\n# Example\n\n```rust\nextern crate base64;\n\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::NO_PAD);\nfn main() {\n    let mut buf = String::new();\n    base64::encode_engine_string(\n        b\"hello world~\",\n        &mut buf,\n        &base64::engine::DEFAULT_ENGINE);\n    println!(\"{}\", buf);\n\n    buf.clear();\n    base64::encode_engine_string(\n        b\"hello internet~\",\n        &mut buf,\n        &URL_SAFE_ENGINE);\n    println!(\"{}\", buf);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["output_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3309:3161":{"id":"2:3309:3161","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13505:60454":{"id":"2:13505:60454","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:397:1738":{"id":"0:397:1738","crate_id":0,"name":"Engine","span":{"filename":"src/engine/mod.rs","begin":[26,0],"end":[71,1]},"visibility":"public","docs":"An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.\n\nDifferent implementations offer different characteristics. The library currently ships with\na general-purpose [FastPortable] impl that offers good speed and works on any CPU, with more choices\ncoming later, like a constant-time one when side channel resistance is called for, and vendor-specific vectorized ones for more speed.\n\nSee [DEFAULT_ENGINE] if you just want standard base64. Otherwise, when possible, it's\nrecommended to store the engine in a `const` so that references to it won't pose any lifetime\nissues, and to avoid repeating the cost of engine setup.","links":{"FastPortable":"0:362:1786","DEFAULT_ENGINE":"0:408:1853"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:398:1737","0:399:2124","0:400:598","0:401:2133","0:402:532","0:403:1752"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:370"]}},"2:13446:4912":{"id":"2:13446:4912","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:2827","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10302:2766":{"id":"2:10302:2766","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8882:3470":{"id":"2:8882:3470","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3367:2733":{"id":"2:3367:2733","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:3252"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3416:4081":{"id":"2:3416:4081","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:197:1947":{"id":"0:197:1947","crate_id":0,"name":"EncoderWriter","span":{"filename":"src/write/encoder.rs","begin":[65,0],"end":[83,1]},"visibility":"public","docs":"A `Write` implementation that base64 encodes data before delegating to the wrapped writer.\n\nBecause base64 has special handling for the end of the input data (padding, etc), there's a\n`finish()` method on this type that encodes any leftover input bytes and adds padding if\nappropriate. It's called automatically when deallocated (see the `Drop` implementation), but\nany error that occurs when invoking the underlying writer will be suppressed. If you want to\nhandle such errors, call `finish()` yourself.\n\n# Examples\n\n```\nuse std::io::Write;\n\n// use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.\nlet mut enc = base64::write::EncoderWriter::from(\n    Vec::new(),\n    &base64::engine::DEFAULT_ENGINE);\n\n// handle errors as you normally would\nenc.write_all(b\"asdf\").unwrap();\n\n// could leave this out to be called by Drop, if you don't care\n// about handling errors or getting the delegate writer back\nlet delegate = enc.finish().unwrap();\n\n// base64 was written to the writer\nassert_eq!(b\"YXNkZg==\", &delegate[..]);\n\n```\n\n# Panics\n\nCalling `write()` (or related methods) or `finish()` after `finish()` has completed without\nerror is invalid and will panic.\n\n# Errors\n\nBase64 encoding itself does not generate errors, but errors from the wrapped writer will be\nreturned as per the contract of `Write`.\n\n# Performance\n\nIt has some minor performance loss compared to encoding slices (a couple percent).\nIt does not do any heap allocation.\n\n# Limitations\n\nOwing to the specification of the `write` and `flush` methods on the `Write` trait and their\nimplications for a buffering implementation, these methods may not behave as expected. In\nparticular, calling `write_all` on this interface may fail with `io::ErrorKind::WriteZero`.\nSee the documentation of the `Write` trait implementation for further details.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4727:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:1079:3711":{"id":"1:1079:3711","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3312","1:1081:4612","1:1082:54495","1:1083:54496","1:1084:54497","1:1085:54498","1:1086:54499"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:576":{"id":"0:576","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,27],"end":[21,36]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:577:604","0:578:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:522:532":{"id":"0:522:532","crate_id":0,"name":"decode","span":{"filename":"src/decode.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Decode base64 using the [default engine](DEFAULT_ENGINE).\nReturns a `Result` containing a `Vec<u8>`.\n\n# Example\n\n```rust\nextern crate base64;\n\nfn main() {\n    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();\n    println!(\"{:?}\", bytes);\n}\n```","links":{"DEFAULT_ENGINE":"0:408:1853"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6794:3704":{"id":"1:6794:3704","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:7137"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:1755":{"id":"2:13443:1755","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:2824","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:2245":{"id":"0:390:2245","crate_id":0,"name":"with_decode_allow_trailing_bits","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[279,4],"end":[284,5]},"visibility":"public","docs":"Create a new config based on `self` with an updated `decode_allow_trailing_bits` parameter.\n\nMost users will not need to configure this. It's useful if you need to decode base64\nproduced by a buggy encoder that has bits set in the unused space on the last base64\ncharacter as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).\nIf invalid trailing bits are present and this is `true`, those bits will\nbe silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["allow",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:407:2133":{"id":"0:407:2133","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/mod.rs","begin":[94,4],"end":[94,47]},"visibility":"default","docs":"Returns a conservative (err on the side of too big) estimate of the decoded length to use\nfor pre-allocating buffers, etc.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3280:220-0:73:1847":{"id":"a:2:3280:220-0:73:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:406:2124":{"id":"0:406:2124","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[91,0],"end":[95,1]},"visibility":"public","docs":"The decode estimate used by an engine implementation. Users do not need to interact with this;\nit is only for engine implementors.\n\nImplementors may store relevant data here when constructing this to avoid having to calculate\nthem again during actual decoding.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:407:2133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:409:1627":{"id":"0:409:1627","crate_id":0,"name":"alphabet","span":{"filename":"src/alphabet.rs","begin":[1,0],"end":[247,1]},"visibility":"public","docs":"Provides [Alphabet] and constants for alphabets commonly used in the wild.","links":{"Alphabet":"0:564:2160"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:564:2160","0:579:2335","0:434:1784","0:435:2357","0:436:2361","0:437:2364","0:438:2368","0:439:2372"],"is_stripped":false}},"2:13425:2329":{"id":"2:13425:2329","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:1777"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3400:3749":{"id":"2:3400:3749","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13519:9210":{"id":"2:13519:9210","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:564:2160":{"id":"b:2:2868-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3212-0:564:2160":{"id":"b:2:3212-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:83:681":{"id":"0:83:681","crate_id":0,"name":"from","span":{"filename":"src/display.rs","begin":[26,4],"end":[31,5]},"visibility":"public","docs":"Create a `Base64Display` with the provided engine.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bytes",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:1625":{"id":"0:169:1625","crate_id":0,"name":"write","span":{"filename":"src/write/mod.rs","begin":[1,0],"end":[9,18]},"visibility":"public","docs":"Implementations of `io::Write` to transparently handle base64.","links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:290","0:293","0:296"],"is_stripped":false}},"2:13447:60446":{"id":"2:13447:60446","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:1946":{"id":"0:242:1946","crate_id":0,"name":"encoder_string_writer","span":{"filename":"src/write/encoder_string_writer.rs","begin":[1,0],"end":[178,1]},"visibility":{"restricted":{"parent":"0:169:1625","path":"::write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:255:1948","0:276:1949"],"is_stripped":true}},"2:13422:60443":{"id":"2:13422:60443","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:16011:2625"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13469:9819":{"id":"2:13469:9819","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:3362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:584:1541":{"id":"0:584:1541","crate_id":0,"name":"0","span":{"filename":"src/alphabet.rs","begin":[113,19],"end":[113,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3268:211-0:73:1847":{"id":"a:2:3268:211-0:73:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:408:1853":{"id":"0:408:1853","crate_id":0,"name":"DEFAULT_ENGINE","span":{"filename":"src/engine/mod.rs","begin":[98,0],"end":[99,64]},"visibility":"public","docs":"A [FastPortable] engine using the [crate::alphabet::STANDARD] base64 alphabet and [crate::engine::fast_portable::PAD] config.","links":{"crate::alphabet::STANDARD":"0:434:1784","FastPortable":"0:362:1786","crate::engine::fast_portable::PAD":"0:395:1788"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"2:3647:2739":{"id":"2:3647:2739","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:59779","2:3650:59780","2:3651:56415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13513:60459":{"id":"2:13513:60459","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:3338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:598:604":{"id":"0:598:604","crate_id":0,"name":"eq","span":{"filename":"src/alphabet.rs","begin":[108,20],"end":[108,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13448:9558":{"id":"2:13448:9558","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:3357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3558:4281":{"id":"2:3558:4281","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:60040"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[121,0],"end":[130,1]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[cfg(any(feature = \"std\", test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:432:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12992:2747":{"id":"2:12992:2747","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:2334"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:3501":{"id":"5:5837:3501","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:34367"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/write/mod.rs","begin":[6,0],"end":[6,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::encoder_string_writer::StrConsumer","name":"StrConsumer","id":"0:276:1949","glob":false}},"2:8412:3163":{"id":"2:8412:3163","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:2587","2:8416:3259","2:8417:3260"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13063:2741":{"id":"2:13063:2741","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:3340","2:13066:58968","2:13067:58969","2:13068:58970","2:13069:58972","2:13070:58971","2:13071:58973"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:432:660":{"id":"0:432:660","crate_id":0,"name":"fmt","span":{"filename":"src/alphabet.rs","begin":[122,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362:1786":{"id":"0:362:1786","crate_id":0,"name":"FastPortable","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[17,0],"end":[21,1]},"visibility":"public","docs":"A general-purpose base64 engine.\n\n- It uses no vector CPU instructions, so it will work on any system.\n- It is reasonably fast (~2GiB/s).\n- It is not constant-time, though, so it is vulnerable to timing side-channel attacks. For loading cryptographic keys, etc, it is suggested to use the forthcoming constant-time implementation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:368","a:2:3268:211-0:362:1786","a:2:3309:3161-0:362:1786","a:2:9258:3103-0:362:1786","a:2:3280:220-0:362:1786","a:2:9259:3102-0:362:1786","b:2:3212-0:362:1786","b:2:3207-0:362:1786","b:2:2871-0:362:1786","b:2:4001-0:362:1786","b:2:2868-0:362:1786","b:2:3197-0:362:1786","b:2:3201-0:362:1786","0:370"]}},"0:394:1753":{"id":"0:394:1753","crate_id":0,"name":"encode_padding","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[295,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9259:3102":{"id":"2:9259:3102","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3268:211-0:362:1786":{"id":"a:2:3268:211-0:362:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5793:3673":{"id":"1:5793:3673","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:56141"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5789:3672":{"id":"1:5789:3672","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:58066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3197-0:556:1787":{"id":"b:2:3197-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:3252"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6088:61090":{"id":"5:6088:61090","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4670:1867":{"id":"1:4670:1867","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:1624","1:4672:3416","1:4674:3417","1:4675:3418","1:4676:2815","1:4677:3419","1:4678:3420","1:4680:3421","1:4681:3283","1:4682:1755","1:4683:3267","1:4685:2015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9258:3103-0:579:2335":{"id":"a:2:9258:3103-0:579:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:88:660":{"id":"0:88:660","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["formatter",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48558:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3716:4528":{"id":"2:3716:4528","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:2739","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,27],"end":[21,36]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3276:218","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:299:1626":{"id":"0:299:1626","crate_id":0,"name":"engine","span":{"filename":"src/engine/mod.rs","begin":[1,0],"end":[99,64]},"visibility":"public","docs":"Provides the [Engine] abstraction and out of the box implementations.","links":{"Engine":"0:397:1738"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:310:1785","0:397:1738","0:404:1737","0:406:2124","0:408:1853"],"is_stripped":false}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,32],"end":[118,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode_engine","name":"decode_engine","id":"0:524:1632","glob":false}},"5:6415:1396":{"id":"5:6415:1396","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3211:1416":{"id":"2:3211:1416","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3215:127":{"id":"2:3215:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38805:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,32],"end":[113,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine","name":"encode_engine","id":"0:466:1628","glob":false}},"2:13431:56376":{"id":"2:13431:56376","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22801:4288":{"id":"2:22801:4288","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:4290","2:22803:58878","2:22804:1226","2:22805:1227","2:22806:43616","2:22807:60093","2:22808:9777","2:22809:60094","2:22810:60095","2:22811:58891","2:22812:58895","2:22813:58896","2:22814:58897","2:22815:58898","2:22816:60018","2:22817:60019","2:22818:60020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2871-0:579:2335":{"id":"b:2:2871-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:54481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10574:3747":{"id":"2:10574:3747","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:9306","2:10577:56111"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3309:3161-0:362:1786":{"id":"a:2:3309:3161-0:362:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:556:1787":{"id":"b:2:2868-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:99:1863":{"id":"0:99:1863","crate_id":0,"name":"decoder","span":{"filename":"src/read/decoder.rs","begin":[1,0],"end":[293,1]},"visibility":{"restricted":{"parent":"0:98:1624","path":"::read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:126:1864"],"is_stripped":true}},"2:3405:3750":{"id":"2:3405:3750","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[236,16],"end":[236,20]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13438:60445":{"id":"2:13438:60445","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3580:2738","`str`":"1:16011:2625","str::slice_unchecked":"1:16011:2625"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:362:1786":{"id":"b:2:3197-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:3252"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:52:1623":{"id":"0:52:1623","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"Enables base64'd output anywhere you might use a `Display` implementation, like a format string.\n\n```\nuse base64::display::Base64Display;\nuse base64::engine::DEFAULT_ENGINE;\n\nlet data = vec![0x0, 0x1, 0x2, 0x3];\nlet wrapper = Base64Display::from(&data, &DEFAULT_ENGINE);\n\nassert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:73:1847"],"is_stripped":false}},"b:2:3201-0:73:1847":{"id":"b:2:3201-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10304:2767":{"id":"2:10304:2767","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3268:211-0:564:2160":{"id":"a:2:3268:211-0:564:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:392:59":{"id":"0:392:59","crate_id":0,"name":"default","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[289,4],"end":[291,5]},"visibility":"default","docs":"Delegates to [FastPortableConfig::new].","links":{"FastPortableConfig::new":"0:556:1787"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:56375":{"id":"2:13429:56375","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:564:2160":{"id":"0:564:2160","crate_id":0,"name":"Alphabet","span":{"filename":"src/alphabet.rs","begin":[22,0],"end":[24,1]},"visibility":"public","docs":"An alphabet defines the 64 ASCII characters (symbols) used for base64.\n\nCommon alphabets are provided as constants, and custom alphabets\ncan be made via `from_str` or the `TryFrom<str>` implementation.\n\n```\nlet custom = base64::alphabet::Alphabet::from_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap();\n\nlet engine = base64::engine::fast_portable::FastPortable::from(\n    &custom,\n    base64::engine::fast_portable::PAD);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:424","a:2:3268:211-0:564:2160","a:2:3309:3161-0:564:2160","a:2:9258:3103-0:564:2160","a:2:3280:220-0:564:2160","a:2:9259:3102-0:564:2160","b:2:3212-0:564:2160","b:2:3207-0:564:2160","b:2:2871-0:564:2160","b:2:4001-0:564:2160","b:2:2868-0:564:2160","b:2:3197-0:564:2160","b:2:3201-0:564:2160","b:5:787-0:564:2160","0:567","0:569","0:571","0:572","0:575","0:576","0:428"]}},"0:399:2124":{"id":"0:399:2124","crate_id":0,"name":"DecodeEstimate","span":{"filename":"src/engine/mod.rs","begin":[30,4],"end":[30,40]},"visibility":"default","docs":"The decode estimate used by this engine","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DecodeEstimate","id":"0:406:2124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:277:2099":{"id":"0:277:2099","crate_id":0,"name":"consume","span":{"filename":"src/write/encoder_string_writer.rs","begin":[100,4],"end":[100,37]},"visibility":"default","docs":"Consume the base64 encoded data in `buf`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:4001-0:564:2160":{"id":"b:2:4001-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3200:3252":{"id":"2:3200:3252","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:3246","2:2959:1760","2:2960:3251"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13458:3294":{"id":"2:13458:3294","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:16005:2620","self::pattern":"2:13053:2752","`None`":"2:47492:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:2133":{"id":"0:401:2133","crate_id":0,"name":"decoded_length_estimate","span":{"filename":"src/engine/mod.rs","begin":[46,4],"end":[46,80]},"visibility":"default","docs":"As an optimization to prevent the decoded length from being calculated twice, it is\nsometimes helpful to have a conservative estimate of the decoded size before doing the\ndecoding, so this calculation is done separately and passed to [Engine::decode()] as needed.","links":{"Engine::decode()":"0:397:1738"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["input_len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"qualified_path","inner":{"name":"DecodeEstimate","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:436:2361":{"id":"0:436:2361","crate_id":0,"name":"CRYPT","span":{"filename":"src/alphabet.rs","begin":[152,0],"end":[154,2]},"visibility":"public","docs":"The `crypt(3)` alphabet (uses `.` and `/` as the first two values).\n\nNot standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"a:2:3280:220-0:564:2160":{"id":"a:2:3280:220-0:564:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3430:4088":{"id":"2:3430:4088","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:2516":{"id":"5:6085:2516","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498:532":{"id":"0:498:532","crate_id":0,"name":"decode","span":{"filename":"src/decode.rs","begin":[1,0],"end":[360,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:600:1635","0:522:532","0:524:1632","0:528:1633","0:533:1634"],"is_stripped":true}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,24],"end":[118,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"import","inner":{"source":"crate::decode::decode","name":"decode","id":"0:522:532","glob":false}},"b:2:3212-0:362:1786":{"id":"b:2:3212-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3309:3161-0:579:2335":{"id":"a:2:3309:3161-0:579:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:3161","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3280:220-0:362:1786":{"id":"a:2:3280:220-0:362:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8886:4167":{"id":"2:8886:4167","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:4168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:429:127":{"id":"0:429:127","crate_id":0,"name":"Error","span":{"filename":"src/alphabet.rs","begin":[100,4],"end":[100,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3312","5:785:3313","5:786:3314"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:60450":{"id":"2:13490:60450","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:528:1633":{"id":"0:528:1633","crate_id":0,"name":"decode_engine_vec","span":{"filename":"src/decode.rs","begin":[149,0],"end":[174,1]},"visibility":"public","docs":"Decode from string reference as octets.\nWrites into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\nReturns a `Result` containing an empty tuple, aka `()`.\n\n# Example\n\n```rust\nextern crate base64;\n\nconst URL_SAFE_ENGINE: base64::engine::fast_portable::FastPortable =\n    base64::engine::fast_portable::FastPortable::from(\n        &base64::alphabet::URL_SAFE,\n        base64::engine::fast_portable::PAD);\n\nfn main() {\n    let mut buffer = Vec::<u8>::new();\n    // with the default engine\n    base64::decode_engine_vec(\n        \"aGVsbG8gd29ybGR+Cg==\",\n        &mut buffer,\n        &base64::engine::DEFAULT_ENGINE\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n\n    buffer.clear();\n\n    // with a custom engine\n    base64::decode_engine_vec(\n        \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n        &mut buffer,\n        &URL_SAFE_ENGINE\n    ).unwrap();\n    println!(\"{:?}\", buffer);\n}\n```","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":"'o","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":"'e","mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"'o","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13072:3340":{"id":"2:13072:3340","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:4232","2:13075:922","2:13076:59181","2:13077:59182"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2868-0:73:1847":{"id":"b:2:2868-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["2:2870:2690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13428:56379":{"id":"2:13428:56379","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:2634"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6413-0:73:1847":{"id":"b:5:6413-0:73:1847","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["5:6415:1396"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:580:1916":{"id":"0:580:1916","crate_id":0,"name":"InvalidLength","span":{"filename":"src/alphabet.rs","begin":[111,4],"end":[111,17]},"visibility":"default","docs":"Alphabets must be 64 ASCII bytes","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:524:1632":{"id":"0:524:1632","crate_id":0,"name":"decode_engine","span":{"filename":"src/decode.rs","begin":[104,0],"end":[111,1]},"visibility":"public","docs":"Decode from string reference as octets using the specified [Engine].\nReturns a `Result` containing a `Vec<u8>`.\n\n# Example\n\n```rust\nextern crate base64;\n\nfn main() {\n    let bytes = base64::decode_engine(\n        \"aGVsbG8gd29ybGR+Cg==\",\n        &base64::engine::DEFAULT_ENGINE,\n    ).unwrap();\n    println!(\"{:?}\", bytes);\n\n    // custom engine setup\n    let bytes_url = base64::decode_engine(\n        \"aGVsbG8gaW50ZXJuZXR-Cg\",\n        &base64::engine::fast_portable::FastPortable::from(\n            &base64::alphabet::URL_SAFE,\n            base64::engine::fast_portable::NO_PAD),\n\n    ).unwrap();\n    println!(\"{:?}\", bytes_url);\n}\n```","links":{"Engine":"0:397:1738"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\", test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"generic","inner":"T"}],["engine",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"DecodeError","id":"0:600:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:403:1752":{"id":"0:403:1752","crate_id":0,"name":"config","span":{"filename":"src/engine/mod.rs","begin":[70,4],"end":[70,38]},"visibility":"default","docs":"Returns the config for this engine.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Config","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:397:1738","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6863:3683":{"id":"1:6863:3683","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:58751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/engine/fast_portable/mod.rs","begin":[23,0],"end":[35,1]},"visibility":{"restricted":{"parent":"0:310:1785","path":"::engine::fast_portable"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:369:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9258:3103-0:362:1786":{"id":"a:2:9258:3103-0:362:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:3103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3280:220-0:579:2335":{"id":"a:2:3280:220-0:579:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13539:54499":{"id":"2:13539:54499","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13528:60462":{"id":"2:13528:60462","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:2752","prim@char":"1:16005:2620"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23086:17507":{"id":"2:23086:17507","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:7378","2:23088:59937","2:23089:59938"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:790:3313":{"id":"5:790:3313","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:362:1786":{"id":"b:2:2868-0:362:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortable","id":"0:362:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2870:2690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2027"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3201-0:564:2160":{"id":"b:2:3201-0:564:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:607:1917":{"id":"0:607:1917","crate_id":0,"name":"InvalidLastSymbol","span":{"filename":"src/decode.rs","begin":[27,4],"end":[27,32]},"visibility":"default","docs":"The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\nThis is indicative of corrupted or truncated Base64.\nUnlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\nsymbols that are in the alphabet but represent nonsensical encodings.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"u8"}]}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,24],"end":[114,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::encode::encode_engine_slice","name":"encode_engine_slice","id":"0:472:1630","glob":false}},"0:609:1541":{"id":"0:609:1541","crate_id":0,"name":"0","span":{"filename":"src/decode.rs","begin":[27,22],"end":[27,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"2:13445:9818":{"id":"2:13445:9818","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:2625"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:3361","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:438:2368":{"id":"0:438:2368","crate_id":0,"name":"IMAP_MUTF7","span":{"filename":"src/alphabet.rs","begin":[164,0],"end":[166,2]},"visibility":"public","docs":"The alphabet used in IMAP-modified UTF-7 (uses `+` and `,`).\n\nSee [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"5:6105:2848":{"id":"5:6105:2848","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/alphabet.rs","begin":[21,9],"end":[21,14]},"visibility":{"restricted":{"parent":"0:409:1627","path":"::alphabet"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:568:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3210:127":{"id":"2:3210:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:434:1784":{"id":"0:434:1784","crate_id":0,"name":"STANDARD","span":{"filename":"src/alphabet.rs","begin":[138,0],"end":[140,2]},"visibility":"public","docs":"The standard alphabet (uses `+` and `/`).\n\nSee [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"Alphabet","id":"0:564:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"0:601:1914":{"id":"0:601:1914","crate_id":0,"name":"InvalidByte","span":{"filename":"src/decode.rs","begin":[16,4],"end":[16,26]},"visibility":"default","docs":"An invalid byte was found in the input. The offset and offending byte are provided.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"u8"}]}},"2:12500:4605":{"id":"2:12500:4605","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:3261","2:12502:59557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:563:660":{"id":"0:563:660","crate_id":0,"name":"fmt","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[236,22],"end":[236,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2870:2690":{"id":"2:2870:2690","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4001-0:579:2335":{"id":"b:2:4001-0:579:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ParseAlphabetError","id":"0:579:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[34,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:52:1623","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'e","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Engine","id":"0:397:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Base64Display","id":"0:73:1847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'e"},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"items":["0:88:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2871-0:556:1787":{"id":"b:2:2871-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:3498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2873:54481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13475:60447":{"id":"2:13475:60447","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:16011:2625","self::pattern":"2:13053:2752","prim@char":"1:16005:2620","str::split":"1:16011:2625","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:3350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13511:60457":{"id":"2:13511:60457","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5657:3692":{"id":"1:5657:3692","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:5379","1:5659:2329"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:3687","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:388:920":{"id":"0:388:920","crate_id":0,"name":"new","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[247,4],"end":[253,5]},"visibility":"public","docs":"Create a new config with `padding` = `true` and `decode_allow_trailing_bits` = `false`.\n\nThis probably matches most people's expectations, but consider disabling padding to save\na few bytes unless you specifically need it for compatibility with some legacy system.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4001-0:556:1787":{"id":"b:2:4001-0:556:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FastPortableConfig","id":"0:556:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4003:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:605:1916":{"id":"0:605:1916","crate_id":0,"name":"InvalidLength","span":{"filename":"src/decode.rs","begin":[22,4],"end":[22,17]},"visibility":"default","docs":"The length of the input is invalid.\nA typical cause of this is stray trailing whitespace or other separator bytes.\nIn the case where excess trailing bytes have produced an invalid length *and* the last byte\nis also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\nwill be emitted instead of `InvalidLength` to make the issue easier to debug.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3383:4165":{"id":"2:3383:4165","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:61093":{"id":"5:6104:61093","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:2742"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2742","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2889","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:1785":{"id":"0:310:1785","crate_id":0,"name":"fast_portable","span":{"filename":"src/engine/fast_portable/mod.rs","begin":[1,0],"end":[307,92]},"visibility":"public","docs":"Provides the [FastPortable] engine and associated config types.","links":{"FastPortable":"0:362:1786"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:362:1786","0:556:1787","0:395:1788","0:396:2251","0:358"],"is_stripped":false}}},"paths":{"1:5380:3980":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9404:5822":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4516:2842":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:1311:5396":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1045:3722":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5274:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3274:3238":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11406:6025":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1644:3852":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:9260:3101":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10435:5941":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12917:6306":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12712:6287":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:13283:40218":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:9943:61513":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:1256:3864":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:13957:3828":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:16015:2627":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1501:3855":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:48269:2767":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11118:47772":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:12500:4605":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:721:5805":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:812:5409":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:952:3858":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:13083:3338":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4727:1983":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10611:5954":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13685:6615":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4013:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10680:13333":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:23136:4290":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4255:4000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:169:54059":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:6463:3716":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3038:3312":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13760:6628":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:695:5423":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3370:1866":{"crate_id":1,"path":["std","io"],"kind":"module"},"9:1056:4793":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:9258:3103":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5407:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4506:5692":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13258:6481":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"0:579:2335":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError"],"kind":"enum"},"2:22533:3243":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5739:3667":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46628:4107":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:11424:4467":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:0:1330":{"crate_id":1,"path":["std"],"kind":"module"},"16:6101:5042":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:24870:4506":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:9631:54490":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:537:7407":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3686:2829":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:10924:3687":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:3647:2739":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46056:4287":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:53189:4332":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9245:5291":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:3091:5281":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22937:3709":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7681:3826":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10870:2835":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11809:6120":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"13:232:7373":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1729:3993":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8882:3470":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6100:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5985:4055":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3039:60169":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:6973:1501":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"1:8197:5540":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:3343:3945":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7936:54491":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:6605:5061":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8384:3925":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:5379:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:51250:7036":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1457:3863":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46758:4118":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1563:7487":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:668:5422":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:16003:2618":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:49663:3353":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9737:3974":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:2553:4673":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1215:4667":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:1236:5832":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11993:6152":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:11244:4463":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4183:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4358:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:1843:5510":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2912:5220":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12598:6266":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:1183:4863":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3201:1624":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11738:6096":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46995:2850":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11378:5293":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:3759:3468":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11254:5318":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:46500:4532":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1736:7598":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22801:4288":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7119:4978":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:51336:4309":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:23079:3687":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:51144:4304":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4023:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:3549:6708":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12671:6282":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:16027:2639":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:880:2891":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:50238:4542":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:6949:5263":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9770:5556":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"18:850:5412":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11336:5730":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:9067:3819":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:6701:8160":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7549:5055":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4262:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:2262:4670":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:5862:4046":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:15976:12349":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3416:4081":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:50404:4491":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9809:61512":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4304:2851":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:7333:5066":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:3102:3687":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:16008:2622":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6176:5093":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6366:4882":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:10306:2768":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10407:5329":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3774:4209":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7894:5083":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:47004:7017":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10489:5372":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5400:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:46789:4119":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5421:4936":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4410:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:1744:7602":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4066:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1442:2894":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:10304:2767":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10001:47817":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10599:5953":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:49733:3346":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13356:6505":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10458:5872":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5241:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4643:2807":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:52003:4339":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7158:5113":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4281:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:49983:4224":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47550:2894":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:632:7465":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10448:5362":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1136:3638":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5536:4642":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"12:1203:4864":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"14:231:2726":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:216:46117":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:8344:4632":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12199:3894":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:22561:59024":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4475:2845":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:11396:3352":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:23125:3687":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:603:8502":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5428:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:3329:3468":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:15354:3979":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9971:61519":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13154:6453":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11750:6097":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5282:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3745:4104":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:1497:3854":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5672:4950":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10938:6001":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:15987:56206":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:730:61525":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:45781:3471":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13942:6678":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1528:3859":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3103:2864":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12167:3892":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"12:1121:3862":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3515:2070":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47534:3468":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:8106:2849":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3395:3748":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10304:5332":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:3862:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:51543:4333":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:8106:2889":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:749:4735":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:1653:3853":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4272:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1602:7512":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4501:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11981:6150":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10558:5948":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:37648:3243":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:22931:3707":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6072:5065":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:15755:5568":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11337:5368":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:16029:2641":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:46688:4126":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:47663:3468":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"12:399:4868":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11665:6081":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6200:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:8250:2743":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:4643:5515":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5717:4953":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"9:41:4783":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11116:2822":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"14:47:5709":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:53451:7069":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46779:2823":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2163:2894":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:49776:3360":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6155:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6964:3099":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13582:6563":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46028:3637":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12507:6250":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:4920:4410":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12783:6297":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:3488:5231":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:51592:4318":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:299:5827":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5953:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6910:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:584:7439":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4215:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"12:895:4854":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:1079:3711":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6087:5044":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46470:4530":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:51639:4306":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:8203:2894":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:3868:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7295:5064":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10581:56204":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:3772:3469":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5522:4944":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:4599:5513":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:50020:4225":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:3375:4625":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:3939:5684":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3341:4624":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3580:2738":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6068:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13098:6447":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5972:4054":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:7667:3825":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:22748:4342":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:10805:3680":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:5833:3500":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:24118:6981":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46363:3360":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1527:7471":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"14:0:2597":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10061:5932":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5407:4935":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10117:5391":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46647:4109":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10128:5392":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1153:7085":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:23661:3708":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47542:3469":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:49891:4221":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3048:60170":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5346:5045":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:767:5814":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"15:269:4889":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5657:3692":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:12992:2747":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:9380:2741":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:3978:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:51375:4294":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4364:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:15475:7146":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:5164:2782":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:48839:7025":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6703:8162":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"14:56:5711":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:53416:7066":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:50351:7033":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3522:5837":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10673:3865":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3422:4084":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2843:5218":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7884:5054":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1432:3469":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10052:5931":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10864:5993":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11822:6124":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2777:4672":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46450:4375":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2794:4972":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"12:472:61506":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:3905:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:16020:2632":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:12079:8370":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:1522:7469":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6899:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:51313:4305":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11458:6043":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:3951:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4095:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6554:5103":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:4823:5701":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:5745:3670":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13318:6491":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11434:6029":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11767:6105":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5927:4964":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"0:434:1784":{"crate_id":0,"path":["base64","alphabet","STANDARD"],"kind":"constant"},"2:32345:59215":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:13655:3787":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2773:5244":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13963:6681":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9088:47768":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:2399:7092":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4419:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:10300:2765":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13465:6532":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:3338:4968":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:3044:60171":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11066:2849":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13912:6670":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13282:6486":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:53047:4328":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6812:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:374:4663":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3739:4105":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:4306:3469":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4387:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8902:47763":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"0:404:1737":{"crate_id":0,"path":["base64","engine","Config"],"kind":"trait"},"2:2291:4185":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:611:5418":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10420:5328":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3204:2815":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:5155:4418":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6561:3719":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4439:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:14239:2888":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13477:6533":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4517:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10962:6003":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3800:5683":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7633:3823":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11594:3799":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:32497:59216":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:4306:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6124:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4036:3850":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:52369:4311":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:8472:3162":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10377:5335":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4127:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:8263:3868":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4325:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12028:6156":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:6892:4127":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46558:7012":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:7653:3824":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"10:0:2594":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12431:6240":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6424:5100":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8414:4635":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"14:244:6873":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"14:189:5709":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:51355:7037":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:50167:3328":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:897:3904":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"9:692:4733":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10701:4676":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:50034:4226":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:13129:4217":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3576:2737":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:4745:2818":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12221:6188":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6591:5105":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:8446:2891":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9264:5910":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13377:6509":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:48800:7020":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:2066:3743":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:8849:5316":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3273:2101":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:51520:4330":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:46296:4370":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46325:4373":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10140:5346":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:24049:8288":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:5038:4412":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4478:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:12513:1339":{"crate_id":2,"path":["core","str"],"kind":"module"},"2:8163:58959":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"12:2032:3468":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:15413:3987":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:38805:2863":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5360:4933":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:16010:2624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:6935:8282":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:49627:3356":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:53462:7070":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:51718:4295":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3370:3741":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9839:5346":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12771:6021":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1597:3468":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"13:120:46083":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4736:54559":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13331:6497":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7467:5048":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10211:5938":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:5651:3690":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3362:3743":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5975:5088":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:7755:4130":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6780:5108":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:971:3859":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:8929:47764":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"0:582:2342":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","DuplicatedByte"],"kind":"variant"},"1:1476:2727":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:15392:3980":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:547:4955":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:11137:3469":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13446:6525":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12456:6244":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:16025:2637":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"9:927:45540":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:3565:2833":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3327:3940":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3383:4165":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9849:61516":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6864:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:49276:4472":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11779:6108":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3426:4086":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:6764:2807":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3379:4163":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"12:933:3856":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11430:4001":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:8298:4630":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:50395:4490":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13810:6640":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12343:6209":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9143:3095":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:543:7410":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1630:7531":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:4304:5686":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10071:5395":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:50171:3330":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"19:117:7325":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:5934:4049":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5580:4947":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4470:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:616:7455":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:157:40603":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46699:4113":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:3972:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4317:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9528:2824":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46350:4596":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8485:3888":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6214:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:928:3853":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3662:5539":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11714:6092":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6252:5096":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9598:5554":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10926:6000":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:9643:54492":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:3757:4169":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:1522:3858":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:52082:4327":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9719:5919":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:406:2124":{"crate_id":0,"path":["base64","engine","DecodeEstimate"],"kind":"trait"},"12:466:61505":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:53425:7067":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10236:5315":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10095:5389":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:15123:7143":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11015:6007":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13386:6510":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:24234:4520":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:50191:3335":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:525:7402":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11264:3784":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:10041:5930":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11520:3788":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:11410:3351":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:681:5831":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9296:5820":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:5964:4052":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:11317:3348":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:15217:3762":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:9918:660":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:3241:5227":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:11923:4481":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:7121:3090":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10788:5990":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11628:6075":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:6633:59769":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:2170:2891":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:6794:3704":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1760:7607":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6028:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:28051:4146":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4425:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:49417:3344":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2816:5237":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7804:5056":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3388:4073":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12699:6286":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:49368:4479":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:11082:2817":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:5790:4959":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7799:3834":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12610:6268":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10988:6005":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10149:5922":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47671:3469":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:3145:5233":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6085:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11350:3981":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"0:98:1624":{"crate_id":0,"path":["base64","read"],"kind":"module"},"1:12258:3772":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:46717:4114":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13520:6548":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:12734:3366":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6807:5109":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11045:47771":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46970:6966":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:8130:2727":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:46049:4286":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:46548:5531":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10543:5945":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:624:7460":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:13935:54488":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:2314:5336":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13506:6541":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:3882:2837":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:686:4731":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:4065:3635":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:5221:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:49751:3357":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10081:5344":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:5528:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:13278:5723":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"12:1784:5508":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12040:6158":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:6323:3999":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:6791:3702":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13772:6631":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8650:4008":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:16030:2642":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9933:5923":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12480:6247":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:15131:3838":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:2166:2727":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5753:4957":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:4890:5703":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"12:2280:3863":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46371:4590":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:7212:2727":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:51394:7038":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9649:5918":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11616:6074":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"0:299:1626":{"crate_id":0,"path":["base64","engine"],"kind":"module"},"2:4739:4194":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7146:5112":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:24010:6974":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:2268:4180":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:49197:4466":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12756:6294":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"0:580:1916":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","InvalidLength"],"kind":"variant"},"1:16009:2623":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:8146:60179":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:569:7430":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:783:5803":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2193:6959":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"12:353:7374":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:48255:2766":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7870:5053":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6644:5106":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7024:5266":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:16004:2619":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:15484:56205":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1717:7592":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11962:6145":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:53338:4335":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5386:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:3218:5226":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:3320:5282":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:16019:2631":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7195:5116":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:14571:8373":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11482:5711":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11475:3695":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12195:6185":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:53530:7074":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:8362:8286":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:11139:2826":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:49358:4478":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10456:5561":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6718:5255":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:599:7447":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:13816:59108":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:5377:3979":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8912:3482":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6569:5252":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"7:38:45436":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:23467:17526":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:7669:3268":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:49459:2826":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2754:4970":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:50175:3331":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8392:3798":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:49248:4469":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11176:3726":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:6166:5092":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:23868:4502":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"7:0:1480":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:52129:4331":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12494:6249":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:11113:3468":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6110:5085":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:51027:7034":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46768:4123":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12771:3368":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11681:3804":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13733:6616":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7619:3822":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:53436:7068":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3336:2732":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4852:5702":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10241:1983":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:3997:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:16006:2621":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4727:4193":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:24247:4519":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:0:2599":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:161:40604":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13119:6452":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1195:60198":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:10446:6969":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:47593:3100":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12095:6169":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:2412:7380":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:23767:3687":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4241:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7406:5050":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:843:3851":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7174:5114":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10431:5559":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:46108:4350":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4436:2843":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2991:5232":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10468:5371":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6176:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5359:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:51670:4310":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5185:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7642:2898":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:24182:39988":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12741:6290":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:114:61504":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:1235:4668":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:432:4867":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12373:6228":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"9:234:4758":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:3604:5841":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11001:6006":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1607:3469":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:16017:2629":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11555:6063":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3434:4090":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5130:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3405:3750":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3040:8284":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10028:5929":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12275:6196":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:9973:4449":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10844:5346":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10596:3923":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10887:5994":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:4515:4696":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:13919:3826":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"9:157:4750":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:12061:58331":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"16:2945:5243":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:4008:5835":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51231:4329":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9978:4450":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11186:6015":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"9:469:8492":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5292:7990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10477:5370":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9034:47766":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:2040:2727":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:51898:7041":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"12:2253:3861":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46600:4122":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46021:4170":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2192:3744":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6219:5095":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:3881:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4395:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4164:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11147:6013":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"9:776:4780":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11970:6147":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12010:6155":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"13:0:2590":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2175:3741":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:23939:4503":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46483:4531":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:24126:6982":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:9886:5922":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9186:5298":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:12183:3893":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5595:4948":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:5029:5707":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:5407:2729":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:1486:2891":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:46609:4125":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:48808:4274":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1658:7556":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8031:3925":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:14589:7142":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12307:6203":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1939:2891":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1596:7510":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7205:5117":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:14:1625":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4922:5704":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10912:5996":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13370:6507":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3287:5229":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11398:3725":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:49477:3348":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:14068:4212":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3400:3749":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5998:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1584:7502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:12238:3815":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:12794:3365":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:38868:3241":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11453:8147":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:51177:4337":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:11313:54593":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:10331:5346":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:886:5415":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:49956:4223":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12287:6197":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10403:5342":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:14959:5567":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:50195:3336":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11356:3982":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:53396:7064":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10657:12346":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6021:5217":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:0:2600":{"crate_id":17,"path":["object"],"kind":"module"},"17:13394:6512":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:14634:2817":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:16021:2633":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8412:3163":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4734:5698":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:5110:2780":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13221:6472":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:294:5826":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:16011:2625":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:49581:3351":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:53252:4297":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7185:5115":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9759:5920":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13348:6502":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4494:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1663:3854":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6239:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12632:6279":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7477:5069":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13746:6622":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:12253:3877":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:14809:3693":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48792:3869":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7259:7097":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8929:4028":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:4242:5510":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46679:4112":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7342:5080":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:49609:3355":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45988:4527":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2506:2316":{"crate_id":1,"path":["std","error"],"kind":"module"},"6:6870:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:12524:1777":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:4477:5691":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5978:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:48847:7026":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9689:61517":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12134:3890":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7736:3828":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"12:869:2727":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12738:3935":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:1635:3851":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46736:4116":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4401:3965":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9799:5921":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49349:4477":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:4782:4210":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7849:5529":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2733:4971":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11328:6021":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10317:5331":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:49257:4470":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46063:2780":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:1554:7482":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2462:7096":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:48133:4535":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:12000:3827":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5159:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:10302:2766":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:6510:4124":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12442:6242":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:699:3900":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13799:6639":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10571:5951":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5420:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6865:3697":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4523:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:53515:7073":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:23771:4178":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6357:5098":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:578:7436":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:51741:4298":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13240:6473":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13054:6416":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1547:7479":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2797:3632":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10975:6004":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:14953:5566":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11133:2824":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7257:5510":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5987:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:4215:2727":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8742:4018":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3839:5510":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11293:8367":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:10862:3958":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11361:3983":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:791:5407":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9600:61518":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:11410:4053":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:15202:3761":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3410:4078":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:8879:2730":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12118:6175":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22850:3687":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:15332:3732":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7042:5267":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10516:5373":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:5604:4275":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:49877:4218":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13898:6663":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11228:3730":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"18:152:54058":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:7824:5524":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3345:3946":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4300:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9471:5735":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:13564:7094":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9210:47770":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5563:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6636:5063":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6491:5101":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7216:5118":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6768:5259":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13620:6571":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11499:6048":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12298:3774":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4671:5696":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10663:3753":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4145:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:32397:59217":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6731:5256":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:12845:3362":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:49043:4609":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3740:2836":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:55964:4174":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:16023:2635":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:1492:3853":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"0:395:1788":{"crate_id":0,"path":["base64","engine","fast_portable","PAD"],"kind":"constant"},"6:4449:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:53405:7065":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:3966:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:396:2251":{"crate_id":0,"path":["base64","engine","fast_portable","NO_PAD"],"kind":"constant"},"6:1665:7560":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46394:4591":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:9332:5367":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:49839:4214":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"14:250:6875":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46388:3359":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:51766:4299":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4133:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10502:5943":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"15:230:4884":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:6203:3998":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:48262:2765":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"9:996:4799":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:4955:5705":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:15499:4893":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5996:5089":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:47679:2894":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:3346:4149":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:1618:2894":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:49429:2744":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11405:4050":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:6867:3698":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13884:6661":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:940:3857":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:713:3243":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1674:3855":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4511:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9865:5558":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:8362:4143":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:3894:4636":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3716:4528":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"9:722:4734":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:49297:4474":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:15020:3829":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13978:6682":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6005:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:6863:3683":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5231:5708":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7290:7097":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:24090:4396":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6391:5099":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:11189:3727":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:1091:5510":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:3264:5228":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3309:3161":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:3041:5223":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7264:5062":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:13072:3340":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:32337:4545":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:10948:3847":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:2072:3744":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:610:7452":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:2200:5512":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11082:5299":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7226:5119":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:49266:4471":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:0:2595":{"crate_id":11,"path":["adler"],"kind":"module"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10812:3937":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"0:436:2361":{"crate_id":0,"path":["base64","alphabet","CRYPT"],"kind":"constant"},"5:8121:4708":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:22927:3687":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:14576:3680":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:897:5416":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4112:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5766:4958":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11502:3091":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"0:397:1738":{"crate_id":0,"path":["base64","engine","Engine"],"kind":"trait"},"17:13272:6485":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:45809:4282":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:57696:7084":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:14805:5726":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11424:3981":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:50225:3777":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:50199:3337":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5330:5911":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6032:4977":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:9259:3102":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10569:3687":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12685:6283":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:651:5417":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7843:5125":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:3918:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5548:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46340:4595":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:32331:2886":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12982:6357":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"12:2404:61503":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:11355:4465":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6126:5091":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10814:5289":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6577:5104":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2159:3468":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11416:3992":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13865:6656":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:2543:5369":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:591:7442":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12128:2894":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1655:3864":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:22578:59044":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13163:6457":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:14822:3831":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:50055:4228":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46424:4593":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11358:5294":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:46281:3359":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:53592:7076":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4073:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1694:4665":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"0:435:2357":{"crate_id":0,"path":["base64","alphabet","URL_SAFE"],"kind":"constant"},"17:11100:5323":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:764:3469":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:670:40935":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:14242:2841":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:3018:5222":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11246:3731":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:3951:2891":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3430:4088":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6744:5257":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:13892:6972":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6636:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:755:61527":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:6437:4110":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5945:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:13063:2741":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12155:6180":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13547:6555":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1617:7524":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:5736:4954":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:2269:3862":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:0:2601":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:10370:5831":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:13053:2752":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10795:3718":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4052:7722":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:3945:7674":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:52435:4296":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5779:3671":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12552:6259":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1646:3863":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:51208:4325":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"12:1238:4865":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4431:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2598:5727":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:4371:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5167:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3367:2733":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:432:2742":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2460:7095":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:8954:5300":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:867:5414":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4040:7717":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5197:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10570:3901":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2889:5238":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13532:6551":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8977:3843":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13819:6642":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4293:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"12:1703:4877":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:3336:3742":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3351:4151":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2865:3498":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3198:3936":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12568:6260":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:3439:4093":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"0:409:1627":{"crate_id":0,"path":["base64","alphabet"],"kind":"module"},"12:162:4866":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:49039:4610":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10279:5344":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:49435:3345":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5731:3669":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46656:7013":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:3392:5235":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:47602:3001":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:1533:7474":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:750:3468":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11588:6070":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:10312:2770":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4438:2844":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:14566:8371":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:4448:5690":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:11205:3362":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:438:2368":{"crate_id":0,"path":["base64","alphabet","IMAP_MUTF7"],"kind":"constant"},"0:588:2339":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","ReservedByte"],"kind":"variant"},"2:32296:2885":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:14551:3705":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:13782:3836":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:705:5803":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7514:5067":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9775:5557":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:13418:3994":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7378:5051":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:15033:3830":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5312:8006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:1637:3862":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"0:169:1625":{"crate_id":0,"path":["base64","write"],"kind":"module"},"6:6221:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:379:4869":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1486:3864":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:7927:4168":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13574:6562":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13609:6570":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9065:47767":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:1666:4875":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7073:5111":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4331:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5505:4943":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6887:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11277:6018":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10950:6002":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3341:3751":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:1463:3852":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4459:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7856:5126":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:745:61526":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6269:5097":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5314:5910":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3429:4973":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47559:3099":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:49713:2827":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"9:1075:4801":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:14236:2843":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"0:73:1847":{"crate_id":0,"path":["base64","display","Base64Display"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"9:1020:4800":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:3743:5286":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3355:3951":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:1908:41906":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6464:5059":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5488:4942":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:2310:4716":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4193:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12645:6280":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:4443:3468":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:49509:3350":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:4704:5697":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2282:4184":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:4157:5303":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3371:3776":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:5415:2807":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:4884:4409":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9005:47765":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:51922:7042":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:13962:59110":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:51073:4336":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7928:4286":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2507:4211":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11640:6078":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:50045:4227":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2396:2887":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:22601:59045":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6086:3989":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:24666:3928":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3772:5682":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:8886:4167":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13788:6635":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:3892:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5707:4951":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:11094:2819":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:5100:4417":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9440:5823":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:3363:4157":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10253:5334":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:6963:3682":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6238:5049":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13192:6464":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5433:4937":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11026:6008":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:5793:3673":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13488:6537":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11199:6017":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:15230:3767":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12247:6192":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3558:4281":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:51048:7035":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:7796:3832":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:2484:47855":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:1472:3862":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"0:564:2160":{"crate_id":0,"path":["base64","alphabet","Alphabet"],"kind":"struct"},"2:5184:2784":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12120:3887":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"12:1103:3861":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:14644:58532":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:49336:4476":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12248:3876":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:50183:3333":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6136:5086":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12223:4014":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:14103:5564":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10801:5992":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:49378:4480":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:24144:39987":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:5889:5522":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:49445:2824":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:5723:3668":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:22546:59024":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:3504:2828":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:4230:5685":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:16005:2620":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:194:46111":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:52400:4314":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5414:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5371:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7571:5043":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:50436:3634":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"0:408:1853":{"crate_id":0,"path":["base64","engine","DEFAULT_ENGINE"],"kind":"constant"},"17:13172:6458":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:923:4706":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:5456:4938":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13564:6559":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12234:6190":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10353:5337":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6954:4617":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10200:5937":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46417:4592":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3286:2786":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9961:5924":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5815:4960":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46618:4106":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3375:4161":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13453:6526":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:23462:4291":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:49742:3361":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4083:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6893:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:9551:5317":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:52243:4319":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46309:4371":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:9064:4015":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:25240:4377":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11146:2827":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10179:5936":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:11162:2826":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:23134:4293":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:51866:7040":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13986:6685":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1194:12348":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:3357:4154":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:53377:4300":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:994:4707":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"12:2045:2891":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:5295:46188":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:6699:8158":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:52793:4340":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:14030:3827":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9769:61515":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5347:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:12057:8369":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:2187:3743":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11539:6059":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9729:61511":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:5855:4961":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:8463:2892":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47015:6967":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7303:5122":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7111:5524":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:7236:5120":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:9347:3706":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:50448:3633":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:23086:17507":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:4762:5699":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:14317:3484":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12946:6326":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4347:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:8379:2723":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10381:5736":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13296:6487":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7279:5268":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7823:5058":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3329:3941":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4417:5689":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7420:5068":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:15093:3772":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9368:5821":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:607:5830":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:4050:3636":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:10706:2822":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:2915:415":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2:52936:4308":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13924:6672":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12208:6187":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:16024:2636":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:5012:3723":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"15:0:2598":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:8330:4631":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:821:5410":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4046:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12725:6288":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:24166:39979":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7857:4100":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:5033:4411":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4401:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4060:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:57675:7083":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:8179:3844":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11847:6128":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:2398:7378":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:4790:5700":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10958:1918":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46727:4115":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"14:11:5709":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8643:4006":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6208:5094":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3811:4208":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"9:963:4798":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12034:3830":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9722:3973":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:12182:6184":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13933:6676":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7453:5047":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"0:437:2364":{"crate_id":0,"path":["base64","alphabet","BCRYPT"],"kind":"constant"},"12:856:3852":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11726:6095":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:46670:4111":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13540:6554":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1505:3856":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11604:6071":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11282:4464":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:4752:2821":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:46578:4121":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:49323:4475":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:49527:3349":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:637:5803":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:14239:2845":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:3506:5230":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4377:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13598:6566":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4477:2846":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:14078:4492":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:5583:12350":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6999:5110":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:14937:5565":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:5504:3987":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:775:5803":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9133:47769":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:645:5420":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11126:2823":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49681:3354":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1623:3861":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7392:5052":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"9:900:7383":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:51442:4338":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7761:5124":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"12:1162:4862":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:3365:4969":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"12:2392:7377":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:6475:2727":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6014:5090":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"0:52:1623":{"crate_id":0,"path":["base64","display"],"kind":"module"},"2:46410:3358":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:4377:2894":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:52160:4334":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12659:6281":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5273:4975":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:46638:4108":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:661:5421":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:2052:3741":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46977:3482":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:88:40537":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:16028:2640":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:5384:4934":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6051:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:8138:4709":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1540:7477":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:8313:4531":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:439:2372":{"crate_id":0,"path":["base64","alphabet","BIN_HEX"],"kind":"constant"},"17:11159:6014":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:542:4981":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6689:3670":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10266:5333":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:49723:3347":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:5:1501":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:48616:2764":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:6881:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:9638:5555":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:4614:5694":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:802:5408":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6858:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:51121:4316":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7786:5057":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4386:5688":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1723:7595":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11571:3798":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4670:1867":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:12810:3367":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3652:2834":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13205:6469":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"7:85:45443":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:830:5411":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46986:7016":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11696:6091":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:49286:4473":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:27:4782":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:1682:4876":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:53500:7072":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11572:6065":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"15:248:4885":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:2755:3631":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11611:3800":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1700:7585":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:49563:3352":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:2512:5330":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12243:4020":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13402:6514":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:12112:3468":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:823:5558":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:12740:5563":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:15046:58534":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:3957:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6413:4881":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5228:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"0:0:1639":{"crate_id":0,"path":["base64"],"kind":"module"},"2:48829:3798":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9896:61514":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:52586:4320":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11653:6080":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11932:6136":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:46287:7004":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:10953:3848":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11664:3468":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6682:5060":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2181:3742":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1011:3468":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:16012:2626":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:8391:2724":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:4964:2779":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:10574:3747":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10106:5390":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12262:6195":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:903:3905":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13180:6459":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"9:0:2593":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:3064:5280":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14000:6688":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:46799:4120":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:16016:2628":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:12769:7131":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:11794:6114":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:4995:5706":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5469:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:12154:3891":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:49758:3358":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:11438:4468":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:22580:59042":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:49908:4222":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6923:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46587:2822":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10800:3935":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"12:1147:3863":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7453:5510":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:49862:4215":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:1676:7568":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10878:2837":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"9:809:3798":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2437:7094":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9659:61520":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5801:3675":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5522:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11073:1740":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13429:6518":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12327:6204":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12582:6262":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11449:3703":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:15971:8510":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:24103:4397":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:15054:3773":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10635:5956":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2062:2807":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:8136:3925":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:511:7394":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:8160:2894":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:5789:3672":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:858:5413":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4641:5695":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:6441:3704":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10160:5935":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:51818:7039":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2968:5221":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6941:3696":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:16022:2634":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:12401:7095":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:53126:4312":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6691:5107":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:49402:2745":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:24219:4560":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22837:4277":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:51282:4317":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4535:5693":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:510:5828":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:4669:2807":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:1021:3925":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"0:556:1787":{"crate_id":0,"path":["base64","engine","fast_portable","FastPortableConfig"],"kind":"struct"},"8:0:2592":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3079:482":{"crate_id":2,"path":["core","convert"],"kind":"module"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4404:3966":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5459:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:979:3860":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9280:5911":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12537:6255":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:3195:5225":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:605:7450":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8492:3889":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6106:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:32693:4267":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5269:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"0:362:1786":{"crate_id":0,"path":["base64","engine","fast_portable","FastPortable"],"kind":"struct"},"1:8293:3925":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:13078:3339":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11204:3729":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:4227:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:50187:3334":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:48276:2768":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:69:2890":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10697:5726":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6614:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:23673:59027":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:1161:12347":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3296:3240":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:11670:3803":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:8197:2894":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2866:5219":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13062:6418":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10224:5939":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:4699:5515":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:1708:7586":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:15073:8375":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:0:2596":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:46748:4117":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:838:3340":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:51489:4326":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10591:3909":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:15236:3768":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12467:6245":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6091:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7250:5121":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:1690:7579":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:6688:4643":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5969:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12278:3773":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:5210:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11519:6058":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9162:5319":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:51096:4324":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13306:6488":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:53477:7071":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:8176:4622":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:2218:4627":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11304:47773":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:8115:2894":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:15186:3760":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9476:5824":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:49767:3359":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:1441:3861":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:15510:4893":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"0:310:1785":{"crate_id":0,"path":["base64","engine","fast_portable"],"kind":"module"},"2:47525:3261":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1419:3468":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:5788:5510":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:46:7382":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12168:5963":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:12049:3831":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9574:5322":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46431:4594":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:2036:2894":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11915:6130":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11835:6125":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4005:7702":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1622:7526":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:4688:2816":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:5875:5519":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:7379:2894":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5561:4946":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"12:787:3854":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6152:5046":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:786:5558":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:183:4870":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12142:6177":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22599:59047":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:1511:3857":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7979:5540":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:3396:3744":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12385:6230":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6518:5102":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:6644:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5956:4051":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13497:6540":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:10642:12344":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9178:7098":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:10579:4273":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:531:7405":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11678:6082":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13041:6409":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10623:5955":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11231:5320":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7931:3924":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:6620:5250":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10656:5958":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3488:2891":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:3172:5224":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"12:777:2894":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4203:7776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8366:4142":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:53553:7075":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12019:3829":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12408:6239":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:11956:4482":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10827:5290":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10673:47955":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5191:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10529:5944":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13590:6565":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12795:6304":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12051:6159":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11654:3801":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:621:5802":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:24065:6976":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:50179:3332":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:3990:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4033:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:136:54057":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3970:5510":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:13583:54493":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22990:4290":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:3118:5234":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3714:5681":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:4350:5687":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:5029:2781":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4611:2850":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"4:0:2591":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5960:4966":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5472:4941":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13627:6573":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:52322:4307":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:6672:4642":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4341:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:2330:4669":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:2059:3742":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5632:4949":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:16018:2630":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8843:7098":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10614:3484":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:4514:2841":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:12056:5537":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13780:6634":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10822:3681":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"11:54:4852":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:12072:54588":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:53299:4315":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7620:2897":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:1450:3851":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:16026:2638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:2401:7093":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:4398:3964":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13637:6578":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:740:5809":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:51693:4313":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6852:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11947:6140":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12521:6253":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:519:7399":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6185:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:22874:4343":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"12:2419:2743":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8694:4009":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5255:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"0:585:2338":{"crate_id":0,"path":["base64","alphabet","ParseAlphabetError","UnprintableByte"],"kind":"variant"},"1:11152:3725":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:6257:2897":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:563:7427":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13842:6655":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:10310:2769":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:815:3855":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:14602:3937":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:5837:3501":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1156:7087":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:5207:2783":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:24032:4401":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7738:5123":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:50068:7028":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:13554:6556":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4120:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1572:7493":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10584:5302":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:5436:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:24212:8291":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4101:7749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46708:4128":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12073:6168":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:1534:3860":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:32156:4555":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"}},"external_crates":{"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"}},"format_version":16}