{"root":"0:0:3224","crate_version":"0.1.40","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[422,0],"end":[1373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:164:1249","0:167:4223","0:170:3356","0:175:3192","0:176:1289","0:177:3509","0:180:3864","0:181:4390","0:182:4443","0:185:4470","0:188:833","0:191:4477","0:193:3220","0:196:3359","0:197:4444","0:198:4518","0:199:4553","0:201:4181","0:202:3165","0:203:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:120:3886":{"id":"0:120:3886","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[361,4],"end":[373,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:366:710":{"id":"0:366:710","crate_id":0,"name":"drop","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:133:3883":{"id":"0:133:3883","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:326:3797":{"id":"b:2:2863-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2865:29831"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3188:150":{"id":"2:3188:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1392,0],"end":[1423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:213:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:266:3651":{"id":"0:266:3651","crate_id":0,"name":"set_global_default","span":{"filename":"src/subscriber.rs","begin":[39,0],"end":[44,1]},"visibility":"public","docs":"Sets this subscriber as the global default for the duration of the entire program.\nWill be used as a fallback if no thread-local subscriber has been set in a thread (using `with_default`.)\n\nCan only be set once; subsequent attempts to set the global default will fail.\nReturns whether the initialization was successful.\n\nNote: Libraries should *NOT* call `set_global_default()`! That will cause conflicts when\nexecutables try to set them later.\n\n[span]: super::span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"2:46078:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetGlobalDefaultError","id":"20:163:3652","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3160","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3189:1925":{"id":"2:3189:1925","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3181:878":{"id":"2:3181:878","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:326:3797":{"id":"b:2:2918-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2920:29832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:3224":{"id":"0:0:3224","crate_id":0,"name":"tracing","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1125,1]},"visibility":"public","docs":" A scoped, structured logging and diagnostics system.\n\n # Overview\n\n `tracing` is a framework for instrumenting Rust programs to collect\n structured, event-based diagnostic information.\n\n In asynchronous systems like Tokio, interpreting traditional log messages can\n often be quite challenging. Since individual tasks are multiplexed on the same\n thread, associated events and log lines are intermixed making it difficult to\n trace the logic flow. `tracing` expands upon logging-style diagnostics by\n allowing libraries and applications to record structured events with additional\n information about *temporality* and *causality* â€” unlike a log message, a span\n in `tracing` has a beginning and end time, may be entered and exited by the\n flow of execution, and may exist within a nested tree of similar spans. In\n addition, `tracing` spans are *structured*, with the ability to record typed\n data as well as textual messages.\n\n The `tracing` crate provides the APIs necessary for instrumenting libraries\n and applications to emit trace data.\n\n *Compiler support: [requires `rustc` 1.56+][msrv]*\n\n [msrv]: #supported-rust-versions\n # Core Concepts\n\n The core of `tracing`'s API is composed of _spans_, _events_ and\n _subscribers_. We'll cover these in turn.\n\n ## Spans\n\n To record the flow of execution through a program, `tracing` introduces the\n concept of [spans]. Unlike a log line that represents a _moment in\n time_, a span represents a _period of time_ with a beginning and an end. When a\n program begins executing in a context or performing a unit of work, it\n _enters_ that context's span, and when it stops executing in that context,\n it _exits_ the span. The span in which a thread is currently executing is\n referred to as that thread's _current_ span.\n\n For example:\n ```\n use tracing::{span, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my_span\");\n // `enter` returns a RAII guard which, when dropped, exits the span. this\n // indicates that we are in the span for the current lexical scope.\n let _enter = span.enter();\n // perform some work in the context of `my_span`...\n # }\n```\n\n The [`span` module][span]'s documentation provides further details on how to\n use spans.\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n\n  **Warning**: In asynchronous code that uses async/await syntax,\n  `Span::enter` may produce incorrect traces if the returned drop\n  guard is held across an await point. See\n  [the method documentation][Span#in-asynchronous-code] for details.\n\n </pre></div>\n\n ## Events\n\n An [`Event`] represents a _moment_ in time. It signifies something that\n happened while a trace was being recorded. `Event`s are comparable to the log\n records emitted by unstructured logging code, but unlike a typical log line,\n an `Event` may occur within the context of a span.\n\n For example:\n ```\n use tracing::{event, span, Level};\n\n # fn main() {\n // records an event outside of any span context:\n event!(Level::INFO, \"something happened\");\n\n let span = span!(Level::INFO, \"my_span\");\n let _guard = span.enter();\n\n // records an event within \"my_span\".\n event!(Level::DEBUG, \"something happened inside my_span\");\n # }\n```\n\n In general, events should be used to represent points in time _within_ a\n span â€” a request returned with a given status code, _n_ new items were\n taken from a queue, and so on.\n\n The [`Event` struct][`Event`] documentation provides further details on using\n events.\n\n ## Subscribers\n\n As `Span`s and `Event`s occur, they are recorded or aggregated by\n implementations of the [`Subscriber`] trait. `Subscriber`s are notified\n when an `Event` takes place and when a `Span` is entered or exited. These\n notifications are represented by the following `Subscriber` trait methods:\n\n + [`event`][Subscriber::event], called when an `Event` takes place,\n + [`enter`], called when execution enters a `Span`,\n + [`exit`], called when execution exits a `Span`\n\n In addition, subscribers may implement the [`enabled`] function to _filter_\n the notifications they receive based on [metadata] describing each `Span`\n or `Event`. If a call to `Subscriber::enabled` returns `false` for a given\n set of metadata, that `Subscriber` will *not* be notified about the\n corresponding `Span` or `Event`. For performance reasons, if no currently\n active subscribers express interest in a given set of metadata by returning\n `true`, then the corresponding `Span` or `Event` will never be constructed.\n\n # Usage\n\n First, add this to your `Cargo.toml`:\n\n ```toml\n [dependencies]\n tracing = \"0.1\"\n ```\n\n ## Recording Spans and Events\n\n Spans and events are recorded using macros.\n\n ### Spans\n\n The [`span!`] macro expands to a [`Span` struct][`Span`] which is used to\n record a span. The [`Span::enter`] method on that struct records that the\n span has been entered, and returns a [RAII] guard object, which will exit\n the span when dropped.\n\n For example:\n\n ```rust\n use tracing::{span, Level};\n # fn main() {\n // Construct a new span named \"my span\" with trace log level.\n let span = span!(Level::TRACE, \"my span\");\n\n // Enter the span, returning a guard object.\n let _enter = span.enter();\n\n // Any trace events that occur before the guard is dropped will occur\n // within the span.\n\n // Dropping the guard will exit the span.\n # }\n ```\n\n The [`#[instrument]`][instrument] attribute provides an easy way to\n add `tracing` spans to functions. A function annotated with `#[instrument]`\n will create and enter a span with that function's name every time the\n function is called, with arguments to that function will be recorded as\n fields using `fmt::Debug`.\n\n For example:\n ```ignore\n # // this doctest is ignored because we don't have a way to say\n # // that it should only be run with cfg(feature = \"attributes\")\n use tracing::{Level, event, instrument};\n\n #[instrument]\n pub fn my_function(my_arg: usize) {\n     // This event will be recorded inside a span named `my_function` with the\n     // field `my_arg`.\n     event!(Level::INFO, \"inside my_function!\");\n     // ...\n }\n # fn main() {}\n ```\n\n For functions which don't have built-in tracing support and can't have\n the `#[instrument]` attribute applied (such as from an external crate),\n the [`Span` struct][`Span`] has a [`in_scope()` method][`in_scope`]\n which can be used to easily wrap synchonous code in a span.\n\n For example:\n ```rust\n use tracing::info_span;\n\n # fn doc() -> Result<(), ()> {\n # mod serde_json {\n #    pub(crate) fn from_slice(buf: &[u8]) -> Result<(), ()> { Ok(()) }\n # }\n # let buf: [u8; 0] = [];\n let json = info_span!(\"json.parse\").in_scope(|| serde_json::from_slice(&buf))?;\n # let _ = json; // suppress unused variable warning\n # Ok(())\n # }\n ```\n\n You can find more examples showing how to use this crate [here][examples].\n\n [RAII]: https://github.com/rust-unofficial/patterns/blob/main/src/patterns/behavioural/RAII.md\n [examples]: https://github.com/tokio-rs/tracing/tree/master/examples\n\n ### Events\n\n [`Event`]s are recorded using the [`event!`] macro:\n\n ```rust\n # fn main() {\n use tracing::{event, Level};\n event!(Level::INFO, \"something has happened!\");\n # }\n ```\n\n ## Using the Macros\n\n The [`span!`] and [`event!`] macros as well as the `#[instrument]` attribute\n use fairly similar syntax, with some exceptions.\n\n ### Configuring Attributes\n\n Both macros require a [`Level`] specifying the verbosity of the span or\n event. Optionally, the, [target] and [parent span] may be overridden. If the\n target and parent span are not overridden, they will default to the\n module path where the macro was invoked and the current span (as determined\n by the subscriber), respectively.\n\n For example:\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(target: \"app_spans\", Level::TRACE, \"my span\");\n event!(target: \"app_events\", Level::INFO, \"something has happened!\");\n # }\n ```\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my span\");\n event!(parent: &span, Level::INFO, \"something has happened!\");\n # }\n ```\n\n The span macros also take a string literal after the level, to set the name\n of the span (as above).  In the case of the event macros, the name of the event can\n be overridden (the default is `event file:line`) using the `name:` specifier.\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(Level::TRACE, \"my span\");\n event!(name: \"some_info\", Level::INFO, \"something has happened!\");\n # }\n ```\n\n ### Recording Fields\n\n Structured fields on spans and events are specified using the syntax\n `field_name = field_value`. Fields are separated by commas.\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n // records an event with two fields:\n //  - \"answer\", with the value 42\n //  - \"question\", with the value \"life, the universe and everything\"\n event!(Level::INFO, answer = 42, question = \"life, the universe, and everything\");\n # }\n ```\n\n As shorthand, local variables may be used as field values without an\n assignment, similar to [struct initializers]. For example:\n\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n\n span!(Level::TRACE, \"login\", user);\n // is equivalent to:\n span!(Level::TRACE, \"login\", user = user);\n # }\n```\n\n Field names can include dots, but should not be terminated by them:\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n let email = \"ferris@rust-lang.org\";\n span!(Level::TRACE, \"login\", user, user.email = email);\n # }\n```\n\n Since field names can include dots, fields on local structs can be used\n using the local variable shorthand:\n ```\n # use tracing::{span, Level};\n # fn main() {\n # struct User {\n #    name: &'static str,\n #    email: &'static str,\n # }\n let user = User {\n     name: \"ferris\",\n     email: \"ferris@rust-lang.org\",\n };\n // the span will have the fields `user.name = \"ferris\"` and\n // `user.email = \"ferris@rust-lang.org\"`.\n span!(Level::TRACE, \"login\", user.name, user.email);\n # }\n```\n\n Fields with names that are not Rust identifiers, or with names that are Rust reserved words,\n may be created using quoted string literals. However, this may not be used with the local\n variable shorthand.\n ```\n # use tracing::{span, Level};\n # fn main() {\n // records an event with fields whose names are not Rust identifiers\n //  - \"guid:x-request-id\", containing a `:`, with the value \"abcdef\"\n //  - \"type\", which is a reserved word, with the value \"request\"\n span!(Level::TRACE, \"api\", \"guid:x-request-id\" = \"abcdef\", \"type\" = \"request\");\n # }\n```\n\n Constant expressions can also be used as field names. Constants\n must be enclosed in curly braces (`{}`) to indicate that the *value*\n of the constant is to be used as the field name, rather than the\n constant's name. For example:\n ```\n # use tracing::{span, Level};\n # fn main() {\n const RESOURCE_NAME: &str = \"foo\";\n // this span will have the field `foo = \"some_id\"`\n span!(Level::TRACE, \"get\", { RESOURCE_NAME } = \"some_id\");\n # }\n```\n\n The `?` sigil is shorthand that specifies a field should be recorded using\n its [`fmt::Debug`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n #[derive(Debug)]\n struct MyStruct {\n     field: &'static str,\n }\n\n let my_struct = MyStruct {\n     field: \"Hello world!\"\n };\n\n // `my_struct` will be recorded using its `fmt::Debug` implementation.\n event!(Level::TRACE, greeting = ?my_struct);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::debug(&my_struct));\n # }\n ```\n\n The `%` sigil operates similarly, but indicates that the value should be\n recorded using its [`fmt::Display`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, greeting = %my_struct.field);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::display(&my_struct.field));\n # }\n ```\n\n The `%` and `?` sigils may also be used with local variable shorthand:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, %my_struct.field);\n # }\n ```\n\n Additionally, a span may declare fields with the special value [`Empty`],\n which indicates that that the value for that field does not currently exist\n but may be recorded later. For example:\n\n ```\n use tracing::{trace_span, field};\n\n // Create a span with two fields: `greeting`, with the value \"hello world\", and\n // `parting`, without a value.\n let span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n // ...\n\n // Now, record a value for parting as well.\n span.record(\"parting\", &\"goodbye world!\");\n ```\n\n Finally, events may also include human-readable messages, in the form of a\n [format string][fmt] and (optional) arguments, **after** the event's\n key-value fields. If a format string and arguments are provided,\n they will implicitly create a new field named `message` whose value is the\n provided set of format arguments.\n\n For example:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n let question = \"the ultimate question of life, the universe, and everything\";\n let answer = 42;\n // records an event with the following fields:\n // - `question.answer` with the value 42,\n // - `question.tricky` with the value `true`,\n // - \"message\", with the value \"the answer to the ultimate question of life, the\n //    universe, and everything is 42.\"\n event!(\n     Level::DEBUG,\n     question.answer = answer,\n     question.tricky = true,\n     \"the answer to {} is {}.\", question, answer\n );\n # }\n ```\n\n Specifying a formatted message in this manner does not allocate by default.\n\n [struct initializers]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\n [target]: Metadata::target\n [parent span]: span::Attributes::parent\n [determined contextually]: span::Attributes::is_contextual\n [`fmt::Debug`]: std::fmt::Debug\n [`fmt::Display`]: std::fmt::Display\n [fmt]: std::fmt#usage\n [`Empty`]: field::Empty\n\n ### Shorthand Macros\n\n `tracing` also offers a number of macros with preset verbosity levels.\n The [`trace!`], [`debug!`], [`info!`], [`warn!`], and [`error!`] behave\n similarly to the [`event!`] macro, but with the [`Level`] argument already\n specified, while the corresponding [`trace_span!`], [`debug_span!`],\n [`info_span!`], [`warn_span!`], and [`error_span!`] macros are the same,\n but for the [`span!`] macro.\n\n These are intended both as a shorthand, and for compatibility with the [`log`]\n crate (see the next section).\n\n [`span!`]: span!\n [`event!`]: event!\n [`trace!`]: trace!\n [`debug!`]: debug!\n [`info!`]: info!\n [`warn!`]: warn!\n [`error!`]: error!\n [`trace_span!`]: trace_span!\n [`debug_span!`]: debug_span!\n [`info_span!`]: info_span!\n [`warn_span!`]: warn_span!\n [`error_span!`]: error_span!\n\n ### For `log` Users\n\n Users of the [`log`] crate should note that `tracing` exposes a set of\n macros for creating `Event`s (`trace!`, `debug!`, `info!`, `warn!`, and\n `error!`) which may be invoked with the same syntax as the similarly-named\n macros from the `log` crate. Often, the process of converting a project to\n use `tracing` can begin with a simple drop-in replacement.\n\n Let's consider the `log` crate's yak-shaving example:\n\n ```rust,ignore\n use std::{error::Error, io};\n use tracing::{debug, error, info, span, warn, Level};\n\n // the `#[tracing::instrument]` attribute creates and enters a span\n // every time the instrumented function is called. The span is named after the\n // the function or method. Parameters passed to the function are recorded as fields.\n #[tracing::instrument]\n pub fn shave(yak: usize) -> Result<(), Box<dyn Error + 'static>> {\n     // this creates an event at the DEBUG level with two fields:\n     // - `excitement`, with the key \"excitement\" and the value \"yay!\"\n     // - `message`, with the key \"message\" and the value \"hello! I'm gonna shave a yak.\"\n     //\n     // unlike other fields, `message`'s shorthand initialization is just the string itself.\n     debug!(excitement = \"yay!\", \"hello! I'm gonna shave a yak.\");\n     if yak == 3 {\n         warn!(\"could not locate yak!\");\n         // note that this is intended to demonstrate `tracing`'s features, not idiomatic\n         // error handling! in a library or application, you should consider returning\n         // a dedicated `YakError`. libraries like snafu or thiserror make this easy.\n         return Err(io::Error::new(io::ErrorKind::Other, \"shaving yak failed!\").into());\n     } else {\n         debug!(\"yak shaved successfully\");\n     }\n     Ok(())\n }\n\n pub fn shave_all(yaks: usize) -> usize {\n     // Constructs a new span named \"shaving_yaks\" at the TRACE level,\n     // and a field whose key is \"yaks\". This is equivalent to writing:\n     //\n     // let span = span!(Level::TRACE, \"shaving_yaks\", yaks = yaks);\n     //\n     // local variables (`yaks`) can be used as field values\n     // without an assignment, similar to struct initializers.\n     let _span = span!(Level::TRACE, \"shaving_yaks\", yaks).entered();\n\n     info!(\"shaving yaks\");\n\n     let mut yaks_shaved = 0;\n     for yak in 1..=yaks {\n         let res = shave(yak);\n         debug!(yak, shaved = res.is_ok());\n\n         if let Err(ref error) = res {\n             // Like spans, events can also use the field initialization shorthand.\n             // In this instance, `yak` is the field being initalized.\n             error!(yak, error = error.as_ref(), \"failed to shave yak!\");\n         } else {\n             yaks_shaved += 1;\n         }\n         debug!(yaks_shaved);\n     }\n\n     yaks_shaved\n }\n ```\n\n ## In libraries\n\n Libraries should link only to the `tracing` crate, and use the provided\n macros to record whatever information will be useful to downstream\n consumers.\n\n ## In executables\n\n In order to record trace events, executables have to use a `Subscriber`\n implementation compatible with `tracing`. A `Subscriber` implements a\n way of collecting trace data, such as by logging it to standard output.\n\n This library does not contain any `Subscriber` implementations; these are\n provided by [other crates](#related-crates).\n\n The simplest way to use a subscriber is to call the [`set_global_default`]\n function:\n\n ```\n extern crate tracing;\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n tracing::subscriber::set_global_default(my_subscriber)\n     .expect(\"setting tracing default failed\");\n # }\n ```\n\n <pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In general, libraries should <em>not</em> call\n     <code>set_global_default()</code>! Doing so will cause conflicts when\n     executables that depend on the library try to set the default later.\n </pre>\n\n This subscriber will be used as the default in all threads for the\n remainder of the duration of the program, similar to setting the logger\n in the `log` crate.\n\n In addition, the default subscriber can be set through using the\n [`with_default`] function. This follows the `tokio` pattern of using\n closures to represent executing code in a context that is exited at the end\n of the closure. For example:\n\n ```rust\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n # #[cfg(feature = \"std\")]\n tracing::subscriber::with_default(my_subscriber, || {\n     // Any trace events generated in this closure or by functions it calls\n     // will be collected by `my_subscriber`.\n })\n # }\n ```\n\n This approach allows trace data to be collected by multiple subscribers\n within different contexts in the program. Note that the override only applies to the\n currently executing thread; other threads will not see the change from with_default.\n\n Any trace events generated outside the context of a subscriber will not be collected.\n\n Once a subscriber has been set, instrumentation points may be added to the\n executable using the `tracing` crate's macros.\n\n ## `log` Compatibility\n\n The [`log`] crate provides a simple, lightweight logging facade for Rust.\n While `tracing` builds upon `log`'s foundation with richer structured\n diagnostic data, `log`'s simplicity and ubiquity make it the \"lowest common\n denominator\" for text-based logging in Rust â€” a vast majority of Rust\n libraries and applications either emit or consume `log` records. Therefore,\n `tracing` provides multiple forms of interoperability with `log`: `tracing`\n instrumentation can emit `log` records, and a compatibility layer enables\n `tracing` [`Subscriber`]s to consume `log` records as `tracing` [`Event`]s.\n\n ### Emitting `log` Records\n\n This crate provides two feature flags, \"log\" and \"log-always\", which will\n cause [spans] and [events] to emit `log` records. When the \"log\" feature is\n enabled, if no `tracing` `Subscriber` is active, invoking an event macro or\n creating a span with fields will emit a `log` record. This is intended\n primarily for use in libraries which wish to emit diagnostics that can be\n consumed by applications using `tracing` *or* `log`, without paying the\n additional overhead of emitting both forms of diagnostics when `tracing` is\n in use.\n\n Enabling the \"log-always\" feature will cause `log` records to be emitted\n even if a `tracing` `Subscriber` _is_ set. This is intended to be used in\n applications where a `log` `Logger` is being used to record a textual log,\n and `tracing` is used only to record other forms of diagnostics (such as\n metrics, profiling, or distributed tracing data). Unlike the \"log\" feature,\n libraries generally should **not** enable the \"log-always\" feature, as doing\n so will prevent applications from being able to opt out of the `log` records.\n\n See [here][flags] for more details on this crate's feature flags.\n\n The generated `log` records' messages will be a string representation of the\n span or event's fields, and all additional information recorded by `log`\n (target, verbosity level, module path, file, and line number) will also be\n populated. Additionally, `log` records are also generated when spans are\n entered, exited, and closed. Since these additional span lifecycle logs have\n the potential to be very verbose, and don't include additional fields, they\n will always be emitted at the `Trace` level, rather than inheriting the\n level of the span that generated them. Furthermore, they are are categorized\n under a separate `log` target, \"tracing::span\" (and its sub-target,\n \"tracing::span::active\", for the logs on entering and exiting a span), which\n may be enabled or disabled separately from other `log` records emitted by\n `tracing`.\n\n ### Consuming `log` Records\n\n The [`tracing-log`] crate provides a compatibility layer which\n allows a `tracing` [`Subscriber`] to consume `log` records as though they\n were `tracing` [events]. This allows applications using `tracing` to record\n the logs emitted by dependencies using `log` as events within the context of\n the application's trace tree. See [that crate's documentation][log-tracer]\n for details.\n\n [log-tracer]: https://docs.rs/tracing-log/latest/tracing_log/#convert-log-records-to-tracing-events\n\n ## Related Crates\n\n In addition to `tracing` and `tracing-core`, the [`tokio-rs/tracing`] repository\n contains several additional crates designed to be used with the `tracing` ecosystem.\n This includes a collection of `Subscriber` implementations, as well as utility\n and adapter crates to assist in writing `Subscriber`s and instrumenting\n applications.\n\n In particular, the following crates are likely to be of interest:\n\n  - [`tracing-futures`] provides a compatibility layer with the `futures`\n    crate, allowing spans to be attached to `Future`s, `Stream`s, and `Executor`s.\n  - [`tracing-subscriber`] provides `Subscriber` implementations and\n    utilities for working with `Subscriber`s. This includes a [`FmtSubscriber`]\n    `FmtSubscriber` for logging formatted trace data to stdout, with similar\n    filtering and formatting to the [`env_logger`] crate.\n  - [`tracing-log`] provides a compatibility layer with the [`log`] crate,\n    allowing log messages to be recorded as `tracing` `Event`s within the\n    trace tree. This is useful when a project using `tracing` have\n    dependencies which use `log`. Note that if you're using\n    `tracing-subscriber`'s `FmtSubscriber`, you don't need to depend on\n    `tracing-log` directly.\n  - [`tracing-appender`] provides utilities for outputting tracing data,\n     including a file appender and non blocking writer.\n\n Additionally, there are also several third-party crates which are not\n maintained by the `tokio` project. These include:\n\n  - [`tracing-timing`] implements inter-event timing metrics on top of `tracing`.\n    It provides a subscriber that records the time elapsed between pairs of\n    `tracing` events and generates histograms.\n  - [`tracing-opentelemetry`] provides a subscriber for emitting traces to\n    [OpenTelemetry]-compatible distributed tracing systems.\n  - [`tracing-honeycomb`] Provides a layer that reports traces spanning multiple machines to [honeycomb.io]. Backed by [`tracing-distributed`].\n  - [`tracing-distributed`] Provides a generic implementation of a layer that reports traces spanning multiple machines to some backend.\n  - [`tracing-actix-web`] provides `tracing` integration for the `actix-web` web framework.\n  - [`tracing-actix`] provides `tracing` integration for the `actix` actor\n    framework.\n  - [`axum-insights`] provides `tracing` integration and Application insights export for the `axum` web framework.\n  - [`tracing-gelf`] implements a subscriber for exporting traces in Greylog\n    GELF format.\n  - [`tracing-coz`] provides integration with the [coz] causal profiler\n    (Linux-only).\n  - [`tracing-bunyan-formatter`] provides a layer implementation that reports events and spans\n    in [bunyan] format, enriched with timing information.\n  - [`tracing-wasm`] provides a `Subscriber`/`Layer` implementation that reports\n    events and spans via browser `console.log` and [User Timing API (`window.performance`)].\n  - [`tracing-web`] provides a layer implementation of level-aware logging of events\n    to web browsers' `console.*` and span events to the [User Timing API (`window.performance`)].\n  - [`tide-tracing`] provides a [tide] middleware to trace all incoming requests and responses.\n  - [`test-log`] takes care of initializing `tracing` for tests, based on\n    environment variables with an `env_logger` compatible syntax.\n  - [`tracing-unwrap`] provides convenience methods to report failed unwraps\n    on `Result` or `Option` types to a `Subscriber`.\n  - [`diesel-tracing`] provides integration with [`diesel`] database connections.\n  - [`tracing-tracy`] provides a way to collect [Tracy] profiles in instrumented\n    applications.\n  - [`tracing-elastic-apm`] provides a layer for reporting traces to [Elastic APM].\n  - [`tracing-etw`] provides a layer for emitting Windows [ETW] events.\n  - [`tracing-fluent-assertions`] provides a fluent assertions-style testing\n    framework for validating the behavior of `tracing` spans.\n  - [`sentry-tracing`] provides a layer for reporting events and traces to [Sentry].\n  - [`tracing-forest`] provides a subscriber that preserves contextual coherence by\n    grouping together logs from the same spans during writing.\n  - [`tracing-loki`] provides a layer for shipping logs to [Grafana Loki].\n  - [`tracing-logfmt`] provides a layer that formats events and spans into the logfmt format.\n  - [`reqwest-tracing`] provides a middleware to trace [`reqwest`] HTTP requests.\n  - [`tracing-cloudwatch`] provides a layer that sends events to AWS CloudWatch Logs.\n  - [`clippy-tracing`] provides a tool to add, remove and check for `tracing::instrument`.\n\n If you're the maintainer of a `tracing` ecosystem crate not listed above,\n please let us know! We'd love to add your project to the list!\n\n [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry\n [OpenTelemetry]: https://opentelemetry.io/\n [`tracing-honeycomb`]: https://crates.io/crates/tracing-honeycomb\n [`tracing-distributed`]: https://crates.io/crates/tracing-distributed\n [honeycomb.io]: https://www.honeycomb.io/\n [`tracing-actix-web`]: https://crates.io/crates/tracing-actix-web\n [`tracing-actix`]: https://crates.io/crates/tracing-actix\n [`axum-insights`]: https://crates.io/crates/axum-insights\n [`tracing-gelf`]: https://crates.io/crates/tracing-gelf\n [`tracing-coz`]: https://crates.io/crates/tracing-coz\n [coz]: https://github.com/plasma-umass/coz\n [`tracing-bunyan-formatter`]: https://crates.io/crates/tracing-bunyan-formatter\n [bunyan]: https://github.com/trentm/node-bunyan\n [`tracing-wasm`]: https://docs.rs/tracing-wasm\n [`tracing-web`]: https://docs.rs/tracing-web\n [User Timing API (`window.performance`)]: https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\n [`tide-tracing`]: https://crates.io/crates/tide-tracing\n [tide]: https://crates.io/crates/tide\n [`test-log`]: https://crates.io/crates/test-log\n [`tracing-unwrap`]: https://docs.rs/tracing-unwrap\n [`diesel`]: https://crates.io/crates/diesel\n [`diesel-tracing`]: https://crates.io/crates/diesel-tracing\n [`tracing-tracy`]: https://crates.io/crates/tracing-tracy\n [Tracy]: https://github.com/wolfpld/tracy\n [`tracing-elastic-apm`]: https://crates.io/crates/tracing-elastic-apm\n [Elastic APM]: https://www.elastic.co/apm\n [`tracing-etw`]: https://github.com/microsoft/rust_win_etw/tree/main/win_etw_tracing\n [ETW]: https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing\n [`tracing-fluent-assertions`]: https://crates.io/crates/tracing-fluent-assertions\n [`sentry-tracing`]: https://crates.io/crates/sentry-tracing\n [Sentry]: https://sentry.io/welcome/\n [`tracing-forest`]: https://crates.io/crates/tracing-forest\n [`tracing-loki`]: https://crates.io/crates/tracing-loki\n [Grafana Loki]: https://grafana.com/oss/loki/\n [`tracing-logfmt`]: https://crates.io/crates/tracing-logfmt\n [`reqwest-tracing`]: https://crates.io/crates/reqwest-tracing\n [`reqwest`]: https://crates.io/crates/reqwest\n [`tracing-cloudwatch`]: https://crates.io/crates/tracing-cloudwatch\n [`clippy-tracing`]: https://crates.io/crates/clippy-tracing\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Some of these ecosystem crates are currently\n     unreleased and/or in earlier stages of development. They may be less stable\n     than <code>tracing</code> and <code>tracing-core</code>.\n </pre>\n\n ## Crate Feature Flags\n\n The following crate [feature flags] are available:\n\n * A set of features controlling the [static verbosity level].\n * `log`: causes trace instrumentation points to emit [`log`] records as well\n   as trace events, if a default `tracing` subscriber has not been set. This\n   is intended for use in libraries whose users may be using either `tracing`\n   or `log`.\n * `log-always`: Emit `log` records from all `tracing` spans and events, even\n   if a `tracing` subscriber has been set. This should be set only by\n   applications which intend to collect traces and logs separately; if an\n   adapter is used to convert `log` records into `tracing` events, this will\n   cause duplicate events to occur.\n * `attributes`: Includes support for the `#[instrument]` attribute.\n   This is on by default, but does bring in the `syn` crate as a dependency,\n   which may add to the compile time of crates that do not already use it.\n * `std`: Depend on the Rust standard library (enabled by default).\n\n   `no_std` users may disable this feature with `default-features = false`:\n\n   ```toml\n   [dependencies]\n   tracing = { version = \"0.1.38\", default-features = false }\n   ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: <code>tracing</code>'s <code>no_std</code> support\n     requires <code>liballoc</code>.\n </pre>\n\n ### Unstable Features\n\n These feature flags enable **unstable** features. The public API may break in 0.1.x\n releases. To enable these features, the `--cfg tracing_unstable` must be passed to\n `rustc` when compiling.\n\n The following unstable feature flags are currently available:\n\n * `valuable`: Enables support for recording [field values] using the\n   [`valuable`] crate.\n\n #### Enabling Unstable Features\n\n The easiest way to set the `tracing_unstable` cfg is to use the `RUSTFLAGS`\n env variable when running `cargo` commands:\n\n ```shell\n RUSTFLAGS=\"--cfg tracing_unstable\" cargo build\n ```\n Alternatively, the following can be added to the `.cargo/config` file in a\n project to automatically enable the cfg flag for that project:\n\n ```toml\n [build]\n rustflags = [\"--cfg\", \"tracing_unstable\"]\n ```\n\n [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n [field values]: crate::field\n [`valuable`]: https://crates.io/crates/valuable\n\n ## Supported Rust Versions\n\n Tracing is built against the latest stable release. The minimum supported\n version is 1.56. The current Tracing version is not guaranteed to build on\n Rust versions earlier than the minimum supported version.\n\n Tracing follows the same compiler support policies as the rest of the Tokio\n project. The current stable Rust compiler and the three most recent minor\n versions before it will always be supported. For example, if the current\n stable compiler version is 1.69, the minimum supported version will not be\n increased past 1.66, three minor versions prior. Increasing the minimum\n supported compiler version is not considered a semver breaking change as\n long as doing so complies with this policy.\n\n [`log`]: https://docs.rs/log/0.4.6/log/\n [span]: mod@span\n [spans]: mod@span\n [`Span`]: span::Span\n [`in_scope`]: span::Span::in_scope\n [event]: Event\n [events]: Event\n [`Subscriber`]: subscriber::Subscriber\n [Subscriber::event]: subscriber::Subscriber::event\n [`enter`]: subscriber::Subscriber::enter\n [`exit`]: subscriber::Subscriber::exit\n [`enabled`]: subscriber::Subscriber::enabled\n [metadata]: Metadata\n [`field::display`]: field::display\n [`field::debug`]: field::debug\n [`set_global_default`]: subscriber::set_global_default\n [`with_default`]: subscriber::with_default\n [`tokio-rs/tracing`]: https://github.com/tokio-rs/tracing\n [`tracing-futures`]: https://crates.io/crates/tracing-futures\n [`tracing-subscriber`]: https://crates.io/crates/tracing-subscriber\n [`tracing-log`]: https://crates.io/crates/tracing-log\n [`tracing-timing`]: https://crates.io/crates/tracing-timing\n [`tracing-appender`]: https://crates.io/crates/tracing-appender\n [`env_logger`]: https://crates.io/crates/env_logger\n [`FmtSubscriber`]: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/struct.Subscriber.html\n [static verbosity level]: level_filters#compile-time-filters\n [instrument]: https://docs.rs/tracing-attributes/latest/tracing_attributes/attr.instrument.html\n [flags]: #crate-feature-flags","links":{"info_span!":"0:26:3389","span!":"0:23:3161","warn!":"0:36:2074","error!":"0:37:3572","event!":"0:29:3156","`Level`":"20:1008:3166","Event":"20:837:3157","info!":"0:35:3554","subscriber::set_global_default":"0:266:3651","mod@span":"0:141:3161","std::fmt#usage":"5:5051:847","field::Empty":"20:850:4801","subscriber::Subscriber::enter":"20:696:3864","Metadata::target":"20:499:1863","level_filters#compile-time-filters":"0:135:3172","Span#in-asynchronous-code":"0:370:3168","span::Span":"0:370:3168","debug!":"0:34:644","span::Attributes::parent":"20:640:3346","`Span::enter`":"0:180:3864","std::fmt::Display":"2:11020:133","error_span!":"0:28:3405","debug_span!":"0:25:3381","subscriber::with_default":"0:262:3649","trace!":"0:33:3531","crate::field":"0:57:833","span::Span::in_scope":"0:185:4470","subscriber::Subscriber::event":"20:695:3156","subscriber::Subscriber::exit":"20:697:4448","warn_span!":"0:27:3397","subscriber::Subscriber::enabled":"20:689:3190","Metadata":"20:482:3167","trace_span!":"0:24:3373","std::fmt::Debug":"2:11015:123","subscriber::Subscriber":"20:686:3160","`Event`":"20:837:3157"},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/tokio-rs/tracing/master/assets/logo-type.png\",\nissue_tracker_base_url = \"https://github.com/tokio-rs/tracing/issues/\")]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub, bad_style, dead_code, improper_ctypes,\nnon_shorthand_field_patterns, no_mangle_generic_items, overflowing_literals,\npath_statements, patterns_in_fns_without_body, private_in_public,\nunconditional_recursion, unused, unused_allocation, unused_comparisons,\nunused_parens, while_true)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:3154","0:57:833","0:73:3152","0:135:3172","0:141:3161","0:259:3159","0:4-0:88:3153","0:6-20:803:3155","0:7-20:837:3157","0:8-20:294:3158","0:9-20:686:3160","0:17-20:243:3156","0:18-20:1008:3166","0:19-20:482:3167","0:20-0:370:3168","0:21-22:206:3152","0:29:3156","0:23:3161","0:24:3373","0:25:3381","0:26:3389","0:27:3397","0:28:3405","0:30:3445","0:31:3452","0:32:3190","0:33:3531","0:34:644","0:35:3554","0:36:2074","0:37:3572"],"is_stripped":false}}},"0:175:3192":{"id":"0:175:3192","crate_id":0,"name":"new_disabled","span":{"filename":"src/span.rs","begin":[519,4],"end":[524,5]},"visibility":"public","docs":"Constructs a new disabled span with the given `Metadata`.\n\nThis should be used when a span is constructed from a known callsite,\nbut the subscriber indicates that it is disabled.\n\nEntering, exiting, and recording values on this span will not notify the\n`Subscriber` but _may_ record log messages if the `log` feature flag is\nenabled.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:91:3810":{"id":"0:91:3810","crate_id":0,"name":"WithSubscriber","span":{"filename":"src/instrument.rs","begin":[136,0],"end":[234,1]},"visibility":"public","docs":"Extension trait allowing futures to be instrumented with\na `tracing` [`Subscriber`](crate::Subscriber).","links":{"crate::Subscriber":"20:686:3160"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:92:3832","0:94:3850"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:125"]}}},"0:180:3864":{"id":"0:180:3864","crate_id":0,"name":"enter","span":{"filename":"src/span.rs","begin":[785,4],"end":[788,5]},"visibility":"public","docs":"Enters this span, returning a guard that will exit the span when dropped.\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\n# In Asynchronous Code\n\n**Warning**: in asynchronous code that uses [async/await syntax][syntax],\n`Span::enter` should be used very carefully or avoided entirely. Holding\nthe drop guard returned by `Span::enter` across `.await` points will\nresult in incorrect traces. For example,\n\n```\n# use tracing::info_span;\n# async fn some_other_async_function() {}\nasync fn my_async_function() {\n    let span = info_span!(\"my_async_function\");\n\n    // WARNING: This span will remain entered until this\n    // guard is dropped...\n    let _enter = span.enter();\n    // ...but the `await` keyword may yield, causing the\n    // runtime to switch to another task, while remaining in\n    // this span!\n    some_other_async_function().await\n\n    // ...\n}\n```\n\nThe drop guard returned by `Span::enter` exits the span when it is\ndropped. When an async function or async block yields at an `.await`\npoint, the current scope is _exited_, but values in that scope are\n**not** dropped (because the async block will eventually resume\nexecution from that await point). This means that _another_ task will\nbegin executing while _remaining_ in the entered span. This results in\nan incorrect trace.\n\nInstead of using `Span::enter` in asynchronous code, prefer the\nfollowing:\n\n* To enter a span for a synchronous section of code within an async\n  block or function, prefer [`Span::in_scope`]. Since `in_scope` takes a\n  synchronous closure and exits the span when the closure returns, the\n  span will always be exited before the next await point. For example:\n  ```\n  # use tracing::info_span;\n  # async fn some_other_async_function(_: ()) {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n\n      let some_value = span.in_scope(|| {\n          // run some synchronous code inside the span...\n      });\n\n      // This is okay! The span has already been exited before we reach\n      // the await point.\n      some_other_async_function(some_value).await;\n\n      // ...\n  }\n  ```\n* For instrumenting asynchronous code, `tracing` provides the\n  [`Future::instrument` combinator][instrument] for\n  attaching a span to a future (async function or block). This will\n  enter the span _every_ time the future is polled, and exit it whenever\n  the future yields.\n\n  `Instrument` can be used with an async block inside an async function:\n  ```ignore\n  # use tracing::info_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n      async move {\n         // This is correct! If we yield here, the span will be exited,\n         // and re-entered when we resume.\n         some_other_async_function().await;\n\n         //more asynchronous code inside the span...\n\n      }\n        // instrument the async block with the span...\n        .instrument(span)\n        // ...and await it.\n        .await\n  }\n  ```\n\n  It can also be used to instrument calls to async functions at the\n  callsite:\n  ```ignore\n  # use tracing::debug_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let some_value = some_other_async_function()\n         .instrument(debug_span!(\"some_other_async_function\"))\n         .await;\n\n      // ...\n  }\n  ```\n\n* The [`#[instrument]` attribute macro][attr] can automatically generate\n  correct code when used on an async function:\n\n  ```ignore\n  # async fn some_other_async_function() {}\n  #[tracing::instrument(level = \"info\")]\n  async fn my_async_function() {\n\n      // This is correct! If we yield here, the span will be exited,\n      // and re-entered when we resume.\n      some_other_async_function().await;\n\n      // ...\n\n  }\n  ```\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n[`Span::in_scope`]: Span::in_scope()\n[instrument]: crate::Instrument\n[attr]: macro@crate::instrument\n\n# Examples\n\n```\n# use tracing::{span, Level};\nlet span = span!(Level::INFO, \"my_span\");\nlet guard = span.enter();\n\n// code here is within the span\n\ndrop(guard);\n\n// code here is no longer within the span\n\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\");\n    let _enter = span.enter();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSub-scopes may be created to limit the duration for which the span is\nentered:\n\n```\n# use tracing::{info, info_span};\nlet span = info_span!(\"my_great_span\");\n\n{\n    let _enter = span.enter();\n\n    // this event occurs inside the span.\n    info!(\"i'm in the span!\");\n\n    // exiting the scope drops the guard, exiting the span.\n}\n\n// this event is not inside the span.\ninfo!(\"i'm outside the span!\")\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1088:3162","Span::in_scope()":"0:185:4470","macro@crate::instrument":"22:206:3152","super::subscriber::Subscriber::exit()":"20:697:4448","super::subscriber::Subscriber::enter()":"20:696:3864","crate::Instrument":"0:88:3153"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:185:4470":{"id":"0:185:4470","crate_id":0,"name":"in_scope","span":{"filename":"src/span.rs","begin":[1100,4],"end":[1103,5]},"visibility":"public","docs":"Executes the given function in the context of this span.\n\nIf this span is enabled, then this function enters the span, invokes `f`\nand then exits the span. If the span is disabled, `f` will still be\ninvoked, but in the context of the currently-executing span (if there is\none).\n\nReturns the result of evaluating `f`.\n\n# Examples\n\n```\n# use tracing::{trace, span, Level};\nlet my_span = span!(Level::TRACE, \"my_span\");\n\nmy_span.in_scope(|| {\n    // this event occurs within the span.\n    trace!(\"i'm in the span!\");\n});\n\n// this event occurs outside the span.\ntrace!(\"i'm not in the span!\");\n```\n\nCalling a function and returning the result:\n```\n# use tracing::{info_span, Level};\nfn hello_world() -> String {\n    \"Hello world!\".to_owned()\n}\n\nlet span = info_span!(\"hello_world\");\n// the span will be entered for the duration of the call to\n// `hello_world`.\nlet a_string = span.in_scope(hello_world);\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:24:3373":{"id":"0:24:3373","crate_id":0,"name":"trace_span","span":{"filename":"src/macros.rs","begin":[167,0],"end":[212,1]},"visibility":"public","docs":"Constructs a span at the trace level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\ntrace_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::TRACE, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\nlet span = trace_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3224","crate::span!":"0:23:3161","crate#configuring-attributes":"0:0:3224","crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:51-20:172:3189":{"id":"0:51-20:172:3189","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,4],"end":[136,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::get_default","name":"get_default","id":"20:172:3189","is_glob":false}}},"a:2:3443:4846-0:326:3797":{"id":"a:2:3443:4846-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:54-20:163:3652":{"id":"0:54-20:163:3652","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,47],"end":[136,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:163:3652","is_glob":false}}},"b:2:3190-0:370:3168":{"id":"b:2:3190-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3185-0:326:3797":{"id":"b:2:3185-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1449,0],"end":[1453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:229:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:134:3886":{"id":"0:134:3886","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[426,4],"end":[428,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1556,0],"end":[1563,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3642:128","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:248:265","0:249:668"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:14518-0:326:3797":{"id":"b:2:14518-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:48763:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:14520:211","2:14521:176","2:14522:1016"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"2:4057:1938":{"id":"2:4057:1938","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:43501:4777","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:249:668":{"id":"0:249:668","crate_id":0,"name":"deref","span":{"filename":"src/span.rs","begin":[1560,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:380:4191":{"id":"b:2:2863-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:2865:29831"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55-20:807:3653":{"id":"0:55-20:807:3653","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,70],"end":[136,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::WeakDispatch","name":"WeakDispatch","id":"20:807:3653","is_glob":false}}},"b:2:3190-0:283:3834":{"id":"b:2:3190-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:3190":{"id":"0:32:3190","crate_id":0,"name":"enabled","span":{"filename":"src/macros.rs","begin":[1184,0],"end":[1264,1]},"visibility":"public","docs":"Checks whether a span or event is [enabled] based on the provided [metadata].\n\n[enabled]: crate::Subscriber::enabled\n[metadata]: crate::Metadata\n\nThis macro is a specialized tool: it is intended to be used prior\nto an expensive computation required *just* for that event, but\n*cannot* be done as part of an argument to that event, such as\nwhen multiple events are emitted (e.g., iterating over a collection\nand emitting an event for each item).\n\n# Usage\n\n[Subscribers] can make filtering decisions based all the data included in a\nspan or event's [`Metadata`]. This means that it is possible for `enabled!`\nto return a _false positive_ (indicating that something would be enabled\nwhen it actually would not be) or a _false negative_ (indicating that\nsomething would be disabled when it would actually be enabled).\n\n[Subscribers]: crate::subscriber::Subscriber\n[`Metadata`]: crate::metadata::Metadata\n\nThis occurs when a subscriber is using a _more specific_ filter than the\nmetadata provided to the `enabled!` macro. Some situations that can result\nin false positives or false negatives include:\n\n- If a subscriber is using a filter which may enable a span or event based\non field names, but `enabled!` is invoked without listing field names,\n`enabled!` may return a false negative if a specific field name would\ncause the subscriber to enable something that would otherwise be disabled.\n- If a subscriber is using a filter which enables or disables specific events by\nfile path and line number,  a particular event may be enabled/disabled\neven if an `enabled!` invocation with the same level, target, and fields\nindicated otherwise.\n- The subscriber can choose to enable _only_ spans or _only_ events, which `enabled`\nwill not reflect.\n\n`enabled!()` requires a [level](crate::Level) argument, an optional `target:`\nargument, and an optional set of field names. If the fields are not provided,\nthey are considered to be unknown. `enabled!` attempts to match the\nsyntax of `event!()` as closely as possible, which can be seen in the\nexamples below.\n\n# Examples\n\nIf the current subscriber is interested in recording `DEBUG`-level spans and\nevents in the current file and module path, this will evaluate to true:\n```rust\nuse tracing::{enabled, Level};\n\nif enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", and at the\nlevel  `DEBUG`, this will evaluate to true:\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", at\nthe level `DEBUG`, and with a field named \"hello\", this will evaluate\nto true:\n\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG, hello) {\n    // some expensive work...\n}\n```\n\n# Alternatives\n\n`enabled!` queries subscribers with [`Metadata`] where\n[`is_event`] and [`is_span`] both return `false`. Alternatively,\nuse [`event_enabled!`] or [`span_enabled!`] to ensure one of these\nreturns true.\n\n\n[`Metadata`]: crate::Metadata\n[`is_event`]: crate::Metadata::is_event\n[`is_span`]: crate::Metadata::is_span\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::Subscriber::enabled":"20:689:3190","`event_enabled!`":"0:30:3445","crate::span_enabled":"0:31:3452","crate::subscriber::Subscriber":"20:686:3160","crate::Metadata::is_span":"20:505:5368","crate::metadata::Metadata":"20:482:3167","crate::Level":"20:1008:3166","crate::Metadata::is_event":"20:504:5366","crate::Metadata":"20:482:3167"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! enabled {\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr ) => { ... };\n    (target: $target:expr, $lvl:expr ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr) => { ... };\n    ($lvl:expr) => { ... };\n    ($lvl:expr, $($field:tt)*) => { ... };\n}"}},"a:2:36000:251-0:326:3797":{"id":"a:2:36000:251-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:18-20:1008:3166":{"id":"0:18-20:1008:3166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,30],"end":[962,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Level","name":"Level","id":"20:1008:3166","is_glob":false}}},"0:30:3445":{"id":"0:30:3445","crate_id":0,"name":"event_enabled","span":{"filename":"src/macros.rs","begin":[1053,0],"end":[1057,1]},"visibility":"public","docs":"Tests whether an event with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{event_enabled, Level};\nif event_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif event_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif event_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3190","crate::span_enabled":"0:31:3452"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:108:211":{"id":"0:108:211","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[316,4],"end":[316,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:216:878":{"id":"0:216:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1426,4],"end":[1428,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:332:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1437,0],"end":[1441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:222:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3175-0:386:4196":{"id":"b:2:3175-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:3835"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45871:11111-0:283:3834":{"id":"a:2:45871:11111-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:11111","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:2:2918-0:370:3168":{"id":"b:2:2918-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:29832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45871:11111-0:380:4191":{"id":"a:2:45871:11111-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:11111","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:326:3797":{"id":"0:326:3797","crate_id":0,"name":"Instrumented","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Span`].\n\nThis type is returned by the [`Instrument`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Span`]: crate::Span","links":{"crate::Span":"0:370:3168","std::future::Future":"2:48760:163","`Instrument`":"0:88:3153"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["0:112","a:2:36000:251-0:326:3797","a:2:3408:263-0:326:3797","a:2:3443:4846-0:326:3797","a:2:45870:10920-0:326:3797","a:2:45871:11111-0:326:3797","b:0:110-0:326:3797","b:0:125-0:326:3797","b:2:2860-0:326:3797","b:2:2863-0:326:3797","b:2:2918-0:326:3797","b:2:3175-0:326:3797","b:2:3179-0:326:3797","b:2:3185-0:326:3797","b:2:3190-0:326:3797","b:2:4055-0:326:3797","b:2:14518-0:326:3797","b:5:816-0:326:3797","0:330","0:333","0:361","0:364","0:106"]}}},"0:8-20:294:3158":{"id":"0:8-20:294:3158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,51],"end":[952,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::field::Value","name":"Value","id":"20:294:3158","is_glob":false}}},"b:2:3185-0:370:3168":{"id":"b:2:3185-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:3356":{"id":"0:170:3356","crate_id":0,"name":"child_of","span":{"filename":"src/span.rs","begin":[484,4],"end":[493,5]},"visibility":"public","docs":"Constructs a new `Span` as child of the given parent span, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3167","super::Span::follows_from":"0:199:4553","super::field::ValueSet":"20:280:3197"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["parent",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}],["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36058:4849-0:370:3168":{"id":"a:2:36058:4849-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[397,0],"end":[429,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:129:3154","0:130:3798","0:131:3879","0:132:3881","0:133:3883","0:134:3886"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:4055-0:326:3797":{"id":"b:2:4055-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:3807":{"id":"0:90:3807","crate_id":0,"name":"in_current_span","span":{"filename":"src/instrument.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":"Instruments this type with the [current] [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\nThis can be used to propagate the current span when spawning a new future.\n\n# Examples\n\n```rust\nuse tracing::Instrument;\n\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# async fn doc() {\nlet span = tracing::info_span!(\"my_span\");\nlet _enter = span.enter();\n\n// ...\n\nlet future = async {\n    tracing::debug!(\"this event will occur inside `my_span`\");\n    // ...\n};\ntokio::spawn(future.in_current_span());\n# }\n```\n\n[current]: super::Span::current()\n[entered]: super::Span::enter()\n[`Span`]: crate::Span\n[`Future`]: std::future::Future","links":{"crate::Span":"0:370:3168","std::future::Future":"2:48760:163","super::Span::enter()":"0:180:3864","`Drop`":"2:3671:4567","super::Span::current()":"0:177:3509"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:283:3834":{"id":"a:2:3408:263-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"2:3178:3835":{"id":"2:3178:3835","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:225:878":{"id":"0:225:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1444,4],"end":[1446,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36058:4849-0:380:4191":{"id":"a:2:36058:4849-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1443,0],"end":[1447,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"items":["0:225:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:124:1402":{"id":"0:124:1402","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[383,4],"end":[389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:14720:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:48785:220","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:48760:163","args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:386:4196":{"id":"b:2:2860-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:4613"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3190-0:326:3797":{"id":"b:2:3190-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:3397":{"id":"0:27:3397","crate_id":0,"name":"warn_span","span":{"filename":"src/macros.rs","begin":[410,0],"end":[455,1]},"visibility":"public","docs":"Constructs a span at the warn level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{warn_span, span, Level};\n# fn main() {\nwarn_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::WARN, \"my_span\");\n# }\n```\n\n```rust\nuse tracing::warn_span;\n# fn main() {\nlet span = warn_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3224","crate::span!":"0:23:3161","crate#configuring-attributes":"0:0:3224","crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:48-20:157:3649":{"id":"0:48-20:157:3649","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[131,0],"end":[131,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::with_default","name":"with_default","id":"20:157:3649","is_glob":false}}},"0:37:3572":{"id":"0:37:3572","crate_id":0,"name":"error","span":{"filename":"src/macros.rs","begin":[2426,0],"end":[2677,1]},"visibility":"public","docs":"Constructs an event at the error level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::error;\n# fn main() {\n\nlet (err_info, port) = (\"No connection\", 22);\n\nerror!(port, error = %err_info);\nerror!(target: \"app_events\", \"App Error: {}\", err_info);\nerror!({ info = err_info }, \"error on port: {}\", port);\nerror!(name: \"invalid_input\", \"Invalid input: {}\", err_info);\n# }\n```","links":{"crate#using-the-macros":"0:0:3224","crate::event!":"0:29:3156"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[161,0],"end":[166,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"primitive":"str"},"items":["0:68:3751"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:3408:263-0:326:3797":{"id":"a:2:3408:263-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"2:2865:29831":{"id":"2:2865:29831","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:283:3834":{"id":"0:283:3834","crate_id":0,"name":"WithDispatch","span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Subscriber`].\n\nThis type is returned by the [`WithSubscriber`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Subscriber`]: crate::Subscriber","links":{"std::future::Future":"2:48760:163","crate::Subscriber":"20:686:3160","`WithSubscriber`":"0:91:3810"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["0:127","a:2:36000:251-0:283:3834","a:2:3408:263-0:283:3834","a:2:3443:4846-0:283:3834","a:2:45870:10920-0:283:3834","a:2:45871:11111-0:283:3834","b:0:110-0:283:3834","b:0:125-0:283:3834","b:2:2860-0:283:3834","b:2:2863-0:283:3834","b:2:2918-0:283:3834","b:2:3175-0:283:3834","b:2:3179-0:283:3834","b:2:3185-0:283:3834","b:2:3190-0:283:3834","b:2:4055-0:283:3834","b:2:14518-0:283:3834","b:5:816-0:283:3834","0:287","0:290","0:318","0:121"]}}},"0:164:1249":{"id":"0:164:1249","crate_id":0,"name":"new","span":{"filename":"src/span.rs","begin":[436,4],"end":[438,5]},"visibility":"public","docs":"Constructs a new `Span` with the given [metadata] and set of\n[field values].\n\nThe new span will be constructed by the currently-active [`Subscriber`],\nwith the current span as its parent (if one exists).\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[`Subscriber`]: super::subscriber::Subscriber\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3167","super::subscriber::Subscriber":"20:686:3160","super::field::ValueSet":"20:280:3197","super::Span::follows_from":"0:199:4553"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[380,0],"end":[390,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:123:211","0:124:1402"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:3408:263-0:380:4191":{"id":"a:2:3408:263-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:0:125-0:326:3797":{"id":"b:0:125-0:326:3797","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2920:29832":{"id":"2:2920:29832","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:46:3154":{"id":"0:46:3154","crate_id":0,"name":"dispatcher","span":{"filename":"src/dispatcher.rs","begin":[1,0],"end":[145,47]},"visibility":"public","docs":"Dispatches trace events to [`Subscriber`]s.\n\nThe _dispatcher_ is the component of the tracing system which is responsible\nfor forwarding trace data from the instrumentation points that generate it\nto the subscriber that collects it.\n\n# Using the Trace Dispatcher\n\nEvery thread in a program using `tracing` has a _default subscriber_. When\nevents occur, or spans are created, they are dispatched to the thread's\ncurrent subscriber.\n\n## Setting the Default Subscriber\n\nBy default, the current subscriber is an empty implementation that does\nnothing. To use a subscriber implementation, it must be set as the default.\nThere are two methods for doing so: [`with_default`] and\n[`set_global_default`]. `with_default` sets the default subscriber for the\nduration of a scope, while `set_global_default` sets a default subscriber\nfor the entire process.\n\nTo use either of these functions, we must first wrap our subscriber in a\n[`Dispatch`], a cloneable, type-erased reference to a subscriber. For\nexample:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\nuse dispatcher::Dispatch;\n\nlet my_subscriber = FooSubscriber::new();\nlet my_dispatch = Dispatch::new(my_subscriber);\n```\nThen, we can use [`with_default`] to set our `Dispatch` as the default for\nthe duration of a block:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\n# #[cfg(feature = \"std\")]\ndispatcher::with_default(&my_dispatch, || {\n    // my_subscriber is the default\n});\n\n// no default subscriber again\n```\nIt's important to note that `with_default` will not propagate the current\nthread's default subscriber to any threads spawned within the `with_default`\nblock. To propagate the default subscriber to new threads, either use\n`with_default` from the new thread, or use `set_global_default`.\n\nAs an alternative to `with_default`, we can use [`set_global_default`] to\nset a `Dispatch` as the default for all threads, for the lifetime of the\nprogram. For example:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\ndispatcher::set_global_default(my_dispatch)\n    // `set_global_default` will return an error if the global default\n    // subscriber has already been set.\n    .expect(\"global default was already set!\");\n\n// `my_subscriber` is now the default\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: The thread-local scoped dispatcher (<code>with_default</code>)\nrequires the Rust standard library. <code>no_std</code> users should\nuse <a href=\"fn.set_global_default.html\"><code>set_global_default</code></a>\ninstead.\n</pre>\n\n## Accessing the Default Subscriber\n\nA thread's current default subscriber can be accessed using the\n[`get_default`] function, which executes a closure with a reference to the\ncurrently default `Dispatch`. This is used primarily by `tracing`\ninstrumentation.\n\n[`Subscriber`]: crate::Subscriber","links":{"`get_default`":"20:172:3189","`with_default`":"20:157:3649","`set_global_default`":"20:161:3651","crate::Subscriber":"20:686:3160","`Dispatch`":"20:803:3155"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:47-20:160:3648","0:48-20:157:3649","0:49-20:832:3650","0:51-20:172:3189","0:52-20:161:3651","0:53-20:803:3155","0:54-20:163:3652","0:55-20:807:3653"],"is_stripped":false}}},"0:29:3156":{"id":"0:29:3156","crate_id":0,"name":"event","span":{"filename":"src/macros.rs","begin":[585,0],"end":[1023,1]},"visibility":"public","docs":"Constructs a new `Event`.\n\nThe event macro is invoked with a `Level` and up to 32 key-value fields.\nOptionally, a format string and arguments may follow the fields; this will\nbe used to construct an implicit field named \"message\".\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::{event, Level};\n\n# fn main() {\nlet data = (42, \"forty-two\");\nlet private_data = \"private\";\nlet error = \"a bad error\";\n\nevent!(Level::ERROR, %error, \"Received error\");\nevent!(\n    target: \"app_events\",\n    Level::WARN,\n    private_data,\n    ?data,\n    \"App warning: {}\",\n    error\n);\nevent!(name: \"answer\", Level::INFO, the_answer = data.0);\nevent!(Level::INFO, the_answer = data.0);\n# }\n```\n","links":{"crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ($lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    ($lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+) => { ... };\n    ($lvl:expr, %$($k:ident).+) => { ... };\n    ($lvl:expr, $($k:ident).+) => { ... };\n    ( $lvl:expr, $($arg:tt)+ ) => { ... };\n}"}},"a:2:36000:251-0:380:4191":{"id":"a:2:36000:251-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:268:3648":{"id":"0:268:3648","crate_id":0,"name":"set_default","span":{"filename":"src/subscriber.rs","begin":[58,0],"end":[63,1]},"visibility":"public","docs":"Sets the [`Subscriber`] as the default for the current thread for the\nduration of the lifetime of the returned [`DefaultGuard`].\n\nThe default subscriber is used when creating a new [`Span`] or [`Event`].\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event\n[`DefaultGuard`]: super::dispatcher::DefaultGuard","links":{"super::subscriber::Subscriber":"20:686:3160","super::span::Span":"0:370:3168","super::event::Event":"20:837:3157","super::dispatcher::DefaultGuard":"20:832:3650"},"attrs":["#[cfg(feature = \"std\")]","#[must_use = \"Dropping the guard unregisters the subscriber.\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"DefaultGuard","id":"20:832:3650","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3160","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:28:3405":{"id":"0:28:3405","crate_id":0,"name":"error_span","span":{"filename":"src/macros.rs","begin":[490,0],"end":[535,1]},"visibility":"public","docs":"Constructs a span at the error level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, error_span, Level};\n# fn main() {\nerror_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::ERROR, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::error_span;\n# fn main() {\nlet span = error_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3224","crate::span!":"0:23:3161","crate#configuring-attributes":"0:0:3224","crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"b:2:3185-0:380:4191":{"id":"b:2:3185-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17-20:243:3156":{"id":"0:17-20:243:3156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,23],"end":[962,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::event","name":"event","id":"20:243:3156","is_glob":false}}},"0:289:508":{"id":"0:289:508","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45870:10920-0:326:3797":{"id":"a:2:45870:10920-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:10920","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:2:3179-0:326:3797":{"id":"b:2:3179-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45871:11111-0:326:3797":{"id":"a:2:45871:11111-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:11111","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:7-20:837:3157":{"id":"0:7-20:837:3157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,37],"end":[952,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::event::Event","name":"Event","id":"20:837:3157","is_glob":false}}},"b:0:125-0:386:4196":{"id":"b:0:125-0:386:4196","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4567","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:366:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:5:816-0:283:3834":{"id":"b:5:816-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["5:818:5469","5:819:5470","5:820:5471"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:818:5469":{"id":"5:818:5469","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"b:2:2860-0:326:3797":{"id":"b:2:2860-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2862:4613"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1386,0],"end":[1390,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:210:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:57:833":{"id":"0:57:833","crate_id":0,"name":"field","span":{"filename":"src/field.rs","begin":[1,0],"end":[170,37]},"visibility":"public","docs":"`Span` and `Event` key-value data.\n\nSpans and events may be annotated with key-value data, referred to as _fields_.\nThese fields consist of a mapping from a key (corresponding to\na `&str` but represented internally as an array index) to a [`Value`].\n\n# `Value`s and `Subscriber`s\n\n`Subscriber`s consume `Value`s as fields attached to [span]s or [`Event`]s.\nThe set of field keys on a given span or event is defined on its [`Metadata`].\nWhen a span is created, it provides [`Attributes`] to the `Subscriber`'s\n[`new_span`] method, containing any fields whose values were provided when\nthe span was created; and may call the `Subscriber`'s [`record`] method\nwith additional [`Record`]s if values are added for more of its fields.\nSimilarly, the [`Event`] type passed to the subscriber's [`event`] method\nwill contain any fields attached to each event.\n\n`tracing` represents values as either one of a set of Rust primitives\n(`i64`, `u64`, `f64`, `bool`, and `&str`) or using a `fmt::Display` or\n`fmt::Debug` implementation. `Subscriber`s are provided these primitive\nvalue types as `dyn Value` trait objects.\n\nThese trait objects can be formatted using `fmt::Debug`, but may also be\nrecorded as typed data by calling the [`Value::record`] method on these\ntrait objects with a _visitor_ implementing the [`Visit`] trait. This trait\nrepresents the behavior used to record values of various types. For example,\nan implementation of `Visit` might record integers by incrementing counters\nfor their field names rather than printing them.\n\n\n# Using `valuable`\n\n`tracing`'s [`Value`] trait is intentionally minimalist: it supports only a small\nnumber of Rust primitives as typed values, and only permits recording\nuser-defined types with their [`fmt::Debug`] or [`fmt::Display`]\nimplementations. However, there are some cases where it may be useful to record\nnested values (such as arrays, `Vec`s, or `HashMap`s containing values), or\nuser-defined `struct` and `enum` types without having to format them as\nunstructured text.\n\nTo address `Value`'s limitations, `tracing` offers experimental support for\nthe [`valuable`] crate, which provides object-safe inspection of structured\nvalues. User-defined types can implement the [`valuable::Valuable`] trait,\nand be recorded as a `tracing` field by calling their [`as_value`] method.\nIf the [`Subscriber`] also supports the `valuable` crate, it can\nthen visit those types fields as structured values using `valuable`.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: <code>valuable</code> support is an\n    <a href = \"../index.html#unstable-features\">unstable feature</a>. See\n    the documentation on unstable features for details on how to enable it.\n</pre>\n\nFor example:\n```ignore\n// Derive `Valuable` for our types:\nuse valuable::Valuable;\n\n#[derive(Clone, Debug, Valuable)]\nstruct User {\n    name: String,\n    age: u32,\n    address: Address,\n}\n\n#[derive(Clone, Debug, Valuable)]\nstruct Address {\n    country: String,\n    city: String,\n    street: String,\n}\n\nlet user = User {\n    name: \"Arwen Undomiel\".to_string(),\n    age: 3000,\n    address: Address {\n        country: \"Middle Earth\".to_string(),\n        city: \"Rivendell\".to_string(),\n        street: \"leafy lane\".to_string(),\n    },\n};\n\n// Recording `user` as a `valuable::Value` will allow the `tracing` subscriber\n// to traverse its fields as a nested, typed structure:\ntracing::info!(current_user = user.as_value());\n```\n\nAlternatively, the [`valuable()`] function may be used to convert a type\nimplementing [`Valuable`] into a `tracing` field value.\n\nWhen the `valuable` feature is enabled, the [`Visit`] trait will include an\noptional [`record_value`] method. `Visit` implementations that wish to\nrecord `valuable` values can implement this method with custom behavior.\nIf a visitor does not implement `record_value`, the [`valuable::Value`] will\nbe forwarded to the visitor's [`record_debug`] method.\n\n[`fmt::Debug`]: std::fmt::Debug\n[`fmt::Display`]: std::fmt::Debug\n[`valuable`]: https://crates.io/crates/valuable\n[`valuable::Valuable`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html\n[`as_value`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html#tymethod.as_value\n[`valuable::Value`]: https://docs.rs/valuable/latest/valuable/enum.Value.html\n[`Subscriber`]: crate::Subscriber\n[`record_value`]: Visit::record_value\n[`record_debug`]: Visit::record_debug\n[span]: mod@crate::span\n[`Event`]: crate::event::Event\n[`Metadata`]: crate::Metadata\n[`Attributes`]: crate::span::Attributes\n[`Record`]: crate::span::Record\n[`new_span`]: crate::Subscriber::new_span\n[`record`]: crate::Subscriber::record\n[`event`]: crate::Subscriber::event","links":{"`Visit`":"20:284:3205","std::fmt::Debug":"2:11015:123","crate::Subscriber::new_span":"20:691:4219","crate::Subscriber":"20:686:3160","crate::event::Event":"20:837:3157","`Value`":"20:294:3158","Visit::record_debug":"20:293:3210","mod@crate::span":"0:141:3161","crate::span::Attributes":"20:1103:4158","`Value::record`":"20:295:3220","crate::span::Record":"20:1111:3198","crate::Metadata":"20:482:3167"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:60:3747","0:58-20:265:833"],"is_stripped":false}}},"a:2:3443:4846-0:386:4196":{"id":"a:2:3443:4846-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:282:3222":{"id":"0:282:3222","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[1124,4],"end":[1124,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:66:3751":{"id":"0:66:3751","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[152,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:245:4181":{"id":"0:245:4181","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1542,4],"end":[1544,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:36:2074":{"id":"0:36:2074","crate_id":0,"name":"warn","span":{"filename":"src/macros.rs","begin":[2149,0],"end":[2400,1]},"visibility":"public","docs":"Constructs an event at the warn level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::warn;\n# fn main() {\n\nlet warn_description = \"Invalid Input\";\nlet input = &[0x27, 0x45];\n\nwarn!(?input, warning = warn_description);\nwarn!(\n    target: \"input_events\",\n    warning = warn_description,\n    \"Received warning for input: {:?}\", input,\n);\nwarn!(name: \"invalid\", ?input);\n# }\n```","links":{"crate#using-the-macros":"0:0:3224","crate::event!":"0:29:3156"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:181:4390":{"id":"0:181:4390","crate_id":0,"name":"entered","span":{"filename":"src/span.rs","begin":[896,4],"end":[902,5]},"visibility":"public","docs":"Enters this span, consuming it and returning a [guard][`EnteredSpan`]\nthat will exit the span when dropped.\n\n<pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n    <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n    <code>Span::entered</code> may produce incorrect traces if the returned drop\n    guard is held across an await point. See <a href=\"#in-asynchronous-code\">the\n    <code>Span::enter</code> documentation</a> for details.\n</pre>\n\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\nThis is similar to the [`Span::enter`] method, except that it moves the\nspan by value into the returned guard, rather than borrowing it.\nTherefore, this method can be used to create and enter a span in a\nsingle expression, without requiring a `let`-binding. For example:\n\n```\n# use tracing::info_span;\nlet _span = info_span!(\"something_interesting\").entered();\n```\nrather than:\n```\n# use tracing::info_span;\nlet span = info_span!(\"something_interesting\");\nlet _e = span.enter();\n```\n\nFurthermore, `entered` may be used when the span must be stored in some\nother struct or be passed to a function while remaining entered.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The returned <a href=\"../struct.EnteredSpan.html\">\n    <code>EnteredSpan</code></a> guard does not implement <code>Send</code>.\n    Dropping the guard will exit <em>this</em> span, and if the guard is sent\n    to another thread and dropped there, that thread may never have entered\n    this span. Thus, <code>EnteredSpan</code>s should not be sent between threads.\n</pre>\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n\n# Examples\n\nThe returned guard can be [explicitly exited][EnteredSpan::exit],\nreturning the un-entered span:\n\n```\n# use tracing::{Level, span};\nlet span = span!(Level::INFO, \"doing_something\").entered();\n\n// code here is within the span\n\n// explicitly exit the span, returning it\nlet span = span.exit();\n\n// code here is no longer within the span\n\n// enter the span again\nlet span = span.entered();\n\n// now we are inside the span once again\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\").entered();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSince the [`EnteredSpan`] guard can dereference to the [`Span`] itself,\nthe span may still be accessed while entered. For example:\n\n```rust\n# use tracing::info_span;\nuse tracing::field;\n\n// create the span with an empty field, and enter it.\nlet span = info_span!(\"my_span\", some_field = field::Empty).entered();\n\n// we can still record a value for the field while the span is entered.\nspan.record(\"some_field\", &\"hello world!\");\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1088:3162","`EnteredSpan`":"0:386:4196","`Span::enter`":"0:180:3864","`Span`":"0:370:3168","super::subscriber::Subscriber::exit()":"20:697:4448","super::subscriber::Subscriber::enter()":"20:696:3864","EnteredSpan::exit":"0:246:4448"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:283:3834":{"id":"b:2:3179-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3193:150":{"id":"2:3193:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"2:35924:7715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"b:0:125-0:370:3168":{"id":"b:0:125-0:370:3168","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3408:263-0:386:4196":{"id":"a:2:3408:263-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:292:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3175-0:326:3797":{"id":"b:2:3175-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3178:3835"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:4055-0:370:3168":{"id":"b:2:4055-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:213:847":{"id":"0:213:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[1393,4],"end":[1422,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:23:3161":{"id":"0:23:3161","crate_id":0,"name":"span","span":{"filename":"src/macros.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Constructs a new span.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\nCreating a new span:\n```\n# use tracing::{span, Level};\n# fn main() {\nlet span = span!(Level::TRACE, \"my span\");\nlet _enter = span.enter();\n// do work inside the span...\n# }\n```","links":{"crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span {\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr) => { ... };\n    ($lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    ($lvl:expr, $name:expr) => { ... };\n}"}},"a:2:3443:4846-0:283:3834":{"id":"a:2:3443:4846-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3179-0:386:4196":{"id":"b:2:3179-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:921":{"id":"0:210:921","crate_id":0,"name":"hash","span":{"filename":"src/span.rs","begin":[1387,4],"end":[1389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["hasher",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:11243:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:35:3554":{"id":"0:35:3554","crate_id":0,"name":"info","span":{"filename":"src/macros.rs","begin":[1868,0],"end":[2119,1]},"visibility":"public","docs":"Constructs an event at the info level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::info;\n# // this is so the test will still work in no-std mode\n# #[derive(Debug)]\n# pub struct Ipv4Addr;\n# impl Ipv4Addr { fn new(o1: u8, o2: u8, o3: u8, o4: u8) -> Self { Self } }\n# fn main() {\n# struct Connection { port: u32, speed: f32 }\nuse tracing::field;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\nlet conn = Connection { port: 40, speed: 3.20 };\n\ninfo!(conn.port, \"connected to {:?}\", addr);\ninfo!(\n    target: \"connection_events\",\n    ip = ?addr,\n    conn.port,\n    ?conn.speed,\n);\ninfo!(name: \"completed\", \"completed connection to {:?}\", addr);\n# }\n```","links":{"crate#using-the-macros":"0:0:3224","crate::event!":"0:29:3156"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:94:3850":{"id":"0:94:3850","crate_id":0,"name":"with_current_subscriber","span":{"filename":"src/instrument.rs","begin":[228,4],"end":[233,5]},"visibility":"default","docs":"Attaches the current [default] [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached `Subscriber` will be set as the [default] when the returned\n[`Future`] is polled.\n\nThis can be used to propagate the current dispatcher context when\nspawning a new future that may run on a different thread.\n\n# Examples\n\n```\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Using `set_default` (rather than `set_global_default`) sets the\n// default `Subscriber` for *this* thread only.\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\nlet future = async {\n    // ...\n};\n\n// If a multi-threaded async runtime is in use, this spawned task may\n// run on a different thread, in a different default `Subscriber`'s context.\ntokio::spawn(future);\n\n// However, calling `with_current_subscriber` on the future before\n// spawning it, ensures that the current thread's default `Subscriber` is\n// propagated to the spawned task, regardless of where it executes:\n# let future = async { };\ntokio::spawn(future.with_current_subscriber());\n# }\n```\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:686:3160","`WithDispatch`":"0:283:3834","std::future::Future":"2:48760:163","crate::dispatcher#setting-the-default-subscriber":"0:46:3154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[315,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:108:211","0:109:1402"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:201:4181":{"id":"0:201:4181","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1320,4],"end":[1322,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3194:1923":{"id":"2:3194:1923","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:4846-0:370:3168":{"id":"a:2:3443:4846-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:202:3165":{"id":"0:202:3165","crate_id":0,"name":"metadata","span":{"filename":"src/span.rs","begin":[1325,4],"end":[1327,5]},"visibility":"public","docs":"Returns this span's `Metadata`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:161:4161":{"id":"0:161:4161","crate_id":0,"name":"AsId","span":{"filename":"src/span.rs","begin":[335,0],"end":[339,1]},"visibility":"public","docs":"Trait implemented by types which have a span `Id`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:162:4164"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:282:3222","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"b:2:3175-0:370:3168":{"id":"b:2:3175-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:3835"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2863-0:370:3168":{"id":"b:2:2863-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:29831"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:816-0:370:3168":{"id":"b:5:816-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:818:5469","5:819:5470","5:820:5471"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1431,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:220:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:36000:251-0:386:4196":{"id":"a:2:36000:251-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:141:3161":{"id":"0:141:3161","crate_id":0,"name":"span","span":{"filename":"src/span.rs","begin":[1,0],"end":[1623,1]},"visibility":"public","docs":" Spans represent periods of time in which a program was executing in a\n particular context.\n\n A span consists of [fields], user-defined key-value pairs of arbitrary data\n that describe the context the span represents, and a set of fixed attributes\n that describe all `tracing` spans and events. Attributes describing spans\n include:\n\n - An [`Id`] assigned by the subscriber that uniquely identifies it in relation\n   to other spans.\n - The span's [parent] in the trace tree.\n - [Metadata] that describes static characteristics of all spans\n   originating from that callsite, such as its name, source code location,\n   [verbosity level], and the names of its fields.\n\n # Creating Spans\n\n Spans are created using the [`span!`] macro. This macro is invoked with the\n following arguments, in order:\n\n - The [`target`] and/or [`parent`][parent] attributes, if the user wishes to\n   override their default values.\n - The span's [verbosity level]\n - A string literal providing the span's name.\n - Finally, zero or more arbitrary key/value fields.\n\n [`target`]: super::Metadata::target\n\n For example:\n ```rust\n use tracing::{span, Level};\n\n /// Construct a new span at the `INFO` level named \"my_span\", with a single\n /// field named answer , with the value `42`.\n let my_span = span!(Level::INFO, \"my_span\", answer = 42);\n ```\n\n The documentation for the [`span!`] macro provides additional examples of\n the various options that exist when creating spans.\n\n The [`trace_span!`], [`debug_span!`], [`info_span!`], [`warn_span!`], and\n [`error_span!`] exist as shorthand for constructing spans at various\n verbosity levels.\n\n ## Recording Span Creation\n\n The [`Attributes`] type contains data associated with a span, and is\n provided to the [`Subscriber`] when a new span is created. It contains\n the span's metadata, the ID of [the span's parent][parent] if one was\n explicitly set, and any fields whose values were recorded when the span was\n constructed. The subscriber, which is responsible for recording `tracing`\n data, can then store or record these values.\n\n # The Span Lifecycle\n\n ## Entering a Span\n\n A thread of execution is said to _enter_ a span when it begins executing,\n and _exit_ the span when it switches to another context. Spans may be\n entered through the [`enter`], [`entered`], and [`in_scope`] methods.\n\n The [`enter`] method enters a span, returning a [guard] that exits the span\n when dropped\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var);\n\n // `my_span` exists but has not been entered.\n\n // Enter `my_span`...\n let _enter = my_span.enter();\n\n // Perform some work inside of the context of `my_span`...\n // Dropping the `_enter` guard will exit the span.\n```\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n     <code>Span::enter</code> may produce incorrect traces if the returned drop\n     guard is held across an await point. See\n     <a href=\"struct.Span.html#in-asynchronous-code\">the method documentation</a>\n     for details.\n </pre></div>\n\n The [`entered`] method is analogous to [`enter`], but moves the span into\n the returned guard, rather than borrowing it. This allows creating and\n entering a span in a single expression:\n\n ```\n # use tracing::{span, Level};\n // Create a span and enter it, returning a guard:\n let span = span!(Level::INFO, \"my_span\").entered();\n\n // We are now inside the span! Like `enter()`, the guard returned by\n // `entered()` will exit the span when it is dropped...\n\n // ...but, it can also be exited explicitly, returning the `Span`\n // struct:\n let span = span.exit();\n ```\n\n Finally, [`in_scope`] takes a closure or function pointer and executes it\n inside the span:\n\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var = &my_var);\n\n my_span.in_scope(|| {\n     // perform some work in the context of `my_span`...\n });\n\n // Perform some work outside of the context of `my_span`...\n\n my_span.in_scope(|| {\n     // Perform some more work in the context of `my_span`.\n });\n ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Since entering a span takes <code>&self</code>, and\n     <code>Span</code>s are <code>Clone</code>, <code>Send</code>, and\n     <code>Sync</code>, it is entirely valid for multiple threads to enter the\n     same span concurrently.\n </pre>\n\n ## Span Relationships\n\n Spans form a tree structure â€” unless it is a root span, all spans have a\n _parent_, and may have one or more _children_. When a new span is created,\n the current span becomes the new span's parent. The total execution time of\n a span consists of the time spent in that span and in the entire subtree\n represented by its children. Thus, a parent span always lasts for at least\n as long as the longest-executing span in its subtree.\n\n ```\n # use tracing::{Level, span};\n // this span is considered the \"root\" of a new trace tree:\n span!(Level::INFO, \"root\").in_scope(|| {\n     // since we are now inside \"root\", this span is considered a child\n     // of \"root\":\n     span!(Level::DEBUG, \"outer_child\").in_scope(|| {\n         // this span is a child of \"outer_child\", which is in turn a\n         // child of \"root\":\n         span!(Level::TRACE, \"inner_child\").in_scope(|| {\n             // and so on...\n         });\n     });\n     // another span created here would also be a child of \"root\".\n });\n```\n\n In addition, the parent of a span may be explicitly specified in\n the `span!` macro. For example:\n\n ```rust\n # use tracing::{Level, span};\n // Create, but do not enter, a span called \"foo\".\n let foo = span!(Level::INFO, \"foo\");\n\n // Create and enter a span called \"bar\".\n let bar = span!(Level::INFO, \"bar\");\n let _enter = bar.enter();\n\n // Although we have currently entered \"bar\", \"baz\"'s parent span\n // will be \"foo\".\n let baz = span!(parent: &foo, Level::INFO, \"baz\");\n ```\n\n A child span should typically be considered _part_ of its parent. For\n example, if a subscriber is recording the length of time spent in various\n spans, it should generally include the time spent in a span's children as\n part of that span's duration.\n\n In addition to having zero or one parent, a span may also _follow from_ any\n number of other spans. This indicates a causal relationship between the span\n and the spans that it follows from, but a follower is *not* typically\n considered part of the duration of the span it follows. Unlike the parent, a\n span may record that it follows from another span after it is created, using\n the [`follows_from`] method.\n\n As an example, consider a listener task in a server. As the listener accepts\n incoming connections, it spawns new tasks that handle those connections. We\n might want to have a span representing the listener, and instrument each\n spawned handler task with its own span. We would want our instrumentation to\n record that the handler tasks were spawned as a result of the listener task.\n However, we might not consider the handler tasks to be _part_ of the time\n spent in the listener task, so we would not consider those spans children of\n the listener span. Instead, we would record that the handler tasks follow\n from the listener, recording the causal relationship but treating the spans\n as separate durations.\n\n ## Closing Spans\n\n Execution may enter and exit a span multiple times before that span is\n _closed_. Consider, for example, a future which has an associated\n span and enters that span every time it is polled:\n ```rust\n # use std::future::Future;\n # use std::task::{Context, Poll};\n # use std::pin::Pin;\n struct MyFuture {\n    // data\n    span: tracing::Span,\n }\n\n impl Future for MyFuture {\n     type Output = ();\n\n     fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n         let _enter = self.span.enter();\n         // Do actual future work...\n # Poll::Ready(())\n     }\n }\n ```\n\n If this future was spawned on an executor, it might yield one or more times\n before `poll` returns [`Poll::Ready`]. If the future were to yield, then\n the executor would move on to poll the next future, which may _also_ enter\n an associated span or series of spans. Therefore, it is valid for a span to\n be entered repeatedly before it completes. Only the time when that span or\n one of its children was the current span is considered to be time spent in\n that span. A span which is not executing and has not yet been closed is said\n to be _idle_.\n\n Because spans may be entered and exited multiple times before they close,\n [`Subscriber`]s have separate trait methods which are called to notify them\n of span exits and when span handles are dropped. When execution exits a\n span, [`exit`] will always be called with that span's ID to notify the\n subscriber that the span has been exited. When span handles are dropped, the\n [`drop_span`] method is called with that span's ID. The subscriber may use\n this to determine whether or not the span will be entered again.\n\n If there is only a single handle with the capacity to exit a span, dropping\n that handle \"closes\" the span, since the capacity to enter it no longer\n exists. For example:\n ```\n # use tracing::{Level, span};\n {\n     span!(Level::TRACE, \"my_span\").in_scope(|| {\n         // perform some work in the context of `my_span`...\n     }); // --> Subscriber::exit(my_span)\n\n     // The handle to `my_span` only lives inside of this block; when it is\n     // dropped, the subscriber will be informed via `drop_span`.\n\n } // --> Subscriber::drop_span(my_span)\n ```\n\n However, if multiple handles exist, the span can still be re-entered even if\n one or more is dropped. For determining when _all_ handles to a span have\n been dropped, `Subscriber`s have a [`clone_span`] method, which is called\n every time a span handle is cloned. Combined with `drop_span`, this may be\n used to track the number of handles to a given span â€” if `drop_span` has\n been called one more time than the number of calls to `clone_span` for a\n given ID, then no more handles to the span with that ID exist. The\n subscriber may then treat it as closed.\n\n # When to use spans\n\n As a rule of thumb, spans should be used to represent discrete units of work\n (e.g., a given request's lifetime in a server) or periods of time spent in a\n given context (e.g., time spent interacting with an instance of an external\n system, such as a database).\n\n Which scopes in a program correspond to new spans depend somewhat on user\n intent. For example, consider the case of a loop in a program. Should we\n construct one span and perform the entire loop inside of that span, like:\n\n ```rust\n # use tracing::{Level, span};\n # let n = 1;\n let span = span!(Level::TRACE, \"my_loop\");\n let _enter = span.enter();\n for i in 0..n {\n     # let _ = i;\n     // ...\n }\n ```\n Or, should we create a new span for each iteration of the loop, as in:\n ```rust\n # use tracing::{Level, span};\n # let n = 1u64;\n for i in 0..n {\n     let span = span!(Level::TRACE, \"my_loop\", iteration = i);\n     let _enter = span.enter();\n     // ...\n }\n ```\n\n Depending on the circumstances, we might want to do either, or both. For\n example, if we want to know how long was spent in the loop overall, we would\n create a single span around the entire loop; whereas if we wanted to know how\n much time was spent in each individual iteration, we would enter a new span\n on every iteration.\n\n [fields]: super::field\n [Metadata]: super::Metadata\n [verbosity level]: super::Level\n [`Poll::Ready`]: std::task::Poll::Ready\n [`span!`]: super::span!\n [`trace_span!`]: super::trace_span!\n [`debug_span!`]: super::debug_span!\n [`info_span!`]: super::info_span!\n [`warn_span!`]: super::warn_span!\n [`error_span!`]: super::error_span!\n [`clone_span`]: super::subscriber::Subscriber::clone_span()\n [`drop_span`]: super::subscriber::Subscriber::drop_span()\n [`exit`]: super::subscriber::Subscriber::exit\n [`Subscriber`]: super::subscriber::Subscriber\n [`enter`]: Span::enter()\n [`entered`]: Span::entered()\n [`in_scope`]: Span::in_scope()\n [`follows_from`]: Span::follows_from()\n [guard]: Entered\n [parent]: #span-relationships","links":{"std::task::Poll::Ready":"2:48787:232","super::info_span!":"0:26:3389","Span::enter()":"0:180:3864","`Attributes`":"20:1103:4158","super::trace_span!":"0:24:3373","super::span!":"0:23:3161","Span::in_scope()":"0:185:4470","Span::entered()":"0:181:4390","Span::follows_from()":"0:199:4553","super::subscriber::Subscriber::drop_span()":"20:699:5189","super::field":"0:57:833","`Id`":"20:1088:3162","super::Metadata":"20:482:3167","super::Level":"20:1008:3166","super::subscriber::Subscriber":"20:686:3160","Entered":"0:380:4191","super::subscriber::Subscriber::exit":"20:697:4448","super::subscriber::Subscriber::clone_span()":"20:698:4246","super::debug_span!":"0:25:3381","super::warn_span!":"0:27:3397","super::Metadata::target":"20:499:1863","super::error_span!":"0:28:3405"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143-20:1103:4158","0:144-20:1088:3162","0:145-20:1111:3198","0:161:4161","0:370:3168","0:380:4191","0:386:4196"],"is_stripped":false}}},"2:14521:176":{"id":"2:14521:176","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"F"}}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:390:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:0:110-0:326:3797":{"id":"b:0:110-0:326:3797","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:739":{"id":"0:208:739","crate_id":0,"name":"eq","span":{"filename":"src/span.rs","begin":[1376,4],"end":[1383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:31:3452":{"id":"0:31:3452","crate_id":0,"name":"span_enabled","span":{"filename":"src/macros.rs","begin":[1087,0],"end":[1091,1]},"visibility":"public","docs":"Tests whether a span with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{span_enabled, Level};\nif span_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif span_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif span_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3190","crate::span_enabled":"0:31:3452"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"a:2:36000:251-0:370:3168":{"id":"a:2:36000:251-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3185-0:283:3834":{"id":"b:2:3185-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:110-0:386:4196":{"id":"b:0:110-0:386:4196","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138-20:1024:3578":{"id":"0:138-20:1024:3578","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,56],"end":[53,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::LevelFilter","name":"LevelFilter","id":"20:1024:3578","is_glob":false}}},"0:254:710":{"id":"0:254:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1574,4],"end":[1576,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:132:3881":{"id":"0:132:3881","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[414,4],"end":[416,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:130:3798":{"id":"0:130:3798","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:58-20:265:833":{"id":"0:58-20:265:833","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[114,0],"end":[114,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::field","name":"field","id":"20:265:833","is_glob":true}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:289:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:0:110-0:283:3834":{"id":"b:0:110-0:283:3834","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2863-0:283:3834":{"id":"b:2:2863-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2865:29831"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53-20:803:3155":{"id":"0:53-20:803:3155","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,37],"end":[136,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::Dispatch","name":"Dispatch","id":"20:803:3155","is_glob":false}}},"0:68:3751":{"id":"0:68:3751","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:114:3161":{"id":"0:114:3161","crate_id":0,"name":"span","span":{"filename":"src/instrument.rs","begin":[329,4],"end":[331,5]},"visibility":"public","docs":"Borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:335:508":{"id":"0:335:508","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:374:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:162:4164":{"id":"0:162:4164","crate_id":0,"name":"as_id","span":{"filename":"src/span.rs","begin":[338,4],"end":[338,35]},"visibility":"default","docs":"Returns the `Id` of the span that `self` corresponds to, or `None` if\nthis corresponds to a disabled span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:270-20:163:3652":{"id":"0:270-20:163:3652","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[65,0],"end":[65,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:163:3652","is_glob":false}}},"0:26:3389":{"id":"0:26:3389","crate_id":0,"name":"info_span","span":{"filename":"src/macros.rs","begin":[329,0],"end":[374,1]},"visibility":"public","docs":"Constructs a span at the info level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, info_span, Level};\n# fn main() {\ninfo_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::INFO, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::info_span;\n# fn main() {\nlet span = info_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3224","crate::span!":"0:23:3161","crate#configuring-attributes":"0:0:3224","crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:145-20:1111:3198":{"id":"0:145-20:1111:3198","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,45],"end":[320,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Record","name":"Record","id":"20:1111:3198","is_glob":false}}},"b:2:2860-0:370:3168":{"id":"b:2:2860-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:4613"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143-20:1103:4158":{"id":"0:143-20:1103:4158","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,29],"end":[320,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Attributes","name":"Attributes","id":"20:1103:4158","is_glob":false}}},"b:2:3190-0:386:4196":{"id":"b:2:3190-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47-20:160:3648":{"id":"0:47-20:160:3648","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[128,0],"end":[128,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_default","name":"set_default","id":"20:160:3648","is_glob":false}}},"0:385:847":{"id":"0:385:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:49-20:832:3650":{"id":"0:49-20:832:3650","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[134,0],"end":[134,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:832:3650","is_glob":false}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:335:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:292:847":{"id":"0:292:847","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:370:3168":{"id":"0:370:3168","crate_id":0,"name":"Span","span":{"filename":"src/span.rs","begin":[348,0],"end":[358,1]},"visibility":"public","docs":"A handle representing a span, with the capability to enter the span if it\nexists.\n\nIf the span was rejected by the current `Subscriber`'s filter, entering the\nspan will silently do nothing. Thus, the handle can be used in the same\nmanner regardless of whether or not the trace is currently being collected.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:163","a:2:36000:251-0:370:3168","a:2:3408:263-0:370:3168","a:2:3443:4846-0:370:3168","a:2:36058:4849-0:370:3168","a:2:45870:10920-0:370:3168","a:2:45871:11111-0:370:3168","b:0:110-0:370:3168","b:0:125-0:370:3168","b:2:2860-0:370:3168","b:2:2863-0:370:3168","b:2:2918-0:370:3168","b:2:3175-0:370:3168","b:2:3179-0:370:3168","b:2:3185-0:370:3168","b:2:3190-0:370:3168","b:2:4055-0:370:3168","b:5:816-0:370:3168","0:373","0:207","0:209","0:212","0:214","0:218","0:221","0:230"]}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1425,0],"end":[1429,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"items":["0:216:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1455,0],"end":[1476,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4567","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:231:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:61:3751":{"id":"0:61:3751","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[134,4],"end":[134,65]},"visibility":"default","docs":"Attempts to convert `&self` into a `Field` with the specified `metadata`.\n\nIf `metadata` defines this field, then the field is returned. Otherwise,\nthis returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"5:820:5471":{"id":"5:820:5471","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:4846-0:380:4191":{"id":"a:2:3443:4846-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4846","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:390:847":{"id":"0:390:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:182:4443":{"id":"0:182:4443","crate_id":0,"name":"or_current","span":{"filename":"src/span.rs","begin":[1027,4],"end":[1032,5]},"visibility":"public","docs":"Returns this span, if it was [enabled] by the current [`Subscriber`], or\nthe [current span] (whose lexical distance may be further than expected),\n if this span [is disabled].\n\nThis method can be useful when propagating spans to spawned threads or\n[async tasks]. Consider the following:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nIf the current [`Subscriber`] enables the [`DEBUG`] level, then both\nthe \"parent\" and \"child\" spans will be enabled. Thus, when the \"spawaned\na thread!\" event occurs, it will be inside of the \"child\" span. Because\n\"parent\" is the parent of \"child\", the event will _also_ be inside of\n\"parent\".\n\nHowever, if the [`Subscriber`] only enables the [`INFO`] level, the \"child\"\nspan will be disabled. When the thread is spawned, the\n`child_span.entered()` call will do nothing, since \"child\" is not\nenabled. In this case, the \"spawned a thread!\" event occurs outside of\n*any* span, since the \"child\" span was responsible for propagating its\nparent to the spawned thread.\n\nIf this is not the desired behavior, `Span::or_current` can be used to\nensure that the \"parent\" span is propagated in both cases, either as a\nparent of \"child\" _or_ directly. For example:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\n// If DEBUG is enabled, then \"child\" will be enabled, and `or_current`\n// returns \"child\". Otherwise, if DEBUG is not enabled, \"child\" will be\n// disabled, and `or_current` returns \"parent\".\nlet child_span = tracing::debug_span!(\"child\").or_current();\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nWhen spawning [asynchronous tasks][async tasks], `Span::or_current` can\nbe used similarly, in combination with [`instrument`]:\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\ntokio::spawn(\n    async {\n        tracing::info!(\"spawned a task!\");\n\n        // ...\n\n    }.instrument(child_span.or_current())\n);\n```\n\nIn general, `or_current` should be preferred over nesting an\n[`instrument`]  call inside of an [`in_current_span`] call, as using\n`or_current` will be more efficient.\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\nasync fn my_async_fn() {\n    // ...\n}\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// Do this:\ntokio::spawn(\n    my_async_fn().instrument(tracing::debug_span!(\"child\").or_current())\n);\n\n// ...rather than this:\ntokio::spawn(\n    my_async_fn()\n        .instrument(tracing::debug_span!(\"child\"))\n        .in_current_span()\n);\n```\n\n[enabled]: crate::Subscriber::enabled\n[`Subscriber`]: crate::Subscriber\n[current span]: Span::current\n[is disabled]: Span::is_disabled\n[`INFO`]: crate::Level::INFO\n[`DEBUG`]: crate::Level::DEBUG\n[async tasks]: std::task\n[`instrument`]: crate::instrument::Instrument::instrument\n[`in_current_span`]: crate::instrument::Instrument::in_current_span","links":{"crate::Subscriber::enabled":"20:689:3190","crate::instrument::Instrument::instrument":"0:89:3152","std::task":"1:7410:3755","Span::is_disabled":"0:197:4444","Span::current":"0:177:3509","crate::Level::INFO":"20:531:3390","crate::Level::DEBUG":"20:532:3382","crate::instrument::Instrument::in_current_span":"0:90:3807","crate::Subscriber":"20:686:3160"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:386:4196":{"id":"b:2:3185-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:4196":{"id":"0:386:4196","crate_id":0,"name":"EnteredSpan","span":{"filename":"src/span.rs","begin":[401,0],"end":[411,1]},"visibility":"public","docs":"An owned version of [`Entered`], a guard representing a span which has been\nentered and is currently executing.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::entered`] function.\n\n[`Span::entered`]: super::Span::entered()","links":{"`Entered`":"0:380:4191","super::Span::entered()":"0:181:4390"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:244","a:2:36000:251-0:386:4196","a:2:3408:263-0:386:4196","a:2:3443:4846-0:386:4196","a:2:36058:4849-0:386:4196","a:2:45870:10920-0:386:4196","a:2:45871:11111-0:386:4196","b:0:110-0:386:4196","b:0:125-0:386:4196","b:2:2860-0:386:4196","b:2:2863-0:386:4196","b:2:3175-0:386:4196","b:2:3179-0:386:4196","b:2:3185-0:386:4196","b:2:3190-0:386:4196","b:2:4055-0:386:4196","0:389","0:223","0:227","0:247","0:253"]}}},"b:2:14518-0:283:3834":{"id":"b:2:14518-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:48763:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:14520:211","2:14521:176","2:14522:1016"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[327,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:114:3161","0:115:3876","0:116:3798","0:117:3879","0:118:3881","0:119:3883","0:120:3886"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:73:3152":{"id":"0:73:3152","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[1,0],"end":[429,1]},"visibility":"public","docs":"Attach a span to a `std::future::Future`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:88:3153","0:91:3810","0:283:3834","0:326:3797"],"is_stripped":false}}},"0:231:710":{"id":"0:231:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1457,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:176:1289":{"id":"0:176:1289","crate_id":0,"name":"none","span":{"filename":"src/span.rs","begin":[533,4],"end":[538,5]},"visibility":"public","docs":"Constructs a new span that is *completely disabled*.\n\nThis can be used rather than `Option<Span>` to represent cases where a\nspan is not present.\n\nEntering, exiting, and recording values on this span will do nothing.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:380:4191":{"id":"b:2:3190-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:3832":{"id":"0:203:3832","crate_id":0,"name":"with_subscriber","span":{"filename":"src/span.rs","begin":[1368,4],"end":[1372,5]},"visibility":"public","docs":"Invokes a function with a reference to this span's ID and subscriber.\n\nif this span is enabled, the provided function is called, and the result is returned.\nIf the span is disabled, the function is not called, and this method returns `None`\ninstead.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3155","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce((&Id, &Dispatch)) -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3155","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:370:3168":{"id":"b:0:110-0:370:3168","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:3649":{"id":"0:262:3649","crate_id":0,"name":"with_default","span":{"filename":"src/subscriber.rs","begin":[20,0],"end":[25,1]},"visibility":"public","docs":"Sets this [`Subscriber`] as the default for the current thread for the\nduration of a closure.\n\nThe default subscriber is used when creating a new [`Span`] or\n[`Event`].\n\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{"super::event::Event":"20:837:3157","super::subscriber::Subscriber":"20:686:3160","super::span::Span":"0:370:3168"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3160","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:21-22:206:3152":{"id":"0:21-22:206:3152","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[969,0],"end":[969,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"attributes\")]","#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"tracing_attributes::instrument","name":"instrument","id":"22:206:3152","is_glob":false}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1540,0],"end":[1554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:245:4181","0:246:4448"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:248:265":{"id":"0:248:265","crate_id":0,"name":"Target","span":{"filename":"src/span.rs","begin":[1557,4],"end":[1557,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:129:3154":{"id":"0:129:3154","crate_id":0,"name":"dispatcher","span":{"filename":"src/instrument.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Borrows the [`Dispatch`] that is entered when this type is polled.","links":{"`Dispatch`":"20:803:3155"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3155","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:380:4191":{"id":"b:2:2860-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:2862:4613"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:4055-0:386:4196":{"id":"b:2:4055-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:312:5158","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:119:3883":{"id":"0:119:3883","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[354,4],"end":[356,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:88:3153":{"id":"0:88:3153","crate_id":0,"name":"Instrument","span":{"filename":"src/instrument.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Attaches spans to a [`std::future::Future`].\n\nExtension trait allowing futures to be\ninstrumented with a `tracing` [span].\n\n[span]: super::Span","links":{"super::Span":"0:370:3168","`std::future::Future`":"2:48760:163"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:89:3152","0:90:3807"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:110"]}}},"5:819:5470":{"id":"5:819:5470","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1565,0],"end":[1570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4567","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:252:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2860-0:283:3834":{"id":"b:2:2860-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2862:4613"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:229:878":{"id":"0:229:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1450,4],"end":[1452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:60:3747":{"id":"0:60:3747","crate_id":0,"name":"AsField","span":{"filename":"src/field.rs","begin":[129,0],"end":[135,1]},"visibility":"public","docs":"Trait implemented to allow a type to be used as a field key.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: Although this is implemented for both the\n<a href=\"./struct.Field.html\"><code>Field</code></a> type <em>and</em> any\ntype that can be borrowed as an <code>&str</code>, only <code>Field</code>\nallows <em>O</em>(1) access.\nIndexing a field with a string results in an iterative search that performs\nstring comparisons. Thus, if possible, once the key for a field is known, it\nshould be used whenever possible.\n</pre>","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:61:3751"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:282:3222","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:64","0:67"]}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[150,0],"end":[159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"items":["0:66:3751"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:5:816-0:326:3797":{"id":"b:5:816-0:326:3797","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["5:818:5469","5:819:5470","5:820:5471"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:191:4477":{"id":"0:191:4477","crate_id":0,"name":"has_field","span":{"filename":"src/span.rs","begin":[1117,4],"end":[1122,5]},"visibility":"public","docs":"Returns true if this `Span` has a field for the given\n[`Field`][super::field::Field] or field name.","links":{"super::field::Field":"20:845:3204"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:260-20:673:3159":{"id":"0:260-20:673:3159","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[2,0],"end":[2,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::subscriber","name":"subscriber","id":"20:673:3159","is_glob":true}}},"0:193:3220":{"id":"0:193:3220","crate_id":0,"name":"record","span":{"filename":"src/span.rs","begin":[1194,4],"end":[1210,5]},"visibility":"public","docs":"Records that the field described by `field` has the value `value`.\n\nThis may be used with [`field::Empty`] to declare fields whose values\nare not known when the span is created, and record them later:\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, record a value for parting as well.\n// (note that the field name is passed as a string slice)\nspan.record(\"parting\", \"goodbye world!\");\n```\nHowever, it may also be used to record a _new_ value for a field whose\nvalue was already recorded:\n```\nuse tracing::info_span;\n# fn do_something() -> Result<(), ()> { Err(()) }\n\n// Initially, let's assume that our attempt to do something is going okay...\nlet span = info_span!(\"doing_something\", is_okay = true);\nlet _e = span.enter();\n\nmatch do_something() {\n    Ok(something) => {\n        // ...\n    }\n    Err(_) => {\n        // Things are no longer okay!\n        span.record(\"is_okay\", false);\n    }\n}\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The fields associated with a span are part\n    of its <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>.\n    The <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>\n    describing a particular span is constructed statically when the span\n    is created and cannot be extended later to add new fields. Therefore,\n    you cannot record a value for a field that was not specified when the\n    span was created:\n</pre>\n\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, you try to record a value for a new field, `new_field`, which was not\n// declared as `Empty` or populated when you created `span`.\n// You won't get any error, but the assignment will have no effect!\nspan.record(\"new_field\", \"interesting_value_you_really_need\");\n\n// Instead, all fields that may be recorded after span creation should be declared up front,\n// using field::Empty when a value is not known, as we did for `parting`.\n// This `record` call will indeed replace field::Empty with \"you will be remembered\".\nspan.record(\"parting\", \"you will be remembered\");\n```\n\n[`field::Empty`]: super::field::Empty\n[`Metadata`]: super::Metadata","links":{"super::field::Empty":"20:850:4801"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"field::Value","id":"20:294:3158","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:137-20:1038:3931":{"id":"0:137-20:1038:3931","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,23],"end":[53,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::metadata::ParseLevelFilterError","name":"ParseLevelFilterError","id":"20:1038:3931","is_glob":false}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:355:5158","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:6-20:803:3155":{"id":"0:6-20:803:3155","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,15],"end":[952,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::dispatcher::Dispatch","name":"Dispatch","id":"20:803:3155","is_glob":false}}},"0:252:710":{"id":"0:252:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1567,4],"end":[1569,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:370:3168":{"id":"a:2:3408:263-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:332:847":{"id":"0:332:847","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45870:10920-0:386:4196":{"id":"a:2:45870:10920-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:10920","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:2:3175-0:283:3834":{"id":"b:2:3175-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3178:3835"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:110-0:380:4191":{"id":"b:0:110-0:380:4191","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2862:4613":{"id":"2:2862:4613","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:131:3879":{"id":"0:131:3879","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[409,4],"end":[411,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:52-20:161:3651":{"id":"0:52-20:161:3651","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,17],"end":[136,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_global_default","name":"set_global_default","id":"20:161:3651","is_glob":false}}},"b:2:4055-0:283:3834":{"id":"b:2:4055-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[139,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:63:3751"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:196:3359":{"id":"0:196:3359","crate_id":0,"name":"record_all","span":{"filename":"src/span.rs","begin":[1213,4],"end":[1235,5]},"visibility":"public","docs":"Records all the fields in the provided `ValueSet`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:139:3577":{"id":"0:139:3577","crate_id":0,"name":"STATIC_MAX_LEVEL","span":{"filename":"src/level_filters.rs","begin":[66,0],"end":[66,64]},"visibility":"public","docs":"The statically configured maximum trace level.\n\nSee the [module-level documentation] for information on how to configure\nthis.\n\nThis value is checked by the `event!` and `span!` macros. Code that\nmanually constructs events or spans via the `Event::record` function or\n`Span` constructors should compare the level against this value to\ndetermine if those spans or events are enabled.\n\n[module-level documentation]: self#compile-time-filters","links":{"self#compile-time-filters":"0:135:3172"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"LevelFilter","id":"20:1024:3578","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"const":{"expr":"_","value":null,"is_literal":false}}}},"0:220:878":{"id":"0:220:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:118:3881":{"id":"0:118:3881","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[349,4],"end":[351,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:380:4191":{"id":"b:2:3179-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:508":{"id":"0:374:508","crate_id":0,"name":"clone","span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:385:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:92:3832":{"id":"0:92:3832","crate_id":0,"name":"with_subscriber","span":{"filename":"src/instrument.rs","begin":[176,4],"end":[184,5]},"visibility":"default","docs":"Attaches the provided [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached [`Subscriber`] will be set as the [default] when the returned\n[`Future`] is polled.\n\n# Examples\n\n```\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# use tracing::subscriber::NoSubscriber as MyOtherSubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Set the default `Subscriber`\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n\n// Create a different `Subscriber` and attach it to a future.\nlet other_subscriber = MyOtherSubscriber::default();\nlet future = async {\n    tracing::info!(\"this event will be recorded by the other `Subscriber`\");\n    // ...\n};\n\nfuture\n    // Attach the other `Subscriber` to the future before awaiting it\n    .with_subscriber(other_subscriber)\n    .await;\n\n// Once the future has completed, we return to the default `Subscriber`.\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n# }\n```\n\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:686:3160","`WithDispatch`":"0:283:3834","std::future::Future":"2:48760:163","crate::dispatcher#setting-the-default-subscriber":"0:46:3154"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3155","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45870:10920-0:380:4191":{"id":"a:2:45870:10920-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:10920","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:261-20:832:3650":{"id":"0:261-20:832:3650","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[6,0],"end":[6,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:832:3650","is_glob":false}}},"0:63:3751":{"id":"0:63:3751","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[141,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:3153","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:144-20:1088:3162":{"id":"0:144-20:1088:3162","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,41],"end":[320,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Id","name":"Id","id":"20:1088:3162","is_glob":false}}},"a:2:36000:251-0:283:3834":{"id":"a:2:36000:251-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:188:833":{"id":"0:188:833","crate_id":0,"name":"field","span":{"filename":"src/span.rs","begin":[1107,4],"end":[1112,5]},"visibility":"public","docs":"Returns a [`Field`][super::field::Field] for the field with the\ngiven `name`, if one exists,","links":{"super::field::Field":"20:845:3204"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"field::Field","id":"20:845:3204","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3747","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:380:4191":{"id":"b:2:4055-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115:3876":{"id":"0:115:3876","crate_id":0,"name":"span_mut","span":{"filename":"src/instrument.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Mutably borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:19-20:482:3167":{"id":"0:19-20:482:3167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,37],"end":[962,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Metadata","name":"Metadata","id":"20:482:3167","is_glob":false}}},"0:109:1402":{"id":"0:109:1402","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[318,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45901:3754","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:14720:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:48785:220","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:48760:163","args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:33:3531":{"id":"0:33:3531","crate_id":0,"name":"trace","span":{"filename":"src/macros.rs","begin":[1303,0],"end":[1554,1]},"visibility":"public","docs":"Constructs an event at the trace level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::trace;\n# #[derive(Debug, Copy, Clone)] struct Position { x: f32, y: f32 }\n# impl Position {\n# const ORIGIN: Self = Self { x: 0.0, y: 0.0 };\n# fn dist(&self, other: Position) -> f32 {\n#    let x = (other.x - self.x).exp2(); let y = (self.y - other.y).exp2();\n#    (x + y).sqrt()\n# }\n# }\n# fn main() {\nlet pos = Position { x: 3.234, y: -1.223 };\nlet origin_dist = pos.dist(Position::ORIGIN);\n\ntrace!(position = ?pos, ?origin_dist);\ntrace!(\n    target: \"app_events\",\n    position = ?pos,\n    \"x is {} and y is {}\",\n    if pos.x >= 0.0 { \"positive\" } else { \"negative\" },\n    if pos.y >= 0.0 { \"positive\" } else { \"negative\" }\n);\ntrace!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3224","crate::event!":"0:29:3156"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"b:0:125-0:380:4191":{"id":"b:0:125-0:380:4191","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246:4448":{"id":"0:246:4448","crate_id":0,"name":"exit","span":{"filename":"src/span.rs","begin":[1548,4],"end":[1553,5]},"visibility":"public","docs":"Exits this span, returning the underlying [`Span`].","links":{"`Span`":"0:370:3168"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:283:3834":{"id":"b:2:2918-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5177","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2920:29832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:259:3159":{"id":"0:259:3159","crate_id":0,"name":"subscriber","span":{"filename":"src/subscriber.rs","begin":[1,0],"end":[65,56]},"visibility":"public","docs":"Collects and records trace data.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:261-20:832:3650","0:262:3649","0:266:3651","0:268:3648","0:270-20:163:3652","0:260-20:673:3159"],"is_stripped":false}}},"a:2:36058:4849-0:386:4196":{"id":"a:2:36058:4849-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:4849","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:135:3172":{"id":"0:135:3172","crate_id":0,"name":"level_filters","span":{"filename":"src/level_filters.rs","begin":[1,0],"end":[98,1]},"visibility":"public","docs":"Trace verbosity level filtering.\n\n# Compile time filters\n\nTrace verbosity levels can be statically disabled at compile time via Cargo\nfeatures, similar to the [`log` crate]. Trace instrumentation at disabled\nlevels will be skipped and will not even be present in the resulting binary\nunless the verbosity level is specified dynamically. This level is\nconfigured separately for release and debug builds. The features are:\n\n* `max_level_off`\n* `max_level_error`\n* `max_level_warn`\n* `max_level_info`\n* `max_level_debug`\n* `max_level_trace`\n* `release_max_level_off`\n* `release_max_level_error`\n* `release_max_level_warn`\n* `release_max_level_info`\n* `release_max_level_debug`\n* `release_max_level_trace`\n\nThese features control the value of the `STATIC_MAX_LEVEL` constant. The\ninstrumentation macros macros check this value before recording an event or\nconstructing a span. By default, no levels are disabled.\n\nFor example, a crate can disable trace level instrumentation in debug builds\nand trace, debug, and info level instrumentation in release builds with the\nfollowing configuration:\n\n```toml\n[dependencies]\ntracing = { version = \"0.1\", features = [\"max_level_debug\", \"release_max_level_warn\"] }\n```\n## Notes\n\nPlease note that `tracing`'s static max level features do *not* control the\n[`log`] records that may be emitted when [`tracing`'s \"log\" feature flag][f] is\nenabled. This is to allow `tracing` to be disabled entirely at compile time\nwhile still emitting `log` records --- such as when a library using\n`tracing` is used by an application using `log` that doesn't want to\ngenerate any `tracing`-related code, but does want to collect `log` records.\n\nThis means that if the \"log\" feature is in use, some code may be generated\nfor `log` records emitted by disabled `tracing` events. If this is not\ndesirable, `log` records may be disabled separately using [`log`'s static\nmax level features][`log` crate].\n\n[`log`]: https://docs.rs/log/\n[`log` crate]: https://docs.rs/log/latest/log/#compile-time-filters\n[f]: https://docs.rs/tracing/latest/tracing/#emitting-log-records","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:137-20:1038:3931","0:138-20:1024:3578","0:139:3577"],"is_stripped":false}}},"0:197:4444":{"id":"0:197:4444","crate_id":0,"name":"is_disabled","span":{"filename":"src/span.rs","begin":[1244,4],"end":[1246,5]},"visibility":"public","docs":"Returns `true` if this span was disabled by the subscriber and does not\nexist.\n\nSee also [`is_none`].\n\n[`is_none`]: Span::is_none()","links":{"Span::is_none()":"0:198:4518"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:89:3152":{"id":"0:89:3152","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[86,4],"end":[91,5]},"visibility":"default","docs":"Instruments this type with the provided [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\n# Examples\n\nInstrumenting a future:\n\n```rust\nuse tracing::Instrument;\n\n# async fn doc() {\nlet my_future = async {\n    // ...\n};\n\nmy_future\n    .instrument(tracing::info_span!(\"my_future\"))\n    .await\n# }\n```\n\nThe [`Span::or_current`] combinator can be used in combination with\n`instrument` to ensure that the [current span] is attached to the\nfuture if the span passed to `instrument` is [disabled]:\n\n```\nuse tracing::Instrument;\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet my_future = async {\n    // ...\n};\n\nlet outer_span = tracing::info_span!(\"outer\").entered();\n\n// If the \"my_future\" span is enabled, then the spawned task will\n// be within both \"my_future\" *and* \"outer\", since \"outer\" is\n// \"my_future\"'s parent. However, if \"my_future\" is disabled,\n// the spawned task will *not* be in any span.\ntokio::spawn(\n    my_future\n        .instrument(tracing::debug_span!(\"my_future\"))\n);\n\n// Using `Span::or_current` ensures the spawned task is instrumented\n// with the current span, if the new span passed to `instrument` is\n// not enabled. This means that if the \"my_future\"  span is disabled,\n// the spawned task will still be instrumented with the \"outer\" span:\n# let my_future = async {};\ntokio::spawn(\n   my_future\n        .instrument(tracing::debug_span!(\"my_future\").or_current())\n);\n```\n\n[entered]: super::Span::enter()\n[`Span::or_current`]: super::Span::or_current()\n[current span]: super::Span::current()\n[disabled]: super::Span::is_disabled()\n[`Future`]: std::future::Future","links":{"std::future::Future":"2:48760:163","super::Span::or_current()":"0:182:4443","super::Span::enter()":"0:180:3864","super::Span::is_disabled()":"0:197:4444","`Span`":"0:370:3168","`Drop`":"2:3671:4567","super::Span::current()":"0:177:3509"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["span",{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3797","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45871:11111-0:386:4196":{"id":"a:2:45871:11111-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:11111","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:123:211":{"id":"0:123:211","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[381,4],"end":[381,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:167:4223":{"id":"0:167:4223","crate_id":0,"name":"new_root","span":{"filename":"src/span.rs","begin":[460,4],"end":[462,5]},"visibility":"public","docs":"Constructs a new `Span` as the root of its own trace tree, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3167","super::Span::follows_from":"0:199:4553","super::field::ValueSet":"20:280:3197"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1572,0],"end":[1577,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4567","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:254:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2:14520:211":{"id":"2:14520:211","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"2:48760:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:116:3798":{"id":"0:116:3798","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:25:3381":{"id":"0:25:3381","crate_id":0,"name":"debug_span","span":{"filename":"src/macros.rs","begin":[248,0],"end":[293,1]},"visibility":"public","docs":"Constructs a span at the debug level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{debug_span, span, Level};\n# fn main() {\ndebug_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::DEBUG, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::debug_span;\n# fn main() {\nlet span = debug_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3224","crate::span!":"0:23:3161","crate#configuring-attributes":"0:0:3224","crate#using-the-macros":"0:0:3224"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:117:3879":{"id":"0:117:3879","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[344,4],"end":[346,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:177:3509":{"id":"0:177:3509","crate_id":0,"name":"current","span":{"filename":"src/span.rs","begin":[549,4],"end":[561,5]},"visibility":"public","docs":"Returns a handle to the span [considered by the `Subscriber`] to be the\ncurrent span.\n\nIf the subscriber indicates that it does not track the current span, or\nthat the thread from which this function is called is not currently\ninside a span, the returned span will be disabled.\n\n[considered by the `Subscriber`]:\n    super::subscriber::Subscriber::current_span","links":{"super::subscriber::Subscriber::current_span":"20:701:4245"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:222:878":{"id":"0:222:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1438,4],"end":[1440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:380:4191":{"id":"b:2:3175-0:380:4191","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3178:3835"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14522:1016":{"id":"2:14522:1016","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"2:48763:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:34:644":{"id":"0:34:644","crate_id":0,"name":"debug","span":{"filename":"src/macros.rs","begin":[1580,0],"end":[1831,1]},"visibility":"public","docs":"Constructs an event at the debug level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::debug;\n# fn main() {\n# #[derive(Debug)] struct Position { x: f32, y: f32 }\n\nlet pos = Position { x: 3.234, y: -1.223 };\n\ndebug!(?pos.x, ?pos.y);\ndebug!(target: \"app_events\", position = ?pos, \"New position\");\ndebug!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3224","crate::event!":"0:29:3156"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:198:4518":{"id":"0:198:4518","crate_id":0,"name":"is_none","span":{"filename":"src/span.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Returns `true` if this span was constructed by [`Span::none`] and is\nempty.\n\nIf `is_none` returns `true` for a given span, then [`is_disabled`] will\nalso return `true`. However, when a span is disabled by the subscriber\nrather than constructed by `Span::none`, this method will return\n`false`, while `is_disabled` will return `true`.\n\n[`Span::none`]: Span::none()\n[`is_disabled`]: Span::is_disabled()","links":{"Span::none()":"0:176:1289","Span::is_disabled()":"0:197:4444"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:20-0:370:3168":{"id":"0:20-0:370:3168","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,0],"end":[965,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"self::span::Span","name":"Span","id":"0:370:3168","is_glob":false}}},"a:2:45871:11111-0:370:3168":{"id":"a:2:45871:11111-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:11111","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:199:4553":{"id":"0:199:4553","crate_id":0,"name":"follows_from","span":{"filename":"src/span.rs","begin":[1310,4],"end":[1317,5]},"visibility":"public","docs":"Indicates that the span with the given ID has an indirect causal\nrelationship with this span.\n\nThis relationship differs somewhat from the parent-child relationship: a\nspan may have any number of prior spans, rather than a single one; and\nspans are not considered to be executing _inside_ of the spans they\nfollow from. This means that a span may close even if subsequent spans\nthat follow from it are still open, and time spent inside of a\nsubsequent span should not be included in the time its precedents were\nexecuting. This is used to model causal relationships such as when a\nsingle future spawns several related background tasks, et cetera.\n\nIf this span is disabled, or the resulting follows-from relationship\nwould be invalid, this function will do nothing.\n\n# Examples\n\nSetting a `follows_from` relationship with a `Span`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span1 = span!(Level::INFO, \"span_1\");\nlet span2 = span!(Level::DEBUG, \"span_2\");\nspan2.follows_from(span1);\n```\n\nSetting a `follows_from` relationship with the current span:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nspan.follows_from(Span::current());\n```\n\nSetting a `follows_from` relationship with a `Span` reference:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet curr = Span::current();\nspan.follows_from(&curr);\n```\n\nSetting a `follows_from` relationship with an `Id`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet id = span.id();\nspan.follows_from(id);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["from",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3162","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45870:10920-0:370:3168":{"id":"a:2:45870:10920-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:10920","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"a:2:45870:10920-0:283:3834":{"id":"a:2:45870:10920-0:283:3834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:10920","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"b:0:125-0:283:3834":{"id":"b:0:125-0:283:3834","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3810","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3834","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1375,0],"end":[1384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:208:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:380:4191":{"id":"0:380:4191","crate_id":0,"name":"Entered","span":{"filename":"src/span.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"A guard representing a span which has been entered and is currently\nexecuting.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::enter`] function.\n\n[`Span::enter`]: super::Span::enter","links":{"super::Span::enter":"0:180:3864"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:36000:251-0:380:4191","a:2:3408:263-0:380:4191","a:2:3443:4846-0:380:4191","a:2:36058:4849-0:380:4191","a:2:45870:10920-0:380:4191","a:2:45871:11111-0:380:4191","b:0:110-0:380:4191","b:0:125-0:380:4191","b:2:2860-0:380:4191","b:2:2863-0:380:4191","b:2:3175-0:380:4191","b:2:3179-0:380:4191","b:2:3185-0:380:4191","b:2:3190-0:380:4191","b:2:4055-0:380:4191","0:383","0:250"]}}},"0:4-0:88:3153":{"id":"0:4-0:88:3153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[951,0],"end":[951,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"self::instrument::Instrument","name":"Instrument","id":"0:88:3153","is_glob":false}}},"b:2:2863-0:386:4196":{"id":"b:2:2863-0:386:4196","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4196","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:29831"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3179-0:370:3168":{"id":"b:2:3179-0:370:3168","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3168","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:9-20:686:3160":{"id":"0:9-20:686:3160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,65],"end":[952,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::subscriber::Subscriber","name":"Subscriber","id":"20:686:3160","is_glob":false}}}},"paths":{"2:48066:9294":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2286:18128":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:4147:9926":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15866:6877":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10746:6181":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"9:436:24491":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:51173:9398":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:48826:4876":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:44098:9168":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2427:3888":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"0:24:3373":{"crate_id":0,"path":["tracing","trace_span"],"kind":"macro"},"1:8966:11110":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:10758:5219":{"crate_id":2,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"2:3443:4846":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14639:6557":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:6179:9940":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:2135:9819":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3815:11023":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5636:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6142:25505":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1018:5822":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12842:1400":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:563:7855":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:25744:3222":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13328:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:544:7166":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6335:7302":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:7330:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11606:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:50106:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26022:18115":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:50457:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16350:7028":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5414:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7835:25514":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4463:11074":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46642:5216":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:781:9898":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46892:5215":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:51723:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:13570:9291":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13610:6356":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:5728:18147":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6711:9759":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:11945:254":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:49877:9350":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:16811:7143":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:7733:5834":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:489:7811":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:3805:11005":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4053:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:521:7833":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:2429:5409":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:4118:7237":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:11278:29959":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"20:871:4804":{"crate_id":20,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"20:1024:3578":{"crate_id":20,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"6:1688:7996":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9379:9978":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:696:5409":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:483:7808":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14746:6573":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:469:7800":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:50241:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7055:7385":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:26452:8946":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6824:8624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11581:6200":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:11474:25592":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:15989:6905":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10812:6183":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:2857:8869":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:894:9728":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:51294:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:1284:38989":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3887:4958":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15794:6857":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9991:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:51769:2229":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"16:7575:9518":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:45901:3754":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:3495:4928":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:35977:9875":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:5262:11100":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13425:6345":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6639:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4960:8716":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3803:224":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:25604:3222":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:2391:37464":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:8047:36474":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:50322:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:8328:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:1638:9810":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3203:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"0:57:833":{"crate_id":0,"path":["tracing","field"],"kind":"module"},"5:7441:5876":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:16858:7153":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:6692:5920":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44409:10975":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12845:1827":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:26410:35594":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5447:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:4239:7240":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6900:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"0:161:4161":{"crate_id":0,"path":["tracing","span","AsId"],"kind":"trait"},"2:48877:9346":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:46394:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11348:25595":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14218:6470":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:50741:9382":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:8708:7603":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:519:6122":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4835:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2618:7190":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5740:6178":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:45714:9481":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:6206:9941":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43288:4952":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:1999:9905":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43252:4950":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4894:9852":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:2475:5857":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13341:25581":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1264:10842":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:1966:18058":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:11769:6208":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11181:9652":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10229:25567":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11240:39197":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:2560:39153":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:1043:5857":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:6749:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:6623:7348":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46118:4802":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:3340:4802":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:726:6054":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2431:10989":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"0:370:3168":{"crate_id":0,"path":["tracing","span","Span"],"kind":"struct"},"17:12087:9677":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:50538:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51751:9422":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"17:16009:6912":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:3127:5469":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11893:6217":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5070:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5377:7263":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:501:7816":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:1610:7704":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"0:262:3649":{"crate_id":0,"path":["tracing","subscriber","with_default"],"kind":"function"},"2:46058:225":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:9715:5931":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:48900:9347":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:1194:9819":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:3677:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7720:33702":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:5403:9646":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:796:5834":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3577:9921":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:2105:10972":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:51591:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:778:9896":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3282:9847":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:5330:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8591:9963":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"18:698:6045":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5142:7255":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:163:3652":{"crate_id":20,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"2:44511:9192":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8879:9483":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:901:9631":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"20:294:3158":{"crate_id":20,"path":["tracing_core","field","Value"],"kind":"trait"},"17:13133:9717":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14892:6614":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:6513:5915":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"0:60:3747":{"crate_id":0,"path":["tracing","field","AsField"],"kind":"trait"},"17:12915:25711":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:26303:8924":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:1918:7709":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:48129:9176":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11022:5217":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13973:6420":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3485:4930":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9374:9977":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:12855:957":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:27275:249":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14102:6439":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:36090:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:3712:4954":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:7015:5409":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:6251:5913":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:15942:6895":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11849:25614":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:11028:9916":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6887:7210":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:859:4802":{"crate_id":20,"path":["tracing_core","field","Iter"],"kind":"struct"},"16:3124:24647":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10362:25571":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8873:9969":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:14259:6481":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:334:5801":{"crate_id":21,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"2:14765:4874":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:51321:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13876:6401":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:4590:9848":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44501:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:48104:9298":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:5455:4795":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:4620:283":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50390:9369":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1573:7916":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1555:7906":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5376:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15650:6827":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11564:9658":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2580:3165":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:16484:7058":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3980:11047":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:521:29787":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:16052:6926":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:26178:8921":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:8261:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47620:8912":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:4436:5798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1898:7706":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:45027:9219":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12804:9709":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:8031:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:44644:9208":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"20:837:3157":{"crate_id":20,"path":["tracing_core","event","Event"],"kind":"struct"},"2:45754:9242":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:48571:9333":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1586:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7072:25510":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10603:25579":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:36000:251":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3881:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4738:5885":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2:2215:1445":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7256:7436":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14869:6605":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:3853:9824":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43501:4777":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:3108:7230":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:8308:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4508:5798":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:51146:9397":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8045:29980":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12816:9710":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4995:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8427:3167":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4956:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:51499:9410":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:5582:5851":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:51429:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:14418:6522":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:7916:9793":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14028:6428":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:49985:9354":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7964:5850":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:7359:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15529:6780":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5301:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7786:39185":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12124:6116":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6701:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:11682:9662":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:15692:6834":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13039:6314":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:659:9626":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:4958:5886":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5280:7260":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:1353:9636":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8280:5939":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:4279:11050":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4441:33701":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12866:9714":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9422:9511":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:50984:9391":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:14666:6562":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:51213:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"0:91:3810":{"crate_id":0,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"17:12978:6310":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8898:9973":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4911:11097":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14174:6453":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:549:7847":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:48196:18172":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12943:6299":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:45810:9824":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:8609:7229":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:45702:9240":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2489:8892":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:50160:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:324:4911":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3730:9479":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14731:6570":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:44451:9878":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4492:11077":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:7209:5894":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:8847:9481":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8737:9477":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:6363:8893":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47862:9283":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:50471:9372":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46507:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:50646:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6612:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:1886:5834":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:51777:9423":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:15594:6821":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12879:9715":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6950:7373":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:542:7845":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:14805:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:37446:4932":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:48076:9295":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:25746:11180":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:413:24493":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:26425:35595":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46246:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:8543:7591":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"10:0:4640":{"crate_id":10,"path":["adler"],"kind":"module"},"6:1715:8007":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8517:8856":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6062:7214":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:7222":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:15143:6655":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"0:27:3397":{"crate_id":0,"path":["tracing","warn_span"],"kind":"macro"},"14:189:24585":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:50781:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4625:9928":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:906:9632":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:6766:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:8582:9802":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:45818:5409":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13238:6327":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:51561:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:477:7805":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11306:10000":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:50633:9378":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:1058:9811":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11435:39200":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7334:7442":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6565:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5385:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:12168:8907":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2598:10997":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6909:4766":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:14720:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6420:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:1912:7708":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13095:6320":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6915:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3698:5798":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:16739:7124":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12225:6234":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11250:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:1660:223":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12957:6304":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:369:9620":{"crate_id":21,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"16:6186:7281":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:48609:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:12323:8911":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:45802:4802":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:1111:3198":{"crate_id":20,"path":["tracing_core","span","Record"],"kind":"struct"},"2:14868:10934":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"9:0:4639":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:5553:1039":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:3840:4802":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:25160:3222":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:48591:9338":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:36:2074":{"crate_id":0,"path":["tracing","warn"],"kind":"macro"},"17:13288:9723":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:1891:5857":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:3413:4159":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:309:7698":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14150:6451":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:51078:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"9:381:24492":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:48760:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:7881:10927":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11521:9509":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6694:9757":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:590:7869":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12790:9705":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:770:7704":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12792:10009":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11240:9434":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15279:6675":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3827:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:16798:7137":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:7721:8874":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"10:36:7720":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"20:32:3164":{"crate_id":20,"path":["tracing_core","callsite","Callsite"],"kind":"trait"},"2:51733:9421":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"1:9608:9987":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:1091:9818":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:10452:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:26688:8960":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:3748:9923":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:6457:5798":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4940:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:5492:465":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:51525:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50673:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:3439:7233":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5481:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45035:9221":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5394:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11631:9659":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3710:9836":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"1:8728:9476":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12452:9698":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6254:7292":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:113:29778":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7989:8885":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"14:216:7681":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:12444:9866":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4958:8714":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:47788:9278":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5683:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:1062:24572":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4966:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47194:4789":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16619:7079":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44552:9199":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46997:4556":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:12947:9868":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15844:6871":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:7925:18225":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8138:9951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15558:6791":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11425:9656":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1707:8003":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6736:39182":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11807:9666":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:41929:4945":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:45003:4766":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"20:161:3651":{"crate_id":20,"path":["tracing_core","dispatcher","set_global_default"],"kind":"function"},"1:5914:9936":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44460:9186":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5360:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:5447:7265":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"20:1074:4904":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"17:15094:6642":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14978:6623":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3407:7709":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8328:10962":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:16311:7012":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6382:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5558:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:14811:6579":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5126:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:2201:9835":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15255:6316":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15240:6668":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:48217:9303":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:10639:36870":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3683:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:47980:9290":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9523:11151":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5222:7258":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:44789:9213":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5424:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11836:6210":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:8162:7217":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:25221:11181":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:34386:4868":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5671:8407":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7516:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12321:6242":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4921:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15740:6843":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46078:239":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8983:9494":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10678:9990":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44491:9190":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1578:9826":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:1734:7707":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3167:5910":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:5990:5854":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13504:6349":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7492:7462":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:729:10912":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:42094:4948":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:8295:7547":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:585:5902":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:2425:9638":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:51281:9402":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:25957:11266":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5344:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:8249:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:4260:5409":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9493:11150":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5707:25504":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:680:6167":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"13:125:39164":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7279:7437":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:123:5805":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:4602:9849":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:51553:9413":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:51254:9401":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12526:25687":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:16731:7123":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:8098:18098":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:1021:9819":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:44197:9176":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48111:9177":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9759:9523":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:2212:9836":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:51308:9403":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:471:24490":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:11015:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:915:4807":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:44300:9181":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:2338:8859":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14040:6431":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:15852:6874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5469:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:12861:1963":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:639:10655":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:44369:6185":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:4293:11051":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7537:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:7777:5409":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6880:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:26390:35593":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46921:7562":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:12211:8910":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:44654:9209":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:1922:5857":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:613:39204":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43464:4957":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:50444:9371":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:8633:25518":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16919:6432":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:1995:3752":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:44308:9182":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5338:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:10964:5222":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6732:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:48416:18173":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15196:6661":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11947:6204":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:8271:4801":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44145:35615":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:217:4778":{"crate_id":21,"path":["once_cell","sync","Lazy"],"kind":"struct"},"1:9705:248":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:12430:9865":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:832:3650":{"crate_id":20,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"16:2770:7197":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:8711:5107":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1212:9823":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:47712:8916":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:49850:9348":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:2918:7204":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13546:6352":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:26288:8923":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12018:6225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:51092:9395":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:2794:7198":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11347:9511":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:4889:9851":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:7264:5854":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:51543:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:6545:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12351:6331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:11024:5216":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:48086:9296":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15676:6833":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:7034:11145":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:5687:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:4668:5798":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:481:6015":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:50403:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16694:6405":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:2332:9819":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:34380:4867":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:48232:9309":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3238:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9603:9986":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:22:863":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:12416:9287":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50754:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:14557:6547":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:1557:4802":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:754:6059":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"19:0:1370":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6096:9729":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:8199:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:13850:18158":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1728:7706":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11943:5943":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5243:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:8134:7226":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5623:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:3803:9643":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12865:1508":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:12288:9863":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:37379:4933":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10534:25577":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:46663:5227":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1083:39162":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14477:6533":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:50835:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3660:4871":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"11:102:7697":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3478:9916":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:738:9811":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5253:7259":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:4771:6009":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:2119:7471":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6779:7353":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"20:790:3222":{"crate_id":20,"path":["tracing_core","sealed","Sealed"],"kind":"trait"},"11:807:5857":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:2575:8877":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"22:0:3169":{"crate_id":22,"path":["tracing_attributes"],"kind":"module"},"17:12308:6241":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11571:9522":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:11231:9532":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:15550:6790":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:765:29786":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6157:7276":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12987:6354":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1434:9819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:14446:6526":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13468:6347":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14233:6476":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:16110:6938":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:8570:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:8008:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46209:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11746:6206":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5153:11063":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:25339:11179":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:9118:18102":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7982:17948":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7804:39186":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8308:10917":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14271:6484":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44331:9183":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:5077:5495":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:3585:7234":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:12209:9950":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13852:6387":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:803:3155":{"crate_id":20,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"2:26611:8953":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:5015:5887":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:8536:18103":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:14424:9871":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:989:9824":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5170:7256":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14964:6622":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:850:4801":{"crate_id":20,"path":["tracing_core","field","Empty"],"kind":"struct"},"0:23:3161":{"crate_id":0,"path":["tracing","span"],"kind":"macro"},"5:7713:5409":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:16132:6943":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6724:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:6171:7279":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:406:5809":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:16369:7029":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5274:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10211:25566":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:51649:9417":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9069:11125":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:7539:7470":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11392:5940":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:1180:7471":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12824:29957":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5249:8207":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13071:6318":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:80:29776":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:12143:9824":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:9109:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:582:7865":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:2755:9913":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13590:6297":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:6051:233":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7347:7444":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12654:9702":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:50862:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"21:295:9619":{"crate_id":21,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1:8854:9482":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:44259:9179":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45830:9246":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"13:272:7696":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9508:11149":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:9575:29916":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:3565:4942":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2964:7206":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:12859:1951":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"9:227:4789":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12849:777":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:15949:6896":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:37831:4940":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:4363:11058":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:7986:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3671:4567":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5496:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:12105:4789":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"0:26:3389":{"crate_id":0,"path":["tracing","info_span"],"kind":"macro"},"1:762:9895":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:48034:9293":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6508:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:495:7813":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12856:963":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:41:5813":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:37312:4935":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11980:9674":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14626:6554":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11283:4916":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7288:5869":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:12402:9286":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10977:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:5030:11101":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8486:4913":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:9677:5924":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:51601:9415":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12366:9691":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:0:2024":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12853:9713":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:8255:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6656:9748":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7466:5879":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:706:6047":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7410:3755":{"crate_id":1,"path":["std","task"],"kind":"module"},"17:15405:6677":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1511:7881":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16593:6387":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:2588:7189":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:49904:9351":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:29:541":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"5:3311:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12765:6290":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48850:4873":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:5294:5798":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:11717:5901":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:15116:6653":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:9112:10938":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:35970:3158":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:3680:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6791:8616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44573:9201":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:50808:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:852:9815":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:50:5798":{"crate_id":21,"path":["once_cell","imp","Guard"],"kind":"struct"},"2:51489:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:7366:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"13:0:4636":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12914:9867":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:6026:7209":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2952:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:45542:9225":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:2754:18116":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:879:9818":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6814:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:4:3165":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"macro"},"17:11279:6220":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:0:329":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2409:9824":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:25233:8919":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:50012:9355":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6438:25507":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9464:9513":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:25098:37106":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:50201:9362":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11591:25595":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:45555:9227":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12488:6251":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8802:9969":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:12415:9557":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:48567:9332":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10845:6184":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5044:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:284:3205":{"crate_id":20,"path":["tracing_core","field","Visit"],"kind":"trait"},"17:12199:6231":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7952:8884":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2682:7193":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:50876:9387":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49917:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"18:573:6017":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12436:9696":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8509:9961":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:9557:9980":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:16883:7159":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:6736:5534":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14535:6540":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8257:9953":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"18:608:9625":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:44473:9187":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:51507:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"0:139:3577":{"crate_id":0,"path":["tracing","level_filters","STATIC_MAX_LEVEL"],"kind":"constant"},"17:15758:6851":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2854:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:13839:6047":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:9741:9522":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3149:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12968:6308":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:51583:9414":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4402:7242":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7027:7383":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5051:847":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12172:6228":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:44183:9175":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12667:6285":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2988:7207":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44803:9214":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"14:40:6402":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13517:6351":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5130:5911":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3159:273":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1647:7972":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8454:9435":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:1572:9824":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43512:9039":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:7467:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:31:24477":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"0:259:3159":{"crate_id":0,"path":["tracing","subscriber"],"kind":"module"},"2:45520:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:15036:6633":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5033:11079":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:3876:270":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4933:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:4968:4797":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:50066:9357":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5540:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:26318:8928":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:4635:5841":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11994:6220":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:12854:951":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:50376:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48888:7719":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1649:9811":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"23:4:3756":{"crate_id":23,"path":["pin_project_lite","pin_project"],"kind":"macro"},"2:13494:9280":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4182:7239":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:669:4802":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:7793:8856":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"17:15005:6627":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11286:29961":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:25121:37111":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11829:7778":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:462:9893":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:35991:9029":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7880:7315":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12434:9558":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10820:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:48763:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:45774:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10665:6178":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11142:39195":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5143:230":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:686:3160":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber"],"kind":"trait"},"2:47701:9888":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8865:9972":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:811:3351":{"crate_id":20,"path":["tracing_core","dispatcher","Kind"],"kind":"enum"},"1:11649:9539":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:50525:9374":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5198:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5055:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:10549:9237":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:6692:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:5794:9931":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12042:6227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:11032:5224":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8230:25516":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7355:7218":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:16847:7152":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:13314:18248":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:83:6009":{"crate_id":21,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"2:2988:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:45892:18239":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8466:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:16000:6909":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4042:9924":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:50039:9356":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:157:3649":{"crate_id":20,"path":["tracing_core","dispatcher","with_default"],"kind":"function"},"8:0:4638":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:51535:9412":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:1047:9820":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6709:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:7389:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5368:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"0:0:3224":{"crate_id":0,"path":["tracing"],"kind":"module"},"16:6267:7293":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43424:227":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:2177:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2638:7191":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11191:39196":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:48450:9325":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15965:6898":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:7348:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:614:5831":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3138:37583":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:50363:9368":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13689:25552":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:16431:7049":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2284:18127":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:26366:8933":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45012:9217":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6759:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:735:29785":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:527:7836":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:48583:9336":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12840:1991":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:12458:5950":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:2295:8889":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7896:5845":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2091:5798":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"0:326:3797":{"crate_id":0,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"16:3985:6078":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"20:471:3165":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"module"},"16:6678:9754":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:7165:7410":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8766:9186":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6406:7312":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:4637:17922":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2484:7184":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7987:7526":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"14:31:9806":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2184:4864":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:1723:5857":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:6755:5535":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:6522:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:8623:7596":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5170:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:34401:5215":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5026:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9562:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9119:4802":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:7976:259":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:26666:8958":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:3152:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6203:25506":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10650:6177":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5320:8245":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10484:25575":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"0:283:3834":{"crate_id":0,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"2:50903:9388":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"2:36973:4929":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:14056:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"0:29:3156":{"crate_id":0,"path":["tracing","event"],"kind":"macro"},"0:46:3154":{"crate_id":0,"path":["tracing","dispatcher"],"kind":"module"},"1:4811:11079":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13174:6204":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:4714:5841":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:1234:9635":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:50889:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:5511:9855":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:49944:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47212:9267":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:16498:7061":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14524:6539":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:812:266":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4479:11076":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7956:7524":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:1520:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:698:9894":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:50349:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5016:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13480:6348":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:670:9630":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7158:246":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:7546:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13060:6317":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44379:5888":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"17:13324:9726":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6889:5834":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:321:9632":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"0:35:3554":{"crate_id":0,"path":["tracing","info"],"kind":"macro"},"1:1068:10933":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10050:11133":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"2:7876:5417":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:50930:9389":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:51471:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:36001:253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15659:6831":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:8014:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"10:44:7721":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:13531:9285":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:50957:9390":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11548:25594":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:786:10915":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:6202:5834":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8128:6167":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12175:10006":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:15183:6660":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:16396:7036":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14679:6563":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4956:8712":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:44561:9200":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3012:24645":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6344:10843":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15615:6826":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:16258:6994":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:50214:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:36058:4849":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:1669:9834":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:49931:9352":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:51348:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:2916:5177":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:48246:9312":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:44779:9212":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:13344:18160":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:1078:4909":{"crate_id":20,"path":["tracing_core","parent","Parent"],"kind":"enum"},"2:51675:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:47731:8917":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1661:7983":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10779:6182":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:4927:7249":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6600:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8596:11036":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6387:9731":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:51186:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50255:9364":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16422:7045":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:5196:7257":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:51693:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:2738:711":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3910:36546":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12441:9558":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5076:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47669:9271":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12280:6238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:26483:4806":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:51481:9409":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5071:11064":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:51132:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26721:8963":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:6741:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:2568:7716":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9649:9521":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:49971:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"14:7:9806":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:26644:8956":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:12266:6237":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:444:39158":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3128:37584":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:48860:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2608:11002":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:0:597":{"crate_id":2,"path":["core"],"kind":"module"},"17:10448:25574":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"9:168:24558":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:48559:9330":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:316:9631":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:1079:9815":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8284:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16781:7135":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:47658:9887":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:3480:4925":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:11410:5898":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:9054:9497":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:43336:4955":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15780:6856":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2287:3165":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:8264:7543":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15721:6842":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5677:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8813:11045":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:50282:9365":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:162:3590":{"crate_id":20,"path":["tracing_core","dispatcher","has_been_set"],"kind":"function"},"2:2943:516":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2:51051:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:2424:9912":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:29675:286":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6803:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:26065:11257":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:12250:9862":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11588:9538":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"23:53:5155":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:45793:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41984:4946":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:12361:9864":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:13554:9288":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5642:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:2456:9641":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:50822:9385":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8586:9962":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46544:9861":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:47648:8914":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:25642:37117":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:507:6017":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:34113:4808":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"3:756:8888":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"17:10334:25570":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2504:7185":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2892:5881":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"2:51362:9405":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"17:16872:7157":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:50498:9373":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"2:3510:4937":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:47812:8907":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9672:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8789:8907":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:34787:5590":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"14:204:18174":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:4301:11052":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:821:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44996:5223":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1601:7935":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:5331:11106":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5630:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:755:9831":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2177:710":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6729:9767":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6778:8609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15925:6887":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:51200:9399":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:12862:1945":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:50147:9360":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6911:7370":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"23:0:3225":{"crate_id":23,"path":["pin_project_lite"],"kind":"module"},"2:50727:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:1905:7707":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:47182:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1671:7989":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:1716:5409":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7013:7381":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5247:11099":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:46003:9250":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:47758:9273":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6981:7228":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:8273:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:48767:232":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7935:7521":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46882:9251":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:47741:9890":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:2298:5831":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"0:34:644":{"crate_id":0,"path":["tracing","debug"],"kind":"macro"},"16:5058:7252":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5400:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11643:9660":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:25971:18115":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"11:1156:9823":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:26051:3222":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:44614:9205":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12410:9694":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:5024:5494":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:3373:7708":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:918:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:5860:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12838:1245":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6864:4158":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3925:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:5229:9645":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5107:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15705:6839":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:43404:228":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"0:380:4191":{"crate_id":0,"path":["tracing","span","Entered"],"kind":"struct"},"17:14203:6464":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7997:7224":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:574:7860":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11093:39194":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:2626:8866":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1054:9810":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"3:353:239":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:16836:7151":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:4355:11056":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:48351:9315":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:50687:9380":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15802:6858":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:0:4763":{"crate_id":21,"path":["once_cell"],"kind":"module"},"1:2341:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"23:43:5498":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:2364:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13570:6354":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10141:25565":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:7753:8875":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:9616:9518":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:26600:8952":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:11573:6199":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:12851:797":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5003:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:2397:25642":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5224:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"0:32:3190":{"crate_id":0,"path":["tracing","enabled"],"kind":"macro"},"1:10657:9905":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:26459:4811":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2433:24644":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:50660:9379":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:14120:6447":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"0:30:3445":{"crate_id":0,"path":["tracing","event_enabled"],"kind":"macro"},"11:440:39157":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:2449:5834":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11054:39193":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"20:998:3351":{"crate_id":20,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"1:8322:10918":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:48555:9329":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:51389:9406":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1:8924:9484":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:25132:37112":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:3642:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:3937:9644":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12641:9701":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:689:6044":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6841:7360":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:47771:9276":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:2389:4802":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6366:7308":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6412:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15129:6654":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11269:9477":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"20:673:3159":{"crate_id":20,"path":["tracing_core","subscriber"],"kind":"module"},"17:12828:9711":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:44630:6038":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7189:25511":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1035:4802":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7314:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:25919:11263":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5501:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8011:7225":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7302:7438":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:277:4800":{"crate_id":20,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"5:7104:5815":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6935:5815":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5353:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:8902:8701":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:10963:239":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:3701:9835":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"1:3575:9920":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:51227:9400":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1:8783:6185":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11904:9668":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:8318:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:7561:8793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:45568:11046":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2621:11004":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:25943:3222":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15225:6664":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:6702:5856":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:44482:9189":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:48575:9334":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:589:6028":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:44173:9174":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8262:9430":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43685:17952":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:7429:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:581:5590":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:14743:284":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:8590:5108":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4150:7238":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:36002:260":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5415:7264":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:8746:250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2878:7202":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1719:5834":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:16284:7003":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:6667:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:49998:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:35984:4797":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"3:0:539":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:11241:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:4471:11075":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5985:11131":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7518:7468":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8093:9801":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11302:9957":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:1588:5409":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1403:7471":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16712:6415":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12151:7710":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6300:7300":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1588:7928":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46909:9260":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:48839:35740":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:840:10933":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:999:5409":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13937:6415":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2858:7201":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12866:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:26352:35591":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:50552:9375":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13125:6324":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5460:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:125:4778":{"crate_id":21,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"2:51159:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12101:9678":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:50228:9363":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:47880:9284":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:1963:9903":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:962:5820":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:2448:7176":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13781:6374":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:3046:24646":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12212:6233":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10959:6188":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8719:4801":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:3347:7707":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"22:206:3152":{"crate_id":22,"path":["tracing_attributes","instrument"],"kind":"proc_attribute"},"2:4819:4796":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:4506:4802":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:643:6017":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:695:3156":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","event"],"kind":"function"},"5:4466:5798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:16606:6401":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:8071:29982":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:49863:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5314:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:5274:17939":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46013:223":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"6:1593:7930":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6460:25508":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14951:6620":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:11235:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:8416:5896":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13081:25712":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8957:9974":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:50970:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9458:5409":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:14588:4842":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:172:3189":{"crate_id":20,"path":["tracing_core","dispatcher","get_default"],"kind":"function"},"2:50187:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6586:7345":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:11243:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7870:8877":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:13779:4905":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:45680:35620":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:10457:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:25213:3222":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:16929:6437":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12144:9681":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:50700:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"18:635:6040":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3440:34426":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:14563:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"14:0:4643":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:11278:4914":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13917:6405":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1882:5409":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:265:833":{"crate_id":20,"path":["tracing_core","field"],"kind":"module"},"1:8033:29978":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"11:706:9810":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12074:9676":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:11020:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:16382:7034":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3123:17951":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7728:9246":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:2554:7713":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9568:4172":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7713:39184":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9136:9506":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7089:9946":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:7977:7223":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:47416:9270":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:1138:9822":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13189:6220":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:6476:8895":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:48259:9313":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43364:223":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6463:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9831:9906":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:4544:9927":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5587:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:918:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:51517:9411":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7704:6010":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5316:7261":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12837:443":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:2654:4650":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12893:9716":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4983:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2582:10992":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:5683:5815":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6290:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2226:7710":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:4656:17923":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:12119:4802":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8666:3158":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:26098:11256":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:3386:37580":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43349:226":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:15052:6634":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:7999:9846":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6082:7270":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7966:7525":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:49890:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:12857:944":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:34760:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3796:33934":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:25215:11178":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11034:9920":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13656:6316":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:51267:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47721:9889":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:0:4641":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6747:7350":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2548:7187":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:15155:6656":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:16197:6987":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12195:9552":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16825:7146":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:3668:9218":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:51619:9416":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2702:7194":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:5615:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3515:4938":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:4724:9850":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:922:5817":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:48120:9168":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5088:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:8562:7594":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:48755:9344":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:47638:9886":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12700:6288":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:8581:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:26233:8922":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13838:6386":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1619:7705":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12509:6253":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:6632:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5009:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:718:6051":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:0:3151":{"crate_id":20,"path":["tracing_core"],"kind":"module"},"16:8595:9805":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:0:4642":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12933:6297":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7421:25512":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3306:7175":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:557:7852":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:8859:11078":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:4066:5857":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15267:6671":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12464:9699":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11191:9999":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:15898:6883":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:43444:229":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12864:2034":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3134:37582":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:1947:736":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:8302:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:8343:9957":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6874:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11794:9665":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:7204:8901":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:16102:6937":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13102:25713":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14827:6584":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:6058:5920":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1518:7883":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:16139:6945":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:11574:5899":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:50133:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12068:9675":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:11220:9433":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13015:6312":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13025:6313":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:50484:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4699:9929":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13111:6321":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4861:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2850:5906":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5569:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12904:6292":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46937:35679":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15434:6697":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:9802:9858":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5236:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:482:3167":{"crate_id":20,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"16:6419:7168":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:7412:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5604:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:0:1819":{"crate_id":1,"path":["std"],"kind":"module"},"1:4341:11054":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:50565:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9433:9512":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"2:26093:11258":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11873:25615":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15209:6662":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12742:6289":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11537:9657":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3450:4848":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5431:1318":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11397:9655":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6681:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:51038:9393":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:1694:7999":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:375:9621":{"crate_id":21,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:12220:9554":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:16066:6928":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11078:5939":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:7602:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7459:9772":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:16032:6920":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4989:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:485:9633":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:13608:8910":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47690:8915":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12476:9700":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:3693:7235":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:845:3204":{"crate_id":20,"path":["tracing_core","field","Field"],"kind":"struct"},"1:6430:233":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:14536:36917":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:51335:9404":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14940:6619":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"0:37:3572":{"crate_id":0,"path":["tracing","error"],"kind":"macro"},"2:48587:9337":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:531:6022":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:26341:4809":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5406:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46126:9824":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:7981:17947":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:8063:25515":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:6172:9937":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:13821:18157":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6901:7369":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4160:5834":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15772:6855":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:26677:8959":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:2833:5907":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12858:1969":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:50025:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:36059:4851":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11257:9535":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:8025:7527":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4692:7243":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9723:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:243:3156":{"crate_id":20,"path":["tracing_core","event"],"kind":"module"},"2:50714:9381":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11230:9653":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:48095:9297":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12852:775":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:11210:9524":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:50997:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1498:7875":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:1131:3175":{"crate_id":20,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"6:5531:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"20:1045:4903":{"crate_id":20,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"2:47916:9286":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10281:25569":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:38004:4941":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:47165:9262":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:50592:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:1117:4907":{"crate_id":20,"path":["tracing_core","span","Current"],"kind":"struct"},"2:13845:18159":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:34413:35602":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14579:6548":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:7940:8881":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11934:9672":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:25144:37115":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13711:6364":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:0:4646":{"crate_id":17,"path":["object"],"kind":"module"},"6:5649:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:51715:9420":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"17:13666:9727":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:44213:9177":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7975:32329":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:48402:9316":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14692:6565":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:45985:9249":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:40053:4944":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11315:9936":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:8102:7531":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7762:7502":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:1138:4910":{"crate_id":20,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"1:6605:5919":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:46283:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:14077:6437":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10794:5223":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"1:9369:9976":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"6:1543:7897":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8437:9433":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9765:9857":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"15:317:24598":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1085:9817":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:45736:9241":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8432:9958":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3434:34278":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:864:4803":{"crate_id":20,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"1:8480:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12342:6245":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6450:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:11030:219":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6237:7287":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3381:7706":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11502:25593":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:38177:4943":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:8220:7535":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12338:9925":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:7461:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:7652:5933":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6820:25509":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:6444:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14339:6488":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:10644:35799":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9385:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:47629:8913":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12687:9704":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:7575:8802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10255:25568":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:50174:9361":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:2358:9820":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:4701:5798":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:44582:9202":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"15:0:4644":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:35966:9874":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:34348:3753":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13312:9725":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"0:386:4196":{"crate_id":0,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"2:2752:18115":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:14718:6568":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:16654:7109":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:11534:9510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12397:9692":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3984:8856":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4976:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1679:7990":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:12843:356":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51105:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:361:39154":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:9481:9514":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:36549:4927":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4885:234":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:8206:7215":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1007:7704":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7220:7423":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46959:5215":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:48016:9292":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15668:6832":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6995:7374":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8776:9212":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3532:9918":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14431:6524":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:976:4802":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6438:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5490:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:12275:5946":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:0:4645":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:51609:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50417:9370":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10035:218":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"6:6535:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12226:9555":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5755:7268":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:4833:11080":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3130:8862":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:1038:3931":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"17:13754:6368":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43386:225":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:13828:9859":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:44989:9216":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4808:7245":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11761:10005":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"11:871:9817":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:8763:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:77:39220":{"crate_id":20,"path":["tracing_core","callsite","private","Private"],"kind":"struct"},"2:50579:9376":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3507:4936":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:9596:9985":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:13328:9869":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:46037:227":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"6:4824:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6637:9942":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6873:7366":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:12808:32330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:536:7842":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47782:9277":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:10952:5938":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:6571:7342":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1731:8012":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:16044:6923":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:51741:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:51119:9396":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:14441:4841":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:4248:11048":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47157:4915":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:491:7781":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4764:7244":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1636:7964":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:16292:7006":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:8296:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5594:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:515:6020":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5215:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:1103:4158":{"crate_id":20,"path":["tracing_core","span","Attributes"],"kind":"struct"},"6:4894:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"0:33:3531":{"crate_id":0,"path":["tracing","trace"],"kind":"macro"},"16:8480:7584":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9109:9502":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:6494:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:14759:6574":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7912:8878":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:135:3172":{"crate_id":0,"path":["tracing","level_filters"],"kind":"module"},"1:9409:9510":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6109:7274":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47569:9885":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:50606:9377":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12293:6239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13201:9654":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:7004:8896":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10713:6180":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:2112:829":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:14857:6603":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11545:29962":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:6589:284":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:1033:5834":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:12181:9551":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15021:6629":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13811:6378":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:3401:279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:44160:9173":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14771:6575":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:48563:9331":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2818:7199":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3534:9919":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12377:25686":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:13729:6367":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11330:29925":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:362:6009":{"crate_id":21,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"11:2308:7471":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:4045:9925":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:7198:8902":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42039:4947":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5205:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9442:4802":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2746:7196":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5499:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:1629:7960":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5038:8148":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15827:6866":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7041:7216":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:338:7701":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7306:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13160:9720":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:8040:39189":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8501:9960":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:563:6027":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3933:5815":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:14052:6432":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13409:6136":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:596:9634":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6660:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"15:405:24608":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10510:25576":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5063:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3787:5222":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:16476:7055":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:14466:9198":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:10900:9648":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:2076:9908":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:3403:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"7:78:24484":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:16322:7013":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12427:29929":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:2413:24617":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:16245:6988":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10390:25572":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7446:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:16272:7000":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:25341:8919":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14915:6615":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:1672:5811":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:47173:4917":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:833:9812":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10919:6185":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7209:7422":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:9629:29917":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:26622:8954":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:1965:9904":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:47798:6185":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:12844:1791":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50268:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15814:6861":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:26008:11267":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5548:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6717:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:46431:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3893:4961":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:37245:4931":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14009:6427":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:5732:18148":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9700:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48579:9335":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:50430:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15169:6657":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10052:11134":{"crate_id":2,"path":["core","random","Random"],"kind":"trait"},"17:14138:6448":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9396:9509":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:16076:6931":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:5982:4448":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:48437:9321":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5184:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5513:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:44342:18225":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50916:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50052:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50079:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:2022:9906":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:1121:4908":{"crate_id":20,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"1:8491:4912":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"14:222:7683":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:47830:8911":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:28:3405":{"crate_id":0,"path":["tracing","error_span"],"kind":"macro"},"17:14926:6617":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:791:4776":{"crate_id":20,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"17:12252:6236":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9125:9505":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13385:25582":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:3139:6065":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:16909:7163":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:1567:7914":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4948:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:6265:5885":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2:46172:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:36761:4926":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:12986:18129":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:2411:8865":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12182:6229":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:4981:7251":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1818:5815":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:48427:9317":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:7103:5928":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:5576:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:15:3213":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:0:1067":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1448:9823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13300:9724":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11695:9663":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12359:9926":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:8532:18104":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:8331:5914":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2528:7186":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47934:9287":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:51627:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:10837:10846":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:1419:9820":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:4242:11049":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:783:7705":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:50093:9358":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6624:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5158:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:35924:7715":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:8500:7585":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"0:31:3452":{"crate_id":0,"path":["tracing","span_enabled"],"kind":"macro"},"17:10558:25578":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:3655:4870":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:25631:8920":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14494:6536":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7821:5409":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:37658:4939":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46656:5226":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5238:11098":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"9:319:7758":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:1103:9821":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:14246:6480":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5507:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"11:1878:4802":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:14791:6578":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13900:6402":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10982:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12423:6248":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:3437:34425":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:13898:18166":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:623:39205":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:8:3163":{"crate_id":20,"path":["tracing_core","callsite"],"kind":"module"},"2:45870:10920":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3962:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11407:5941":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11338:9654":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5111:7254":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:45871:11111":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:50120:9359":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14191:6461":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6500:24616":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2465:7178":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:25119:37109":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11044:9650":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13147:9719":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"20:796:3183":{"crate_id":20,"path":["tracing_core","callsite","DefaultCallsite"],"kind":"struct"},"1:8444:9434":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14454:6528":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:48468:9327":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15066:6636":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:456:9892":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:50943:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:5687:7267":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:46649:5217":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11708:6160":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:44205:9168":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:683:9824":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:43494:4959":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:16300:7007":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11619:6203":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:26699:8961":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:16149:6950":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7468:7461":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:50795:9384":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:2548:7712":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10020:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:3866:4956":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11733:9654":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:1162:4794":{"crate_id":20,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"17:10894:9647":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:16461:7054":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10909:6060":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:6740:233":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4265:7241":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13264:9721":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:4915:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:491:6016":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:51011:9392":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:11822:9667":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:4842:7246":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2872:9914":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15957:6897":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:16059:6927":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7485:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10676:9991":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:10632:25580":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:3352:37579":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13214:6326":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:16094:6935":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:167:24578":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:2246:9637":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:50295:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8183:5935":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:1020:7705":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:374:5807":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:175:6009":{"crate_id":21,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"17:10680:6179":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2658:7192":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8148:7227":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:5459:36331":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:6792:7354":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:44595:9203":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:6285:5798":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3480:9917":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12853:969":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:25162:11182":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:11413:5942":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:5808:9933":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"11:1562:24573":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"9:346:24506":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:16410:7043":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14512:6537":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5075:11067":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:7452:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:8267:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:8340:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15890:6881":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:9710:5930":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:6939:7372":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7413:9771":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6527:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14403:6517":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:51416:9407":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"5:2308:8857":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:36091:280":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:12298:9924":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9998:9958":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:7584:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5828:9934":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5073:11066":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:51024:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6967:7211":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:26710:8962":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"20:1008:3166":{"crate_id":20,"path":["tracing_core","metadata","Level"],"kind":"struct"},"1:6952:5927":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:16331:7015":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:15882:6879":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1493:7873":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8055:9800":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3201:239":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:44293:9180":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:51375:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:807:3653":{"crate_id":20,"path":["tracing_core","dispatcher","WeakDispatch"],"kind":"struct"},"17:14388:6513":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3624:4951":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:4343:9824":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12839:504":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4909:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6653:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:42673:4949":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:26472:4810":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:25837:11261":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:46357:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:3584:9642":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9685:5798":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:674:5903":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"0:25:3381":{"crate_id":0,"path":["tracing","debug_span"],"kind":"macro"},"17:11517:6195":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8247:9429":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46976:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:50768:9383":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:25609:11184":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:5453:9930":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8242:3222":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:2568:7188":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11921:9671":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8057:29981":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:51667:9418":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:16895:7162":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:4811:8018":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12114:9679":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11722:6220":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2722:7195":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:25969:37339":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:309:5815":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4307:11053":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12239:6235":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4268:5834":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:44389:9876":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:4900:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44520:9194":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:4614:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:11028:5227":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:45018:9218":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3408:263":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:25090:5590":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4848:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:0:4647":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12863:1028":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7551:25513":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:45861:9879":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:48644:18275":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:13673:6359":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:51240:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:689:3190":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","enabled"],"kind":"function"},"17:11289:39198":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"0:266:3651":{"crate_id":0,"path":["tracing","subscriber","set_global_default"],"kind":"function"},"2:44104:9169":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:26633:8955":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:2957:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5647:7266":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6913:9943":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:51657:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:12840:9712":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:47204:9266":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1203:9820":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5439:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6806:7208":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15082:6640":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:4946:11053":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:155:5802":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:5046:4853":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10929:9978":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:48818:4875":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7621:5932":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14089:6438":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3505:5857":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11132:9651":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:239:5814":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:51685:9419":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:598:39203":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:25881:11262":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:1700:8000":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3122:3222":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7904:7520":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15977:6904":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"23:37:5161":{"crate_id":23,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"5:1159:5815":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12333:6244":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:47397:9268":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:7542:29977":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"5:1248:38988":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13276:9722":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:51065:9394":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6065:9428":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3227:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:25108:37106":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:651:6017":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1049:9825":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:498:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:26655:8957":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:8176:7533":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14465:6531":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4298:5815":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5083:7253":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:9450:9979":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7743:5826":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10939:6187":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3143:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:2948:7205":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12627:5951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14162:6452":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12134:9680":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:2375:9830":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:48633:9341":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:268:3648":{"crate_id":0,"path":["tracing","subscriber","set_default"],"kind":"function"},"17:11669:9661":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5136:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3155:274":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:1003:7471":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:160:3648":{"crate_id":20,"path":["tracing_core","dispatcher","set_default"],"kind":"function"},"17:15470:6728":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1525:7886":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:50619:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16765:7130":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:8100:5861":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11741:9543":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:45596:3168":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14652:6258":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14705:6566":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1628:9825":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:16121:6942":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13004:6311":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46951:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5290:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14991:6624":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4900:7248":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:36:4767":{"crate_id":20,"path":["tracing_core","callsite","rebuild_interest_cache"],"kind":"function"},"5:6131:267":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4954:7250":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13634:25584":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6121:7213":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44427:9877":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:10412:25573":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7386:11176":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:1712:4802":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7383:7446":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5725:6177":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13990:6422":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:51402:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47962:9289":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"0:141:3161":{"crate_id":0,"path":["tracing","span"],"kind":"module"},"1:9544:9517":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:10658:124":{"crate_id":2,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"14:162:9806":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13050:6316":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:12169:9547":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:538:6025":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2994:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:48785:220":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46148:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:11581:5900":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:568:7857":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:8352:8852":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11553:9338":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6835:9770":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:8317:25517":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12722:6220":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7390:282":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8796:9294":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:12813:10919":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:3887:6070":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7763:37461":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7369:7219":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:48777:240":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:51463:9408":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:11031:9918":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:37513:4934":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44605:9204":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:1599:9827":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:12846:1928":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5146:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2146:9820":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44529:9195":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6414:5920":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4888:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2906:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:8290:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:280:3197":{"crate_id":20,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"5:7829:5409":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7398:39183":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3625:11030":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6040:7212":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:25329:3222":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:16753:7128":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:46470:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:5346:7262":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2422:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1062:9812":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:50336:9367":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:50849:9386":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:828:9825":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:11034:5225":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"0:73:3152":{"crate_id":0,"path":["tracing","instrument"],"kind":"module"},"5:7298:5871":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:8084:5857":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5260:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6474:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13957:6416":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44434:8915":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7801:8876":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7505:7465":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:6322:4795":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6638:9738":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:44543:9198":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"15:299:24597":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:2838:7200":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"0:88:3153":{"crate_id":0,"path":["tracing","instrument","Instrument"],"kind":"trait"},"17:15873:6878":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:43332:4953":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:45945:9248":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:12160:9686":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6673:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:47412:9269":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:11026:5226":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3146:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:36088:4850":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:2024:9907":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:515:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:4351:11055":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12850:780":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:16440:7051":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11967:9673":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"3:741:8887":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1:8808:9971":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3832:7236":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5268:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16018:6913":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:51759:9349":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50309:9366":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7031:9944":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5307:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:16086:6934":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:8525:7588":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"15:338:24602":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:153:4191":{"crate_id":20,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"2:4:1335":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:7785:223":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:2542:7711":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:26563:3222":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:25134:37114":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12860:1957":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:50511:9349":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:1723:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13441:25583":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11655:6204":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:0:4637":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2911:9915":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9918:9859":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6771:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:1534:7891":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11294:9973":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:2180:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9031:4789":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2596:10996":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5522:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:2187:8856":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14602:6553":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6850:7361":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:869:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:680:6041":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"20:364:39230":{"crate_id":20,"path":["tracing_core","field","fmt","NullCallsite"],"kind":"struct"},"2:44220:17945":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11407:39199":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14064:6435":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44321:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44357:9184":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5659:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:5422:9930":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:49958:9353":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:26374:8934":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9157:36869":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1504:7878":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:3999:9835":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:96:29777":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11215:9526":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5284:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:1088:3162":{"crate_id":20,"path":["tracing_core","span","Id"],"kind":"struct"},"6:7339:8691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1740:7708":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:8656:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46134:5409":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5844:9935":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2898:7203":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10003:5937":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:1745:7709":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44134:9170":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:4871:7247":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:48317:9314":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6481:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7156:7409":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15537:6783":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"9:49:24509":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46320:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:11932:3222":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"}},"external_crates":{"23":{"name":"pin_project_lite","html_root_url":null},"20":{"name":"tracing_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tracing_attributes","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"once_cell","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}