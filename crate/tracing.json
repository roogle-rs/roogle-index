{"root":"0:0:3221","crate_version":"0.1.40","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[422,0],"end":[1373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:164:1249","0:167:4220","0:170:3353","0:175:3189","0:176:1289","0:177:3506","0:180:3861","0:181:4387","0:182:4440","0:185:4467","0:188:833","0:191:4474","0:193:3217","0:196:3356","0:197:4441","0:198:4515","0:199:4550","0:201:4178","0:202:3162","0:203:3829"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:3443:4842-0:380:4188":{"id":"a:2:3443:4842-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:366:710":{"id":"0:366:710","crate_id":0,"name":"drop","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:55-20:807:3650":{"id":"0:55-20:807:3650","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,70],"end":[136,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::WeakDispatch","name":"WeakDispatch","id":"20:807:3650","is_glob":false}}},"0:23:3158":{"id":"0:23:3158","crate_id":0,"name":"span","span":{"filename":"src/macros.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Constructs a new span.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\nCreating a new span:\n```\n# use tracing::{span, Level};\n# fn main() {\nlet span = span!(Level::TRACE, \"my span\");\nlet _enter = span.enter();\n// do work inside the span...\n# }\n```","links":{"crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span {\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr) => { ... };\n    ($lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    ($lvl:expr, $name:expr) => { ... };\n}"}},"b:2:2863-0:386:4193":{"id":"b:2:2863-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:29741"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3188:150":{"id":"2:3188:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1392,0],"end":[1423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:213:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2:3189:1925":{"id":"2:3189:1925","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:46033:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:191:4474":{"id":"0:191:4474","crate_id":0,"name":"has_field","span":{"filename":"src/span.rs","begin":[1117,4],"end":[1122,5]},"visibility":"public","docs":"Returns true if this `Span` has a field for the given\n[`Field`][super::field::Field] or field name.","links":{"super::field::Field":"20:845:3201"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3181:878":{"id":"2:3181:878","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:88:3150":{"id":"0:88:3150","crate_id":0,"name":"Instrument","span":{"filename":"src/instrument.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Attaches spans to a [`std::future::Future`].\n\nExtension trait allowing futures to be\ninstrumented with a `tracing` [span].\n\n[span]: super::Span","links":{"super::Span":"0:370:3165","`std::future::Future`":"2:48713:163"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:89:3149","0:90:3804"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:110"]}}},"b:0:125-0:283:3831":{"id":"b:0:125-0:283:3831","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:202:3162":{"id":"0:202:3162","crate_id":0,"name":"metadata","span":{"filename":"src/span.rs","begin":[1325,4],"end":[1327,5]},"visibility":"public","docs":"Returns this span's `Metadata`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:5:817-0:326:3794":{"id":"b:5:817-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:813:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["5:819:5466","5:820:5467","5:821:5468"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3408:263-0:380:4188":{"id":"a:2:3408:263-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:115:3873":{"id":"0:115:3873","crate_id":0,"name":"span_mut","span":{"filename":"src/instrument.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Mutably borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2920:29742":{"id":"2:2920:29742","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:326:3794":{"id":"b:0:110-0:326:3794","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1449,0],"end":[1453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:229:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1556,0],"end":[1563,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3642:128","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:248:265","0:249:668"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2:4057:1938":{"id":"2:4057:1938","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:43492:4773","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:170:3353":{"id":"0:170:3353","crate_id":0,"name":"child_of","span":{"filename":"src/span.rs","begin":[484,4],"end":[493,5]},"visibility":"public","docs":"Constructs a new `Span` as child of the given parent span, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3164","super::Span::follows_from":"0:199:4550","super::field::ValueSet":"20:280:3194"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["parent",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}],["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:47-20:160:3645":{"id":"0:47-20:160:3645","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[128,0],"end":[128,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_default","name":"set_default","id":"20:160:3645","is_glob":false}}},"0:249:668":{"id":"0:249:668","crate_id":0,"name":"deref","span":{"filename":"src/span.rs","begin":[1560,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:197:4441":{"id":"0:197:4441","crate_id":0,"name":"is_disabled","span":{"filename":"src/span.rs","begin":[1244,4],"end":[1246,5]},"visibility":"public","docs":"Returns `true` if this span was disabled by the subscriber and does not\nexist.\n\nSee also [`is_none`].\n\n[`is_none`]: Span::is_none()","links":{"Span::is_none()":"0:198:4515"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36049:4845-0:370:3165":{"id":"a:2:36049:4845-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:2860-0:370:3165":{"id":"b:2:2860-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:4610"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:3356":{"id":"0:196:3356","crate_id":0,"name":"record_all","span":{"filename":"src/span.rs","begin":[1213,4],"end":[1235,5]},"visibility":"public","docs":"Records all the fields in the provided `ValueSet`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:260-20:673:3156":{"id":"0:260-20:673:3156","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[2,0],"end":[2,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::subscriber","name":"subscriber","id":"20:673:3156","is_glob":true}}},"a:2:35991:251-0:370:3165":{"id":"a:2:35991:251-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:108:211":{"id":"0:108:211","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[316,4],"end":[316,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:216:878":{"id":"0:216:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1426,4],"end":[1428,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:380:4188":{"id":"b:2:3179-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:332:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1437,0],"end":[1441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:222:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2863-0:283:3831":{"id":"b:2:2863-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2865:29741"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14512:176":{"id":"2:14512:176","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"F"}}}},"a:2:3443:4842-0:326:3794":{"id":"a:2:3443:4842-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:0:125-0:370:3165":{"id":"b:0:125-0:370:3165","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45862:11042-0:283:3831":{"id":"a:2:45862:11042-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:11042","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:29:3153":{"id":"0:29:3153","crate_id":0,"name":"event","span":{"filename":"src/macros.rs","begin":[585,0],"end":[1023,1]},"visibility":"public","docs":"Constructs a new `Event`.\n\nThe event macro is invoked with a `Level` and up to 32 key-value fields.\nOptionally, a format string and arguments may follow the fields; this will\nbe used to construct an implicit field named \"message\".\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::{event, Level};\n\n# fn main() {\nlet data = (42, \"forty-two\");\nlet private_data = \"private\";\nlet error = \"a bad error\";\n\nevent!(Level::ERROR, %error, \"Received error\");\nevent!(\n    target: \"app_events\",\n    Level::WARN,\n    private_data,\n    ?data,\n    \"App warning: {}\",\n    error\n);\nevent!(name: \"answer\", Level::INFO, the_answer = data.0);\nevent!(Level::INFO, the_answer = data.0);\n# }\n```\n","links":{"crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ($lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    ($lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+) => { ... };\n    ($lvl:expr, %$($k:ident).+) => { ... };\n    ($lvl:expr, $($k:ident).+) => { ... };\n    ( $lvl:expr, $($arg:tt)+ ) => { ... };\n}"}},"0:25:3378":{"id":"0:25:3378","crate_id":0,"name":"debug_span","span":{"filename":"src/macros.rs","begin":[248,0],"end":[293,1]},"visibility":"public","docs":"Constructs a span at the debug level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{debug_span, span, Level};\n# fn main() {\ndebug_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::DEBUG, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::debug_span;\n# fn main() {\nlet span = debug_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3221","crate::span!":"0:23:3158","crate#configuring-attributes":"0:0:3221","crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:60:3744":{"id":"0:60:3744","crate_id":0,"name":"AsField","span":{"filename":"src/field.rs","begin":[129,0],"end":[135,1]},"visibility":"public","docs":"Trait implemented to allow a type to be used as a field key.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: Although this is implemented for both the\n<a href=\"./struct.Field.html\"><code>Field</code></a> type <em>and</em> any\ntype that can be borrowed as an <code>&str</code>, only <code>Field</code>\nallows <em>O</em>(1) access.\nIndexing a field with a string results in an iterative search that performs\nstring comparisons. Thus, if possible, once the key for a field is known, it\nshould be used whenever possible.\n</pre>","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:61:3748"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:282:3219","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:64","0:67"]}}},"0:118:3878":{"id":"0:118:3878","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[349,4],"end":[351,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:245:4178":{"id":"0:245:4178","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1542,4],"end":[1544,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:283:3831":{"id":"0:283:3831","crate_id":0,"name":"WithDispatch","span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Subscriber`].\n\nThis type is returned by the [`WithSubscriber`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Subscriber`]: crate::Subscriber","links":{"std::future::Future":"2:48713:163","crate::Subscriber":"20:686:3157","`WithSubscriber`":"0:91:3807"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["0:127","a:2:35991:251-0:283:3831","a:2:3408:263-0:283:3831","a:2:3443:4842-0:283:3831","a:2:45861:10851-0:283:3831","a:2:45862:11042-0:283:3831","b:0:110-0:283:3831","b:0:125-0:283:3831","b:2:2860-0:283:3831","b:2:2863-0:283:3831","b:2:2918-0:283:3831","b:2:3175-0:283:3831","b:2:3179-0:283:3831","b:2:3185-0:283:3831","b:2:3190-0:283:3831","b:2:4055-0:283:3831","b:2:14509-0:283:3831","b:5:817-0:283:3831","0:287","0:290","0:318","0:121"]}}},"0:135:3169":{"id":"0:135:3169","crate_id":0,"name":"level_filters","span":{"filename":"src/level_filters.rs","begin":[1,0],"end":[98,1]},"visibility":"public","docs":"Trace verbosity level filtering.\n\n# Compile time filters\n\nTrace verbosity levels can be statically disabled at compile time via Cargo\nfeatures, similar to the [`log` crate]. Trace instrumentation at disabled\nlevels will be skipped and will not even be present in the resulting binary\nunless the verbosity level is specified dynamically. This level is\nconfigured separately for release and debug builds. The features are:\n\n* `max_level_off`\n* `max_level_error`\n* `max_level_warn`\n* `max_level_info`\n* `max_level_debug`\n* `max_level_trace`\n* `release_max_level_off`\n* `release_max_level_error`\n* `release_max_level_warn`\n* `release_max_level_info`\n* `release_max_level_debug`\n* `release_max_level_trace`\n\nThese features control the value of the `STATIC_MAX_LEVEL` constant. The\ninstrumentation macros macros check this value before recording an event or\nconstructing a span. By default, no levels are disabled.\n\nFor example, a crate can disable trace level instrumentation in debug builds\nand trace, debug, and info level instrumentation in release builds with the\nfollowing configuration:\n\n```toml\n[dependencies]\ntracing = { version = \"0.1\", features = [\"max_level_debug\", \"release_max_level_warn\"] }\n```\n## Notes\n\nPlease note that `tracing`'s static max level features do *not* control the\n[`log`] records that may be emitted when [`tracing`'s \"log\" feature flag][f] is\nenabled. This is to allow `tracing` to be disabled entirely at compile time\nwhile still emitting `log` records --- such as when a library using\n`tracing` is used by an application using `log` that doesn't want to\ngenerate any `tracing`-related code, but does want to collect `log` records.\n\nThis means that if the \"log\" feature is in use, some code may be generated\nfor `log` records emitted by disabled `tracing` events. If this is not\ndesirable, `log` records may be disabled separately using [`log`'s static\nmax level features][`log` crate].\n\n[`log`]: https://docs.rs/log/\n[`log` crate]: https://docs.rs/log/latest/log/#compile-time-filters\n[f]: https://docs.rs/tracing/latest/tracing/#emitting-log-records","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:137-20:1038:3928","0:138-20:1024:3575","0:139:3574"],"is_stripped":false}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[397,0],"end":[429,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:129:3151","0:130:3795","0:131:3876","0:132:3878","0:133:3880","0:134:3883"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3185-0:326:3794":{"id":"b:2:3185-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:198:4515":{"id":"0:198:4515","crate_id":0,"name":"is_none","span":{"filename":"src/span.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Returns `true` if this span was constructed by [`Span::none`] and is\nempty.\n\nIf `is_none` returns `true` for a given span, then [`is_disabled`] will\nalso return `true`. However, when a span is disabled by the subscriber\nrather than constructed by `Span::none`, this method will return\n`false`, while `is_disabled` will return `true`.\n\n[`Span::none`]: Span::none()\n[`is_disabled`]: Span::is_disabled()","links":{"Span::none()":"0:176:1289","Span::is_disabled()":"0:197:4441"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:370:3165":{"id":"b:2:3185-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:8-20:294:3155":{"id":"0:8-20:294:3155","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,51],"end":[952,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::field::Value","name":"Value","id":"20:294:3155","is_glob":false}}},"a:2:3443:4842-0:386:4193":{"id":"a:2:3443:4842-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:268:3645":{"id":"0:268:3645","crate_id":0,"name":"set_default","span":{"filename":"src/subscriber.rs","begin":[58,0],"end":[63,1]},"visibility":"public","docs":"Sets the [`Subscriber`] as the default for the current thread for the\nduration of the lifetime of the returned [`DefaultGuard`].\n\nThe default subscriber is used when creating a new [`Span`] or [`Event`].\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event\n[`DefaultGuard`]: super::dispatcher::DefaultGuard","links":{"super::subscriber::Subscriber":"20:686:3157","super::span::Span":"0:370:3165","super::event::Event":"20:837:3154","super::dispatcher::DefaultGuard":"20:832:3647"},"attrs":["#[cfg(feature = \"std\")]","#[must_use = \"Dropping the guard unregisters the subscriber.\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"DefaultGuard","id":"20:832:3647","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3157","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:203:3829":{"id":"0:203:3829","crate_id":0,"name":"with_subscriber","span":{"filename":"src/span.rs","begin":[1368,4],"end":[1372,5]},"visibility":"public","docs":"Invokes a function with a reference to this span's ID and subscriber.\n\nif this span is enabled, the provided function is called, and the result is returned.\nIf the span is disabled, the function is not called, and this method returns `None`\ninstead.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3152","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce((&Id, &Dispatch)) -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3152","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:0:125-0:326:3794":{"id":"b:0:125-0:326:3794","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:3807":{"id":"0:91:3807","crate_id":0,"name":"WithSubscriber","span":{"filename":"src/instrument.rs","begin":[136,0],"end":[234,1]},"visibility":"public","docs":"Extension trait allowing futures to be instrumented with\na `tracing` [`Subscriber`](crate::Subscriber).","links":{"crate::Subscriber":"20:686:3157"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:92:3829","0:94:3847"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:125"]}}},"a:2:45862:11042-0:380:4188":{"id":"a:2:45862:11042-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:11042","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:225:878":{"id":"0:225:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1444,4],"end":[1446,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1443,0],"end":[1447,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"items":["0:225:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:124:1402":{"id":"0:124:1402","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[383,4],"end":[389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:14711:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:48738:220","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:48713:163","args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:37:3569":{"id":"0:37:3569","crate_id":0,"name":"error","span":{"filename":"src/macros.rs","begin":[2426,0],"end":[2677,1]},"visibility":"public","docs":"Constructs an event at the error level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::error;\n# fn main() {\n\nlet (err_info, port) = (\"No connection\", 22);\n\nerror!(port, error = %err_info);\nerror!(target: \"app_events\", \"App Error: {}\", err_info);\nerror!({ info = err_info }, \"error on port: {}\", port);\nerror!(name: \"invalid_input\", \"Invalid input: {}\", err_info);\n# }\n```","links":{"crate#using-the-macros":"0:0:3221","crate::event!":"0:29:3153"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:54-20:163:3649":{"id":"0:54-20:163:3649","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,47],"end":[136,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:163:3649","is_glob":false}}},"a:2:45862:11042-0:370:3165":{"id":"a:2:45862:11042-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:11042","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[161,0],"end":[166,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"primitive":"str"},"items":["0:68:3748"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:14509-0:283:3831":{"id":"b:2:14509-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:48716:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:14511:211","2:14512:176","2:14513:1016"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:164:1249":{"id":"0:164:1249","crate_id":0,"name":"new","span":{"filename":"src/span.rs","begin":[436,4],"end":[438,5]},"visibility":"public","docs":"Constructs a new `Span` with the given [metadata] and set of\n[field values].\n\nThe new span will be constructed by the currently-active [`Subscriber`],\nwith the current span as its parent (if one exists).\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[`Subscriber`]: super::subscriber::Subscriber\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3164","super::subscriber::Subscriber":"20:686:3157","super::field::ValueSet":"20:280:3194","super::Span::follows_from":"0:199:4550"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:262:3646":{"id":"0:262:3646","crate_id":0,"name":"with_default","span":{"filename":"src/subscriber.rs","begin":[20,0],"end":[25,1]},"visibility":"public","docs":"Sets this [`Subscriber`] as the default for the current thread for the\nduration of a closure.\n\nThe default subscriber is used when creating a new [`Span`] or\n[`Event`].\n\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{"super::event::Event":"20:837:3154","super::subscriber::Subscriber":"20:686:3157","super::span::Span":"0:370:3165"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3157","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:68:3748":{"id":"0:68:3748","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[380,0],"end":[390,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:123:211","0:124:1402"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:117:3876":{"id":"0:117:3876","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[344,4],"end":[346,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:138-20:1024:3575":{"id":"0:138-20:1024:3575","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,56],"end":[53,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::LevelFilter","name":"LevelFilter","id":"20:1024:3575","is_glob":false}}},"2:2862:4610":{"id":"2:2862:4610","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:283:3831":{"id":"b:2:2860-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2862:4610"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:3880":{"id":"0:119:3880","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[354,4],"end":[356,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:380:4188":{"id":"b:2:4055-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:508":{"id":"0:289:508","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:283:3831":{"id":"a:2:3408:263-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:28:3402":{"id":"0:28:3402","crate_id":0,"name":"error_span","span":{"filename":"src/macros.rs","begin":[490,0],"end":[535,1]},"visibility":"public","docs":"Constructs a span at the error level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, error_span, Level};\n# fn main() {\nerror_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::ERROR, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::error_span;\n# fn main() {\nlet span = error_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3221","crate::span!":"0:23:3158","crate#configuring-attributes":"0:0:3221","crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:193:3217":{"id":"0:193:3217","crate_id":0,"name":"record","span":{"filename":"src/span.rs","begin":[1194,4],"end":[1210,5]},"visibility":"public","docs":"Records that the field described by `field` has the value `value`.\n\nThis may be used with [`field::Empty`] to declare fields whose values\nare not known when the span is created, and record them later:\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, record a value for parting as well.\n// (note that the field name is passed as a string slice)\nspan.record(\"parting\", \"goodbye world!\");\n```\nHowever, it may also be used to record a _new_ value for a field whose\nvalue was already recorded:\n```\nuse tracing::info_span;\n# fn do_something() -> Result<(), ()> { Err(()) }\n\n// Initially, let's assume that our attempt to do something is going okay...\nlet span = info_span!(\"doing_something\", is_okay = true);\nlet _e = span.enter();\n\nmatch do_something() {\n    Ok(something) => {\n        // ...\n    }\n    Err(_) => {\n        // Things are no longer okay!\n        span.record(\"is_okay\", false);\n    }\n}\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The fields associated with a span are part\n    of its <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>.\n    The <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>\n    describing a particular span is constructed statically when the span\n    is created and cannot be extended later to add new fields. Therefore,\n    you cannot record a value for a field that was not specified when the\n    span was created:\n</pre>\n\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, you try to record a value for a new field, `new_field`, which was not\n// declared as `Empty` or populated when you created `span`.\n// You won't get any error, but the assignment will have no effect!\nspan.record(\"new_field\", \"interesting_value_you_really_need\");\n\n// Instead, all fields that may be recorded after span creation should be declared up front,\n// using field::Empty when a value is not known, as we did for `parting`.\n// This `record` call will indeed replace field::Empty with \"you will be remembered\".\nspan.record(\"parting\", \"you will be remembered\");\n```\n\n[`field::Empty`]: super::field::Empty\n[`Metadata`]: super::Metadata","links":{"super::field::Empty":"20:850:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"field::Value","id":"20:294:3155","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:94:3847":{"id":"0:94:3847","crate_id":0,"name":"with_current_subscriber","span":{"filename":"src/instrument.rs","begin":[228,4],"end":[233,5]},"visibility":"default","docs":"Attaches the current [default] [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached `Subscriber` will be set as the [default] when the returned\n[`Future`] is polled.\n\nThis can be used to propagate the current dispatcher context when\nspawning a new future that may run on a different thread.\n\n# Examples\n\n```\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Using `set_default` (rather than `set_global_default`) sets the\n// default `Subscriber` for *this* thread only.\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\nlet future = async {\n    // ...\n};\n\n// If a multi-threaded async runtime is in use, this spawned task may\n// run on a different thread, in a different default `Subscriber`'s context.\ntokio::spawn(future);\n\n// However, calling `with_current_subscriber` on the future before\n// spawning it, ensures that the current thread's default `Subscriber` is\n// propagated to the spawned task, regardless of where it executes:\n# let future = async { };\ntokio::spawn(future.with_current_subscriber());\n# }\n```\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:686:3157","`WithDispatch`":"0:283:3831","std::future::Future":"2:48713:163","crate::dispatcher#setting-the-default-subscriber":"0:46:3151"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4564","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:366:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3179-0:283:3831":{"id":"b:2:3179-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:4055-0:326:3794":{"id":"b:2:4055-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3175-0:283:3831":{"id":"b:2:3175-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3178:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:833":{"id":"0:57:833","crate_id":0,"name":"field","span":{"filename":"src/field.rs","begin":[1,0],"end":[170,37]},"visibility":"public","docs":"`Span` and `Event` key-value data.\n\nSpans and events may be annotated with key-value data, referred to as _fields_.\nThese fields consist of a mapping from a key (corresponding to\na `&str` but represented internally as an array index) to a [`Value`].\n\n# `Value`s and `Subscriber`s\n\n`Subscriber`s consume `Value`s as fields attached to [span]s or [`Event`]s.\nThe set of field keys on a given span or event is defined on its [`Metadata`].\nWhen a span is created, it provides [`Attributes`] to the `Subscriber`'s\n[`new_span`] method, containing any fields whose values were provided when\nthe span was created; and may call the `Subscriber`'s [`record`] method\nwith additional [`Record`]s if values are added for more of its fields.\nSimilarly, the [`Event`] type passed to the subscriber's [`event`] method\nwill contain any fields attached to each event.\n\n`tracing` represents values as either one of a set of Rust primitives\n(`i64`, `u64`, `f64`, `bool`, and `&str`) or using a `fmt::Display` or\n`fmt::Debug` implementation. `Subscriber`s are provided these primitive\nvalue types as `dyn Value` trait objects.\n\nThese trait objects can be formatted using `fmt::Debug`, but may also be\nrecorded as typed data by calling the [`Value::record`] method on these\ntrait objects with a _visitor_ implementing the [`Visit`] trait. This trait\nrepresents the behavior used to record values of various types. For example,\nan implementation of `Visit` might record integers by incrementing counters\nfor their field names rather than printing them.\n\n\n# Using `valuable`\n\n`tracing`'s [`Value`] trait is intentionally minimalist: it supports only a small\nnumber of Rust primitives as typed values, and only permits recording\nuser-defined types with their [`fmt::Debug`] or [`fmt::Display`]\nimplementations. However, there are some cases where it may be useful to record\nnested values (such as arrays, `Vec`s, or `HashMap`s containing values), or\nuser-defined `struct` and `enum` types without having to format them as\nunstructured text.\n\nTo address `Value`'s limitations, `tracing` offers experimental support for\nthe [`valuable`] crate, which provides object-safe inspection of structured\nvalues. User-defined types can implement the [`valuable::Valuable`] trait,\nand be recorded as a `tracing` field by calling their [`as_value`] method.\nIf the [`Subscriber`] also supports the `valuable` crate, it can\nthen visit those types fields as structured values using `valuable`.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: <code>valuable</code> support is an\n    <a href = \"../index.html#unstable-features\">unstable feature</a>. See\n    the documentation on unstable features for details on how to enable it.\n</pre>\n\nFor example:\n```ignore\n// Derive `Valuable` for our types:\nuse valuable::Valuable;\n\n#[derive(Clone, Debug, Valuable)]\nstruct User {\n    name: String,\n    age: u32,\n    address: Address,\n}\n\n#[derive(Clone, Debug, Valuable)]\nstruct Address {\n    country: String,\n    city: String,\n    street: String,\n}\n\nlet user = User {\n    name: \"Arwen Undomiel\".to_string(),\n    age: 3000,\n    address: Address {\n        country: \"Middle Earth\".to_string(),\n        city: \"Rivendell\".to_string(),\n        street: \"leafy lane\".to_string(),\n    },\n};\n\n// Recording `user` as a `valuable::Value` will allow the `tracing` subscriber\n// to traverse its fields as a nested, typed structure:\ntracing::info!(current_user = user.as_value());\n```\n\nAlternatively, the [`valuable()`] function may be used to convert a type\nimplementing [`Valuable`] into a `tracing` field value.\n\nWhen the `valuable` feature is enabled, the [`Visit`] trait will include an\noptional [`record_value`] method. `Visit` implementations that wish to\nrecord `valuable` values can implement this method with custom behavior.\nIf a visitor does not implement `record_value`, the [`valuable::Value`] will\nbe forwarded to the visitor's [`record_debug`] method.\n\n[`fmt::Debug`]: std::fmt::Debug\n[`fmt::Display`]: std::fmt::Debug\n[`valuable`]: https://crates.io/crates/valuable\n[`valuable::Valuable`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html\n[`as_value`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html#tymethod.as_value\n[`valuable::Value`]: https://docs.rs/valuable/latest/valuable/enum.Value.html\n[`Subscriber`]: crate::Subscriber\n[`record_value`]: Visit::record_value\n[`record_debug`]: Visit::record_debug\n[span]: mod@crate::span\n[`Event`]: crate::event::Event\n[`Metadata`]: crate::Metadata\n[`Attributes`]: crate::span::Attributes\n[`Record`]: crate::span::Record\n[`new_span`]: crate::Subscriber::new_span\n[`record`]: crate::Subscriber::record\n[`event`]: crate::Subscriber::event","links":{"`Visit`":"20:284:3202","std::fmt::Debug":"2:11005:123","crate::Subscriber::new_span":"20:691:4216","crate::Subscriber":"20:686:3157","crate::event::Event":"20:837:3154","`Value`":"20:294:3155","Visit::record_debug":"20:293:3207","mod@crate::span":"0:141:3158","crate::span::Attributes":"20:1103:4155","`Value::record`":"20:295:3217","crate::span::Record":"20:1111:3195","crate::Metadata":"20:482:3164"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:60:3744","0:58-20:265:833"],"is_stripped":false}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1386,0],"end":[1390,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11225:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:210:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:133:3880":{"id":"0:133:3880","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3193:150":{"id":"2:3193:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"2:35915:7711","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:19-20:482:3164":{"id":"0:19-20:482:3164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,37],"end":[962,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Metadata","name":"Metadata","id":"20:482:3164","is_glob":false}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:292:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:52-20:161:3648":{"id":"0:52-20:161:3648","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,17],"end":[136,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_global_default","name":"set_global_default","id":"20:161:3648","is_glob":false}}},"0:175:3189":{"id":"0:175:3189","crate_id":0,"name":"new_disabled","span":{"filename":"src/span.rs","begin":[519,4],"end":[524,5]},"visibility":"public","docs":"Constructs a new disabled span with the given `Metadata`.\n\nThis should be used when a span is constructed from a known callsite,\nbut the subscriber indicates that it is disabled.\n\nEntering, exiting, and recording values on this span will not notify the\n`Subscriber` but _may_ record log messages if the `log` feature flag is\nenabled.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:185:4467":{"id":"0:185:4467","crate_id":0,"name":"in_scope","span":{"filename":"src/span.rs","begin":[1100,4],"end":[1103,5]},"visibility":"public","docs":"Executes the given function in the context of this span.\n\nIf this span is enabled, then this function enters the span, invokes `f`\nand then exits the span. If the span is disabled, `f` will still be\ninvoked, but in the context of the currently-executing span (if there is\none).\n\nReturns the result of evaluating `f`.\n\n# Examples\n\n```\n# use tracing::{trace, span, Level};\nlet my_span = span!(Level::TRACE, \"my_span\");\n\nmy_span.in_scope(|| {\n    // this event occurs within the span.\n    trace!(\"i'm in the span!\");\n});\n\n// this event occurs outside the span.\ntrace!(\"i'm not in the span!\");\n```\n\nCalling a function and returning the result:\n```\n# use tracing::{info_span, Level};\nfn hello_world() -> String {\n    \"Hello world!\".to_owned()\n}\n\nlet span = info_span!(\"hello_world\");\n// the span will be entered for the duration of the call to\n// `hello_world`.\nlet a_string = span.in_scope(hello_world);\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3683:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:370:3165":{"id":"b:2:2863-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:29741"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:820:5467":{"id":"5:820:5467","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:326:3794":{"id":"b:2:3190-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45861:10851-0:370:3165":{"id":"a:2:45861:10851-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:10851","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:210:921":{"id":"0:210:921","crate_id":0,"name":"hash","span":{"filename":"src/span.rs","begin":[1387,4],"end":[1389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["hasher",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:11233:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:213:847":{"id":"0:213:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[1393,4],"end":[1422,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45861:10851-0:283:3831":{"id":"a:2:45861:10851-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:10851","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[315,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:108:211","0:109:1402"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:27:3394":{"id":"0:27:3394","crate_id":0,"name":"warn_span","span":{"filename":"src/macros.rs","begin":[410,0],"end":[455,1]},"visibility":"public","docs":"Constructs a span at the warn level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{warn_span, span, Level};\n# fn main() {\nwarn_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::WARN, \"my_span\");\n# }\n```\n\n```rust\nuse tracing::warn_span;\n# fn main() {\nlet span = warn_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3221","crate::span!":"0:23:3158","crate#configuring-attributes":"0:0:3221","crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"2:3194:1923":{"id":"2:3194:1923","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:46033:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:51-20:172:3186":{"id":"0:51-20:172:3186","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,4],"end":[136,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::get_default","name":"get_default","id":"20:172:3186","is_glob":false}}},"b:0:110-0:370:3165":{"id":"b:0:110-0:370:3165","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:125-0:386:4193":{"id":"b:0:125-0:386:4193","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:35991:251-0:380:4188":{"id":"a:2:35991:251-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3185-0:283:3831":{"id":"b:2:3185-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:3876":{"id":"0:131:3876","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[409,4],"end":[411,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:92:3829":{"id":"0:92:3829","crate_id":0,"name":"with_subscriber","span":{"filename":"src/instrument.rs","begin":[176,4],"end":[184,5]},"visibility":"default","docs":"Attaches the provided [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached [`Subscriber`] will be set as the [default] when the returned\n[`Future`] is polled.\n\n# Examples\n\n```\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# use tracing::subscriber::NoSubscriber as MyOtherSubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Set the default `Subscriber`\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n\n// Create a different `Subscriber` and attach it to a future.\nlet other_subscriber = MyOtherSubscriber::default();\nlet future = async {\n    tracing::info!(\"this event will be recorded by the other `Subscriber`\");\n    // ...\n};\n\nfuture\n    // Attach the other `Subscriber` to the future before awaiting it\n    .with_subscriber(other_subscriber)\n    .await;\n\n// Once the future has completed, we return to the default `Subscriber`.\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n# }\n```\n\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:686:3157","`WithDispatch`":"0:283:3831","std::future::Future":"2:48713:163","crate::dispatcher#setting-the-default-subscriber":"0:46:3151"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3152","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1431,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"items":["0:220:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:21-22:206:3149":{"id":"0:21-22:206:3149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[969,0],"end":[969,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"attributes\")]","#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"tracing_attributes::instrument","name":"instrument","id":"22:206:3149","is_glob":false}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:390:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:208:739":{"id":"0:208:739","crate_id":0,"name":"eq","span":{"filename":"src/span.rs","begin":[1376,4],"end":[1383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:819:5466":{"id":"5:819:5466","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"0:139:3574":{"id":"0:139:3574","crate_id":0,"name":"STATIC_MAX_LEVEL","span":{"filename":"src/level_filters.rs","begin":[66,0],"end":[66,64]},"visibility":"public","docs":"The statically configured maximum trace level.\n\nSee the [module-level documentation] for information on how to configure\nthis.\n\nThis value is checked by the `event!` and `span!` macros. Code that\nmanually constructs events or spans via the `Event::record` function or\n`Span` constructors should compare the level against this value to\ndetermine if those spans or events are enabled.\n\n[module-level documentation]: self#compile-time-filters","links":{"self#compile-time-filters":"0:135:3169"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"LevelFilter","id":"20:1024:3575","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"const":{"expr":"_","value":null,"is_literal":false}}}},"b:2:3185-0:380:4188":{"id":"b:2:3185-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48-20:157:3646":{"id":"0:48-20:157:3646","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[131,0],"end":[131,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::with_default","name":"with_default","id":"20:157:3646","is_glob":false}}},"0:254:710":{"id":"0:254:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1574,4],"end":[1576,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:4-0:88:3150":{"id":"0:4-0:88:3150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[951,0],"end":[951,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"self::instrument::Instrument","name":"Instrument","id":"0:88:3150","is_glob":false}}},"0:58-20:265:833":{"id":"0:58-20:265:833","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[114,0],"end":[114,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::field","name":"field","id":"20:265:833","is_glob":true}}},"0:370:3165":{"id":"0:370:3165","crate_id":0,"name":"Span","span":{"filename":"src/span.rs","begin":[348,0],"end":[358,1]},"visibility":"public","docs":"A handle representing a span, with the capability to enter the span if it\nexists.\n\nIf the span was rejected by the current `Subscriber`'s filter, entering the\nspan will silently do nothing. Thus, the handle can be used in the same\nmanner regardless of whether or not the trace is currently being collected.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:163","a:2:35991:251-0:370:3165","a:2:3408:263-0:370:3165","a:2:3443:4842-0:370:3165","a:2:36049:4845-0:370:3165","a:2:45861:10851-0:370:3165","a:2:45862:11042-0:370:3165","b:0:110-0:370:3165","b:0:125-0:370:3165","b:2:2860-0:370:3165","b:2:2863-0:370:3165","b:2:2918-0:370:3165","b:2:3175-0:370:3165","b:2:3179-0:370:3165","b:2:3185-0:370:3165","b:2:3190-0:370:3165","b:2:4055-0:370:3165","b:5:817-0:370:3165","0:373","0:207","0:209","0:212","0:214","0:218","0:221","0:230"]}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:289:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:3443:4842-0:283:3831":{"id":"a:2:3443:4842-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:89:3149":{"id":"0:89:3149","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[86,4],"end":[91,5]},"visibility":"default","docs":"Instruments this type with the provided [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\n# Examples\n\nInstrumenting a future:\n\n```rust\nuse tracing::Instrument;\n\n# async fn doc() {\nlet my_future = async {\n    // ...\n};\n\nmy_future\n    .instrument(tracing::info_span!(\"my_future\"))\n    .await\n# }\n```\n\nThe [`Span::or_current`] combinator can be used in combination with\n`instrument` to ensure that the [current span] is attached to the\nfuture if the span passed to `instrument` is [disabled]:\n\n```\nuse tracing::Instrument;\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet my_future = async {\n    // ...\n};\n\nlet outer_span = tracing::info_span!(\"outer\").entered();\n\n// If the \"my_future\" span is enabled, then the spawned task will\n// be within both \"my_future\" *and* \"outer\", since \"outer\" is\n// \"my_future\"'s parent. However, if \"my_future\" is disabled,\n// the spawned task will *not* be in any span.\ntokio::spawn(\n    my_future\n        .instrument(tracing::debug_span!(\"my_future\"))\n);\n\n// Using `Span::or_current` ensures the spawned task is instrumented\n// with the current span, if the new span passed to `instrument` is\n// not enabled. This means that if the \"my_future\"  span is disabled,\n// the spawned task will still be instrumented with the \"outer\" span:\n# let my_future = async {};\ntokio::spawn(\n   my_future\n        .instrument(tracing::debug_span!(\"my_future\").or_current())\n);\n```\n\n[entered]: super::Span::enter()\n[`Span::or_current`]: super::Span::or_current()\n[current span]: super::Span::current()\n[disabled]: super::Span::is_disabled()\n[`Future`]: std::future::Future","links":{"std::future::Future":"2:48713:163","super::Span::or_current()":"0:182:4440","super::Span::enter()":"0:180:3861","super::Span::is_disabled()":"0:197:4441","`Span`":"0:370:3165","`Drop`":"2:3671:4564","super::Span::current()":"0:177:3506"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["span",{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:326:3794":{"id":"b:2:3179-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3175-0:380:4188":{"id":"b:2:3175-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3178:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132:3878":{"id":"0:132:3878","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[414,4],"end":[416,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:370:3165":{"id":"b:2:3179-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:817-0:370:3165":{"id":"b:5:817-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:813:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:819:5466","5:820:5467","5:821:5468"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2860-0:380:4188":{"id":"b:2:2860-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:2862:4610"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:335:508":{"id":"0:335:508","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:374:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2863-0:380:4188":{"id":"b:2:2863-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:2865:29741"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3175-0:386:4193":{"id":"b:2:3175-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45861:10851-0:326:3794":{"id":"a:2:45861:10851-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:10851","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:259:3156":{"id":"0:259:3156","crate_id":0,"name":"subscriber","span":{"filename":"src/subscriber.rs","begin":[1,0],"end":[65,56]},"visibility":"public","docs":"Collects and records trace data.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:261-20:832:3647","0:262:3646","0:266:3648","0:268:3645","0:270-20:163:3649","0:260-20:673:3156"],"is_stripped":false}}},"b:2:3190-0:283:3831":{"id":"b:2:3190-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2863-0:326:3794":{"id":"b:2:2863-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2865:29741"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18-20:1008:3163":{"id":"0:18-20:1008:3163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,30],"end":[962,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Level","name":"Level","id":"20:1008:3163","is_glob":false}}},"0:386:4193":{"id":"0:386:4193","crate_id":0,"name":"EnteredSpan","span":{"filename":"src/span.rs","begin":[401,0],"end":[411,1]},"visibility":"public","docs":"An owned version of [`Entered`], a guard representing a span which has been\nentered and is currently executing.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::entered`] function.\n\n[`Span::entered`]: super::Span::entered()","links":{"`Entered`":"0:380:4188","super::Span::entered()":"0:181:4387"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:244","a:2:35991:251-0:386:4193","a:2:3408:263-0:386:4193","a:2:3443:4842-0:386:4193","a:2:36049:4845-0:386:4193","a:2:45861:10851-0:386:4193","a:2:45862:11042-0:386:4193","b:0:110-0:386:4193","b:0:125-0:386:4193","b:2:2860-0:386:4193","b:2:2863-0:386:4193","b:2:3175-0:386:4193","b:2:3179-0:386:4193","b:2:3185-0:386:4193","b:2:3190-0:386:4193","b:2:4055-0:386:4193","0:389","0:223","0:227","0:247","0:253"]}}},"0:385:847":{"id":"0:385:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:386:4193":{"id":"b:0:110-0:386:4193","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:182:4440":{"id":"0:182:4440","crate_id":0,"name":"or_current","span":{"filename":"src/span.rs","begin":[1027,4],"end":[1032,5]},"visibility":"public","docs":"Returns this span, if it was [enabled] by the current [`Subscriber`], or\nthe [current span] (whose lexical distance may be further than expected),\n if this span [is disabled].\n\nThis method can be useful when propagating spans to spawned threads or\n[async tasks]. Consider the following:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nIf the current [`Subscriber`] enables the [`DEBUG`] level, then both\nthe \"parent\" and \"child\" spans will be enabled. Thus, when the \"spawaned\na thread!\" event occurs, it will be inside of the \"child\" span. Because\n\"parent\" is the parent of \"child\", the event will _also_ be inside of\n\"parent\".\n\nHowever, if the [`Subscriber`] only enables the [`INFO`] level, the \"child\"\nspan will be disabled. When the thread is spawned, the\n`child_span.entered()` call will do nothing, since \"child\" is not\nenabled. In this case, the \"spawned a thread!\" event occurs outside of\n*any* span, since the \"child\" span was responsible for propagating its\nparent to the spawned thread.\n\nIf this is not the desired behavior, `Span::or_current` can be used to\nensure that the \"parent\" span is propagated in both cases, either as a\nparent of \"child\" _or_ directly. For example:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\n// If DEBUG is enabled, then \"child\" will be enabled, and `or_current`\n// returns \"child\". Otherwise, if DEBUG is not enabled, \"child\" will be\n// disabled, and `or_current` returns \"parent\".\nlet child_span = tracing::debug_span!(\"child\").or_current();\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nWhen spawning [asynchronous tasks][async tasks], `Span::or_current` can\nbe used similarly, in combination with [`instrument`]:\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\ntokio::spawn(\n    async {\n        tracing::info!(\"spawned a task!\");\n\n        // ...\n\n    }.instrument(child_span.or_current())\n);\n```\n\nIn general, `or_current` should be preferred over nesting an\n[`instrument`]  call inside of an [`in_current_span`] call, as using\n`or_current` will be more efficient.\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\nasync fn my_async_fn() {\n    // ...\n}\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// Do this:\ntokio::spawn(\n    my_async_fn().instrument(tracing::debug_span!(\"child\").or_current())\n);\n\n// ...rather than this:\ntokio::spawn(\n    my_async_fn()\n        .instrument(tracing::debug_span!(\"child\"))\n        .in_current_span()\n);\n```\n\n[enabled]: crate::Subscriber::enabled\n[`Subscriber`]: crate::Subscriber\n[current span]: Span::current\n[is disabled]: Span::is_disabled\n[`INFO`]: crate::Level::INFO\n[`DEBUG`]: crate::Level::DEBUG\n[async tasks]: std::task\n[`instrument`]: crate::instrument::Instrument::instrument\n[`in_current_span`]: crate::instrument::Instrument::in_current_span","links":{"crate::Subscriber::enabled":"20:689:3187","crate::instrument::Instrument::instrument":"0:89:3149","std::task":"1:7395:3752","Span::is_disabled":"0:197:4441","Span::current":"0:177:3506","crate::Level::INFO":"20:531:3387","crate::Level::DEBUG":"20:532:3379","crate::instrument::Instrument::in_current_span":"0:90:3804","crate::Subscriber":"20:686:3157"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:283:3831":{"id":"b:0:110-0:283:3831","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:335:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:292:847":{"id":"0:292:847","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1425,0],"end":[1429,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"items":["0:216:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1455,0],"end":[1476,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4564","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:231:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3185-0:386:4193":{"id":"b:2:3185-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144-20:1088:3159":{"id":"0:144-20:1088:3159","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,41],"end":[320,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Id","name":"Id","id":"20:1088:3159","is_glob":false}}},"0:167:4220":{"id":"0:167:4220","crate_id":0,"name":"new_root","span":{"filename":"src/span.rs","begin":[460,4],"end":[462,5]},"visibility":"public","docs":"Constructs a new `Span` as the root of its own trace tree, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:482:3164","super::Span::follows_from":"0:199:4550","super::field::ValueSet":"20:280:3194"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:280:3194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:386:4193":{"id":"b:2:2860-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:4610"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:370:3165":{"id":"0:20-0:370:3165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,0],"end":[965,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"self::span::Span","name":"Span","id":"0:370:3165","is_glob":false}}},"b:2:2860-0:326:3794":{"id":"b:2:2860-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2862:4610"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:390:847":{"id":"0:390:847","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:177:3506":{"id":"0:177:3506","crate_id":0,"name":"current","span":{"filename":"src/span.rs","begin":[549,4],"end":[561,5]},"visibility":"public","docs":"Returns a handle to the span [considered by the `Subscriber`] to be the\ncurrent span.\n\nIf the subscriber indicates that it does not track the current span, or\nthat the thread from which this function is called is not currently\ninside a span, the returned span will be disabled.\n\n[considered by the `Subscriber`]:\n    super::subscriber::Subscriber::current_span","links":{"super::subscriber::Subscriber::current_span":"20:701:4242"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:282:3219":{"id":"0:282:3219","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[1124,4],"end":[1124,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:270-20:163:3649":{"id":"0:270-20:163:3649","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[65,0],"end":[65,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:163:3649","is_glob":false}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[327,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["0:114:3158","0:115:3873","0:116:3795","0:117:3876","0:118:3878","0:119:3880","0:120:3883"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:0:125-0:380:4188":{"id":"b:0:125-0:380:4188","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3807","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:231:710":{"id":"0:231:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1457,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:176:1289":{"id":"0:176:1289","crate_id":0,"name":"none","span":{"filename":"src/span.rs","begin":[533,4],"end":[538,5]},"visibility":"public","docs":"Constructs a new span that is *completely disabled*.\n\nThis can be used rather than `Option<Span>` to represent cases where a\nspan is not present.\n\nEntering, exiting, and recording values on this span will do nothing.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:30:3442":{"id":"0:30:3442","crate_id":0,"name":"event_enabled","span":{"filename":"src/macros.rs","begin":[1053,0],"end":[1057,1]},"visibility":"public","docs":"Tests whether an event with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{event_enabled, Level};\nif event_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif event_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif event_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3187","crate::span_enabled":"0:31:3449"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"a:2:45862:11042-0:386:4193":{"id":"a:2:45862:11042-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:11042","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:46:3151":{"id":"0:46:3151","crate_id":0,"name":"dispatcher","span":{"filename":"src/dispatcher.rs","begin":[1,0],"end":[145,47]},"visibility":"public","docs":"Dispatches trace events to [`Subscriber`]s.\n\nThe _dispatcher_ is the component of the tracing system which is responsible\nfor forwarding trace data from the instrumentation points that generate it\nto the subscriber that collects it.\n\n# Using the Trace Dispatcher\n\nEvery thread in a program using `tracing` has a _default subscriber_. When\nevents occur, or spans are created, they are dispatched to the thread's\ncurrent subscriber.\n\n## Setting the Default Subscriber\n\nBy default, the current subscriber is an empty implementation that does\nnothing. To use a subscriber implementation, it must be set as the default.\nThere are two methods for doing so: [`with_default`] and\n[`set_global_default`]. `with_default` sets the default subscriber for the\nduration of a scope, while `set_global_default` sets a default subscriber\nfor the entire process.\n\nTo use either of these functions, we must first wrap our subscriber in a\n[`Dispatch`], a cloneable, type-erased reference to a subscriber. For\nexample:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\nuse dispatcher::Dispatch;\n\nlet my_subscriber = FooSubscriber::new();\nlet my_dispatch = Dispatch::new(my_subscriber);\n```\nThen, we can use [`with_default`] to set our `Dispatch` as the default for\nthe duration of a block:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\n# #[cfg(feature = \"std\")]\ndispatcher::with_default(&my_dispatch, || {\n    // my_subscriber is the default\n});\n\n// no default subscriber again\n```\nIt's important to note that `with_default` will not propagate the current\nthread's default subscriber to any threads spawned within the `with_default`\nblock. To propagate the default subscriber to new threads, either use\n`with_default` from the new thread, or use `set_global_default`.\n\nAs an alternative to `with_default`, we can use [`set_global_default`] to\nset a `Dispatch` as the default for all threads, for the lifetime of the\nprogram. For example:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\ndispatcher::set_global_default(my_dispatch)\n    // `set_global_default` will return an error if the global default\n    // subscriber has already been set.\n    .expect(\"global default was already set!\");\n\n// `my_subscriber` is now the default\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: The thread-local scoped dispatcher (<code>with_default</code>)\nrequires the Rust standard library. <code>no_std</code> users should\nuse <a href=\"fn.set_global_default.html\"><code>set_global_default</code></a>\ninstead.\n</pre>\n\n## Accessing the Default Subscriber\n\nA thread's current default subscriber can be accessed using the\n[`get_default`] function, which executes a closure with a reference to the\ncurrently default `Dispatch`. This is used primarily by `tracing`\ninstrumentation.\n\n[`Subscriber`]: crate::Subscriber","links":{"`get_default`":"20:172:3186","`with_default`":"20:157:3646","`set_global_default`":"20:161:3648","crate::Subscriber":"20:686:3157","`Dispatch`":"20:803:3152"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:47-20:160:3645","0:48-20:157:3646","0:49-20:832:3647","0:51-20:172:3186","0:52-20:161:3648","0:53-20:803:3152","0:54-20:163:3649","0:55-20:807:3650"],"is_stripped":false}}},"a:2:35991:251-0:326:3794":{"id":"a:2:35991:251-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3175-0:326:3794":{"id":"b:2:3175-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:3178:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14511:211":{"id":"2:14511:211","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:63:3748":{"id":"0:63:3748","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[141,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1540,0],"end":[1554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:245:4178","0:246:4445"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:248:265":{"id":"0:248:265","crate_id":0,"name":"Target","span":{"filename":"src/span.rs","begin":[1557,4],"end":[1557,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:143-20:1103:4155":{"id":"0:143-20:1103:4155","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,29],"end":[320,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Attributes","name":"Attributes","id":"20:1103:4155","is_glob":false}}},"b:2:3190-0:370:3165":{"id":"b:2:3190-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:4055-0:386:4193":{"id":"b:2:4055-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45862:11042-0:326:3794":{"id":"a:2:45862:11042-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:11042","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"a:2:36049:4845-0:386:4193":{"id":"a:2:36049:4845-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:26:3386":{"id":"0:26:3386","crate_id":0,"name":"info_span","span":{"filename":"src/macros.rs","begin":[329,0],"end":[374,1]},"visibility":"public","docs":"Constructs a span at the info level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, info_span, Level};\n# fn main() {\ninfo_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::INFO, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::info_span;\n# fn main() {\nlet span = info_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3221","crate::span!":"0:23:3158","crate#configuring-attributes":"0:0:3221","crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"a:2:3408:263-0:326:3794":{"id":"a:2:3408:263-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:312:5155","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:161:4158":{"id":"0:161:4158","crate_id":0,"name":"AsId","span":{"filename":"src/span.rs","begin":[335,0],"end":[339,1]},"visibility":"public","docs":"Trait implemented by types which have a span `Id`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:162:4161"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:282:3219","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"0:141:3158":{"id":"0:141:3158","crate_id":0,"name":"span","span":{"filename":"src/span.rs","begin":[1,0],"end":[1623,1]},"visibility":"public","docs":" Spans represent periods of time in which a program was executing in a\n particular context.\n\n A span consists of [fields], user-defined key-value pairs of arbitrary data\n that describe the context the span represents, and a set of fixed attributes\n that describe all `tracing` spans and events. Attributes describing spans\n include:\n\n - An [`Id`] assigned by the subscriber that uniquely identifies it in relation\n   to other spans.\n - The span's [parent] in the trace tree.\n - [Metadata] that describes static characteristics of all spans\n   originating from that callsite, such as its name, source code location,\n   [verbosity level], and the names of its fields.\n\n # Creating Spans\n\n Spans are created using the [`span!`] macro. This macro is invoked with the\n following arguments, in order:\n\n - The [`target`] and/or [`parent`][parent] attributes, if the user wishes to\n   override their default values.\n - The span's [verbosity level]\n - A string literal providing the span's name.\n - Finally, zero or more arbitrary key/value fields.\n\n [`target`]: super::Metadata::target\n\n For example:\n ```rust\n use tracing::{span, Level};\n\n /// Construct a new span at the `INFO` level named \"my_span\", with a single\n /// field named answer , with the value `42`.\n let my_span = span!(Level::INFO, \"my_span\", answer = 42);\n ```\n\n The documentation for the [`span!`] macro provides additional examples of\n the various options that exist when creating spans.\n\n The [`trace_span!`], [`debug_span!`], [`info_span!`], [`warn_span!`], and\n [`error_span!`] exist as shorthand for constructing spans at various\n verbosity levels.\n\n ## Recording Span Creation\n\n The [`Attributes`] type contains data associated with a span, and is\n provided to the [`Subscriber`] when a new span is created. It contains\n the span's metadata, the ID of [the span's parent][parent] if one was\n explicitly set, and any fields whose values were recorded when the span was\n constructed. The subscriber, which is responsible for recording `tracing`\n data, can then store or record these values.\n\n # The Span Lifecycle\n\n ## Entering a Span\n\n A thread of execution is said to _enter_ a span when it begins executing,\n and _exit_ the span when it switches to another context. Spans may be\n entered through the [`enter`], [`entered`], and [`in_scope`] methods.\n\n The [`enter`] method enters a span, returning a [guard] that exits the span\n when dropped\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var);\n\n // `my_span` exists but has not been entered.\n\n // Enter `my_span`...\n let _enter = my_span.enter();\n\n // Perform some work inside of the context of `my_span`...\n // Dropping the `_enter` guard will exit the span.\n```\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n     <code>Span::enter</code> may produce incorrect traces if the returned drop\n     guard is held across an await point. See\n     <a href=\"struct.Span.html#in-asynchronous-code\">the method documentation</a>\n     for details.\n </pre></div>\n\n The [`entered`] method is analogous to [`enter`], but moves the span into\n the returned guard, rather than borrowing it. This allows creating and\n entering a span in a single expression:\n\n ```\n # use tracing::{span, Level};\n // Create a span and enter it, returning a guard:\n let span = span!(Level::INFO, \"my_span\").entered();\n\n // We are now inside the span! Like `enter()`, the guard returned by\n // `entered()` will exit the span when it is dropped...\n\n // ...but, it can also be exited explicitly, returning the `Span`\n // struct:\n let span = span.exit();\n ```\n\n Finally, [`in_scope`] takes a closure or function pointer and executes it\n inside the span:\n\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var = &my_var);\n\n my_span.in_scope(|| {\n     // perform some work in the context of `my_span`...\n });\n\n // Perform some work outside of the context of `my_span`...\n\n my_span.in_scope(|| {\n     // Perform some more work in the context of `my_span`.\n });\n ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Since entering a span takes <code>&self</code>, and\n     <code>Span</code>s are <code>Clone</code>, <code>Send</code>, and\n     <code>Sync</code>, it is entirely valid for multiple threads to enter the\n     same span concurrently.\n </pre>\n\n ## Span Relationships\n\n Spans form a tree structure — unless it is a root span, all spans have a\n _parent_, and may have one or more _children_. When a new span is created,\n the current span becomes the new span's parent. The total execution time of\n a span consists of the time spent in that span and in the entire subtree\n represented by its children. Thus, a parent span always lasts for at least\n as long as the longest-executing span in its subtree.\n\n ```\n # use tracing::{Level, span};\n // this span is considered the \"root\" of a new trace tree:\n span!(Level::INFO, \"root\").in_scope(|| {\n     // since we are now inside \"root\", this span is considered a child\n     // of \"root\":\n     span!(Level::DEBUG, \"outer_child\").in_scope(|| {\n         // this span is a child of \"outer_child\", which is in turn a\n         // child of \"root\":\n         span!(Level::TRACE, \"inner_child\").in_scope(|| {\n             // and so on...\n         });\n     });\n     // another span created here would also be a child of \"root\".\n });\n```\n\n In addition, the parent of a span may be explicitly specified in\n the `span!` macro. For example:\n\n ```rust\n # use tracing::{Level, span};\n // Create, but do not enter, a span called \"foo\".\n let foo = span!(Level::INFO, \"foo\");\n\n // Create and enter a span called \"bar\".\n let bar = span!(Level::INFO, \"bar\");\n let _enter = bar.enter();\n\n // Although we have currently entered \"bar\", \"baz\"'s parent span\n // will be \"foo\".\n let baz = span!(parent: &foo, Level::INFO, \"baz\");\n ```\n\n A child span should typically be considered _part_ of its parent. For\n example, if a subscriber is recording the length of time spent in various\n spans, it should generally include the time spent in a span's children as\n part of that span's duration.\n\n In addition to having zero or one parent, a span may also _follow from_ any\n number of other spans. This indicates a causal relationship between the span\n and the spans that it follows from, but a follower is *not* typically\n considered part of the duration of the span it follows. Unlike the parent, a\n span may record that it follows from another span after it is created, using\n the [`follows_from`] method.\n\n As an example, consider a listener task in a server. As the listener accepts\n incoming connections, it spawns new tasks that handle those connections. We\n might want to have a span representing the listener, and instrument each\n spawned handler task with its own span. We would want our instrumentation to\n record that the handler tasks were spawned as a result of the listener task.\n However, we might not consider the handler tasks to be _part_ of the time\n spent in the listener task, so we would not consider those spans children of\n the listener span. Instead, we would record that the handler tasks follow\n from the listener, recording the causal relationship but treating the spans\n as separate durations.\n\n ## Closing Spans\n\n Execution may enter and exit a span multiple times before that span is\n _closed_. Consider, for example, a future which has an associated\n span and enters that span every time it is polled:\n ```rust\n # use std::future::Future;\n # use std::task::{Context, Poll};\n # use std::pin::Pin;\n struct MyFuture {\n    // data\n    span: tracing::Span,\n }\n\n impl Future for MyFuture {\n     type Output = ();\n\n     fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n         let _enter = self.span.enter();\n         // Do actual future work...\n # Poll::Ready(())\n     }\n }\n ```\n\n If this future was spawned on an executor, it might yield one or more times\n before `poll` returns [`Poll::Ready`]. If the future were to yield, then\n the executor would move on to poll the next future, which may _also_ enter\n an associated span or series of spans. Therefore, it is valid for a span to\n be entered repeatedly before it completes. Only the time when that span or\n one of its children was the current span is considered to be time spent in\n that span. A span which is not executing and has not yet been closed is said\n to be _idle_.\n\n Because spans may be entered and exited multiple times before they close,\n [`Subscriber`]s have separate trait methods which are called to notify them\n of span exits and when span handles are dropped. When execution exits a\n span, [`exit`] will always be called with that span's ID to notify the\n subscriber that the span has been exited. When span handles are dropped, the\n [`drop_span`] method is called with that span's ID. The subscriber may use\n this to determine whether or not the span will be entered again.\n\n If there is only a single handle with the capacity to exit a span, dropping\n that handle \"closes\" the span, since the capacity to enter it no longer\n exists. For example:\n ```\n # use tracing::{Level, span};\n {\n     span!(Level::TRACE, \"my_span\").in_scope(|| {\n         // perform some work in the context of `my_span`...\n     }); // --> Subscriber::exit(my_span)\n\n     // The handle to `my_span` only lives inside of this block; when it is\n     // dropped, the subscriber will be informed via `drop_span`.\n\n } // --> Subscriber::drop_span(my_span)\n ```\n\n However, if multiple handles exist, the span can still be re-entered even if\n one or more is dropped. For determining when _all_ handles to a span have\n been dropped, `Subscriber`s have a [`clone_span`] method, which is called\n every time a span handle is cloned. Combined with `drop_span`, this may be\n used to track the number of handles to a given span — if `drop_span` has\n been called one more time than the number of calls to `clone_span` for a\n given ID, then no more handles to the span with that ID exist. The\n subscriber may then treat it as closed.\n\n # When to use spans\n\n As a rule of thumb, spans should be used to represent discrete units of work\n (e.g., a given request's lifetime in a server) or periods of time spent in a\n given context (e.g., time spent interacting with an instance of an external\n system, such as a database).\n\n Which scopes in a program correspond to new spans depend somewhat on user\n intent. For example, consider the case of a loop in a program. Should we\n construct one span and perform the entire loop inside of that span, like:\n\n ```rust\n # use tracing::{Level, span};\n # let n = 1;\n let span = span!(Level::TRACE, \"my_loop\");\n let _enter = span.enter();\n for i in 0..n {\n     # let _ = i;\n     // ...\n }\n ```\n Or, should we create a new span for each iteration of the loop, as in:\n ```rust\n # use tracing::{Level, span};\n # let n = 1u64;\n for i in 0..n {\n     let span = span!(Level::TRACE, \"my_loop\", iteration = i);\n     let _enter = span.enter();\n     // ...\n }\n ```\n\n Depending on the circumstances, we might want to do either, or both. For\n example, if we want to know how long was spent in the loop overall, we would\n create a single span around the entire loop; whereas if we wanted to know how\n much time was spent in each individual iteration, we would enter a new span\n on every iteration.\n\n [fields]: super::field\n [Metadata]: super::Metadata\n [verbosity level]: super::Level\n [`Poll::Ready`]: std::task::Poll::Ready\n [`span!`]: super::span!\n [`trace_span!`]: super::trace_span!\n [`debug_span!`]: super::debug_span!\n [`info_span!`]: super::info_span!\n [`warn_span!`]: super::warn_span!\n [`error_span!`]: super::error_span!\n [`clone_span`]: super::subscriber::Subscriber::clone_span()\n [`drop_span`]: super::subscriber::Subscriber::drop_span()\n [`exit`]: super::subscriber::Subscriber::exit\n [`Subscriber`]: super::subscriber::Subscriber\n [`enter`]: Span::enter()\n [`entered`]: Span::entered()\n [`in_scope`]: Span::in_scope()\n [`follows_from`]: Span::follows_from()\n [guard]: Entered\n [parent]: #span-relationships","links":{"std::task::Poll::Ready":"2:48740:232","super::info_span!":"0:26:3386","Span::enter()":"0:180:3861","`Attributes`":"20:1103:4155","super::trace_span!":"0:24:3370","super::span!":"0:23:3158","Span::in_scope()":"0:185:4467","Span::entered()":"0:181:4387","Span::follows_from()":"0:199:4550","super::subscriber::Subscriber::drop_span()":"20:699:5186","super::field":"0:57:833","`Id`":"20:1088:3159","super::Metadata":"20:482:3164","super::Level":"20:1008:3163","super::subscriber::Subscriber":"20:686:3157","Entered":"0:380:4188","super::subscriber::Subscriber::exit":"20:697:4445","super::subscriber::Subscriber::clone_span()":"20:698:4243","super::debug_span!":"0:25:3378","super::warn_span!":"0:27:3394","super::Metadata::target":"20:499:1863","super::error_span!":"0:28:3402"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143-20:1103:4155","0:144-20:1088:3159","0:145-20:1111:3195","0:161:4158","0:370:3165","0:380:4188","0:386:4193"],"is_stripped":false}}},"0:90:3804":{"id":"0:90:3804","crate_id":0,"name":"in_current_span","span":{"filename":"src/instrument.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":"Instruments this type with the [current] [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\nThis can be used to propagate the current span when spawning a new future.\n\n# Examples\n\n```rust\nuse tracing::Instrument;\n\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# async fn doc() {\nlet span = tracing::info_span!(\"my_span\");\nlet _enter = span.enter();\n\n// ...\n\nlet future = async {\n    tracing::debug!(\"this event will occur inside `my_span`\");\n    // ...\n};\ntokio::spawn(future.in_current_span());\n# }\n```\n\n[current]: super::Span::current()\n[entered]: super::Span::enter()\n[`Span`]: crate::Span\n[`Future`]: std::future::Future","links":{"crate::Span":"0:370:3165","std::future::Future":"2:48713:163","super::Span::enter()":"0:180:3861","`Drop`":"2:3671:4564","super::Span::current()":"0:177:3506"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1565,0],"end":[1570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4564","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:252:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:24:3370":{"id":"0:24:3370","crate_id":0,"name":"trace_span","span":{"filename":"src/macros.rs","begin":[167,0],"end":[212,1]},"visibility":"public","docs":"Constructs a span at the trace level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\ntrace_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::TRACE, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\nlet span = trace_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3221","crate::span!":"0:23:3158","crate#configuring-attributes":"0:0:3221","crate#using-the-macros":"0:0:3221"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:66:3748":{"id":"0:66:3748","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[152,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:130:3795":{"id":"0:130:3795","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:145-20:1111:3195":{"id":"0:145-20:1111:3195","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,45],"end":[320,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Record","name":"Record","id":"20:1111:3195","is_glob":false}}},"b:2:2918-0:370:3165":{"id":"b:2:2918-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5174","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:29742"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:229:878":{"id":"0:229:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1450,4],"end":[1452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:31:3449":{"id":"0:31:3449","crate_id":0,"name":"span_enabled","span":{"filename":"src/macros.rs","begin":[1087,0],"end":[1091,1]},"visibility":"public","docs":"Tests whether a span with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{span_enabled, Level};\nif span_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif span_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif span_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3187","crate::span_enabled":"0:31:3449"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"b:0:110-0:380:4188":{"id":"b:0:110-0:380:4188","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[150,0],"end":[159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"items":["0:66:3748"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:6-20:803:3152":{"id":"0:6-20:803:3152","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,15],"end":[952,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::dispatcher::Dispatch","name":"Dispatch","id":"20:803:3152","is_glob":false}}},"a:2:3408:263-0:370:3165":{"id":"a:2:3408:263-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:5:817-0:283:3831":{"id":"b:5:817-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:813:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["5:819:5466","5:820:5467","5:821:5468"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:355:5155","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:162:4161":{"id":"0:162:4161","crate_id":0,"name":"as_id","span":{"filename":"src/span.rs","begin":[338,4],"end":[338,35]},"visibility":"default","docs":"Returns the `Id` of the span that `self` corresponds to, or `None` if\nthis corresponds to a disabled span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:252:710":{"id":"0:252:710","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1567,4],"end":[1569,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:0:3221":{"id":"0:0:3221","crate_id":0,"name":"tracing","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1125,1]},"visibility":"public","docs":" A scoped, structured logging and diagnostics system.\n\n # Overview\n\n `tracing` is a framework for instrumenting Rust programs to collect\n structured, event-based diagnostic information.\n\n In asynchronous systems like Tokio, interpreting traditional log messages can\n often be quite challenging. Since individual tasks are multiplexed on the same\n thread, associated events and log lines are intermixed making it difficult to\n trace the logic flow. `tracing` expands upon logging-style diagnostics by\n allowing libraries and applications to record structured events with additional\n information about *temporality* and *causality* — unlike a log message, a span\n in `tracing` has a beginning and end time, may be entered and exited by the\n flow of execution, and may exist within a nested tree of similar spans. In\n addition, `tracing` spans are *structured*, with the ability to record typed\n data as well as textual messages.\n\n The `tracing` crate provides the APIs necessary for instrumenting libraries\n and applications to emit trace data.\n\n *Compiler support: [requires `rustc` 1.56+][msrv]*\n\n [msrv]: #supported-rust-versions\n # Core Concepts\n\n The core of `tracing`'s API is composed of _spans_, _events_ and\n _subscribers_. We'll cover these in turn.\n\n ## Spans\n\n To record the flow of execution through a program, `tracing` introduces the\n concept of [spans]. Unlike a log line that represents a _moment in\n time_, a span represents a _period of time_ with a beginning and an end. When a\n program begins executing in a context or performing a unit of work, it\n _enters_ that context's span, and when it stops executing in that context,\n it _exits_ the span. The span in which a thread is currently executing is\n referred to as that thread's _current_ span.\n\n For example:\n ```\n use tracing::{span, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my_span\");\n // `enter` returns a RAII guard which, when dropped, exits the span. this\n // indicates that we are in the span for the current lexical scope.\n let _enter = span.enter();\n // perform some work in the context of `my_span`...\n # }\n```\n\n The [`span` module][span]'s documentation provides further details on how to\n use spans.\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n\n  **Warning**: In asynchronous code that uses async/await syntax,\n  `Span::enter` may produce incorrect traces if the returned drop\n  guard is held across an await point. See\n  [the method documentation][Span#in-asynchronous-code] for details.\n\n </pre></div>\n\n ## Events\n\n An [`Event`] represents a _moment_ in time. It signifies something that\n happened while a trace was being recorded. `Event`s are comparable to the log\n records emitted by unstructured logging code, but unlike a typical log line,\n an `Event` may occur within the context of a span.\n\n For example:\n ```\n use tracing::{event, span, Level};\n\n # fn main() {\n // records an event outside of any span context:\n event!(Level::INFO, \"something happened\");\n\n let span = span!(Level::INFO, \"my_span\");\n let _guard = span.enter();\n\n // records an event within \"my_span\".\n event!(Level::DEBUG, \"something happened inside my_span\");\n # }\n```\n\n In general, events should be used to represent points in time _within_ a\n span — a request returned with a given status code, _n_ new items were\n taken from a queue, and so on.\n\n The [`Event` struct][`Event`] documentation provides further details on using\n events.\n\n ## Subscribers\n\n As `Span`s and `Event`s occur, they are recorded or aggregated by\n implementations of the [`Subscriber`] trait. `Subscriber`s are notified\n when an `Event` takes place and when a `Span` is entered or exited. These\n notifications are represented by the following `Subscriber` trait methods:\n\n + [`event`][Subscriber::event], called when an `Event` takes place,\n + [`enter`], called when execution enters a `Span`,\n + [`exit`], called when execution exits a `Span`\n\n In addition, subscribers may implement the [`enabled`] function to _filter_\n the notifications they receive based on [metadata] describing each `Span`\n or `Event`. If a call to `Subscriber::enabled` returns `false` for a given\n set of metadata, that `Subscriber` will *not* be notified about the\n corresponding `Span` or `Event`. For performance reasons, if no currently\n active subscribers express interest in a given set of metadata by returning\n `true`, then the corresponding `Span` or `Event` will never be constructed.\n\n # Usage\n\n First, add this to your `Cargo.toml`:\n\n ```toml\n [dependencies]\n tracing = \"0.1\"\n ```\n\n ## Recording Spans and Events\n\n Spans and events are recorded using macros.\n\n ### Spans\n\n The [`span!`] macro expands to a [`Span` struct][`Span`] which is used to\n record a span. The [`Span::enter`] method on that struct records that the\n span has been entered, and returns a [RAII] guard object, which will exit\n the span when dropped.\n\n For example:\n\n ```rust\n use tracing::{span, Level};\n # fn main() {\n // Construct a new span named \"my span\" with trace log level.\n let span = span!(Level::TRACE, \"my span\");\n\n // Enter the span, returning a guard object.\n let _enter = span.enter();\n\n // Any trace events that occur before the guard is dropped will occur\n // within the span.\n\n // Dropping the guard will exit the span.\n # }\n ```\n\n The [`#[instrument]`][instrument] attribute provides an easy way to\n add `tracing` spans to functions. A function annotated with `#[instrument]`\n will create and enter a span with that function's name every time the\n function is called, with arguments to that function will be recorded as\n fields using `fmt::Debug`.\n\n For example:\n ```ignore\n # // this doctest is ignored because we don't have a way to say\n # // that it should only be run with cfg(feature = \"attributes\")\n use tracing::{Level, event, instrument};\n\n #[instrument]\n pub fn my_function(my_arg: usize) {\n     // This event will be recorded inside a span named `my_function` with the\n     // field `my_arg`.\n     event!(Level::INFO, \"inside my_function!\");\n     // ...\n }\n # fn main() {}\n ```\n\n For functions which don't have built-in tracing support and can't have\n the `#[instrument]` attribute applied (such as from an external crate),\n the [`Span` struct][`Span`] has a [`in_scope()` method][`in_scope`]\n which can be used to easily wrap synchonous code in a span.\n\n For example:\n ```rust\n use tracing::info_span;\n\n # fn doc() -> Result<(), ()> {\n # mod serde_json {\n #    pub(crate) fn from_slice(buf: &[u8]) -> Result<(), ()> { Ok(()) }\n # }\n # let buf: [u8; 0] = [];\n let json = info_span!(\"json.parse\").in_scope(|| serde_json::from_slice(&buf))?;\n # let _ = json; // suppress unused variable warning\n # Ok(())\n # }\n ```\n\n You can find more examples showing how to use this crate [here][examples].\n\n [RAII]: https://github.com/rust-unofficial/patterns/blob/main/src/patterns/behavioural/RAII.md\n [examples]: https://github.com/tokio-rs/tracing/tree/master/examples\n\n ### Events\n\n [`Event`]s are recorded using the [`event!`] macro:\n\n ```rust\n # fn main() {\n use tracing::{event, Level};\n event!(Level::INFO, \"something has happened!\");\n # }\n ```\n\n ## Using the Macros\n\n The [`span!`] and [`event!`] macros as well as the `#[instrument]` attribute\n use fairly similar syntax, with some exceptions.\n\n ### Configuring Attributes\n\n Both macros require a [`Level`] specifying the verbosity of the span or\n event. Optionally, the, [target] and [parent span] may be overridden. If the\n target and parent span are not overridden, they will default to the\n module path where the macro was invoked and the current span (as determined\n by the subscriber), respectively.\n\n For example:\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(target: \"app_spans\", Level::TRACE, \"my span\");\n event!(target: \"app_events\", Level::INFO, \"something has happened!\");\n # }\n ```\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my span\");\n event!(parent: &span, Level::INFO, \"something has happened!\");\n # }\n ```\n\n The span macros also take a string literal after the level, to set the name\n of the span (as above).  In the case of the event macros, the name of the event can\n be overridden (the default is `event file:line`) using the `name:` specifier.\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(Level::TRACE, \"my span\");\n event!(name: \"some_info\", Level::INFO, \"something has happened!\");\n # }\n ```\n\n ### Recording Fields\n\n Structured fields on spans and events are specified using the syntax\n `field_name = field_value`. Fields are separated by commas.\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n // records an event with two fields:\n //  - \"answer\", with the value 42\n //  - \"question\", with the value \"life, the universe and everything\"\n event!(Level::INFO, answer = 42, question = \"life, the universe, and everything\");\n # }\n ```\n\n As shorthand, local variables may be used as field values without an\n assignment, similar to [struct initializers]. For example:\n\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n\n span!(Level::TRACE, \"login\", user);\n // is equivalent to:\n span!(Level::TRACE, \"login\", user = user);\n # }\n```\n\n Field names can include dots, but should not be terminated by them:\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n let email = \"ferris@rust-lang.org\";\n span!(Level::TRACE, \"login\", user, user.email = email);\n # }\n```\n\n Since field names can include dots, fields on local structs can be used\n using the local variable shorthand:\n ```\n # use tracing::{span, Level};\n # fn main() {\n # struct User {\n #    name: &'static str,\n #    email: &'static str,\n # }\n let user = User {\n     name: \"ferris\",\n     email: \"ferris@rust-lang.org\",\n };\n // the span will have the fields `user.name = \"ferris\"` and\n // `user.email = \"ferris@rust-lang.org\"`.\n span!(Level::TRACE, \"login\", user.name, user.email);\n # }\n```\n\n Fields with names that are not Rust identifiers, or with names that are Rust reserved words,\n may be created using quoted string literals. However, this may not be used with the local\n variable shorthand.\n ```\n # use tracing::{span, Level};\n # fn main() {\n // records an event with fields whose names are not Rust identifiers\n //  - \"guid:x-request-id\", containing a `:`, with the value \"abcdef\"\n //  - \"type\", which is a reserved word, with the value \"request\"\n span!(Level::TRACE, \"api\", \"guid:x-request-id\" = \"abcdef\", \"type\" = \"request\");\n # }\n```\n\n Constant expressions can also be used as field names. Constants\n must be enclosed in curly braces (`{}`) to indicate that the *value*\n of the constant is to be used as the field name, rather than the\n constant's name. For example:\n ```\n # use tracing::{span, Level};\n # fn main() {\n const RESOURCE_NAME: &str = \"foo\";\n // this span will have the field `foo = \"some_id\"`\n span!(Level::TRACE, \"get\", { RESOURCE_NAME } = \"some_id\");\n # }\n```\n\n The `?` sigil is shorthand that specifies a field should be recorded using\n its [`fmt::Debug`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n #[derive(Debug)]\n struct MyStruct {\n     field: &'static str,\n }\n\n let my_struct = MyStruct {\n     field: \"Hello world!\"\n };\n\n // `my_struct` will be recorded using its `fmt::Debug` implementation.\n event!(Level::TRACE, greeting = ?my_struct);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::debug(&my_struct));\n # }\n ```\n\n The `%` sigil operates similarly, but indicates that the value should be\n recorded using its [`fmt::Display`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, greeting = %my_struct.field);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::display(&my_struct.field));\n # }\n ```\n\n The `%` and `?` sigils may also be used with local variable shorthand:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, %my_struct.field);\n # }\n ```\n\n Additionally, a span may declare fields with the special value [`Empty`],\n which indicates that that the value for that field does not currently exist\n but may be recorded later. For example:\n\n ```\n use tracing::{trace_span, field};\n\n // Create a span with two fields: `greeting`, with the value \"hello world\", and\n // `parting`, without a value.\n let span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n // ...\n\n // Now, record a value for parting as well.\n span.record(\"parting\", &\"goodbye world!\");\n ```\n\n Finally, events may also include human-readable messages, in the form of a\n [format string][fmt] and (optional) arguments, **after** the event's\n key-value fields. If a format string and arguments are provided,\n they will implicitly create a new field named `message` whose value is the\n provided set of format arguments.\n\n For example:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n let question = \"the ultimate question of life, the universe, and everything\";\n let answer = 42;\n // records an event with the following fields:\n // - `question.answer` with the value 42,\n // - `question.tricky` with the value `true`,\n // - \"message\", with the value \"the answer to the ultimate question of life, the\n //    universe, and everything is 42.\"\n event!(\n     Level::DEBUG,\n     question.answer = answer,\n     question.tricky = true,\n     \"the answer to {} is {}.\", question, answer\n );\n # }\n ```\n\n Specifying a formatted message in this manner does not allocate by default.\n\n [struct initializers]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\n [target]: Metadata::target\n [parent span]: span::Attributes::parent\n [determined contextually]: span::Attributes::is_contextual\n [`fmt::Debug`]: std::fmt::Debug\n [`fmt::Display`]: std::fmt::Display\n [fmt]: std::fmt#usage\n [`Empty`]: field::Empty\n\n ### Shorthand Macros\n\n `tracing` also offers a number of macros with preset verbosity levels.\n The [`trace!`], [`debug!`], [`info!`], [`warn!`], and [`error!`] behave\n similarly to the [`event!`] macro, but with the [`Level`] argument already\n specified, while the corresponding [`trace_span!`], [`debug_span!`],\n [`info_span!`], [`warn_span!`], and [`error_span!`] macros are the same,\n but for the [`span!`] macro.\n\n These are intended both as a shorthand, and for compatibility with the [`log`]\n crate (see the next section).\n\n [`span!`]: span!\n [`event!`]: event!\n [`trace!`]: trace!\n [`debug!`]: debug!\n [`info!`]: info!\n [`warn!`]: warn!\n [`error!`]: error!\n [`trace_span!`]: trace_span!\n [`debug_span!`]: debug_span!\n [`info_span!`]: info_span!\n [`warn_span!`]: warn_span!\n [`error_span!`]: error_span!\n\n ### For `log` Users\n\n Users of the [`log`] crate should note that `tracing` exposes a set of\n macros for creating `Event`s (`trace!`, `debug!`, `info!`, `warn!`, and\n `error!`) which may be invoked with the same syntax as the similarly-named\n macros from the `log` crate. Often, the process of converting a project to\n use `tracing` can begin with a simple drop-in replacement.\n\n Let's consider the `log` crate's yak-shaving example:\n\n ```rust,ignore\n use std::{error::Error, io};\n use tracing::{debug, error, info, span, warn, Level};\n\n // the `#[tracing::instrument]` attribute creates and enters a span\n // every time the instrumented function is called. The span is named after the\n // the function or method. Parameters passed to the function are recorded as fields.\n #[tracing::instrument]\n pub fn shave(yak: usize) -> Result<(), Box<dyn Error + 'static>> {\n     // this creates an event at the DEBUG level with two fields:\n     // - `excitement`, with the key \"excitement\" and the value \"yay!\"\n     // - `message`, with the key \"message\" and the value \"hello! I'm gonna shave a yak.\"\n     //\n     // unlike other fields, `message`'s shorthand initialization is just the string itself.\n     debug!(excitement = \"yay!\", \"hello! I'm gonna shave a yak.\");\n     if yak == 3 {\n         warn!(\"could not locate yak!\");\n         // note that this is intended to demonstrate `tracing`'s features, not idiomatic\n         // error handling! in a library or application, you should consider returning\n         // a dedicated `YakError`. libraries like snafu or thiserror make this easy.\n         return Err(io::Error::new(io::ErrorKind::Other, \"shaving yak failed!\").into());\n     } else {\n         debug!(\"yak shaved successfully\");\n     }\n     Ok(())\n }\n\n pub fn shave_all(yaks: usize) -> usize {\n     // Constructs a new span named \"shaving_yaks\" at the TRACE level,\n     // and a field whose key is \"yaks\". This is equivalent to writing:\n     //\n     // let span = span!(Level::TRACE, \"shaving_yaks\", yaks = yaks);\n     //\n     // local variables (`yaks`) can be used as field values\n     // without an assignment, similar to struct initializers.\n     let _span = span!(Level::TRACE, \"shaving_yaks\", yaks).entered();\n\n     info!(\"shaving yaks\");\n\n     let mut yaks_shaved = 0;\n     for yak in 1..=yaks {\n         let res = shave(yak);\n         debug!(yak, shaved = res.is_ok());\n\n         if let Err(ref error) = res {\n             // Like spans, events can also use the field initialization shorthand.\n             // In this instance, `yak` is the field being initalized.\n             error!(yak, error = error.as_ref(), \"failed to shave yak!\");\n         } else {\n             yaks_shaved += 1;\n         }\n         debug!(yaks_shaved);\n     }\n\n     yaks_shaved\n }\n ```\n\n ## In libraries\n\n Libraries should link only to the `tracing` crate, and use the provided\n macros to record whatever information will be useful to downstream\n consumers.\n\n ## In executables\n\n In order to record trace events, executables have to use a `Subscriber`\n implementation compatible with `tracing`. A `Subscriber` implements a\n way of collecting trace data, such as by logging it to standard output.\n\n This library does not contain any `Subscriber` implementations; these are\n provided by [other crates](#related-crates).\n\n The simplest way to use a subscriber is to call the [`set_global_default`]\n function:\n\n ```\n extern crate tracing;\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n tracing::subscriber::set_global_default(my_subscriber)\n     .expect(\"setting tracing default failed\");\n # }\n ```\n\n <pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In general, libraries should <em>not</em> call\n     <code>set_global_default()</code>! Doing so will cause conflicts when\n     executables that depend on the library try to set the default later.\n </pre>\n\n This subscriber will be used as the default in all threads for the\n remainder of the duration of the program, similar to setting the logger\n in the `log` crate.\n\n In addition, the default subscriber can be set through using the\n [`with_default`] function. This follows the `tokio` pattern of using\n closures to represent executing code in a context that is exited at the end\n of the closure. For example:\n\n ```rust\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n # #[cfg(feature = \"std\")]\n tracing::subscriber::with_default(my_subscriber, || {\n     // Any trace events generated in this closure or by functions it calls\n     // will be collected by `my_subscriber`.\n })\n # }\n ```\n\n This approach allows trace data to be collected by multiple subscribers\n within different contexts in the program. Note that the override only applies to the\n currently executing thread; other threads will not see the change from with_default.\n\n Any trace events generated outside the context of a subscriber will not be collected.\n\n Once a subscriber has been set, instrumentation points may be added to the\n executable using the `tracing` crate's macros.\n\n ## `log` Compatibility\n\n The [`log`] crate provides a simple, lightweight logging facade for Rust.\n While `tracing` builds upon `log`'s foundation with richer structured\n diagnostic data, `log`'s simplicity and ubiquity make it the \"lowest common\n denominator\" for text-based logging in Rust — a vast majority of Rust\n libraries and applications either emit or consume `log` records. Therefore,\n `tracing` provides multiple forms of interoperability with `log`: `tracing`\n instrumentation can emit `log` records, and a compatibility layer enables\n `tracing` [`Subscriber`]s to consume `log` records as `tracing` [`Event`]s.\n\n ### Emitting `log` Records\n\n This crate provides two feature flags, \"log\" and \"log-always\", which will\n cause [spans] and [events] to emit `log` records. When the \"log\" feature is\n enabled, if no `tracing` `Subscriber` is active, invoking an event macro or\n creating a span with fields will emit a `log` record. This is intended\n primarily for use in libraries which wish to emit diagnostics that can be\n consumed by applications using `tracing` *or* `log`, without paying the\n additional overhead of emitting both forms of diagnostics when `tracing` is\n in use.\n\n Enabling the \"log-always\" feature will cause `log` records to be emitted\n even if a `tracing` `Subscriber` _is_ set. This is intended to be used in\n applications where a `log` `Logger` is being used to record a textual log,\n and `tracing` is used only to record other forms of diagnostics (such as\n metrics, profiling, or distributed tracing data). Unlike the \"log\" feature,\n libraries generally should **not** enable the \"log-always\" feature, as doing\n so will prevent applications from being able to opt out of the `log` records.\n\n See [here][flags] for more details on this crate's feature flags.\n\n The generated `log` records' messages will be a string representation of the\n span or event's fields, and all additional information recorded by `log`\n (target, verbosity level, module path, file, and line number) will also be\n populated. Additionally, `log` records are also generated when spans are\n entered, exited, and closed. Since these additional span lifecycle logs have\n the potential to be very verbose, and don't include additional fields, they\n will always be emitted at the `Trace` level, rather than inheriting the\n level of the span that generated them. Furthermore, they are are categorized\n under a separate `log` target, \"tracing::span\" (and its sub-target,\n \"tracing::span::active\", for the logs on entering and exiting a span), which\n may be enabled or disabled separately from other `log` records emitted by\n `tracing`.\n\n ### Consuming `log` Records\n\n The [`tracing-log`] crate provides a compatibility layer which\n allows a `tracing` [`Subscriber`] to consume `log` records as though they\n were `tracing` [events]. This allows applications using `tracing` to record\n the logs emitted by dependencies using `log` as events within the context of\n the application's trace tree. See [that crate's documentation][log-tracer]\n for details.\n\n [log-tracer]: https://docs.rs/tracing-log/latest/tracing_log/#convert-log-records-to-tracing-events\n\n ## Related Crates\n\n In addition to `tracing` and `tracing-core`, the [`tokio-rs/tracing`] repository\n contains several additional crates designed to be used with the `tracing` ecosystem.\n This includes a collection of `Subscriber` implementations, as well as utility\n and adapter crates to assist in writing `Subscriber`s and instrumenting\n applications.\n\n In particular, the following crates are likely to be of interest:\n\n  - [`tracing-futures`] provides a compatibility layer with the `futures`\n    crate, allowing spans to be attached to `Future`s, `Stream`s, and `Executor`s.\n  - [`tracing-subscriber`] provides `Subscriber` implementations and\n    utilities for working with `Subscriber`s. This includes a [`FmtSubscriber`]\n    `FmtSubscriber` for logging formatted trace data to stdout, with similar\n    filtering and formatting to the [`env_logger`] crate.\n  - [`tracing-log`] provides a compatibility layer with the [`log`] crate,\n    allowing log messages to be recorded as `tracing` `Event`s within the\n    trace tree. This is useful when a project using `tracing` have\n    dependencies which use `log`. Note that if you're using\n    `tracing-subscriber`'s `FmtSubscriber`, you don't need to depend on\n    `tracing-log` directly.\n  - [`tracing-appender`] provides utilities for outputting tracing data,\n     including a file appender and non blocking writer.\n\n Additionally, there are also several third-party crates which are not\n maintained by the `tokio` project. These include:\n\n  - [`tracing-timing`] implements inter-event timing metrics on top of `tracing`.\n    It provides a subscriber that records the time elapsed between pairs of\n    `tracing` events and generates histograms.\n  - [`tracing-opentelemetry`] provides a subscriber for emitting traces to\n    [OpenTelemetry]-compatible distributed tracing systems.\n  - [`tracing-honeycomb`] Provides a layer that reports traces spanning multiple machines to [honeycomb.io]. Backed by [`tracing-distributed`].\n  - [`tracing-distributed`] Provides a generic implementation of a layer that reports traces spanning multiple machines to some backend.\n  - [`tracing-actix-web`] provides `tracing` integration for the `actix-web` web framework.\n  - [`tracing-actix`] provides `tracing` integration for the `actix` actor\n    framework.\n  - [`axum-insights`] provides `tracing` integration and Application insights export for the `axum` web framework.\n  - [`tracing-gelf`] implements a subscriber for exporting traces in Greylog\n    GELF format.\n  - [`tracing-coz`] provides integration with the [coz] causal profiler\n    (Linux-only).\n  - [`tracing-bunyan-formatter`] provides a layer implementation that reports events and spans\n    in [bunyan] format, enriched with timing information.\n  - [`tracing-wasm`] provides a `Subscriber`/`Layer` implementation that reports\n    events and spans via browser `console.log` and [User Timing API (`window.performance`)].\n  - [`tracing-web`] provides a layer implementation of level-aware logging of events\n    to web browsers' `console.*` and span events to the [User Timing API (`window.performance`)].\n  - [`tide-tracing`] provides a [tide] middleware to trace all incoming requests and responses.\n  - [`test-log`] takes care of initializing `tracing` for tests, based on\n    environment variables with an `env_logger` compatible syntax.\n  - [`tracing-unwrap`] provides convenience methods to report failed unwraps\n    on `Result` or `Option` types to a `Subscriber`.\n  - [`diesel-tracing`] provides integration with [`diesel`] database connections.\n  - [`tracing-tracy`] provides a way to collect [Tracy] profiles in instrumented\n    applications.\n  - [`tracing-elastic-apm`] provides a layer for reporting traces to [Elastic APM].\n  - [`tracing-etw`] provides a layer for emitting Windows [ETW] events.\n  - [`tracing-fluent-assertions`] provides a fluent assertions-style testing\n    framework for validating the behavior of `tracing` spans.\n  - [`sentry-tracing`] provides a layer for reporting events and traces to [Sentry].\n  - [`tracing-forest`] provides a subscriber that preserves contextual coherence by\n    grouping together logs from the same spans during writing.\n  - [`tracing-loki`] provides a layer for shipping logs to [Grafana Loki].\n  - [`tracing-logfmt`] provides a layer that formats events and spans into the logfmt format.\n  - [`reqwest-tracing`] provides a middleware to trace [`reqwest`] HTTP requests.\n  - [`tracing-cloudwatch`] provides a layer that sends events to AWS CloudWatch Logs.\n  - [`clippy-tracing`] provides a tool to add, remove and check for `tracing::instrument`.\n\n If you're the maintainer of a `tracing` ecosystem crate not listed above,\n please let us know! We'd love to add your project to the list!\n\n [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry\n [OpenTelemetry]: https://opentelemetry.io/\n [`tracing-honeycomb`]: https://crates.io/crates/tracing-honeycomb\n [`tracing-distributed`]: https://crates.io/crates/tracing-distributed\n [honeycomb.io]: https://www.honeycomb.io/\n [`tracing-actix-web`]: https://crates.io/crates/tracing-actix-web\n [`tracing-actix`]: https://crates.io/crates/tracing-actix\n [`axum-insights`]: https://crates.io/crates/axum-insights\n [`tracing-gelf`]: https://crates.io/crates/tracing-gelf\n [`tracing-coz`]: https://crates.io/crates/tracing-coz\n [coz]: https://github.com/plasma-umass/coz\n [`tracing-bunyan-formatter`]: https://crates.io/crates/tracing-bunyan-formatter\n [bunyan]: https://github.com/trentm/node-bunyan\n [`tracing-wasm`]: https://docs.rs/tracing-wasm\n [`tracing-web`]: https://docs.rs/tracing-web\n [User Timing API (`window.performance`)]: https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\n [`tide-tracing`]: https://crates.io/crates/tide-tracing\n [tide]: https://crates.io/crates/tide\n [`test-log`]: https://crates.io/crates/test-log\n [`tracing-unwrap`]: https://docs.rs/tracing-unwrap\n [`diesel`]: https://crates.io/crates/diesel\n [`diesel-tracing`]: https://crates.io/crates/diesel-tracing\n [`tracing-tracy`]: https://crates.io/crates/tracing-tracy\n [Tracy]: https://github.com/wolfpld/tracy\n [`tracing-elastic-apm`]: https://crates.io/crates/tracing-elastic-apm\n [Elastic APM]: https://www.elastic.co/apm\n [`tracing-etw`]: https://github.com/microsoft/rust_win_etw/tree/main/win_etw_tracing\n [ETW]: https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing\n [`tracing-fluent-assertions`]: https://crates.io/crates/tracing-fluent-assertions\n [`sentry-tracing`]: https://crates.io/crates/sentry-tracing\n [Sentry]: https://sentry.io/welcome/\n [`tracing-forest`]: https://crates.io/crates/tracing-forest\n [`tracing-loki`]: https://crates.io/crates/tracing-loki\n [Grafana Loki]: https://grafana.com/oss/loki/\n [`tracing-logfmt`]: https://crates.io/crates/tracing-logfmt\n [`reqwest-tracing`]: https://crates.io/crates/reqwest-tracing\n [`reqwest`]: https://crates.io/crates/reqwest\n [`tracing-cloudwatch`]: https://crates.io/crates/tracing-cloudwatch\n [`clippy-tracing`]: https://crates.io/crates/clippy-tracing\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Some of these ecosystem crates are currently\n     unreleased and/or in earlier stages of development. They may be less stable\n     than <code>tracing</code> and <code>tracing-core</code>.\n </pre>\n\n ## Crate Feature Flags\n\n The following crate [feature flags] are available:\n\n * A set of features controlling the [static verbosity level].\n * `log`: causes trace instrumentation points to emit [`log`] records as well\n   as trace events, if a default `tracing` subscriber has not been set. This\n   is intended for use in libraries whose users may be using either `tracing`\n   or `log`.\n * `log-always`: Emit `log` records from all `tracing` spans and events, even\n   if a `tracing` subscriber has been set. This should be set only by\n   applications which intend to collect traces and logs separately; if an\n   adapter is used to convert `log` records into `tracing` events, this will\n   cause duplicate events to occur.\n * `attributes`: Includes support for the `#[instrument]` attribute.\n   This is on by default, but does bring in the `syn` crate as a dependency,\n   which may add to the compile time of crates that do not already use it.\n * `std`: Depend on the Rust standard library (enabled by default).\n\n   `no_std` users may disable this feature with `default-features = false`:\n\n   ```toml\n   [dependencies]\n   tracing = { version = \"0.1.38\", default-features = false }\n   ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: <code>tracing</code>'s <code>no_std</code> support\n     requires <code>liballoc</code>.\n </pre>\n\n ### Unstable Features\n\n These feature flags enable **unstable** features. The public API may break in 0.1.x\n releases. To enable these features, the `--cfg tracing_unstable` must be passed to\n `rustc` when compiling.\n\n The following unstable feature flags are currently available:\n\n * `valuable`: Enables support for recording [field values] using the\n   [`valuable`] crate.\n\n #### Enabling Unstable Features\n\n The easiest way to set the `tracing_unstable` cfg is to use the `RUSTFLAGS`\n env variable when running `cargo` commands:\n\n ```shell\n RUSTFLAGS=\"--cfg tracing_unstable\" cargo build\n ```\n Alternatively, the following can be added to the `.cargo/config` file in a\n project to automatically enable the cfg flag for that project:\n\n ```toml\n [build]\n rustflags = [\"--cfg\", \"tracing_unstable\"]\n ```\n\n [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n [field values]: crate::field\n [`valuable`]: https://crates.io/crates/valuable\n\n ## Supported Rust Versions\n\n Tracing is built against the latest stable release. The minimum supported\n version is 1.56. The current Tracing version is not guaranteed to build on\n Rust versions earlier than the minimum supported version.\n\n Tracing follows the same compiler support policies as the rest of the Tokio\n project. The current stable Rust compiler and the three most recent minor\n versions before it will always be supported. For example, if the current\n stable compiler version is 1.69, the minimum supported version will not be\n increased past 1.66, three minor versions prior. Increasing the minimum\n supported compiler version is not considered a semver breaking change as\n long as doing so complies with this policy.\n\n [`log`]: https://docs.rs/log/0.4.6/log/\n [span]: mod@span\n [spans]: mod@span\n [`Span`]: span::Span\n [`in_scope`]: span::Span::in_scope\n [event]: Event\n [events]: Event\n [`Subscriber`]: subscriber::Subscriber\n [Subscriber::event]: subscriber::Subscriber::event\n [`enter`]: subscriber::Subscriber::enter\n [`exit`]: subscriber::Subscriber::exit\n [`enabled`]: subscriber::Subscriber::enabled\n [metadata]: Metadata\n [`field::display`]: field::display\n [`field::debug`]: field::debug\n [`set_global_default`]: subscriber::set_global_default\n [`with_default`]: subscriber::with_default\n [`tokio-rs/tracing`]: https://github.com/tokio-rs/tracing\n [`tracing-futures`]: https://crates.io/crates/tracing-futures\n [`tracing-subscriber`]: https://crates.io/crates/tracing-subscriber\n [`tracing-log`]: https://crates.io/crates/tracing-log\n [`tracing-timing`]: https://crates.io/crates/tracing-timing\n [`tracing-appender`]: https://crates.io/crates/tracing-appender\n [`env_logger`]: https://crates.io/crates/env_logger\n [`FmtSubscriber`]: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/struct.Subscriber.html\n [static verbosity level]: level_filters#compile-time-filters\n [instrument]: https://docs.rs/tracing-attributes/latest/tracing_attributes/attr.instrument.html\n [flags]: #crate-feature-flags","links":{"info_span!":"0:26:3386","span!":"0:23:3158","warn!":"0:36:2073","error!":"0:37:3569","event!":"0:29:3153","`Level`":"20:1008:3163","Event":"20:837:3154","info!":"0:35:3551","subscriber::set_global_default":"0:266:3648","mod@span":"0:141:3158","std::fmt#usage":"5:5052:847","field::Empty":"20:850:4797","subscriber::Subscriber::enter":"20:696:3861","Metadata::target":"20:499:1863","level_filters#compile-time-filters":"0:135:3169","Span#in-asynchronous-code":"0:370:3165","span::Span":"0:370:3165","debug!":"0:34:644","span::Attributes::parent":"20:640:3343","`Span::enter`":"0:180:3861","std::fmt::Display":"2:11010:133","error_span!":"0:28:3402","debug_span!":"0:25:3378","subscriber::with_default":"0:262:3646","trace!":"0:33:3528","crate::field":"0:57:833","span::Span::in_scope":"0:185:4467","subscriber::Subscriber::event":"20:695:3153","subscriber::Subscriber::exit":"20:697:4445","warn_span!":"0:27:3394","subscriber::Subscriber::enabled":"20:689:3187","Metadata":"20:482:3164","trace_span!":"0:24:3370","std::fmt::Debug":"2:11005:123","subscriber::Subscriber":"20:686:3157","`Event`":"20:837:3154"},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/tokio-rs/tracing/master/assets/logo-type.png\",\nissue_tracker_base_url = \"https://github.com/tokio-rs/tracing/issues/\")]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub, bad_style, dead_code, improper_ctypes,\nnon_shorthand_field_patterns, no_mangle_generic_items, overflowing_literals,\npath_statements, patterns_in_fns_without_body, private_in_public,\nunconditional_recursion, unused, unused_allocation, unused_comparisons,\nunused_parens, while_true)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:3151","0:57:833","0:73:3149","0:135:3169","0:141:3158","0:259:3156","0:4-0:88:3150","0:6-20:803:3152","0:7-20:837:3154","0:8-20:294:3155","0:9-20:686:3157","0:17-20:243:3153","0:18-20:1008:3163","0:19-20:482:3164","0:20-0:370:3165","0:21-22:206:3149","0:29:3153","0:23:3158","0:24:3370","0:25:3378","0:26:3386","0:27:3394","0:28:3402","0:30:3442","0:31:3449","0:32:3187","0:33:3528","0:34:644","0:35:3551","0:36:2073","0:37:3569"],"is_stripped":false}}},"0:332:847":{"id":"0:332:847","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2865:29741":{"id":"2:2865:29741","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:73:3149":{"id":"0:73:3149","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[1,0],"end":[429,1]},"visibility":"public","docs":"Attach a span to a `std::future::Future`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:88:3150","0:91:3807","0:283:3831","0:326:3794"],"is_stripped":false}}},"a:2:3408:263-0:386:4193":{"id":"a:2:3408:263-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:261-20:832:3647":{"id":"0:261-20:832:3647","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[6,0],"end":[6,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:832:3647","is_glob":false}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[139,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:63:3748"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:220:878":{"id":"0:220:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:246:4445":{"id":"0:246:4445","crate_id":0,"name":"exit","span":{"filename":"src/span.rs","begin":[1548,4],"end":[1553,5]},"visibility":"public","docs":"Exits this span, returning the underlying [`Span`].","links":{"`Span`":"0:370:3165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:61:3748":{"id":"0:61:3748","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[134,4],"end":[134,65]},"visibility":"default","docs":"Attempts to convert `&self` into a `Field` with the specified `metadata`.\n\nIf `metadata` defines this field, then the field is returned. Otherwise,\nthis returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:482:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:374:508":{"id":"0:374:508","crate_id":0,"name":"clone","span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["0:385:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:7-20:837:3154":{"id":"0:7-20:837:3154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,37],"end":[952,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::event::Event","name":"Event","id":"20:837:3154","is_glob":false}}},"2:3178:3832":{"id":"2:3178:3832","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:53-20:803:3152":{"id":"0:53-20:803:3152","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,37],"end":[136,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::Dispatch","name":"Dispatch","id":"20:803:3152","is_glob":false}}},"0:326:3794":{"id":"0:326:3794","crate_id":0,"name":"Instrumented","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Span`].\n\nThis type is returned by the [`Instrument`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Span`]: crate::Span","links":{"crate::Span":"0:370:3165","std::future::Future":"2:48713:163","`Instrument`":"0:88:3150"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":["0:112","a:2:35991:251-0:326:3794","a:2:3408:263-0:326:3794","a:2:3443:4842-0:326:3794","a:2:45861:10851-0:326:3794","a:2:45862:11042-0:326:3794","b:0:110-0:326:3794","b:0:125-0:326:3794","b:2:2860-0:326:3794","b:2:2863-0:326:3794","b:2:2918-0:326:3794","b:2:3175-0:326:3794","b:2:3179-0:326:3794","b:2:3185-0:326:3794","b:2:3190-0:326:3794","b:2:4055-0:326:3794","b:2:14509-0:326:3794","b:5:817-0:326:3794","0:330","0:333","0:361","0:364","0:106"]}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["in_current_span","instrument"],"trait":{"name":"Instrument","id":"0:88:3150","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:45861:10851-0:380:4188":{"id":"a:2:45861:10851-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:10851","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:36:2073":{"id":"0:36:2073","crate_id":0,"name":"warn","span":{"filename":"src/macros.rs","begin":[2149,0],"end":[2400,1]},"visibility":"public","docs":"Constructs an event at the warn level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::warn;\n# fn main() {\n\nlet warn_description = \"Invalid Input\";\nlet input = &[0x27, 0x45];\n\nwarn!(?input, warning = warn_description);\nwarn!(\n    target: \"input_events\",\n    warning = warn_description,\n    \"Received warning for input: {:?}\", input,\n);\nwarn!(name: \"invalid\", ?input);\n# }\n```","links":{"crate#using-the-macros":"0:0:3221","crate::event!":"0:29:3153"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:188:833":{"id":"0:188:833","crate_id":0,"name":"field","span":{"filename":"src/span.rs","begin":[1107,4],"end":[1112,5]},"visibility":"public","docs":"Returns a [`Field`][super::field::Field] for the field with the\ngiven `name`, if one exists,","links":{"super::field::Field":"20:845:3201"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"field::Field","id":"20:845:3201","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3744","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:116:3795":{"id":"0:116:3795","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:109:1402":{"id":"0:109:1402","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[318,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:45892:3751","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:14711:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:48738:220","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:48713:163","args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:386:4193":{"id":"b:2:3190-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:3528":{"id":"0:33:3528","crate_id":0,"name":"trace","span":{"filename":"src/macros.rs","begin":[1303,0],"end":[1554,1]},"visibility":"public","docs":"Constructs an event at the trace level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::trace;\n# #[derive(Debug, Copy, Clone)] struct Position { x: f32, y: f32 }\n# impl Position {\n# const ORIGIN: Self = Self { x: 0.0, y: 0.0 };\n# fn dist(&self, other: Position) -> f32 {\n#    let x = (other.x - self.x).exp2(); let y = (self.y - other.y).exp2();\n#    (x + y).sqrt()\n# }\n# }\n# fn main() {\nlet pos = Position { x: 3.234, y: -1.223 };\nlet origin_dist = pos.dist(Position::ORIGIN);\n\ntrace!(position = ?pos, ?origin_dist);\ntrace!(\n    target: \"app_events\",\n    position = ?pos,\n    \"x is {} and y is {}\",\n    if pos.x >= 0.0 { \"positive\" } else { \"negative\" },\n    if pos.y >= 0.0 { \"positive\" } else { \"negative\" }\n);\ntrace!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3221","crate::event!":"0:29:3153"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"5:821:5468":{"id":"5:821:5468","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:129:3151":{"id":"0:129:3151","crate_id":0,"name":"dispatcher","span":{"filename":"src/instrument.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Borrows the [`Dispatch`] that is entered when this type is polled.","links":{"`Dispatch`":"20:803:3152"},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:803:3152","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:283:3831":{"id":"b:2:4055-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14513:1016":{"id":"2:14513:1016","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"2:48716:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:114:3158":{"id":"0:114:3158","crate_id":0,"name":"span","span":{"filename":"src/instrument.rs","begin":[329,4],"end":[331,5]},"visibility":"public","docs":"Borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:123:211":{"id":"0:123:211","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[381,4],"end":[381,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}}},"0:32:3187":{"id":"0:32:3187","crate_id":0,"name":"enabled","span":{"filename":"src/macros.rs","begin":[1184,0],"end":[1264,1]},"visibility":"public","docs":"Checks whether a span or event is [enabled] based on the provided [metadata].\n\n[enabled]: crate::Subscriber::enabled\n[metadata]: crate::Metadata\n\nThis macro is a specialized tool: it is intended to be used prior\nto an expensive computation required *just* for that event, but\n*cannot* be done as part of an argument to that event, such as\nwhen multiple events are emitted (e.g., iterating over a collection\nand emitting an event for each item).\n\n# Usage\n\n[Subscribers] can make filtering decisions based all the data included in a\nspan or event's [`Metadata`]. This means that it is possible for `enabled!`\nto return a _false positive_ (indicating that something would be enabled\nwhen it actually would not be) or a _false negative_ (indicating that\nsomething would be disabled when it would actually be enabled).\n\n[Subscribers]: crate::subscriber::Subscriber\n[`Metadata`]: crate::metadata::Metadata\n\nThis occurs when a subscriber is using a _more specific_ filter than the\nmetadata provided to the `enabled!` macro. Some situations that can result\nin false positives or false negatives include:\n\n- If a subscriber is using a filter which may enable a span or event based\non field names, but `enabled!` is invoked without listing field names,\n`enabled!` may return a false negative if a specific field name would\ncause the subscriber to enable something that would otherwise be disabled.\n- If a subscriber is using a filter which enables or disables specific events by\nfile path and line number,  a particular event may be enabled/disabled\neven if an `enabled!` invocation with the same level, target, and fields\nindicated otherwise.\n- The subscriber can choose to enable _only_ spans or _only_ events, which `enabled`\nwill not reflect.\n\n`enabled!()` requires a [level](crate::Level) argument, an optional `target:`\nargument, and an optional set of field names. If the fields are not provided,\nthey are considered to be unknown. `enabled!` attempts to match the\nsyntax of `event!()` as closely as possible, which can be seen in the\nexamples below.\n\n# Examples\n\nIf the current subscriber is interested in recording `DEBUG`-level spans and\nevents in the current file and module path, this will evaluate to true:\n```rust\nuse tracing::{enabled, Level};\n\nif enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", and at the\nlevel  `DEBUG`, this will evaluate to true:\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", at\nthe level `DEBUG`, and with a field named \"hello\", this will evaluate\nto true:\n\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG, hello) {\n    // some expensive work...\n}\n```\n\n# Alternatives\n\n`enabled!` queries subscribers with [`Metadata`] where\n[`is_event`] and [`is_span`] both return `false`. Alternatively,\nuse [`event_enabled!`] or [`span_enabled!`] to ensure one of these\nreturns true.\n\n\n[`Metadata`]: crate::Metadata\n[`is_event`]: crate::Metadata::is_event\n[`is_span`]: crate::Metadata::is_span\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::Subscriber::enabled":"20:689:3187","`event_enabled!`":"0:30:3442","crate::span_enabled":"0:31:3449","crate::subscriber::Subscriber":"20:686:3157","crate::Metadata::is_span":"20:505:5365","crate::metadata::Metadata":"20:482:3164","crate::Level":"20:1008:3163","crate::Metadata::is_event":"20:504:5363","crate::Metadata":"20:482:3164"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! enabled {\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr ) => { ... };\n    (target: $target:expr, $lvl:expr ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr) => { ... };\n    ($lvl:expr) => { ... };\n    ($lvl:expr, $($field:tt)*) => { ... };\n}"}},"0:49-20:832:3647":{"id":"0:49-20:832:3647","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[134,0],"end":[134,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:832:3647","is_glob":false}}},"b:2:14509-0:326:3794":{"id":"b:2:14509-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:48713:163","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:48716:176","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:14511:211","2:14512:176","2:14513:1016"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"a:2:3443:4842-0:370:3165":{"id":"a:2:3443:4842-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:4842","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1572,0],"end":[1577,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3671:4564","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:254:710"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:199:4550":{"id":"0:199:4550","crate_id":0,"name":"follows_from","span":{"filename":"src/span.rs","begin":[1310,4],"end":[1317,5]},"visibility":"public","docs":"Indicates that the span with the given ID has an indirect causal\nrelationship with this span.\n\nThis relationship differs somewhat from the parent-child relationship: a\nspan may have any number of prior spans, rather than a single one; and\nspans are not considered to be executing _inside_ of the spans they\nfollow from. This means that a span may close even if subsequent spans\nthat follow from it are still open, and time spent inside of a\nsubsequent span should not be included in the time its precedents were\nexecuting. This is used to model causal relationships such as when a\nsingle future spawns several related background tasks, et cetera.\n\nIf this span is disabled, or the resulting follows-from relationship\nwould be invalid, this function will do nothing.\n\n# Examples\n\nSetting a `follows_from` relationship with a `Span`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span1 = span!(Level::INFO, \"span_1\");\nlet span2 = span!(Level::DEBUG, \"span_2\");\nspan2.follows_from(span1);\n```\n\nSetting a `follows_from` relationship with the current span:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nspan.follows_from(Span::current());\n```\n\nSetting a `follows_from` relationship with a `Span` reference:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet curr = Span::current();\nspan.follows_from(&curr);\n```\n\nSetting a `follows_from` relationship with an `Id`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet id = span.id();\nspan.follows_from(id);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["from",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:9-20:686:3157":{"id":"0:9-20:686:3157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,65],"end":[952,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::subscriber::Subscriber","name":"Subscriber","id":"20:686:3157","is_glob":false}}},"0:201:4178":{"id":"0:201:4178","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1320,4],"end":[1322,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1088:3159","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:380:4188":{"id":"b:2:3190-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17-20:243:3153":{"id":"0:17-20:243:3153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,23],"end":[962,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::event","name":"event","id":"20:243:3153","is_glob":false}}},"b:2:3175-0:370:3165":{"id":"b:2:3175-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:3832"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:878":{"id":"0:222:878","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1438,4],"end":[1440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:35991:251-0:386:4193":{"id":"a:2:35991:251-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"a:2:45861:10851-0:386:4193":{"id":"a:2:45861:10851-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:10851","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"0:120:3883":{"id":"0:120:3883","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[361,4],"end":[373,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:34:644":{"id":"0:34:644","crate_id":0,"name":"debug","span":{"filename":"src/macros.rs","begin":[1580,0],"end":[1831,1]},"visibility":"public","docs":"Constructs an event at the debug level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::debug;\n# fn main() {\n# #[derive(Debug)] struct Position { x: f32, y: f32 }\n\nlet pos = Position { x: 3.234, y: -1.223 };\n\ndebug!(?pos.x, ?pos.y);\ndebug!(target: \"app_events\", position = ?pos, \"New position\");\ndebug!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3221","crate::event!":"0:29:3153"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"b:2:2918-0:326:3794":{"id":"b:2:2918-0:326:3794","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5174","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:326:3794","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2920:29742"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:35991:251-0:283:3831":{"id":"a:2:35991:251-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:2918-0:283:3831":{"id":"b:2:2918-0:283:3831","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:5174","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:283:3831","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":["2:2920:29742"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:4387":{"id":"0:181:4387","crate_id":0,"name":"entered","span":{"filename":"src/span.rs","begin":[896,4],"end":[902,5]},"visibility":"public","docs":"Enters this span, consuming it and returning a [guard][`EnteredSpan`]\nthat will exit the span when dropped.\n\n<pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n    <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n    <code>Span::entered</code> may produce incorrect traces if the returned drop\n    guard is held across an await point. See <a href=\"#in-asynchronous-code\">the\n    <code>Span::enter</code> documentation</a> for details.\n</pre>\n\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\nThis is similar to the [`Span::enter`] method, except that it moves the\nspan by value into the returned guard, rather than borrowing it.\nTherefore, this method can be used to create and enter a span in a\nsingle expression, without requiring a `let`-binding. For example:\n\n```\n# use tracing::info_span;\nlet _span = info_span!(\"something_interesting\").entered();\n```\nrather than:\n```\n# use tracing::info_span;\nlet span = info_span!(\"something_interesting\");\nlet _e = span.enter();\n```\n\nFurthermore, `entered` may be used when the span must be stored in some\nother struct or be passed to a function while remaining entered.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The returned <a href=\"../struct.EnteredSpan.html\">\n    <code>EnteredSpan</code></a> guard does not implement <code>Send</code>.\n    Dropping the guard will exit <em>this</em> span, and if the guard is sent\n    to another thread and dropped there, that thread may never have entered\n    this span. Thus, <code>EnteredSpan</code>s should not be sent between threads.\n</pre>\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n\n# Examples\n\nThe returned guard can be [explicitly exited][EnteredSpan::exit],\nreturning the un-entered span:\n\n```\n# use tracing::{Level, span};\nlet span = span!(Level::INFO, \"doing_something\").entered();\n\n// code here is within the span\n\n// explicitly exit the span, returning it\nlet span = span.exit();\n\n// code here is no longer within the span\n\n// enter the span again\nlet span = span.entered();\n\n// now we are inside the span once again\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\").entered();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSince the [`EnteredSpan`] guard can dereference to the [`Span`] itself,\nthe span may still be accessed while entered. For example:\n\n```rust\n# use tracing::info_span;\nuse tracing::field;\n\n// create the span with an empty field, and enter it.\nlet span = info_span!(\"my_span\", some_field = field::Empty).entered();\n\n// we can still record a value for the field while the span is entered.\nspan.record(\"some_field\", &\"hello world!\");\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1088:3159","`EnteredSpan`":"0:386:4193","`Span::enter`":"0:180:3861","`Span`":"0:370:3165","super::subscriber::Subscriber::exit()":"20:697:4445","super::subscriber::Subscriber::enter()":"20:696:3861","EnteredSpan::exit":"0:246:4445"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:137-20:1038:3928":{"id":"0:137-20:1038:3928","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,23],"end":[53,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::metadata::ParseLevelFilterError","name":"ParseLevelFilterError","id":"20:1038:3928","is_glob":false}}},"b:2:4055-0:370:3165":{"id":"b:2:4055-0:370:3165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1375,0],"end":[1384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:370:3165","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:208:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3179-0:386:4193":{"id":"b:2:3179-0:386:4193","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:386:4193","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:3648":{"id":"0:266:3648","crate_id":0,"name":"set_global_default","span":{"filename":"src/subscriber.rs","begin":[39,0],"end":[44,1]},"visibility":"public","docs":"Sets this subscriber as the global default for the duration of the entire program.\nWill be used as a fallback if no thread-local subscriber has been set in a thread (using `with_default`.)\n\nCan only be set once; subsequent attempts to set the global default will fail.\nReturns whether the initialization was successful.\n\nNote: Libraries should *NOT* call `set_global_default()`! That will cause conflicts when\nexecutables try to set them later.\n\n[span]: super::span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"2:46033:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetGlobalDefaultError","id":"20:163:3649","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:686:3157","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:180:3861":{"id":"0:180:3861","crate_id":0,"name":"enter","span":{"filename":"src/span.rs","begin":[785,4],"end":[788,5]},"visibility":"public","docs":"Enters this span, returning a guard that will exit the span when dropped.\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\n# In Asynchronous Code\n\n**Warning**: in asynchronous code that uses [async/await syntax][syntax],\n`Span::enter` should be used very carefully or avoided entirely. Holding\nthe drop guard returned by `Span::enter` across `.await` points will\nresult in incorrect traces. For example,\n\n```\n# use tracing::info_span;\n# async fn some_other_async_function() {}\nasync fn my_async_function() {\n    let span = info_span!(\"my_async_function\");\n\n    // WARNING: This span will remain entered until this\n    // guard is dropped...\n    let _enter = span.enter();\n    // ...but the `await` keyword may yield, causing the\n    // runtime to switch to another task, while remaining in\n    // this span!\n    some_other_async_function().await\n\n    // ...\n}\n```\n\nThe drop guard returned by `Span::enter` exits the span when it is\ndropped. When an async function or async block yields at an `.await`\npoint, the current scope is _exited_, but values in that scope are\n**not** dropped (because the async block will eventually resume\nexecution from that await point). This means that _another_ task will\nbegin executing while _remaining_ in the entered span. This results in\nan incorrect trace.\n\nInstead of using `Span::enter` in asynchronous code, prefer the\nfollowing:\n\n* To enter a span for a synchronous section of code within an async\n  block or function, prefer [`Span::in_scope`]. Since `in_scope` takes a\n  synchronous closure and exits the span when the closure returns, the\n  span will always be exited before the next await point. For example:\n  ```\n  # use tracing::info_span;\n  # async fn some_other_async_function(_: ()) {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n\n      let some_value = span.in_scope(|| {\n          // run some synchronous code inside the span...\n      });\n\n      // This is okay! The span has already been exited before we reach\n      // the await point.\n      some_other_async_function(some_value).await;\n\n      // ...\n  }\n  ```\n* For instrumenting asynchronous code, `tracing` provides the\n  [`Future::instrument` combinator][instrument] for\n  attaching a span to a future (async function or block). This will\n  enter the span _every_ time the future is polled, and exit it whenever\n  the future yields.\n\n  `Instrument` can be used with an async block inside an async function:\n  ```ignore\n  # use tracing::info_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n      async move {\n         // This is correct! If we yield here, the span will be exited,\n         // and re-entered when we resume.\n         some_other_async_function().await;\n\n         //more asynchronous code inside the span...\n\n      }\n        // instrument the async block with the span...\n        .instrument(span)\n        // ...and await it.\n        .await\n  }\n  ```\n\n  It can also be used to instrument calls to async functions at the\n  callsite:\n  ```ignore\n  # use tracing::debug_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let some_value = some_other_async_function()\n         .instrument(debug_span!(\"some_other_async_function\"))\n         .await;\n\n      // ...\n  }\n  ```\n\n* The [`#[instrument]` attribute macro][attr] can automatically generate\n  correct code when used on an async function:\n\n  ```ignore\n  # async fn some_other_async_function() {}\n  #[tracing::instrument(level = \"info\")]\n  async fn my_async_function() {\n\n      // This is correct! If we yield here, the span will be exited,\n      // and re-entered when we resume.\n      some_other_async_function().await;\n\n      // ...\n\n  }\n  ```\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n[`Span::in_scope`]: Span::in_scope()\n[instrument]: crate::Instrument\n[attr]: macro@crate::instrument\n\n# Examples\n\n```\n# use tracing::{span, Level};\nlet span = span!(Level::INFO, \"my_span\");\nlet guard = span.enter();\n\n// code here is within the span\n\ndrop(guard);\n\n// code here is no longer within the span\n\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\");\n    let _enter = span.enter();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSub-scopes may be created to limit the duration for which the span is\nentered:\n\n```\n# use tracing::{info, info_span};\nlet span = info_span!(\"my_great_span\");\n\n{\n    let _enter = span.enter();\n\n    // this event occurs inside the span.\n    info!(\"i'm in the span!\");\n\n    // exiting the scope drops the guard, exiting the span.\n}\n\n// this event is not inside the span.\ninfo!(\"i'm outside the span!\")\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1088:3159","Span::in_scope()":"0:185:4467","macro@crate::instrument":"22:206:3149","super::subscriber::Subscriber::exit()":"20:697:4445","super::subscriber::Subscriber::enter()":"20:696:3861","crate::Instrument":"0:88:3150"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36049:4845-0:380:4188":{"id":"a:2:36049:4845-0:380:4188","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:4845","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:380:4188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:35:3551":{"id":"0:35:3551","crate_id":0,"name":"info","span":{"filename":"src/macros.rs","begin":[1868,0],"end":[2119,1]},"visibility":"public","docs":"Constructs an event at the info level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::info;\n# // this is so the test will still work in no-std mode\n# #[derive(Debug)]\n# pub struct Ipv4Addr;\n# impl Ipv4Addr { fn new(o1: u8, o2: u8, o3: u8, o4: u8) -> Self { Self } }\n# fn main() {\n# struct Connection { port: u32, speed: f32 }\nuse tracing::field;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\nlet conn = Connection { port: 40, speed: 3.20 };\n\ninfo!(conn.port, \"connected to {:?}\", addr);\ninfo!(\n    target: \"connection_events\",\n    ip = ?addr,\n    conn.port,\n    ?conn.speed,\n);\ninfo!(name: \"completed\", \"completed connection to {:?}\", addr);\n# }\n```","links":{"crate#using-the-macros":"0:0:3221","crate::event!":"0:29:3153"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:380:4188":{"id":"0:380:4188","crate_id":0,"name":"Entered","span":{"filename":"src/span.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"A guard representing a span which has been entered and is currently\nexecuting.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::enter`] function.\n\n[`Span::enter`]: super::Span::enter","links":{"super::Span::enter":"0:180:3861"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:35991:251-0:380:4188","a:2:3408:263-0:380:4188","a:2:3443:4842-0:380:4188","a:2:36049:4845-0:380:4188","a:2:45861:10851-0:380:4188","a:2:45862:11042-0:380:4188","b:0:110-0:380:4188","b:0:125-0:380:4188","b:2:2860-0:380:4188","b:2:2863-0:380:4188","b:2:3175-0:380:4188","b:2:3179-0:380:4188","b:2:3185-0:380:4188","b:2:3190-0:380:4188","b:2:4055-0:380:4188","0:383","0:250"]}}},"0:134:3883":{"id":"0:134:3883","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[426,4],"end":[428,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:16760:7147":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5135:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5496:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:15093:6653":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14929:6623":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5194:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:45793:4798":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:9112:10869":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:37370:4930":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:50302:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:4:3162":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"macro"},"17:15822:6879":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11305:9953":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:4656:17852":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:43355:223":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:11564:5896":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"16:6901:7365":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6500:24530":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:7016:9940":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:50788:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:8025:7523":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:1587:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:413:24407":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:2554:7709":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:463:9889":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:8282:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:13890:18095":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6887:7206":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:1045:4899":{"crate_id":20,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"14:222:7679":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7189:25425":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:50370:9366":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2864:9910":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"15:299:24511":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:50883:9385":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:49924:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13914:6418":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2903:9911":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:47869:9282":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4285:10982":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:7753:8871":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:6868:8632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:689:6041":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12593:6282":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13071:9715":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:11016:5223":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:579:7861":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6370:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:37236:4928":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13392:6343":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:12423:29839":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:6729:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:14370:6522":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:9118:18031":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46073:4798":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:4053:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13735:6374":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13597:6355":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:8235:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1717:5406":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:12978:18056":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:3193:239":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:6702:5853":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:11107:9648":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5679:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6482:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3569:9917":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3432:34335":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5612:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:46201:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:3426:34187":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:675:5900":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46275:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"11:2358:9816":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:8586:9959":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46462:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7835:25428":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:50424:9368":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15600:6829":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14695:6571":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15120:6657":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:44291:9177":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:4968:4793":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:15149:6660":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5485:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2619:10935":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:3803:224":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10885:6185":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9024:4785":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3985:6075":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:25735:3219":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:45968:223":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"16:5346:7258":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:14415:9867":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:11571:5897":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:12135:9820":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11744:29836":{"crate_id":1,"path":["std","sys","dbg","DebuggerPresence"],"kind":"enum"},"17:11621:9659":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"0:57:833":{"crate_id":0,"path":["tracing","field"],"kind":"module"},"17:13224:9720":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:46089:5406":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8782:8903":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7916:9789":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7549:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8721:9471":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8852:11009":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13514:6294":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12216:9550":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5204:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9112:4798":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:12788:10005":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:1886:5831":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:5491:465":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:12856:1957":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:12355:9922":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:635:6037":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47573:8908":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:3131:8858":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:51496:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:43377:225":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11274:25509":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:6363:8889":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:26613:8950":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:1672:5808":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10460:25491":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5502:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:5977:11062":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:9118:9500":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:4150:7234":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1044:5854":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:11225:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:47352:9264":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:11595:9657":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"9:168:24472":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13976:6428":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12452:25601":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:45587:3165":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4948:8708":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:14616:6561":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:695:3153":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","event"],"kind":"function"},"17:14715:6574":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5755:7264":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13678:6364":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6950:7369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"14:162:9802":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12580:9698":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12830:6289":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:963:5817":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:10822:10776":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:8543:7587":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:51514:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"20:294:3155":{"crate_id":20,"path":["tracing_core","field","Value"],"kind":"trait"},"2:8416:5893":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:8666:3155":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10529:25493":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:16663:7120":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12349:6245":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:14563:6553":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10663:9986":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14960:6629":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"14:31:9802":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"0:46:3151":{"crate_id":0,"path":["tracing","dispatcher"],"kind":"module"},"6:1712:8003":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12219:6236":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5403:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:12242:9858":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11920:6217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:615:5828":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6850:7357":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12206:6235":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:48369:18102":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:9492:11078":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47611:9883":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:3129:37483":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14098:6449":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4850:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12838:1400":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:5974:4445":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3677:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12040:9675":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1704:7999":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:4764:7240":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:3712:4951":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:334:5798":{"crate_id":21,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"6:5238:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:16018:6931":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:48212:9309":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:51572:9412":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:48586:9337":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5906:9932":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2433:24558":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:50059:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:1078:4905":{"crate_id":20,"path":["tracing_core","parent","Parent"],"kind":"enum"},"2:49951:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7870:8873":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1449:9819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"8:0:4635":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8917:9479":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:8532:18033":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:2308:7467":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6678:9750":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:4265:7237":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"20:1121:4904":{"crate_id":20,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"17:16063:6941":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45852:9875":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6889:5831":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:35961:3155":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"0:0:3221":{"crate_id":0,"path":["tracing"],"kind":"module"},"6:1490:7869":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:659:9622":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:8623:7592":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3139:6062":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:25828:11190":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14864:6615":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:2412:8861":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1923:5854":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4937:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10484:25492":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6689:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:5067:10998":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4837:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1540:7893":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:596:9630":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2818:7195":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"14:204:18103":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44596:9200":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:47601:8910":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15806:6875":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:51342:9402":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1:9528:9511":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:26309:8924":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:519:6119":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9587:9982":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:51686:9417":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"11:2475:5854":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:14711:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:6898:9939":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8769:9208":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:5015:5884":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12234:6238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:16274:7024":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:16073:6946":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3526:9915":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13035:6317":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:26416:35502":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15053:6650":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10826:9644":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:12819:9712":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14670:6569":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8483:4910":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:16026:6933":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14044:6443":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:4299:5812":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:4437:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:3881:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2215:1445":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3510:4934":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:756:9827":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8180:5932":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1590:7926":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:50289:9363":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11428:25507":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6661:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12834:1245":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9047:9492":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9546:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13365:25497":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43340:226":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:42030:4944":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:325:4907":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:457:9888":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13349:6341":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:9684:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12846:780":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"20:1024:3575":{"crate_id":20,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"17:14115:6457":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14526:6549":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:977:4798":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:45671:35527":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:9465:9508":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:45821:9242":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:11939:5940":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:8093:9797":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:50991:9389":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12378:9694":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:706:6044":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:14579:4838":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:803:3152":{"crate_id":20,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"11:879:9814":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10155:25481":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6736:39075":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:280:3194":{"crate_id":20,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"2:46081:9820":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2287:3162":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:51610:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:15539:6822":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46611:5223":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:1162:4790":{"crate_id":20,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"17:15956:6916":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13800:6397":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:189:24499":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:51620:9414":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:598:39096":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:48421:9323":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13138:6322":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6267:7289":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1966:9900":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5395:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:14734:284":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11748:9663":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:12222:9551":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:50356:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:7294:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9580:9981":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:44204:9173":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46499:9857":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6523:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11215:39091":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:2568:7712":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:4239:7236":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43243:4947":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14062:6444":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:44552:9196":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"0:135:3169":{"crate_id":0,"path":["tracing","level_filters"],"kind":"module"},"0:283:3831":{"crate_id":0,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"1:9816:9902":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:9426:4798":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:1103:9817":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:48170:9299":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"14:7:9802":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5115:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14816:6610":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9633:9515":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:46386:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:51722:2228":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"2:50437:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2528:7182":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15329:6673":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7165:7406":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6406:7308":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:50761:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4998:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:8294:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8976:9489":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7904:7516":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6894:4762":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10903:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:9918:9855":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3450:4844":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:8500:7581":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:45546:9223":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12847:797":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"10:0:4637":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15518:6817":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:113:29688":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:51058:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48403:9321":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:175:6006":{"crate_id":21,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"17:16749:7142":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5631:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:41:5810":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11782:10001":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:9661:5921":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:50221:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:46425:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14170:6476":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"3:756:8884":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"1:2343:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:48380:9313":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:47783:8907":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:2964:7202":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:5445:9926":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5377:7259":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:25099:37005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:14859:10865":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8950:9970":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:13635:6360":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8496:9956":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3472:9913":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6903:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5111:7250":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:871:4800":{"crate_id":20,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"1:12849:969":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"0:27:3394":{"crate_id":0,"path":["tracing","warn_span"],"kind":"macro"},"17:12027:9674":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:309:7694":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10591:6175":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:51694:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"20:8:3160":{"crate_id":20,"path":["tracing_core","callsite"],"kind":"module"},"2:47833:9280":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:1905:7703":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6121:7209":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:539:7841":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43676:17881":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5333:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15968:6919":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3135:37481":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:613:39097":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:1138:9818":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:51220:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26224:8918":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:706:9806":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13428:6345":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10771:6181":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8068:29892":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:38168:4940":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:4842:7242":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12165:9543":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:25089:37005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:10436:25490":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12292:9687":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6655:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:5295:5795":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14342:6518":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:16705:7131":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:2246:9633":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:34104:4804":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:9541:9976":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:16224:7003":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:13306:18177":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:51712:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:3887:4955":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:48390:9317":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:26602:8949":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:10705:6179":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:4724:9846":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7925:18154":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:533:7838":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6792:7350":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:14603:6559":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14576:6255":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:5552:1039":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12165:6232":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6779:7349":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13113:6217":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:51554:9411":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9592:9983":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13933:6423":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13309:25496":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:8000:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:37649:4936":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5619:8386":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5290:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13534:6352":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:44164:9170":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15164:6664":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:3702:9831":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"2:51234:9398":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:8230:25430":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:47365:9265":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:3683:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:8253:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11333:39092":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:34371:4863":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4910:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:471:3162":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"module"},"2:49884:9348":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11507:6197":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:11019:39087":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:7347:8693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16246:7009":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5414:9926":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:51506:9409":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:7371:11105":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7395:3752":{"crate_id":1,"path":["std","task"],"kind":"module"},"6:6620:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:50815:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7539:7466":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7302:7434":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:8011:7221":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4333:10985":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7504:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2568:7184":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5470:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44770:9208":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10980:39086":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1668:7985":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:25151:3219":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1697:7996":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2000:9901":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:44400:10906":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:1204:9816":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:3495:4925":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:51072:9392":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5232:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:11005:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1676:7986":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48716:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:48803:4869":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:44360:6182":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15983:6923":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1181:7467":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:25622:8916":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:51580:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:5415:7260":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46906:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:4260:5406":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13125:9650":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:822:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46103:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6911:7366":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7518:7464":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8125:6164":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11819:6214":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:49870:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8434:9429":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"14:216:7677":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6806:7204":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:4894:9848":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:2375:9826":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44125:9166":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:4669:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:51126:9394":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7972:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:78:24398":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11537:9505":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:47741:9274":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:1003:7467":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:14839:6611":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:8480:7580":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:3046:24560":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"9:491:7777":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:7563:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3195:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"0:380:4188":{"crate_id":0,"path":["tracing","span","Entered"],"kind":"struct"},"16:2448:7172":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8806:10976":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6720:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:48738:220":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6109:7270":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:1611:7700":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12626:6285":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"0:23:3158":{"crate_id":0,"path":["tracing","span"],"kind":"macro"},"2:7004:8892":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15006:6636":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15881:6893":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:2449:5831":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44333:18154":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12861:1508":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:51460:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:12855:1951":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8429:9954":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"0:88:3150":{"crate_id":0,"path":["tracing","instrument","Instrument"],"kind":"trait"},"1:9689:248":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6186:7277":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2548:7708":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1661:223":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4433:33610":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7762:7498":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:46349:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8759:9182":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4922:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:43395:228":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12334:9921":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2948:7201":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:3238:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22:863":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2682:7189":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2339:8855":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6586:7341":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15718:6853":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:2202:9831":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"19:0:1370":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10865:6184":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13441:6347":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12984:6313":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:6937:5924":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:44994:4762":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:5077:5492":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:45009:9214":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"0:60:3744":{"crate_id":0,"path":["tracing","field","AsField"],"kind":"trait"},"16:2746:7192":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6202:5831":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:37995:4938":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:8271:4797":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46892:35586":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:2596:10928":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:48520:9328":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7264:5851":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47654:9884":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:7999:9842":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:14401:6529":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:50680:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:25330:11108":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:44520:9191":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12323:9688":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8244:9425":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12013:9673":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:8055:9796":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11598:9532":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:11289:29871":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:7019:11074":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:2146:9816":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2606:10933":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8872:9478":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:9988:5934":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:6533:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15107:6656":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:44322:9179":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:8314:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:25206:11107":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6043:5917":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6515:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:13600:8906":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:8570:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:37822:4937":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:1639:9806":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6697:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:1558:4798":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:26381:35500":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"3:741:8883":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"0:28:3402":{"crate_id":0,"path":["tracing","error_span"],"kind":"macro"},"2:43327:4952":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:16306:7030":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:1069:10864":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10642:9901":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:11297:9969":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:8030:29888":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:8331:5911":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11463:9653":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:16735:7139":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5273:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:8562:7590":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:50019:9353":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:571:7856":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10005:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"20:837:3154":{"crate_id":20,"path":["tracing_core","event","Event"],"kind":"struct"},"17:16010:6930":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:51180:9396":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"17:16364:7047":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:581:5587":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:45992:227":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"17:16121:6983":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:16677:7124":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:12857:1963":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4463:11006":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:9109:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2426:9908":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:12854:1969":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:8595:9801":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6451:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9378:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6705:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:11213:9518":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:3306:7171":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:48019:9290":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3470:9912":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2638:7187":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:13320:9865":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:1633:7960":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:49:24423":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15913:6901":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:240:5811":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7505:7461":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6588:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:1019:5819":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4467:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:406:5806":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:8063:25429":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:16422:7057":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:25135:37014":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:7994:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:1160:5812":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:16208:6999":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:7704:6007":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:51668:9416":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"1:11410:5938":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:864:4799":{"crate_id":20,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"17:12567:9697":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:51452:9406":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:25320:3219":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:36050:4847":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:3012:24559":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9442:5406":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:8276:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:51274:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45533:9221":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5529:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12191:9548":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:51045:9391":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"22:206:3149":{"crate_id":22,"path":["tracing_attributes","instrument"],"kind":"proc_attribute"},"5:310:5812":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"10:36:7716":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:7288:5866":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:2188:8852":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:7572:8801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:49911:9349":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8525:7584":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:5046:4849":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44482:9186":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:7302:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4160:5831":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:12171:10002":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1685:7992":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:16517:6383":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:29:541":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"6:4824:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:518:7829":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:49965:9351":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3680:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6419:7164":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2752:18045":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:48057:9294":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:9157:36776":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:11923:3219":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10845:6182":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6736:5531":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2952:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:321:9628":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:37303:4932":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5449:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:6677:5917":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44136:35522":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:0:329":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:51193:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7964:5847":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:2842:5903":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9976:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:10338:25487":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9402:9505":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14436:6533":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8959:11041":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14915:6620":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:16833:7159":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:2309:8853":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:48708:9340":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:44174:9171":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:50721:9379":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6457:5795":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5342:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:51628:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50491:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:11243:9430":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14590:6558":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:3693:7231":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:50910:9386":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:1038:3928":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"2:44511:9190":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:16853:6433":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"20:1074:4900":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"6:1644:7968":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11762:6207":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:4621:283":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:13562:9287":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12841:25625":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:2854:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6157:9933":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:8047:36381":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:25948:11195":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:3149:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:35975:4793":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:1062:24486":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:50140:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4883:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2653:4647":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:14796:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5349:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:7527:29887":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"6:1531:7887":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:26042:3219":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3159:273":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:13813:18086":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"0:36:2073":{"crate_id":0,"path":["tracing","warn"],"kind":"macro"},"2:25737:11109":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5458:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7997:7220":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4938:10984":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3876:270":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:5271:17868":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:26668:8955":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:7733:5831":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:50235:9361":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44573:9198":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:13831:6044":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7143:246":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:50748:9380":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7298:5868":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:9367:9973":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"11:2560:39046":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:50572:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51424:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:16255:7011":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:47112:4912":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:80:29686":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11733:9662":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6387:9727":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:361:39047":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:12353:9860":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5033:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6250:5882":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"17:12050:6113":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11223:9429":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:26646:8953":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:44464:9183":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3353:37478":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6399:5917":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:9062:11056":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:47684:8913":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13897:6416":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:45862:11042":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:50518:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:699:9890":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14389:6527":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15018:6638":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4903:11028":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6344:10773":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:50869:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2838:7196":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:444:39051":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:10954:5220":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:16796:7153":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:7441:5873":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2988:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5389:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:35993:260":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6553:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5065:10997":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11799:25529":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5420:1318":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44250:9175":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6366:7304":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11166:39090":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:48524:9329":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:7896:5842":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11545:6200":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:15942:6909":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6237:7283":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6711:9755":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:48082:9172":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48516:9327":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:8220:7531":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:589:6025":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6622:9938":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:1891:5854":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:12203:8906":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3807:10954":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15738:6857":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12858:1945":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:16056:6939":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6759:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:4118:7233":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:11014:5214":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8239:3219":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12842:1928":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:316:9627":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5280:7256":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11033:9914":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13952:6424":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:0:4638":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:12160:8903":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:686:3157":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber"],"kind":"trait"},"20:153:4188":{"crate_id":20,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"2:25934:3219":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:48064:9173":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:51442:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"5:4344:9820":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12840:1791":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50734:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6462:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"0:29:3153":{"crate_id":0,"path":["tracing","event"],"kind":"macro"},"17:15849:6883":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:45958:9246":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:45809:5406":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:7981:17876":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:2392:37363":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:8206:7211":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9477:11079":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6669:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:521:29697":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45026:9217":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:40044:4941":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:4269:5831":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:7743:5823":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:1063:9808":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:669:4798":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7459:9768":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:7976:259":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3152:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5027:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11205:6217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:277:4796":{"crate_id":20,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"16:8040:39082":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6648:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:16636:6411":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:11333:29834":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"15:317:24512":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4808:7241":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3515:4935":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12716:9701":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44284:9176":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:25110:37008":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:46164:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8135:9947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:8259:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7946:7218":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:50613:9375":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:49938:9350":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8424:3164":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12247:6239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15776:6870":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:11218:9520":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15990:6924":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5058:7248":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6873:7362":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45727:9237":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:46837:9247":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15873:6892":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1055:9806":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9656:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13590:9723":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:34377:4864":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:51638:9415":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7334:7438":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46864:9256":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:26084:11187":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:50127:9357":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11400:25506":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:9362:9972":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"16:7072:25424":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7786:39078":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:481:6012":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:362:6006":{"crate_id":21,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"17:13705:6370":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13248:9722":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4347:10987":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:565:7853":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:50:5795":{"crate_id":21,"path":["once_cell","imp","Guard"],"kind":"struct"},"17:14990:6632":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:16771:7148":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:51207:9397":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14142:6466":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4978:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9694:5927":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:47643:8911":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:25081:5587":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:26450:4807":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:346:24420":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:7473:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:50451:9369":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"2:50964:9388":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:50640:9376":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4636:5838":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:369:9616":{"crate_id":21,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2:25204:3219":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:9372:9974":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1729:7702":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:11433:5895":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:1948:736":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5077:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7088:5925":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:6747:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:8340:9953":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:5063:10995":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"0:259:3156":{"crate_id":0,"path":["tracing","subscriber"],"kind":"module"},"2:48562:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:48029:9291":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:77:39113":{"crate_id":20,"path":["tracing_core","callsite","private","Private"],"kind":"struct"},"16:5142:7251":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6335:7298":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:15:3210":{"crate_id":2,"path":["core","write"],"kind":"macro"},"0:386:4193":{"crate_id":0,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"17:16000:6927":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3480:4922":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:41920:4942":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:32:3161":{"crate_id":20,"path":["tracing_core","callsite","Callsite"],"kind":"trait"},"2:2738:711":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:47969:9288":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:47815:9279":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13470:6348":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:45511:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4950:8710":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:14642:6564":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:2135:9815":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:51369:9403":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"16:4402:7238":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14655:6566":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13212:9719":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:1562:24487":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12125:6228":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7027:7379":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:4738:5882":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"17:11557:9655":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13057:9713":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7041:7212":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8891:9969":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4508:5795":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5436:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:5684:5812":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4904:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:482:3164":{"crate_id":20,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"5:1670:9830":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2916:5174":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:13820:9855":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5096:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:689:3187":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","enabled"],"kind":"function"},"16:901:9627":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:7804:39079":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:15040:6649":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12836:1991":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:0:597":{"crate_id":2,"path":["core"],"kind":"module"},"20:850:4797":{"crate_id":20,"path":["tracing_core","field","Empty"],"kind":"struct"},"2:48540:9333":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:1008:3163":{"crate_id":20,"path":["tracing_core","metadata","Level"],"kind":"struct"},"16:7369:7215":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14503:6544":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:51153:9395":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11608:9658":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:3624:4948":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6820:25423":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5479:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:563:6024":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:3746:9639":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:16034:6934":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:10442:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:2754:18046":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:5786:9927":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14263:6484":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:47149:4785":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:4715:5838":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5357:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:2113:829":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:49978:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:49992:9352":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12411:9553":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2943:516":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"16:2878:7198":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:48792:35647":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:11318:9932":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:787:10846":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:48304:9311":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:2456:9637":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:48073:9164":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:48713:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:6415:233":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:12850:951":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:3880:9640":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:83:6006":{"crate_id":21,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"2:50856:9384":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"1:1746:7705":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3660:4867":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:1995:3749":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5583:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:8708:7599":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1552:7902":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12000:9672":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14781:6599":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5365:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:51544:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:3690:5795":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:11022:5221":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:4590:9844":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:498:7812":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14683:6570":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5263:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3722:9474":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:12408:9283":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:44492:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12108:6226":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7492:7458":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8488:4909":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:14448:6535":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:3382:7702":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9613:29826":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2177:710":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:14378:6524":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2106:10903":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:35968:9871":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15583:6827":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13049:6320":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2429:3885":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:3832:7232":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:6802:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5213:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:25123:37011":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:1353:9632":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:8326:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5607:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7575:9512":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2857:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:48149:18101":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:16045:6938":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6627:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:25332:8915":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:11268:4911":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8840:9476":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:11020:219":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11860:9668":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:5025:11010":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4800:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10970:9646":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:5729:18076":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8739:250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14481:6543":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8451:9431":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:8609:7225":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:9802:9854":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:12315:8907":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10534:9233":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"0:34:644":{"crate_id":0,"path":["tracing","debug"],"kind":"macro"},"2:3893:4958":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:26443:8942":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3925:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:47159:9262":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12648:6217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14001:6433":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7400:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:990:9820":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:51478:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:10634:35706":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:1092:9814":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"0:266:3648":{"crate_id":0,"path":["tracing","subscriber","set_global_default"],"kind":"function"},"2:51416:9404":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"14:40:6398":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8591:10967":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"9:319:7754":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"3:353:239":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:832:3647":{"crate_id":20,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"1:1059:9807":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:10661:9987":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:4293:10983":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:162:3587":{"crate_id":20,"path":["tracing_core","dispatcher","has_been_set"],"kind":"function"},"11:338:7697":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3524:9914":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:730:10843":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8042:29890":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:7434:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:491:6013":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46604:5215":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42085:4945":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2364:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:50086:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:14418:6532":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:16408:7054":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:10953:239":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:5428:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13494:6350":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14902:6619":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1080:9811":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7525:8779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7398:39076":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5374:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9699:5928":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:5852:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:673:3156":{"crate_id":20,"path":["tracing_core","subscriber"],"kind":"module"},"6:480:7804":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2465:7174":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:5583:5848":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"16:6082:7266":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1521:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"14:167:24492":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11569:9656":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8319:10849":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5687:7263":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:12862:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:8017:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:12848:775":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:3642:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13084:9716":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:10316:25486":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:50694:9378":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45018:9215":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4813:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:16235:7008":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:2025:9903":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15394:6724":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12101:4785":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:11395:5937":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11616:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14026:6435":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:14554:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:11416:5939":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13333:6133":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10260:25484":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13580:6312":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12192:6234":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16655:7119":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:46952:4553":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:608:9621":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:51434:9405":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:13336:18089":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:1021:7701":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:486:7807":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:9725:9516":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:26343:35498":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12086:9682":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9552:4169":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"0:37:3569":{"crate_id":0,"path":["tracing","error"],"kind":"macro"},"1:12437:9554":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5510:9851":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:6574:284":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11994:9671":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:3485:4927":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5303:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7714:33611":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13881:6412":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4602:9845":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6694:9753":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:807:3650":{"crate_id":20,"path":["tracing_core","dispatcher","WeakDispatch"],"kind":"struct"},"1:11309:9996":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:9743:9517":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13776:6383":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15574:6823":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5125:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:49857:9347":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:5707:25418":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12070:9677":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5257:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1728:8008":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4972:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:45940:9245":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:15704:6852":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:50802:9382":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5279:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4343:10986":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:26169:8917":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:8148:7223":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:573:6014":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11906:9670":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:51004:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:1000:5406":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:47137:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3507:4933":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:6935:5812":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13558:25498":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:9765:9853":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:44534:9194":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:50775:9381":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:47665:8912":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5565:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:11273:4913":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:51488:9408":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:13546:9284":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"3:0:539":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5520:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11873:6201":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44380:9872":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:11156:9649":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"13:125:39057":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50100:9356":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8581:9958":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:7354:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:0:4642":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:779:9892":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:8336:8848":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:123:5802":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:8590:5105":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5490:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14850:6613":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12177:9547":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:125:4774":{"crate_id":21,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"16:5447:7261":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:8264:7539":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44089:9164":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11830:9664":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:50586:9374":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:50329:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9707:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"23:53:5152":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:48841:7715":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7793:8852":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"18:726:6051":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2722:7191":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:48853:9343":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:5222:7254":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6995:7370":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7318:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11024:5222":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6408:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7615:5929":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:7440:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5725:6174":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47751:6182":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:14457:9194":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:50113:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51315:9401":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"1:6498:5912":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2489:8888":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5249:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:765:29696":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44151:9169":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:51166:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5558:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12939:9864":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:48544:9334":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11036:9916":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:12845:777":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:8712:4797":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:48532:9331":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5647:7262":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:35915:7711":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:2425:9634":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10288:25485":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:26701:8958":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:43485:4956":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:7417:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:265:833":{"crate_id":20,"path":["tracing_core","field"],"kind":"module"},"1:5491:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:698:6042":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1658:7979":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44564:9197":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7829:5406":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:51031:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7763:37360":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47591:9882":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:50829:9383":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2091:5795":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:48039:9292":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43279:4949":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:2286:18059":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:44211:17874":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7935:7517":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:918:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:8084:5854":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15797:6874":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:4702:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:16169:6984":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:14157:6472":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:50505:9371":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:471:24404":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"20:172:3186":{"crate_id":20,"path":["tracing_core","dispatcher","get_default"],"kind":"function"},"2:14756:4870":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:6290:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:15976:6922":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:51112:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:46312:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10067:25479":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4299:10984":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1629:9821":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:50464:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44299:9178":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14013:6434":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16320:7032":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:36:4763":{"crate_id":20,"path":["tracing_core","callsite","rebuild_interest_cache"],"kind":"function"},"1:1720:5831":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11490:9654":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3282:9843":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5239:11030":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:12394:9282":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11080:5936":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:5820:9930":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"23:43:5495":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:44543:9195":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:3506:5854":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:919:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:8581:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:29666:286":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45801:9820":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6939:7368":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8512:8852":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7413:9767":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:515:6017":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:7876:5414":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5065:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:5456:4791":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:4900:7244":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4929:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12974:6312":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5145:10994":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:37504:4931":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1585:7924":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12894:6305":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:12859:1028":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6967:7207":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:45892:3751":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:12430:9554":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"15:338:24516":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10639:6177":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11893:9669":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7383:7442":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6841:7356":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10805:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:1195:9815":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:48185:9305":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:26365:8930":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14327:6513":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1501:7874":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:906:9628":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:1034:5831":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7713:5406":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:16819:7158":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:46914:5212":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:783:7701":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:50005:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:1088:3159":{"crate_id":20,"path":["tracing_core","span","Id"],"kind":"struct"},"2:48270:9310":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8134:7222":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45883:18168":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1435:9815":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:50343:9365":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:2413:24531":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6600:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:4067:5854":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:47887:9283":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:364:39123":{"crate_id":20,"path":["tracing_core","field","fmt","NullCallsite"],"kind":"struct"},"17:12268:6242":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:3854:9820":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:16216:7002":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5147:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"12:0:4639":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:8536:18032":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:840:10864":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1404:7467":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4992:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:1599:9823":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:4771:6006":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10914:9974":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:870:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:2575:8873":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15358:6693":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11659:9533":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:12820:29867":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:852:9811":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6157:7272":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:49843:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4617:9924":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:0:1819":{"crate_id":1,"path":["std"],"kind":"module"},"17:2397:25556":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15664:6839":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12883:6301":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:845:3201":{"crate_id":20,"path":["tracing_core","field","Field"],"kind":"struct"},"1:8858:9968":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:13842:18087":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5413:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:3565:4939":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11234:9526":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:15067:6651":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6864:4155":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:763:9891":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13841:6401":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:48199:9308":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6460:25422":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:6191:9937":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:36752:4923":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"23:0:3222":{"crate_id":23,"path":["pin_project_lite"],"kind":"module"},"1:6036:233":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3841:4798":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12691:6287":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48048:9293":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"0:25:3378":{"crate_id":0,"path":["tracing","debug_span"],"kind":"macro"},"2:50316:9364":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:7209:5891":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:7466:5876":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6680:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:25872:11191":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:26657:8954":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:26013:18045":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"20:1138:4906":{"crate_id":20,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"17:14751:6580":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10181:25482":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:16722:7133":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:12860:2033":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:26624:8951":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:2542:7707":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:47622:9267":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6638:9734":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"0:268:3645":{"crate_id":0,"path":["tracing","subscriber","set_default"],"kind":"function"},"17:13964:6427":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11068:39088":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:3985:8852":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"0:91:3807":{"crate_id":0,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"6:6400:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4240:10979":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:12804:32239":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9389:9504":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:16618:6401":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:44645:9205":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11634:6157":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:374:5804":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"0:262:3646":{"crate_id":0,"path":["tracing","subscriber","with_default"],"kind":"function"},"5:1249:38881":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7347:7440":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5625:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:10606:6176":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:5122:5908":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:43492:4773":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:1650:9807":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:0:4643":{"crate_id":17,"path":["object"],"kind":"module"},"1:3567:9916":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:5159:9641":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:7713:39077":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:507:6014":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5666:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:8176:7529":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:48536:9332":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46876:7558":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:50842:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10410:25489":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46127:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:50532:9372":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:770:7700":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6766:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5005:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10447:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5187:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:48508:9325":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:13486:9276":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:47735:9273":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15629:6835":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:50923:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9600:9512":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:1573:9820":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5638:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44586:9199":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2828:5904":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41975:4943":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:50559:9373":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7821:5406":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11260:9529":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"20:243:3153":{"crate_id":20,"path":["tracing_core","event"],"kind":"module"},"1:8254:9949":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12792:9710":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:4637:17851":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7534:8782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15179:6312":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44987:5213":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:524:7832":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:7336:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6656:9744":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:782:9894":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:4954:7246":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11058:9647":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:51562:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:47522:9881":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2588:7185":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44605:9201":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7977:7219":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:0:4644":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4691:9925":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:27266:249":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6050:9424":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:670:9626":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:47128:4914":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4484:11008":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:47694:9886":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6426:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47167:9263":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6862:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:16843:6428":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:735:29695":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5316:7257":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"15:0:4641":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:51139:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50208:9360":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7104:5812":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1918:7705":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:15933:6908":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11351:9652":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6026:7205":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:7198:8898":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:1964:9899":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:11708:5898":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12613:9700":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:10629:36777":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5230:11029":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12852:963":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:2409:9820":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:16578:7105":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:51536:9410":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3387:37479":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12754:9707":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11761:9539":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:11720:9661":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:26712:8959":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5319:8245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6747:7346":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6835:9766":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:4871:7243":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12841:1827":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12730:9705":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:6164:9936":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46033:239":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:7156:7405":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44442:9874":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7377:8715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15924:6905":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"23:4:3753":{"crate_id":23,"path":["pin_project_lite","pin_project"],"kind":"macro"},"6:5044:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5593:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:2752:9909":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2332:9815":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:50073:9355":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:50950:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12805:9711":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:30:3442":{"crate_id":0,"path":["tracing","event_enabled"],"kind":"macro"},"17:16530:6397":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:48730:240":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:45784:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6203:25420":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:544:7162":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5225:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:44188:9172":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6040:7208":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9669:5795":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:5327:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4955:8110":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5740:6175":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:8633:25432":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:4885:234":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13019:6316":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:4819:4792":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1882:5406":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10954:5935":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:8730:9472":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:37437:4929":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13200:9718":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:2988:7203":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:696:5406":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:1570:7912":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"0:141:3158":{"crate_id":0,"path":["tracing","span"],"kind":"module"},"5:8100:5858":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7989:8881":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"0:24:3370":{"crate_id":0,"path":["tracing","trace_span"],"kind":"macro"},"17:11443:6192":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:155:5799":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:48813:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6438:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3312:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:12906:9863":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:10035:218":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"17:3527:9638":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4981:7247":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:8288:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:1508:7877":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13098:6201":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:50046:9354":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:8763:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14550:6550":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12668:6286":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:25224:8915":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:26089:11185":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:1047:9816":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:36540:4924":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8054:29891":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12259:6241":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:4182:7235":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7880:7311":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12869:6296":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15474:6786":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16182:6990":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"20:859:4798":{"crate_id":20,"path":["tracing_core","field","Iter"],"kind":"struct"},"6:6612:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:50167:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44780:9209":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12853:944":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7055:7381":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12963:6310":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7355:7214":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45693:9236":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:3348:7703":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"7:31:24391":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"0:33:3528":{"crate_id":0,"path":["tracing","trace"],"kind":"macro"},"9:436:24405":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:26474:4802":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:586:5899":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:6590:5916":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6510:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7912:8874":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2295:8885":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"20:160:3645":{"crate_id":20,"path":["tracing_core","dispatcher","set_default"],"kind":"function"},"1:9415:9506":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:25910:11192":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2578:3162":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3788:33843":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:50262:9362":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:2858:8865":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:217:4774":{"crate_id":21,"path":["once_cell","sync","Lazy"],"kind":"struct"},"18:680:6038":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:50248:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:1589:5406":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12833:443":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8325:10893":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:8582:9798":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:50599:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:5991:5851":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8504:9957":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:1620:7701":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7777:5406":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4984:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:157:3646":{"crate_id":20,"path":["tracing_core","dispatcher","with_default"],"kind":"function"},"1:3660:9214":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12859:6294":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5547:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:1036:4798":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1213:9819":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:6788:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:49803:9344":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:11231:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:15592:6828":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:3711:9832":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"2:50032:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3401:279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4034:9920":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5015:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:811:3348":{"crate_id":20,"path":["tracing_core","dispatcher","Kind"],"kind":"enum"},"11:796:5831":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:738:9807":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7013:7377":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:50383:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:12111:4798":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:833:9808":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"0:35:3551":{"crate_id":0,"path":["tracing","info"],"kind":"macro"},"1:2023:9902":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:828:9821":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4037:9921":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2484:7180":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:46931:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:25962:18045":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:554:7848":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:16196:6996":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:7455:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10648:124":{"crate_id":2,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"17:12414:6248":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:26357:8929":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:14074:6447":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:26056:11186":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"20:0:3148":{"crate_id":20,"path":["tracing_core"],"kind":"module"},"17:16807:7155":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:42664:4946":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14735:6575":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15453:6776":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:1131:3172":{"crate_id":20,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"11:1912:7704":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12766:9708":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:2658:7188":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:1724:5854":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2284:18058":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10558:25494":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:13837:18088":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:3403:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1008:7700":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:1111:3195":{"crate_id":20,"path":["tracing_core","span","Record"],"kind":"struct"},"2:43503:9035":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:1234:9631":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:12809:10850":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:998:3348":{"crate_id":20,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"1:12851:957":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12280:9859":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6712:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:3828:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:48355:9312":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6438:25421":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1495:7871":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44418:9873":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:587:7865":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1050:9821":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:48512:9326":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"14:0:4640":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:5052:847":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:51382:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8277:5936":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:485:9629":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12336:9690":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:4234:10980":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:14195:6480":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:12422:9861":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:10972:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:26463:4806":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44196:9164":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:45861:10851":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:5144:230":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11194:9995":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:46847:5212":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:3934:5812":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3617:10962":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7881:10858":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15901:6900":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:9129:9501":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:15814:6877":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12138:6230":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:25125:37013":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:2299:5828":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12205:9946":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:14945:6625":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:44473:9185":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:5800:9929":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:6476:8891":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:36079:4846":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"22:0:3166":{"crate_id":22,"path":["tracing_attributes"],"kind":"module"},"6:474:7801":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6888:8646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:51704:9418":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"20:163:3649":{"crate_id":20,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"2:50707:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:12454:5947":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:13252:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:14127:6460":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:102:7693":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:466:7796":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:26279:8919":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:50545:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15482:6787":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:0:1067":{"crate_id":6,"path":["libc"],"kind":"module"},"2:51328:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"20:161:3648":{"crate_id":20,"path":["tracing_core","dispatcher","set_global_default"],"kind":"function"},"17:16334:7039":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:2389:4798":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11968:6224":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13005:25626":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:51730:9419":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:51018:9390":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:51676:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:5648:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:5196:7253":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4927:7245":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13404:6344":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11648:6217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:25633:37016":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2182:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7220:7419":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6641:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:48528:9330":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7972:32238":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12362:9692":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50626:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:4958:5883":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12098:6225":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1898:7702":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1626:7956":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6737:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:50977:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:7074:9942":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:15726:6854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"15:405:24522":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:11936:254":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:26591:8948":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:7256:7432":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7590:8804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"0:370:3165":{"crate_id":0,"path":["tracing","span","Span"],"kind":"struct"},"5:4507:4798":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:1117:4903":{"crate_id":20,"path":["tracing_core","span","Current"],"kind":"struct"},"16:3887:6067":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43323:4950":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3123:17880":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47674:9885":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:13523:9281":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:26679:8956":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:11361:39093":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:5170:7252":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11272:9472":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:50410:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10374:25488":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3443:4842":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:7801:8872":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6322:4791":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:923:5814":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:12271:5943":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5576:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47369:9266":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3962:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14312:6509":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:14432:4837":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:492:7809":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:718:6048":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6571:7338":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:12294:9920":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:5024:5491":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8801:9967":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14086:6448":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4000:9831":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:36049:4845":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"13:272:7692":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4471:11007":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:50154:9358":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4825:11011":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12277:6327":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8789:9290":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2504:7181":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"20:1103:4155":{"crate_id":20,"path":["tracing_core","span","Attributes"],"kind":"struct"},"2:36082:280":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"16:5083:7249":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10784:5213":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"2:47711:9269":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:51470:9407":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11672:6203":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"13:0:4633":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1021:9815":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:45765:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46618:5224":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5309:8241":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:35991:251":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:16385:7050":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12390:9695":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:50397:9367":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15133:6658":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4455:11005":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12178:6233":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"0:161:4158":{"crate_id":0,"path":["tracing","span","AsId"],"kind":"trait"},"5:3374:7704":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7449:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6142:25419":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44348:9180":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13762:6382":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11555:29872":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5537:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2594:10927":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2892:5878":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"16:6729:9763":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:284:3202":{"crate_id":20,"path":["tracing_core","field","Visit"],"kind":"trait"},"11:440:39050":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4803:11010":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44635:9204":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3866:4953":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4139:9922":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:796:3180":{"crate_id":20,"path":["tracing_core","callsite","DefaultCallsite"],"kind":"struct"},"21:375:9617":{"crate_id":21,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:3159:5907":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:16689:7126":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:47933:9286":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:50181:9359":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6981:7224":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6062:7210":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10137:25480":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"20:790:3219":{"crate_id":20,"path":["tracing_core","sealed","Sealed"],"kind":"trait"},"1:9448:9507":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3910:36453":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3413:4156":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5052:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11581:6201":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:0:4634":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3972:10978":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:48830:9342":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11474:25508":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:34751:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:48720:232":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11323:9651":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11944:6222":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5836:9931":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5296:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:36964:4926":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:51099:9393":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7952:8880":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:16293:7025":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:25112:37010":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:47724:9272":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:26332:4805":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9559:29825":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12151:6231":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1515:7879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:34339:3750":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:643:6014":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:8317:25431":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8776:6182":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:9507:11080":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7209:7418":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4965:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12742:9706":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:51301:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:1420:9816":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2179:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4271:10981":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1819:5812":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:50653:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47987:9289":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:96:29687":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:25153:11111":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:680:6164":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4614:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:3108:7226":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:3408:263":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3128:5466":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:44370:5885":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:7551:25427":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:8270:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13236:9721":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:36081:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:49816:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9102:9497":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"9:0:4636":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7721:8870":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:10748:5217":{"crate_id":2,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"9:381:24406":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46013:225":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:12303:25600":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:44794:9210":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15768:6867":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11581:9516":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:3797:10936":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:1083:39055":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:26401:35501":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:3655:4866":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44451:9182":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:16400:7051":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2184:4860":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15866:6891":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:14629:6562":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:651:6014":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2957:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:11010:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:35982:9025":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:15203:6671":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15790:6873":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:7982:17877":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12060:9676":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6754:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"7:0:2023":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3408:7705":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:2627:8862":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8305:10848":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12839:356":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:14527:36824":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2580:10923":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:49830:9346":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:4355:10989":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5511:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"18:623:39098":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:871:9813":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:894:9724":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:813:266":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45003:9213":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44980:9212":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:46597:5214":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:51646:9345":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:45705:9476":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11499:6196":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:10820:9643":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5672:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11775:25528":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:26294:8920":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:26690:8957":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:3227:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:51602:9413":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:15889:6894":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:7646:5930":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:1966:17987":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:5333:9642":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:51085:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:6755:5532":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:498:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1564:7910":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4877:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:15079:6652":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2433:10920":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:8162:7213":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:11018:5224":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3143:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:1086:9813":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:51261:9399":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11659:9650":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12779:9709":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3779:5220":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:11012:5215":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:11233:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:48597:18204":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:8247:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1578:9822":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14888:6618":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44502:9188":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3155:274":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:47915:9285":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:915:4803":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:44312:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12623:5948":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12949:6309":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9983:9954":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:44425:8911":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15696:6851":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:8295:7543":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11281:29869":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:46238:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13613:25466":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7987:7522":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4945:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:26635:8952":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:11524:9504":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:45745:9238":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2898:7199":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14793:6601":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:34404:35509":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:4692:7239":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7421:25426":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13988:6431":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:6131:267":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7468:7457":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6779:8612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3139:37482":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7279:7433":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:516:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6623:7344":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11117:39089":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11030:9912":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:43435:229":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:1878:4798":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5022:11032":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:47765:8903":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:807:5854":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:7204:8897":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:13162:6323":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12940:6308":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:5458:36238":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5254:11031":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:1735:7703":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:25600:11113":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"20:791:4772":{"crate_id":20,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"21:295:9615":{"crate_id":21,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1:2077:9904":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11695:6205":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:25212:11110":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:1156:9819":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:51288:9400":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"0:139:3574":{"crate_id":0,"path":["tracing","level_filters","STATIC_MAX_LEVEL"],"kind":"constant"},"11:2226:7706":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:13771:4901":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:640:10585":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:34392:5212":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:45900:9244":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"5:1265:10772":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8847:9477":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3429:34334":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2994:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7956:7520":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12402:9696":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47120:9258":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:12436:9862":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13824:6398":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2424:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:1285:38882":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:16782:7149":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6496:8489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7015:5406":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:7390:282":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4536:9923":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11850:7774":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:538:6022":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"10:44:7717":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7728:9242":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:16543:7075":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15645:6838":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:8102:7527":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2213:9832":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:2906:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:531:6019":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"23:37:5158":{"crate_id":23,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"18:754:6056":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4889:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:3439:7229":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:3341:4798":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8441:9430":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:3671:4564":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43415:227":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6432:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2770:7193":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6254:7288":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7966:7521":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:2918:7200":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12903:6306":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12995:6314":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5383:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8463:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:44621:6035":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2794:7194":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5173:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:50667:9377":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:14048:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2548:7183":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:51247:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45559:10977":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:14459:6536":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:2702:7190":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:546:7843":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:8098:18027":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:8711:5104":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:26:3386":{"crate_id":0,"path":["tracing","info_span"],"kind":"macro"},"17:13861:6411":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1691:7995":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:2119:7467":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12435:6250":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:35957:9870":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:560:7851":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:43455:4954":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:50194:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:49897:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1598:7931":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7940:8877":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11847:9667":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4898:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9434:9975":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:34778:5587":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"0:31:3449":{"crate_id":0,"path":["tracing","span_enabled"],"kind":"macro"},"2:25960:37238":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:13188:9717":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6096:9725":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:3146:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14183:6477":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12929:6307":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:16346:7041":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11350:9506":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11563:9334":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"11:683:9820":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13026:25627":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11517:25509":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:50275:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10672:6178":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:0:4759":{"crate_id":21,"path":["once_cell"],"kind":"module"},"2:35992:253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5059:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10835:6057":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:6300:7296":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5159:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10576:6174":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13653:6363":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:8304:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10738:6180":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:50478:9370":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"0:73:3149":{"crate_id":0,"path":["tracing","instrument"],"kind":"module"},"1:11253:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:5253:7255":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:7197":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10207:25483":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:4:1335":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:4889:9847":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12835:504":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:14976:6630":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:44095:9165":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:7785:223":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:3124:24561":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6469:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6812:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:25999:11196":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:1723:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14875:6616":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:6236:5910":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"0:326:3794":{"crate_id":0,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"16:2618:7186":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:5733:18077":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3740:9919":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:47582:8909":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:7327:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50896:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:25595:3219":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:16355:7045":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:3585:7230":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:8241:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2429:5406":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:8795:9965":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12912:6350":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8866:9965":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8895:8697":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:3122:3219":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:4952:8712":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15191:6667":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"0:32:3187":{"crate_id":0,"path":["tracing","enabled"],"kind":"macro"},"1:5323:11037":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12077:7706":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:51355:9345":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:8185:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:50937:9387":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:15682:6847":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13265:25495":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:48779:4872":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6171:7275":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1522:7882":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14355:6520":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:15616:6830":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8259:9426":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:1741:7704":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:1713:4798":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:26554:3219":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:6285:5795":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:8656:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5660:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:48771:4871":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"9:227:4785":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15751:6862":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8477:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15461:6779":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11264:9650":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"}},"external_crates":{"23":{"name":"pin_project_lite","html_root_url":null},"20":{"name":"tracing_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tracing_attributes","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"once_cell","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}