{"root":358,"crate_version":"0.1.41","includes_private":false,"index":{"151":{"id":151,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Freeze","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":78,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"302":{"id":302,"crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[399,10],"end":[399,15]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":127,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":128,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"25":{"id":25,"crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[141,5],"end":[147,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Field","id":22,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"176":{"id":176,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[315,1],"end":[323,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Future","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Future","id":46,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[174,175],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"327":{"id":327,"crate_id":0,"name":"set_global_default","span":{"filename":"src/subscriber.rs","begin":[39,1],"end":[44,2]},"visibility":"public","docs":"Sets this subscriber as the global default for the duration of the entire program.\nWill be used as a fallback if no thread-local subscriber has been set in a thread (using `with_default`.)\n\nCan only be set once; subsequent attempts to set the global default will fail.\nReturns whether the initialization was successful.\n\nNote: Libraries should *NOT* call `set_global_default()`! That will cause conflicts when\nexecutables try to set them later.\n\n[span]: super::span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{"super::subscriber::Subscriber":17,"super::event::Event":35},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"path":"Result","id":103,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"path":"SetGlobalDefaultError","id":14,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"path":"Subscriber","id":17,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":74,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":76,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"50":{"id":50,"crate_id":0,"name":"is_disabled","span":{"filename":"src/span.rs","begin":[1238,5],"end":[1240,6]},"visibility":"public","docs":"Returns `true` if this span was disabled by the subscriber and does not\nexist.\n\nSee also [`is_none`].\n\n[`is_none`]: Span::is_none()","links":{"Span::is_none()":218},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"352":{"id":352,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,24],"end":[965,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::event","name":"event","id":353,"is_glob":false}}},"75":{"id":75,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":76,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Sync","id":76,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"226":{"id":226,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":133,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"100":{"id":100,"crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"251":{"id":251,"crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1420,5],"end":[1422,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"125":{"id":125,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,14],"end":[244,19]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::clone::Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"path":"Clone","id":93,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[124],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"276":{"id":276,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[385,10],"end":[385,15]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":41,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[275],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"150":{"id":150,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sync","id":76,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Sync","id":76,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"301":{"id":301,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":113,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[110],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"24":{"id":24,"crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[1130,5],"end":[1130,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"175":{"id":175,"crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[318,5],"end":[322,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"Context","id":136,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Poll","id":137,"args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":46,"args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"326":{"id":326,"crate_id":0,"name":"with_default","span":{"filename":"src/subscriber.rs","begin":[20,1],"end":[25,2]},"visibility":"public","docs":"Sets this [`Subscriber`] as the default for the current thread for the\nduration of a closure.\n\nThe default subscriber is used when creating a new [`Span`] or\n[`Event`].\n\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{"super::event::Event":35,"super::span::Span":44,"super::subscriber::Subscriber":17},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}],["f",{"impl_trait":[{"trait_bound":{"trait":{"path":"FnOnce","id":212,"args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":212,"args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"path":"Subscriber","id":17,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":74,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":76,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"49":{"id":49,"crate_id":0,"name":"current","span":{"filename":"src/span.rs","begin":[549,5],"end":[561,6]},"visibility":"public","docs":"Returns a handle to the span [considered by the `Subscriber`] to be the\ncurrent span.\n\nIf the subscriber indicates that it does not track the current span, or\nthat the thread from which this function is called is not currently\ninside a span, the returned span will be disabled.\n\n[considered by the `Subscriber`]:\n    super::subscriber::Subscriber::current_span","links":{"super::subscriber::Subscriber::current_span":199},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"351":{"id":351,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[955,66],"end":[955,88]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::subscriber::Subscriber","name":"Subscriber","id":17,"is_glob":false}}},"225":{"id":225,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":78,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"99":{"id":99,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[98],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"250":{"id":250,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1386,1],"end":[1417,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":41,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[249],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"124":{"id":124,"crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[244,14],"end":[244,19]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"275":{"id":275,"crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[385,10],"end":[385,15]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":127,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":128,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"149":{"id":149,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":74,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":74,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"23":{"id":23,"crate_id":0,"name":"AsField","span":{"filename":"src/field.rs","begin":[129,1],"end":[135,2]},"visibility":"public","docs":"Trait implemented to allow a type to be used as a field key.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: Although this is implemented for both the\n<a href=\"./struct.Field.html\"><code>Field</code></a> type <em>and</em> any\ntype that can be borrowed as an <code>&str</code>, only <code>Field</code>\nallows <em>O</em>(1) access.\nIndexing a field with a string results in an iterative search that performs\nstring comparisons. Thus, if possible, once the key for a field is known, it\nshould be used whenever possible.\n</pre>","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":true,"items":[19],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"crate::sealed::Sealed","id":24,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[26,28,30]}}},"174":{"id":174,"crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[316,5],"end":[316,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":null,"self_type":{"generic":"T"},"trait":{"path":"Future","id":46,"args":null}}}}}},"325":{"id":325,"crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[6,1],"end":[6,48]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":6,"is_glob":false}}},"48":{"id":48,"crate_id":0,"name":"or_current","span":{"filename":"src/span.rs","begin":[1027,5],"end":[1032,6]},"visibility":"public","docs":"Returns this span, if it was [enabled] by the current [`Subscriber`], or\nthe [current span] (whose lexical distance may be further than expected),\n if this span [is disabled].\n\nThis method can be useful when propagating spans to spawned threads or\n[async tasks]. Consider the following:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nIf the current [`Subscriber`] enables the [`DEBUG`] level, then both\nthe \"parent\" and \"child\" spans will be enabled. Thus, when the \"spawaned\na thread!\" event occurs, it will be inside of the \"child\" span. Because\n\"parent\" is the parent of \"child\", the event will _also_ be inside of\n\"parent\".\n\nHowever, if the [`Subscriber`] only enables the [`INFO`] level, the \"child\"\nspan will be disabled. When the thread is spawned, the\n`child_span.entered()` call will do nothing, since \"child\" is not\nenabled. In this case, the \"spawned a thread!\" event occurs outside of\n*any* span, since the \"child\" span was responsible for propagating its\nparent to the spawned thread.\n\nIf this is not the desired behavior, `Span::or_current` can be used to\nensure that the \"parent\" span is propagated in both cases, either as a\nparent of \"child\" _or_ directly. For example:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\n// If DEBUG is enabled, then \"child\" will be enabled, and `or_current`\n// returns \"child\". Otherwise, if DEBUG is not enabled, \"child\" will be\n// disabled, and `or_current` returns \"parent\".\nlet child_span = tracing::debug_span!(\"child\").or_current();\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nWhen spawning [asynchronous tasks][async tasks], `Span::or_current` can\nbe used similarly, in combination with [`instrument`]:\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\ntokio::spawn(\n    async {\n        tracing::info!(\"spawned a task!\");\n\n        // ...\n\n    }.instrument(child_span.or_current())\n);\n```\n\nIn general, `or_current` should be preferred over nesting an\n[`instrument`]  call inside of an [`in_current_span`] call, as using\n`or_current` will be more efficient.\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\nasync fn my_async_fn() {\n    // ...\n}\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// Do this:\ntokio::spawn(\n    my_async_fn().instrument(tracing::debug_span!(\"child\").or_current())\n);\n\n// ...rather than this:\ntokio::spawn(\n    my_async_fn()\n        .instrument(tracing::debug_span!(\"child\"))\n        .in_current_span()\n);\n```\n\n[enabled]: crate::Subscriber::enabled\n[`Subscriber`]: crate::Subscriber\n[current span]: Span::current\n[is disabled]: Span::is_disabled\n[`INFO`]: crate::Level::INFO\n[`DEBUG`]: crate::Level::DEBUG\n[async tasks]: std::task\n[`instrument`]: crate::instrument::Instrument::instrument\n[`in_current_span`]: crate::instrument::Instrument::in_current_span","links":{"crate::Subscriber::enabled":208,"Span::current":49,"crate::Level::INFO":211,"crate::Level::DEBUG":210,"crate::instrument::Instrument::instrument":51,"Span::is_disabled":50,"std::task":209,"crate::Subscriber":17,"crate::instrument::Instrument::in_current_span":53},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"350":{"id":350,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[955,52],"end":[955,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::field::Value","name":"Value","id":33,"is_glob":false}}},"73":{"id":73,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Send","id":74,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Send","id":74,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"224":{"id":224,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":76,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"98":{"id":98,"crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"249":{"id":249,"crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[1387,5],"end":[1416,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"fmt::Formatter","id":127,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"fmt::Result","id":128,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"274":{"id":274,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":113,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[110],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"148":{"id":148,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[327,1],"end":[374,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[141,142,143,144,145,146,147],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"173":{"id":173,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,1],"end":[288,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":47,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[172],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"198":{"id":198,"crate_id":0,"name":"none","span":{"filename":"src/span.rs","begin":[533,5],"end":[538,6]},"visibility":"public","docs":"Constructs a new span that is *completely disabled*.\n\nThis can be used rather than `Option<Span>` to represent cases where a\nspan is not present.\n\nEntering, exiting, and recording values on this span will do nothing.","links":{},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":true,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"349":{"id":349,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[955,38],"end":[955,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::event::Event","name":"Event","id":35,"is_glob":false}}},"72":{"id":72,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[397,1],"end":[429,2]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[65,66,67,68,70,71],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"223":{"id":223,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":74,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"97":{"id":97,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[96],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"122":{"id":122,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"path":"ToOwned","id":123,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[119,120,121],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"273":{"id":273,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[106,108],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"147":{"id":147,"crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[361,5],"end":[373,6]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"298":{"id":298,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"path":"Deref","id":299,"args":{"angle_bracketed":{"args":[],"constraints":[{"name":"Target","args":null,"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Receiver","id":300,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[297],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"P"}}}},"172":{"id":172,"crate_id":0,"name":"drop","span":{"filename":"src/instrument.rs","begin":[254,1],"end":[288,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"197":{"id":197,"crate_id":0,"name":"new_disabled","span":{"filename":"src/span.rs","begin":[519,5],"end":[524,6]},"visibility":"public","docs":"Constructs a new disabled span with the given `Metadata`.\n\nThis should be used when a span is constructed from a known callsite,\nbut the subscriber indicates that it is disabled.\n\nEntering, exiting, and recording values on this span will not notify the\n`Subscriber` but _may_ record log messages if the `log` feature flag is\nenabled.","links":{},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"348":{"id":348,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[955,16],"end":[955,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"self::dispatcher::Dispatch","name":"Dispatch","id":12,"is_glob":false}}},"71":{"id":71,"crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[426,5],"end":[428,6]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"222":{"id":222,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[422,1],"end":[1367,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[194,195,196,197,198,49,45,207,48,202,213,214,216,217,50,218,193,219,220,221],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"96":{"id":96,"crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":95},"attrs":[{"other":"#[attr = TrackCaller]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"247":{"id":247,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1380,1],"end":[1384,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"path":"Hash","id":248,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[245],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"121":{"id":121,"crate_id":3,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"272":{"id":272,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":105,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[100,102],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"146":{"id":146,"crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[354,5],"end":[356,6]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"297":{"id":297,"crate_id":2,"name":"Target","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"45":{"id":45,"crate_id":0,"name":"enter","span":{"filename":"src/span.rs","begin":[785,5],"end":[788,6]},"visibility":"public","docs":"Enters this span, returning a guard that will exit the span when dropped.\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\n# In Asynchronous Code\n\n**Warning**: in asynchronous code that uses [async/await syntax][syntax],\n`Span::enter` should be used very carefully or avoided entirely. Holding\nthe drop guard returned by `Span::enter` across `.await` points will\nresult in incorrect traces. For example,\n\n```\n# use tracing::info_span;\n# async fn some_other_async_function() {}\nasync fn my_async_function() {\n    let span = info_span!(\"my_async_function\");\n\n    // WARNING: This span will remain entered until this\n    // guard is dropped...\n    let _enter = span.enter();\n    // ...but the `await` keyword may yield, causing the\n    // runtime to switch to another task, while remaining in\n    // this span!\n    some_other_async_function().await\n\n    // ...\n}\n```\n\nThe drop guard returned by `Span::enter` exits the span when it is\ndropped. When an async function or async block yields at an `.await`\npoint, the current scope is _exited_, but values in that scope are\n**not** dropped (because the async block will eventually resume\nexecution from that await point). This means that _another_ task will\nbegin executing while _remaining_ in the entered span. This results in\nan incorrect trace.\n\nInstead of using `Span::enter` in asynchronous code, prefer the\nfollowing:\n\n* To enter a span for a synchronous section of code within an async\n  block or function, prefer [`Span::in_scope`]. Since `in_scope` takes a\n  synchronous closure and exits the span when the closure returns, the\n  span will always be exited before the next await point. For example:\n  ```\n  # use tracing::info_span;\n  # async fn some_other_async_function(_: ()) {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n\n      let some_value = span.in_scope(|| {\n          // run some synchronous code inside the span...\n      });\n\n      // This is okay! The span has already been exited before we reach\n      // the await point.\n      some_other_async_function(some_value).await;\n\n      // ...\n  }\n  ```\n* For instrumenting asynchronous code, `tracing` provides the\n  [`Future::instrument` combinator][instrument] for\n  attaching a span to a future (async function or block). This will\n  enter the span _every_ time the future is polled, and exit it whenever\n  the future yields.\n\n  `Instrument` can be used with an async block inside an async function:\n  ```ignore\n  # use tracing::info_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n      async move {\n         // This is correct! If we yield here, the span will be exited,\n         // and re-entered when we resume.\n         some_other_async_function().await;\n\n         //more asynchronous code inside the span...\n\n      }\n        // instrument the async block with the span...\n        .instrument(span)\n        // ...and await it.\n        .await\n  }\n  ```\n\n  It can also be used to instrument calls to async functions at the\n  callsite:\n  ```ignore\n  # use tracing::debug_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let some_value = some_other_async_function()\n         .instrument(debug_span!(\"some_other_async_function\"))\n         .await;\n\n      // ...\n  }\n  ```\n\n* The [`#[instrument]` attribute macro][attr] can automatically generate\n  correct code when used on an async function:\n\n  ```ignore\n  # async fn some_other_async_function() {}\n  #[tracing::instrument(level = \"info\")]\n  async fn my_async_function() {\n\n      // This is correct! If we yield here, the span will be exited,\n      // and re-entered when we resume.\n      some_other_async_function().await;\n\n      // ...\n\n  }\n  ```\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n[`Span::in_scope`]: Span::in_scope()\n[instrument]: crate::Instrument\n[attr]: macro@crate::instrument\n\n# Examples\n\n```\n# use tracing::{span, Level};\nlet span = span!(Level::INFO, \"my_span\");\nlet guard = span.enter();\n\n// code here is within the span\n\ndrop(guard);\n\n// code here is no longer within the span\n\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\");\n    let _enter = span.enter();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSub-scopes may be created to limit the duration for which the span is\nentered:\n\n```\n# use tracing::{info, info_span};\nlet span = info_span!(\"my_great_span\");\n\n{\n    let _enter = span.enter();\n\n    // this event occurs inside the span.\n    info!(\"i'm in the span!\");\n\n    // exiting the scope drops the guard, exiting the span.\n}\n\n// this event is not inside the span.\ninfo!(\"i'm outside the span!\")\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"macro@crate::instrument":203,"crate::Instrument":54,"super::subscriber::Subscriber::exit()":201,"super::Id":186,"super::subscriber::Subscriber::enter()":200,"Span::in_scope()":202},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"196":{"id":196,"crate_id":0,"name":"child_of","span":{"filename":"src/span.rs","begin":[484,5],"end":[493,6]},"visibility":"public","docs":"Constructs a new `Span` as child of the given parent span, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":20,"super::field::ValueSet":192,"super::Span::follows_from":193},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["parent",{"impl_trait":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}],["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"field::ValueSet","id":192,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"347":{"id":347,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[954,1],"end":[954,38]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[doc(inline)]"}],"deprecation":null,"inner":{"use":{"source":"self::instrument::Instrument","name":"Instrument","id":54,"is_glob":false}}},"70":{"id":70,"crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[419,5],"end":[421,6]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"221":{"id":221,"crate_id":0,"name":"with_subscriber","span":{"filename":"src/span.rs","begin":[1362,5],"end":[1366,6]},"visibility":"public","docs":"Invokes a function with a reference to this span's ID and subscriber.\n\nif this span is enabled, the provided function is called, and the result is returned.\nIf the span is disabled, the function is not called, and this method returns `None`\ninstead.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"impl_trait":[{"trait_bound":{"trait":{"path":"FnOnce","id":212,"args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Dispatch","id":12,"args":null}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"impl FnOnce((&Id, &Dispatch)) -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":212,"args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}},{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Dispatch","id":12,"args":null}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"120":{"id":120,"crate_id":3,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"271":{"id":271,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[98],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"145":{"id":145,"crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[349,5],"end":[351,6]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"296":{"id":296,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[106,108],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"19":{"id":19,"crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[134,5],"end":[134,66]},"visibility":"default","docs":"Attempts to convert `&self` into a `Field` with the specified `metadata`.\n\nIf `metadata` defines this field, then the field is returned. Otherwise,\nthis returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Field","id":22,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"170":{"id":170,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,1],"end":[288,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"path":"$crate::__private::PinnedFieldsOf","id":131,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"__Origin","id":171,"args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"path":"$crate::__private::Unpin","id":133,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":133,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"44":{"id":44,"crate_id":0,"name":"Span","span":{"filename":"src/span.rs","begin":[348,1],"end":[358,2]},"visibility":"public","docs":"A handle representing a span, with the capability to enter the span if it\nexists.\n\nIf the span was rejected by the current `Subscriber`'s filter, entering the\nspan will silently do nothing. Thus, the handle can be used in the same\nmanner regardless of whether or not the trace is currently being collected.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":[222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,243,247,250,252,254,256,258]}}},"195":{"id":195,"crate_id":0,"name":"new_root","span":{"filename":"src/span.rs","begin":[460,5],"end":[462,6]},"visibility":"public","docs":"Constructs a new `Span` as the root of its own trace tree, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":20,"super::field::ValueSet":192,"super::Span::follows_from":193},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"field::ValueSet","id":192,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"220":{"id":220,"crate_id":0,"name":"metadata","span":{"filename":"src/span.rs","begin":[1319,5],"end":[1321,6]},"visibility":"public","docs":"Returns this span's `Metadata`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"245":{"id":245,"crate_id":0,"name":"hash","span":{"filename":"src/span.rs","begin":[1381,5],"end":[1383,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["hasher",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Hasher","id":246,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"119":{"id":119,"crate_id":3,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"270":{"id":270,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[96],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"144":{"id":144,"crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[344,5],"end":[346,6]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"295":{"id":295,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":105,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[100,102],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"18":{"id":18,"crate_id":0,"name":"dispatcher","span":{"filename":"src/dispatcher.rs","begin":[1,1],"end":[145,48]},"visibility":"public","docs":"Dispatches trace events to [`Subscriber`]s.\n\nThe _dispatcher_ is the component of the tracing system which is responsible\nfor forwarding trace data from the instrumentation points that generate it\nto the subscriber that collects it.\n\n# Using the Trace Dispatcher\n\nEvery thread in a program using `tracing` has a _default subscriber_. When\nevents occur, or spans are created, they are dispatched to the thread's\ncurrent subscriber.\n\n## Setting the Default Subscriber\n\nBy default, the current subscriber is an empty implementation that does\nnothing. To use a subscriber implementation, it must be set as the default.\nThere are two methods for doing so: [`with_default`] and\n[`set_global_default`]. `with_default` sets the default subscriber for the\nduration of a scope, while `set_global_default` sets a default subscriber\nfor the entire process.\n\nTo use either of these functions, we must first wrap our subscriber in a\n[`Dispatch`], a cloneable, type-erased reference to a subscriber. For\nexample:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\nuse dispatcher::Dispatch;\n\nlet my_subscriber = FooSubscriber::new();\nlet my_dispatch = Dispatch::new(my_subscriber);\n```\nThen, we can use [`with_default`] to set our `Dispatch` as the default for\nthe duration of a block:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\n# #[cfg(feature = \"std\")]\ndispatcher::with_default(&my_dispatch, || {\n    // my_subscriber is the default\n});\n\n// no default subscriber again\n```\nIt's important to note that `with_default` will not propagate the current\nthread's default subscriber to any threads spawned within the `with_default`\nblock. To propagate the default subscriber to new threads, either use\n`with_default` from the new thread, or use `set_global_default`.\n\nAs an alternative to `with_default`, we can use [`set_global_default`] to\nset a `Dispatch` as the default for all threads, for the lifetime of the\nprogram. For example:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\ndispatcher::set_global_default(my_dispatch)\n    // `set_global_default` will return an error if the global default\n    // subscriber has already been set.\n    .expect(\"global default was already set!\");\n\n// `my_subscriber` is now the default\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: The thread-local scoped dispatcher (<code>with_default</code>)\nrequires the Rust standard library. <code>no_std</code> users should\nuse <a href=\"fn.set_global_default.html\"><code>set_global_default</code></a>\ninstead.\n</pre>\n\n## Accessing the Default Subscriber\n\nA thread's current default subscriber can be accessed using the\n[`get_default`] function, which executes a closure with a reference to the\ncurrently default `Dispatch`. This is used primarily by `tracing`\ninstrumentation.\n\n[`Subscriber`]: crate::Subscriber","links":{"`Dispatch`":12,"`with_default`":4,"`get_default`":8,"crate::Subscriber":17,"`set_global_default`":10},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[1,3,5,7,9,11,13,15],"is_stripped":false}}},"169":{"id":169,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,21],"end":[264,26]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::clone::Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"path":"Clone","id":93,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[168],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"320":{"id":320,"crate_id":0,"name":"error_span","span":{"filename":"src/macros.rs","begin":[490,1],"end":[535,2]},"visibility":"public","docs":"Constructs a span at the error level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, error_span, Level};\n# fn main() {\nerror_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::ERROR, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::error_span;\n# fn main() {\nlet span = error_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#configuring-attributes":358,"crate::span!":314,"crate#using-the-macros":358,"crate#recording-fields":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! error_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"43":{"id":43,"crate_id":0,"name":"field","span":{"filename":"src/field.rs","begin":[1,1],"end":[170,38]},"visibility":"public","docs":"`Span` and `Event` key-value data.\n\nSpans and events may be annotated with key-value data, referred to as _fields_.\nThese fields consist of a mapping from a key (corresponding to\na `&str` but represented internally as an array index) to a [`Value`].\n\n# `Value`s and `Subscriber`s\n\n`Subscriber`s consume `Value`s as fields attached to [span]s or [`Event`]s.\nThe set of field keys on a given span or event is defined on its [`Metadata`].\nWhen a span is created, it provides [`Attributes`] to the `Subscriber`'s\n[`new_span`] method, containing any fields whose values were provided when\nthe span was created; and may call the `Subscriber`'s [`record`] method\nwith additional [`Record`]s if values are added for more of its fields.\nSimilarly, the [`Event`] type passed to the subscriber's [`event`] method\nwill contain any fields attached to each event.\n\n`tracing` represents values as either one of a set of Rust primitives\n(`i64`, `u64`, `f64`, `bool`, and `&str`) or using a `fmt::Display` or\n`fmt::Debug` implementation. `Subscriber`s are provided these primitive\nvalue types as `dyn Value` trait objects.\n\nThese trait objects can be formatted using `fmt::Debug`, but may also be\nrecorded as typed data by calling the [`Value::record`] method on these\ntrait objects with a _visitor_ implementing the [`Visit`] trait. This trait\nrepresents the behavior used to record values of various types. For example,\nan implementation of `Visit` might record integers by incrementing counters\nfor their field names rather than printing them.\n\n\n# Using `valuable`\n\n`tracing`'s [`Value`] trait is intentionally minimalist: it supports only a small\nnumber of Rust primitives as typed values, and only permits recording\nuser-defined types with their [`fmt::Debug`] or [`fmt::Display`]\nimplementations. However, there are some cases where it may be useful to record\nnested values (such as arrays, `Vec`s, or `HashMap`s containing values), or\nuser-defined `struct` and `enum` types without having to format them as\nunstructured text.\n\nTo address `Value`'s limitations, `tracing` offers experimental support for\nthe [`valuable`] crate, which provides object-safe inspection of structured\nvalues. User-defined types can implement the [`valuable::Valuable`] trait,\nand be recorded as a `tracing` field by calling their [`as_value`] method.\nIf the [`Subscriber`] also supports the `valuable` crate, it can\nthen visit those types fields as structured values using `valuable`.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: <code>valuable</code> support is an\n    <a href = \"../index.html#unstable-features\">unstable feature</a>. See\n    the documentation on unstable features for details on how to enable it.\n</pre>\n\nFor example:\n```ignore\n// Derive `Valuable` for our types:\nuse valuable::Valuable;\n\n#[derive(Clone, Debug, Valuable)]\nstruct User {\n    name: String,\n    age: u32,\n    address: Address,\n}\n\n#[derive(Clone, Debug, Valuable)]\nstruct Address {\n    country: String,\n    city: String,\n    street: String,\n}\n\nlet user = User {\n    name: \"Arwen Undomiel\".to_string(),\n    age: 3000,\n    address: Address {\n        country: \"Middle Earth\".to_string(),\n        city: \"Rivendell\".to_string(),\n        street: \"leafy lane\".to_string(),\n    },\n};\n\n// Recording `user` as a `valuable::Value` will allow the `tracing` subscriber\n// to traverse its fields as a nested, typed structure:\ntracing::info!(current_user = user.as_value());\n```\n\nAlternatively, the [`valuable()`] function may be used to convert a type\nimplementing [`Valuable`] into a `tracing` field value.\n\nWhen the `valuable` feature is enabled, the [`Visit`] trait will include an\noptional [`record_value`] method. `Visit` implementations that wish to\nrecord `valuable` values can implement this method with custom behavior.\nIf a visitor does not implement `record_value`, the [`valuable::Value`] will\nbe forwarded to the visitor's [`record_debug`] method.\n\n[`fmt::Debug`]: std::fmt::Debug\n[`fmt::Display`]: std::fmt::Debug\n[`valuable`]: https://crates.io/crates/valuable\n[`valuable::Valuable`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html\n[`as_value`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html#tymethod.as_value\n[`valuable::Value`]: https://docs.rs/valuable/latest/valuable/enum.Value.html\n[`Subscriber`]: crate::Subscriber\n[`record_value`]: Visit::record_value\n[`record_debug`]: Visit::record_debug\n[span]: mod@crate::span\n[`Event`]: crate::event::Event\n[`Metadata`]: crate::Metadata\n[`Attributes`]: crate::span::Attributes\n[`Record`]: crate::span::Record\n[`new_span`]: crate::Subscriber::new_span\n[`record`]: crate::Subscriber::record\n[`event`]: crate::Subscriber::event","links":{"mod@crate::span":34,"`Value::record`":39,"crate::Subscriber":17,"crate::span::Attributes":36,"crate::Metadata":20,"`Visit`":40,"Visit::record_debug":42,"std::fmt::Debug":41,"`Value`":33,"crate::Subscriber::new_span":37,"crate::span::Record":38,"crate::event::Event":35},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[23,31],"is_stripped":false}}},"194":{"id":194,"crate_id":0,"name":"new","span":{"filename":"src/span.rs","begin":[436,5],"end":[438,6]},"visibility":"public","docs":"Constructs a new `Span` with the given [metadata] and set of\n[field values].\n\nThe new span will be constructed by the currently-active [`Subscriber`],\nwith the current span as its parent (if one exists).\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[`Subscriber`]: super::subscriber::Subscriber\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Span::follows_from":193,"super::subscriber::Subscriber":17,"super::Metadata":20,"super::field::ValueSet":192},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"constraints":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"field::ValueSet","id":192,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"68":{"id":68,"crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[414,5],"end":[416,6]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}}],"constraints":[]}}}}]],"output":{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"219":{"id":219,"crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1314,5],"end":[1316,6]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"118":{"id":118,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"Future","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"IntoFuture","id":117,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[114,115,116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"269":{"id":269,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":90,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[88],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"143":{"id":143,"crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[339,5],"end":[341,6]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"294":{"id":294,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[98],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"168":{"id":168,"crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[264,21],"end":[264,26]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"319":{"id":319,"crate_id":0,"name":"warn_span","span":{"filename":"src/macros.rs","begin":[410,1],"end":[455,2]},"visibility":"public","docs":"Constructs a span at the warn level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{warn_span, span, Level};\n# fn main() {\nwarn_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::WARN, \"my_span\");\n# }\n```\n\n```rust\nuse tracing::warn_span;\n# fn main() {\nlet span = warn_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#configuring-attributes":358,"crate::span!":314,"crate#using-the-macros":358,"crate#recording-fields":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! warn_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"193":{"id":193,"crate_id":0,"name":"follows_from","span":{"filename":"src/span.rs","begin":[1304,5],"end":[1311,6]},"visibility":"public","docs":"Indicates that the span with the given ID has an indirect causal\nrelationship with this span.\n\nThis relationship differs somewhat from the parent-child relationship: a\nspan may have any number of prior spans, rather than a single one; and\nspans are not considered to be executing _inside_ of the spans they\nfollow from. This means that a span may close even if subsequent spans\nthat follow from it are still open, and time spent inside of a\nsubsequent span should not be included in the time its precedents were\nexecuting. This is used to model causal relationships such as when a\nsingle future spawns several related background tasks, et cetera.\n\nIf this span is disabled, or the resulting follows-from relationship\nwould be invalid, this function will do nothing.\n\n# Examples\n\nSetting a `follows_from` relationship with a `Span`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span1 = span!(Level::INFO, \"span_1\");\nlet span2 = span!(Level::DEBUG, \"span_2\");\nspan2.follows_from(span1);\n```\n\nSetting a `follows_from` relationship with the current span:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nspan.follows_from(Span::current());\n```\n\nSetting a `follows_from` relationship with a `Span` reference:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet curr = Span::current();\nspan.follows_from(&curr);\n```\n\nSetting a `follows_from` relationship with an `Id`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet id = span.id();\nspan.follows_from(id);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["from",{"impl_trait":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":true}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"67":{"id":67,"crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[409,5],"end":[411,6]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"218":{"id":218,"crate_id":0,"name":"is_none","span":{"filename":"src/span.rs","begin":[1253,5],"end":[1255,6]},"visibility":"public","docs":"Returns `true` if this span was constructed by [`Span::none`] and is\nempty.\n\nIf `is_none` returns `true` for a given span, then [`is_disabled`] will\nalso return `true`. However, when a span is disabled by the subscriber\nrather than constructed by `Span::none`, this method will return\n`false`, while `is_disabled` will return `true`.\n\n[`Span::none`]: Span::none()\n[`is_disabled`]: Span::is_disabled()","links":{"Span::is_disabled()":50,"Span::none()":198},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"369":{"id":369,"crate_id":0,"name":"error","span":{"filename":"src/macros.rs","begin":[2422,1],"end":[2672,2]},"visibility":"public","docs":"Constructs an event at the error level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::error;\n# fn main() {\n\nlet (err_info, port) = (\"No connection\", 22);\n\nerror!(port, error = %err_info);\nerror!(target: \"app_events\", \"App Error: {}\", err_info);\nerror!({ info = err_info }, \"error on port: {}\", port);\nerror!(name: \"invalid_input\", \"Invalid input: {}\", err_info);\n# }\n```","links":{"crate::event!":359,"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! error {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"92":{"id":92,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"CloneToUninit","id":94,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[91],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"243":{"id":243,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1369,1],"end":[1378,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"path":"PartialEq","id":244,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[242],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"268":{"id":268,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":87,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[85],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"142":{"id":142,"crate_id":0,"name":"span_mut","span":{"filename":"src/instrument.rs","begin":[334,5],"end":[336,6]},"visibility":"public","docs":"Mutably borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"293":{"id":293,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[96],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"167":{"id":167,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,14],"end":[264,19]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::fmt::Debug","id":41,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":41,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[166],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"318":{"id":318,"crate_id":0,"name":"info_span","span":{"filename":"src/macros.rs","begin":[329,1],"end":[374,2]},"visibility":"public","docs":"Constructs a span at the info level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, info_span, Level};\n# fn main() {\ninfo_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::INFO, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::info_span;\n# fn main() {\nlet span = info_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#configuring-attributes":358,"crate::span!":314,"crate#using-the-macros":358,"crate#recording-fields":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! info_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"66":{"id":66,"crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[404,5],"end":[406,6]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"217":{"id":217,"crate_id":0,"name":"record_all","span":{"filename":"src/span.rs","begin":[1207,5],"end":[1229,6]},"visibility":"public","docs":"Records all the fields in the provided `ValueSet`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["values",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"field::ValueSet","id":192,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"368":{"id":368,"crate_id":0,"name":"warn","span":{"filename":"src/macros.rs","begin":[2146,1],"end":[2396,2]},"visibility":"public","docs":"Constructs an event at the warn level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::warn;\n# fn main() {\n\nlet warn_description = \"Invalid Input\";\nlet input = &[0x27, 0x45];\n\nwarn!(?input, warning = warn_description);\nwarn!(\n    target: \"input_events\",\n    warning = warn_description,\n    \"Received warning for input: {:?}\", input,\n);\nwarn!(name: \"invalid\", ?input);\n# }\n```","links":{"crate::event!":359,"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! warn {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"91":{"id":91,"crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dest",{"raw_pointer":{"is_mutable":true,"type":{"primitive":"u8"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"242":{"id":242,"crate_id":0,"name":"eq","span":{"filename":"src/span.rs","begin":[1370,5],"end":[1377,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"116":{"id":116,"crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":null,"self_type":{"generic":"F"},"trait":{"path":"IntoFuture","id":117,"args":null}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"267":{"id":267,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"141":{"id":141,"crate_id":0,"name":"span","span":{"filename":"src/instrument.rs","begin":[329,5],"end":[331,6]},"visibility":"public","docs":"Borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"292":{"id":292,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":90,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[88],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"15":{"id":15,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,71],"end":[136,83]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::WeakDispatch","name":"WeakDispatch","id":16,"is_glob":false}}},"166":{"id":166,"crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[264,14],"end":[264,19]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":127,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":128,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"317":{"id":317,"crate_id":0,"name":"debug_span","span":{"filename":"src/macros.rs","begin":[248,1],"end":[293,2]},"visibility":"public","docs":"Constructs a span at the debug level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{debug_span, span, Level};\n# fn main() {\ndebug_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::DEBUG, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::debug_span;\n# fn main() {\nlet span = debug_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#configuring-attributes":358,"crate::span!":314,"crate#using-the-macros":358,"crate#recording-fields":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! debug_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"65":{"id":65,"crate_id":0,"name":"dispatcher","span":{"filename":"src/instrument.rs","begin":[399,5],"end":[401,6]},"visibility":"public","docs":"Borrows the [`Dispatch`] that is entered when this type is polled.","links":{"`Dispatch`":12},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Dispatch","id":12,"args":null}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"216":{"id":216,"crate_id":0,"name":"record","span":{"filename":"src/span.rs","begin":[1188,5],"end":[1204,6]},"visibility":"public","docs":"Records that the field described by `field` has the value `value`.\n\nThis may be used with [`field::Empty`] to declare fields whose values\nare not known when the span is created, and record them later:\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, record a value for parting as well.\n// (note that the field name is passed as a string slice)\nspan.record(\"parting\", \"goodbye world!\");\n```\nHowever, it may also be used to record a _new_ value for a field whose\nvalue was already recorded:\n```\nuse tracing::info_span;\n# fn do_something() -> Result<(), ()> { Err(()) }\n\n// Initially, let's assume that our attempt to do something is going okay...\nlet span = info_span!(\"doing_something\", is_okay = true);\nlet _e = span.enter();\n\nmatch do_something() {\n    Ok(something) => {\n        // ...\n    }\n    Err(_) => {\n        // Things are no longer okay!\n        span.record(\"is_okay\", false);\n    }\n}\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The fields associated with a span are part\n    of its <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>.\n    The <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>\n    describing a particular span is constructed statically when the span\n    is created and cannot be extended later to add new fields. Therefore,\n    you cannot record a value for a field that was not specified when the\n    span was created:\n</pre>\n\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, you try to record a value for a new field, `new_field`, which was not\n// declared as `Empty` or populated when you created `span`.\n// You won't get any error, but the assignment will have no effect!\nspan.record(\"new_field\", \"interesting_value_you_really_need\");\n\n// Instead, all fields that may be recorded after span creation should be declared up front,\n// using field::Empty when a value is not known, as we did for `parting`.\n// This `record` call will indeed replace field::Empty with \"you will be remembered\".\nspan.record(\"parting\", \"you will be remembered\");\n```\n\n[`field::Empty`]: super::field::Empty\n[`Metadata`]: super::Metadata","links":{"super::field::Empty":215,"super::Metadata":20},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"field::AsField","id":23,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"field::Value","id":33,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"367":{"id":367,"crate_id":0,"name":"info","span":{"filename":"src/macros.rs","begin":[1866,1],"end":[2116,2]},"visibility":"public","docs":"Constructs an event at the info level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::info;\n# // this is so the test will still work in no-std mode\n# #[derive(Debug)]\n# pub struct Ipv4Addr;\n# impl Ipv4Addr { fn new(o1: u8, o2: u8, o3: u8, o4: u8) -> Self { Self } }\n# fn main() {\n# struct Connection { port: u32, speed: f32 }\nuse tracing::field;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\nlet conn = Connection { port: 40, speed: 3.20 };\n\ninfo!(conn.port, \"connected to {:?}\", addr);\ninfo!(\n    target: \"connection_events\",\n    ip = ?addr,\n    conn.port,\n    ?conn.speed,\n);\ninfo!(name: \"completed\", \"completed connection to {:?}\", addr);\n# }\n```","links":{"crate::event!":359,"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! info {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"241":{"id":241,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[347,10],"end":[347,15]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"path":"Clone","id":93,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[240],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"115":{"id":115,"crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"F"}}}},"266":{"id":266,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"291":{"id":291,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":87,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[85],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"165":{"id":165,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"path":"ToOwned","id":123,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[119,120,121],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"316":{"id":316,"crate_id":0,"name":"trace_span","span":{"filename":"src/macros.rs","begin":[167,1],"end":[212,2]},"visibility":"public","docs":"Constructs a span at the trace level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\ntrace_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::TRACE, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\nlet span = trace_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#configuring-attributes":358,"crate::span!":314,"crate#using-the-macros":358,"crate#recording-fields":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! trace_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"366":{"id":366,"crate_id":0,"name":"debug","span":{"filename":"src/macros.rs","begin":[1579,1],"end":[1829,2]},"visibility":"public","docs":"Constructs an event at the debug level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::debug;\n# fn main() {\n# #[derive(Debug)] struct Position { x: f32, y: f32 }\n\nlet pos = Position { x: 3.234, y: -1.223 };\n\ndebug!(?pos.x, ?pos.y);\ndebug!(target: \"app_events\", position = ?pos, \"New position\");\ndebug!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate::event!":359,"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! debug {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"89":{"id":89,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":90,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[88],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"240":{"id":240,"crate_id":0,"name":"clone","span":{"filename":"src/span.rs","begin":[347,10],"end":[347,15]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"114":{"id":114,"crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":null,"self_type":{"generic":"F"},"trait":{"path":"Future","id":46,"args":null}}}}}},"265":{"id":265,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":82,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"290":{"id":290,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"13":{"id":13,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,48],"end":[136,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":14,"is_glob":false}}},"164":{"id":164,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"path":"Future","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"IntoFuture","id":117,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[114,115,116],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"F"}}}},"189":{"id":189,"crate_id":0,"name":"AsId","span":{"filename":"src/span.rs","begin":[335,1],"end":[339,2]},"visibility":"public","docs":"Trait implemented by types which have a span `Id`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":true,"items":[188],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"crate::sealed::Sealed","id":24,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"214":{"id":214,"crate_id":0,"name":"has_field","span":{"filename":"src/span.rs","begin":[1114,5],"end":[1116,6]},"visibility":"public","docs":"Returns true if this `Span` has a field for the given\n[`Field`][super::field::Field] or field name.","links":{"super::field::Field":22},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"field::AsField","id":23,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"365":{"id":365,"crate_id":0,"name":"trace","span":{"filename":"src/macros.rs","begin":[1303,1],"end":[1553,2]},"visibility":"public","docs":"Constructs an event at the trace level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::trace;\n# #[derive(Debug, Copy, Clone)] struct Position { x: f32, y: f32 }\n# impl Position {\n# const ORIGIN: Self = Self { x: 0.0, y: 0.0 };\n# fn dist(&self, other: Position) -> f32 {\n#    let x = (other.x - self.x).exp2(); let y = (self.y - other.y).exp2();\n#    (x + y).sqrt()\n# }\n# }\n# fn main() {\nlet pos = Position { x: 3.234, y: -1.223 };\nlet origin_dist = pos.dist(Position::ORIGIN);\n\ntrace!(position = ?pos, ?origin_dist);\ntrace!(\n    target: \"app_events\",\n    position = ?pos,\n    \"x is {} and y is {}\",\n    if pos.x >= 0.0 { \"positive\" } else { \"negative\" },\n    if pos.y >= 0.0 { \"positive\" } else { \"negative\" }\n);\ntrace!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate::event!":359,"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! trace {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"88":{"id":88,"crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"239":{"id":239,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"path":"ToOwned","id":123,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[119,120,121],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"264":{"id":264,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":80,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"138":{"id":138,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[380,1],"end":[390,2]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Future","id":46,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Future","id":46,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[134,135],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"289":{"id":289,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"163":{"id":163,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":113,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[110],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"314":{"id":314,"crate_id":0,"name":"span","span":{"filename":"src/macros.rs","begin":[20,1],"end":[131,2]},"visibility":"public","docs":"Constructs a new span.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\nCreating a new span:\n```\n# use tracing::{span, Level};\n# fn main() {\nlet span = span!(Level::TRACE, \"my span\");\nlet _enter = span.enter();\n// do work inside the span...\n# }\n```","links":{"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! span {\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr) => { ... };\n    ($lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    ($lvl:expr, $name:expr) => { ... };\n}"}},"188":{"id":188,"crate_id":0,"name":"as_id","span":{"filename":"src/span.rs","begin":[338,5],"end":[338,36]},"visibility":"default","docs":"Returns the `Id` of the span that `self` corresponds to, or `None` if\nthis corresponds to a disabled span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"62":{"id":62,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"213":{"id":213,"crate_id":0,"name":"field","span":{"filename":"src/span.rs","begin":[1107,5],"end":[1109,6]},"visibility":"public","docs":"Returns a [`Field`][super::field::Field] for the field with the\ngiven `name`, if one exists,","links":{"super::field::Field":22},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"field::Field","id":22,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"field::AsField","id":23,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"238":{"id":238,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":113,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[110],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"112":{"id":112,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":113,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[110],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"263":{"id":263,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":133,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"288":{"id":288,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":82,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"11":{"id":11,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,38],"end":[136,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::Dispatch","name":"Dispatch","id":12,"is_glob":false}}},"162":{"id":162,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[106,108],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"187":{"id":187,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,46],"end":[320,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Record","name":"Record","id":38,"is_glob":false}}},"61":{"id":61,"crate_id":0,"name":"WithSubscriber","span":{"filename":"src/instrument.rs","begin":[136,1],"end":[234,2]},"visibility":"public","docs":"Extension trait allowing futures to be instrumented with\na `tracing` [`Subscriber`](crate::Subscriber).","links":{"crate::Subscriber":17},"attrs":[{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":false,"items":[58,60],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[62]}}},"86":{"id":86,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":87,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[85],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"237":{"id":237,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[106,108],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"262":{"id":262,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":78,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"287":{"id":287,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":80,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"161":{"id":161,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":105,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[100,102],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"312":{"id":312,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1566,1],"end":[1571,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":47,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[311],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"60":{"id":60,"crate_id":0,"name":"with_current_subscriber","span":{"filename":"src/instrument.rs","begin":[228,5],"end":[233,6]},"visibility":"default","docs":"Attaches the current [default] [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached `Subscriber` will be set as the [default] when the returned\n[`Future`] is polled.\n\nThis can be used to propagate the current dispatcher context when\nspawning a new future that may run on a different thread.\n\n# Examples\n\n```\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Using `set_default` (rather than `set_global_default`) sets the\n// default `Subscriber` for *this* thread only.\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\nlet future = async {\n    // ...\n};\n\n// If a multi-threaded async runtime is in use, this spawned task may\n// run on a different thread, in a different default `Subscriber`'s context.\ntokio::spawn(future);\n\n// However, calling `with_current_subscriber` on the future before\n// spawning it, ensures that the current thread's default `Subscriber` is\n// propagated to the spawned task, regardless of where it executes:\n# let future = async { };\ntokio::spawn(future.with_current_subscriber());\n# }\n```\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":17,"crate::dispatcher#setting-the-default-subscriber":18,"`WithDispatch`":57,"std::future::Future":46},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"362":{"id":362,"crate_id":0,"name":"event_enabled","span":{"filename":"src/macros.rs","begin":[1053,1],"end":[1057,2]},"visibility":"public","docs":"Tests whether an event with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{event_enabled, Level};\nif event_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif event_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif event_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":360,"crate::span_enabled":361},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! event_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"85":{"id":85,"crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[rustc_diagnostic_item = \"noop_method_borrow\"]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"236":{"id":236,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":105,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[100,102],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"110":{"id":110,"crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"TypeId","id":111,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"261":{"id":261,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":76,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"135":{"id":135,"crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[383,5],"end":[389,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"resolved_path":{"path":"Pin","id":69,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}}],"constraints":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"Context","id":136,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Poll","id":137,"args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":null,"self_type":{"generic":"Self"},"trait":{"path":"","id":46,"args":null}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"286":{"id":286,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":133,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"9":{"id":9,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,18],"end":[136,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_global_default","name":"set_global_default","id":10,"is_glob":false}}},"160":{"id":160,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[98],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"311":{"id":311,"crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1568,5],"end":[1570,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"185":{"id":185,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,42],"end":[320,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Id","name":"Id","id":186,"is_glob":false}}},"34":{"id":34,"crate_id":0,"name":"span","span":{"filename":"src/span.rs","begin":[1,1],"end":[1609,2]},"visibility":"public","docs":" Spans represent periods of time in which a program was executing in a\n particular context.\n\n A span consists of [fields], user-defined key-value pairs of arbitrary data\n that describe the context the span represents, and a set of fixed attributes\n that describe all `tracing` spans and events. Attributes describing spans\n include:\n\n - An [`Id`] assigned by the subscriber that uniquely identifies it in relation\n   to other spans.\n - The span's [parent] in the trace tree.\n - [Metadata] that describes static characteristics of all spans\n   originating from that callsite, such as its name, source code location,\n   [verbosity level], and the names of its fields.\n\n # Creating Spans\n\n Spans are created using the [`span!`] macro. This macro is invoked with the\n following arguments, in order:\n\n - The [`target`] and/or [`parent`][parent] attributes, if the user wishes to\n   override their default values.\n - The span's [verbosity level]\n - A string literal providing the span's name.\n - Finally, zero or more arbitrary key/value fields.\n\n [`target`]: super::Metadata::target\n\n For example:\n ```rust\n use tracing::{span, Level};\n\n /// Construct a new span at the `INFO` level named \"my_span\", with a single\n /// field named answer , with the value `42`.\n let my_span = span!(Level::INFO, \"my_span\", answer = 42);\n ```\n\n The documentation for the [`span!`] macro provides additional examples of\n the various options that exist when creating spans.\n\n The [`trace_span!`], [`debug_span!`], [`info_span!`], [`warn_span!`], and\n [`error_span!`] exist as shorthand for constructing spans at various\n verbosity levels.\n\n ## Recording Span Creation\n\n The [`Attributes`] type contains data associated with a span, and is\n provided to the [`Subscriber`] when a new span is created. It contains\n the span's metadata, the ID of [the span's parent][parent] if one was\n explicitly set, and any fields whose values were recorded when the span was\n constructed. The subscriber, which is responsible for recording `tracing`\n data, can then store or record these values.\n\n # The Span Lifecycle\n\n ## Entering a Span\n\n A thread of execution is said to _enter_ a span when it begins executing,\n and _exit_ the span when it switches to another context. Spans may be\n entered through the [`enter`], [`entered`], and [`in_scope`] methods.\n\n The [`enter`] method enters a span, returning a [guard] that exits the span\n when dropped\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var);\n\n // `my_span` exists but has not been entered.\n\n // Enter `my_span`...\n let _enter = my_span.enter();\n\n // Perform some work inside of the context of `my_span`...\n // Dropping the `_enter` guard will exit the span.\n```\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n     <code>Span::enter</code> may produce incorrect traces if the returned drop\n     guard is held across an await point. See\n     <a href=\"struct.Span.html#in-asynchronous-code\">the method documentation</a>\n     for details.\n </pre></div>\n\n The [`entered`] method is analogous to [`enter`], but moves the span into\n the returned guard, rather than borrowing it. This allows creating and\n entering a span in a single expression:\n\n ```\n # use tracing::{span, Level};\n // Create a span and enter it, returning a guard:\n let span = span!(Level::INFO, \"my_span\").entered();\n\n // We are now inside the span! Like `enter()`, the guard returned by\n // `entered()` will exit the span when it is dropped...\n\n // ...but, it can also be exited explicitly, returning the `Span`\n // struct:\n let span = span.exit();\n ```\n\n Finally, [`in_scope`] takes a closure or function pointer and executes it\n inside the span:\n\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var = &my_var);\n\n my_span.in_scope(|| {\n     // perform some work in the context of `my_span`...\n });\n\n // Perform some work outside of the context of `my_span`...\n\n my_span.in_scope(|| {\n     // Perform some more work in the context of `my_span`.\n });\n ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Since entering a span takes <code>&self</code>, and\n     <code>Span</code>s are <code>Clone</code>, <code>Send</code>, and\n     <code>Sync</code>, it is entirely valid for multiple threads to enter the\n     same span concurrently.\n </pre>\n\n ## Span Relationships\n\n Spans form a tree structure — unless it is a root span, all spans have a\n _parent_, and may have one or more _children_. When a new span is created,\n the current span becomes the new span's parent. The total execution time of\n a span consists of the time spent in that span and in the entire subtree\n represented by its children. Thus, a parent span always lasts for at least\n as long as the longest-executing span in its subtree.\n\n ```\n # use tracing::{Level, span};\n // this span is considered the \"root\" of a new trace tree:\n span!(Level::INFO, \"root\").in_scope(|| {\n     // since we are now inside \"root\", this span is considered a child\n     // of \"root\":\n     span!(Level::DEBUG, \"outer_child\").in_scope(|| {\n         // this span is a child of \"outer_child\", which is in turn a\n         // child of \"root\":\n         span!(Level::TRACE, \"inner_child\").in_scope(|| {\n             // and so on...\n         });\n     });\n     // another span created here would also be a child of \"root\".\n });\n```\n\n In addition, the parent of a span may be explicitly specified in\n the `span!` macro. For example:\n\n ```rust\n # use tracing::{Level, span};\n // Create, but do not enter, a span called \"foo\".\n let foo = span!(Level::INFO, \"foo\");\n\n // Create and enter a span called \"bar\".\n let bar = span!(Level::INFO, \"bar\");\n let _enter = bar.enter();\n\n // Although we have currently entered \"bar\", \"baz\"'s parent span\n // will be \"foo\".\n let baz = span!(parent: &foo, Level::INFO, \"baz\");\n ```\n\n A child span should typically be considered _part_ of its parent. For\n example, if a subscriber is recording the length of time spent in various\n spans, it should generally include the time spent in a span's children as\n part of that span's duration.\n\n In addition to having zero or one parent, a span may also _follow from_ any\n number of other spans. This indicates a causal relationship between the span\n and the spans that it follows from, but a follower is *not* typically\n considered part of the duration of the span it follows. Unlike the parent, a\n span may record that it follows from another span after it is created, using\n the [`follows_from`] method.\n\n As an example, consider a listener task in a server. As the listener accepts\n incoming connections, it spawns new tasks that handle those connections. We\n might want to have a span representing the listener, and instrument each\n spawned handler task with its own span. We would want our instrumentation to\n record that the handler tasks were spawned as a result of the listener task.\n However, we might not consider the handler tasks to be _part_ of the time\n spent in the listener task, so we would not consider those spans children of\n the listener span. Instead, we would record that the handler tasks follow\n from the listener, recording the causal relationship but treating the spans\n as separate durations.\n\n ## Closing Spans\n\n Execution may enter and exit a span multiple times before that span is\n _closed_. Consider, for example, a future which has an associated\n span and enters that span every time it is polled:\n ```rust\n # use std::future::Future;\n # use std::task::{Context, Poll};\n # use std::pin::Pin;\n struct MyFuture {\n    // data\n    span: tracing::Span,\n }\n\n impl Future for MyFuture {\n     type Output = ();\n\n     fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n         let _enter = self.span.enter();\n         // Do actual future work...\n # Poll::Ready(())\n     }\n }\n ```\n\n If this future was spawned on an executor, it might yield one or more times\n before `poll` returns [`Poll::Ready`]. If the future were to yield, then\n the executor would move on to poll the next future, which may _also_ enter\n an associated span or series of spans. Therefore, it is valid for a span to\n be entered repeatedly before it completes. Only the time when that span or\n one of its children was the current span is considered to be time spent in\n that span. A span which is not executing and has not yet been closed is said\n to be _idle_.\n\n Because spans may be entered and exited multiple times before they close,\n [`Subscriber`]s have separate trait methods which are called to notify them\n of span exits and when span handles are dropped. When execution exits a\n span, [`exit`] will always be called with that span's ID to notify the\n subscriber that the span has been exited. When span handles are dropped, the\n [`drop_span`] method is called with that span's ID. The subscriber may use\n this to determine whether or not the span will be entered again.\n\n If there is only a single handle with the capacity to exit a span, dropping\n that handle \"closes\" the span, since the capacity to enter it no longer\n exists. For example:\n ```\n # use tracing::{Level, span};\n {\n     span!(Level::TRACE, \"my_span\").in_scope(|| {\n         // perform some work in the context of `my_span`...\n     }); // --> Subscriber::exit(my_span)\n\n     // The handle to `my_span` only lives inside of this block; when it is\n     // dropped, the subscriber will be informed via `drop_span`.\n\n } // --> Subscriber::drop_span(my_span)\n ```\n\n However, if multiple handles exist, the span can still be re-entered even if\n one or more is dropped. For determining when _all_ handles to a span have\n been dropped, `Subscriber`s have a [`clone_span`] method, which is called\n every time a span handle is cloned. Combined with `drop_span`, this may be\n used to track the number of handles to a given span — if `drop_span` has\n been called one more time than the number of calls to `clone_span` for a\n given ID, then no more handles to the span with that ID exist. The\n subscriber may then treat it as closed.\n\n # When to use spans\n\n As a rule of thumb, spans should be used to represent discrete units of work\n (e.g., a given request's lifetime in a server) or periods of time spent in a\n given context (e.g., time spent interacting with an instance of an external\n system, such as a database).\n\n Which scopes in a program correspond to new spans depend somewhat on user\n intent. For example, consider the case of a loop in a program. Should we\n construct one span and perform the entire loop inside of that span, like:\n\n ```rust\n # use tracing::{Level, span};\n # let n = 1;\n let span = span!(Level::TRACE, \"my_loop\");\n let _enter = span.enter();\n for i in 0..n {\n     # let _ = i;\n     // ...\n }\n ```\n Or, should we create a new span for each iteration of the loop, as in:\n ```rust\n # use tracing::{Level, span};\n # let n = 1u64;\n for i in 0..n {\n     let span = span!(Level::TRACE, \"my_loop\", iteration = i);\n     let _enter = span.enter();\n     // ...\n }\n ```\n\n Depending on the circumstances, we might want to do either, or both. For\n example, if we want to know how long was spent in the loop overall, we would\n create a single span around the entire loop; whereas if we wanted to know how\n much time was spent in each individual iteration, we would enter a new span\n on every iteration.\n\n [fields]: super::field\n [Metadata]: super::Metadata\n [verbosity level]: super::Level\n [`Poll::Ready`]: std::task::Poll::Ready\n [`span!`]: super::span!\n [`trace_span!`]: super::trace_span!\n [`debug_span!`]: super::debug_span!\n [`info_span!`]: super::info_span!\n [`warn_span!`]: super::warn_span!\n [`error_span!`]: super::error_span!\n [`clone_span`]: super::subscriber::Subscriber::clone_span()\n [`drop_span`]: super::subscriber::Subscriber::drop_span()\n [`exit`]: super::subscriber::Subscriber::exit\n [`Subscriber`]: super::subscriber::Subscriber\n [`enter`]: Span::enter()\n [`entered`]: Span::entered()\n [`in_scope`]: Span::in_scope()\n [`follows_from`]: Span::follows_from()\n [guard]: Entered\n [parent]: #span-relationships","links":{"Span::follows_from()":193,"`Id`":186,"super::Level":313,"super::info_span!":318,"std::task::Poll::Ready":321,"super::subscriber::Subscriber::clone_span()":323,"super::error_span!":320,"super::warn_span!":319,"super::subscriber::Subscriber::exit":201,"Span::in_scope()":202,"super::subscriber::Subscriber::drop_span()":322,"super::subscriber::Subscriber":17,"super::trace_span!":316,"super::span!":314,"super::Metadata::target":315,"super::field":43,"super::debug_span!":317,"`Attributes`":36,"Span::enter()":45,"super::Metadata":20,"Span::entered()":207,"Entered":204},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[184,185,187,189,44,204,205],"is_stripped":false}}},"361":{"id":361,"crate_id":0,"name":"span_enabled","span":{"filename":"src/macros.rs","begin":[1087,1],"end":[1091,2]},"visibility":"public","docs":"Tests whether a span with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{span_enabled, Level};\nif span_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif span_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif span_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":360,"crate::span_enabled":361},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! span_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"84":{"id":84,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"235":{"id":235,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[98],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"109":{"id":109,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[106,108],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"260":{"id":260,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":74,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"134":{"id":134,"crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[381,5],"end":[381,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Output","args":null,"self_type":{"generic":"T"},"trait":{"path":"Future","id":46,"args":null}}}}}},"285":{"id":285,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":78,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"159":{"id":159,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[96],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"310":{"id":310,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1550,1],"end":[1557,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Deref","id":299,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[308,309],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"184":{"id":184,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,30],"end":[320,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::span::Attributes","name":"Attributes","id":36,"is_glob":false}}},"58":{"id":58,"crate_id":0,"name":"with_subscriber","span":{"filename":"src/instrument.rs","begin":[176,5],"end":[184,6]},"visibility":"default","docs":"Attaches the provided [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached [`Subscriber`] will be set as the [default] when the returned\n[`Future`] is polled.\n\n# Examples\n\n```\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# use tracing::subscriber::NoSubscriber as MyOtherSubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Set the default `Subscriber`\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n\n// Create a different `Subscriber` and attach it to a future.\nlet other_subscriber = MyOtherSubscriber::default();\nlet future = async {\n    tracing::info!(\"this event will be recorded by the other `Subscriber`\");\n    // ...\n};\n\nfuture\n    // Attach the other `Subscriber` to the future before awaiting it\n    .with_subscriber(other_subscriber)\n    .await;\n\n// Once the future has completed, we return to the default `Subscriber`.\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n# }\n```\n\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":17,"crate::dispatcher#setting-the-default-subscriber":18,"`WithDispatch`":57,"std::future::Future":46},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Dispatch","id":12,"args":null}}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"360":{"id":360,"crate_id":0,"name":"enabled","span":{"filename":"src/macros.rs","begin":[1184,1],"end":[1264,2]},"visibility":"public","docs":"Checks whether a span or event is [enabled] based on the provided [metadata].\n\n[enabled]: crate::Subscriber::enabled\n[metadata]: crate::Metadata\n\nThis macro is a specialized tool: it is intended to be used prior\nto an expensive computation required *just* for that event, but\n*cannot* be done as part of an argument to that event, such as\nwhen multiple events are emitted (e.g., iterating over a collection\nand emitting an event for each item).\n\n# Usage\n\n[Subscribers] can make filtering decisions based all the data included in a\nspan or event's [`Metadata`]. This means that it is possible for `enabled!`\nto return a _false positive_ (indicating that something would be enabled\nwhen it actually would not be) or a _false negative_ (indicating that\nsomething would be disabled when it would actually be enabled).\n\n[Subscribers]: crate::subscriber::Subscriber\n[`Metadata`]: crate::metadata::Metadata\n\nThis occurs when a subscriber is using a _more specific_ filter than the\nmetadata provided to the `enabled!` macro. Some situations that can result\nin false positives or false negatives include:\n\n- If a subscriber is using a filter which may enable a span or event based\n  on field names, but `enabled!` is invoked without listing field names,\n  `enabled!` may return a false negative if a specific field name would\n  cause the subscriber to enable something that would otherwise be disabled.\n- If a subscriber is using a filter which enables or disables specific events by\n  file path and line number,  a particular event may be enabled/disabled\n  even if an `enabled!` invocation with the same level, target, and fields\n  indicated otherwise.\n- The subscriber can choose to enable _only_ spans or _only_ events, which `enabled`\n  will not reflect.\n\n`enabled!()` requires a [level](crate::Level) argument, an optional `target:`\nargument, and an optional set of field names. If the fields are not provided,\nthey are considered to be unknown. `enabled!` attempts to match the\nsyntax of `event!()` as closely as possible, which can be seen in the\nexamples below.\n\n# Examples\n\nIf the current subscriber is interested in recording `DEBUG`-level spans and\nevents in the current file and module path, this will evaluate to true:\n```rust\nuse tracing::{enabled, Level};\n\nif enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", and at the\nlevel  `DEBUG`, this will evaluate to true:\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", at\nthe level `DEBUG`, and with a field named \"hello\", this will evaluate\nto true:\n\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG, hello) {\n    // some expensive work...\n}\n```\n\n# Alternatives\n\n`enabled!` queries subscribers with [`Metadata`] where\n[`is_event`] and [`is_span`] both return `false`. Alternatively,\nuse [`event_enabled!`] or [`span_enabled!`] to ensure one of these\nreturns true.\n\n\n[`Metadata`]: crate::Metadata\n[`is_event`]: crate::Metadata::is_event\n[`is_span`]: crate::Metadata::is_span\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::Subscriber::enabled":208,"crate::span_enabled":361,"crate::subscriber::Subscriber":17,"`event_enabled!`":362,"crate::Metadata":20,"crate::Metadata::is_span":364,"crate::enabled":360,"crate::metadata::Metadata":20,"crate::Metadata::is_event":363,"crate::Level":313},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! enabled {\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr ) => { ... };\n    (target: $target:expr, $lvl:expr ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr) => { ... };\n    ($lvl:expr) => { ... };\n    ($lvl:expr, $($field:tt)*) => { ... };\n}"}},"83":{"id":83,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"234":{"id":234,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":59,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[96],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"108":{"id":108,"crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"path":"Result","id":103,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"T"},"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"284":{"id":284,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":76,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"7":{"id":7,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,5],"end":[136,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::get_default","name":"get_default","id":8,"is_glob":false}}},"158":{"id":158,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"CloneToUninit","id":94,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[91],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"309":{"id":309,"crate_id":0,"name":"deref","span":{"filename":"src/span.rs","begin":[1554,5],"end":[1556,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"183":{"id":183,"crate_id":0,"name":"STATIC_MAX_LEVEL","span":{"filename":"src/level_filters.rs","begin":[66,1],"end":[66,65]},"visibility":"public","docs":"The statically configured maximum trace level.\n\nSee the [module-level documentation] for information on how to configure\nthis.\n\nThis value is checked by the `event!` and `span!` macros. Code that\nmanually constructs events or spans via the `Event::record` function or\n`Span` constructors should compare the level against this value to\ndetermine if those spans or events are enabled.\n\n[module-level documentation]: self#compile-time-filters","links":{"self#compile-time-filters":182},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"path":"LevelFilter","id":181,"args":null}},"const":{"expr":"_","value":null,"is_literal":false}}}},"57":{"id":57,"crate_id":0,"name":"WithDispatch","span":{"filename":"src/instrument.rs","begin":[236,1],"end":[252,2]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Subscriber`].\n\nThis type is returned by the [`WithSubscriber`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Subscriber`]: crate::Subscriber","links":{"crate::Subscriber":17,"std::future::Future":46,"`WithSubscriber`":61},"attrs":[{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"},{"must_use":{"reason":"futures do nothing unless you `.await` or poll them"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[72,73,75,77,79,81,83,84,86,89,92,97,99,104,109,112,118,122,125,129,130,138]}}},"359":{"id":359,"crate_id":0,"name":"event","span":{"filename":"src/macros.rs","begin":[585,1],"end":[1023,2]},"visibility":"public","docs":"Constructs a new `Event`.\n\nThe event macro is invoked with a `Level` and up to 32 key-value fields.\nOptionally, a format string and arguments may follow the fields; this will\nbe used to construct an implicit field named \"message\".\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::{event, Level};\n\n# fn main() {\nlet data = (42, \"forty-two\");\nlet private_data = \"private\";\nlet error = \"a bad error\";\n\nevent!(Level::ERROR, %error, \"Received error\");\nevent!(\n    target: \"app_events\",\n    Level::WARN,\n    private_data,\n    ?data,\n    \"App warning: {}\",\n    error\n);\nevent!(name: \"answer\", Level::INFO, the_answer = data.0);\nevent!(Level::INFO, the_answer = data.0);\n# }\n```\n","links":{"crate#using-the-macros":358},"attrs":["macro_export"],"deprecation":null,"inner":{"macro":"macro_rules! event {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ($lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    ($lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+) => { ... };\n    ($lvl:expr, %$($k:ident).+) => { ... };\n    ($lvl:expr, $($k:ident).+) => { ... };\n    ( $lvl:expr, $($arg:tt)+ ) => { ... };\n}"}},"233":{"id":233,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":93,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"CloneToUninit","id":94,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[91],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"258":{"id":258,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1449,1],"end":[1470,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":47,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[257],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"283":{"id":283,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":74,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"157":{"id":157,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":90,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[88],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"308":{"id":308,"crate_id":0,"name":"Target","span":{"filename":"src/span.rs","begin":[1551,5],"end":[1551,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}}},"31":{"id":31,"crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[114,1],"end":[114,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::field","name":"field","id":32,"is_glob":true}}},"182":{"id":182,"crate_id":0,"name":"level_filters","span":{"filename":"src/level_filters.rs","begin":[1,1],"end":[98,2]},"visibility":"public","docs":"Trace verbosity level filtering.\n\n# Compile time filters\n\nTrace verbosity levels can be statically disabled at compile time via Cargo\nfeatures, similar to the [`log` crate]. Trace instrumentation at disabled\nlevels will be skipped and will not even be present in the resulting binary\nunless the verbosity level is specified dynamically. This level is\nconfigured separately for release and debug builds. The features are:\n\n* `max_level_off`\n* `max_level_error`\n* `max_level_warn`\n* `max_level_info`\n* `max_level_debug`\n* `max_level_trace`\n* `release_max_level_off`\n* `release_max_level_error`\n* `release_max_level_warn`\n* `release_max_level_info`\n* `release_max_level_debug`\n* `release_max_level_trace`\n\nThese features control the value of the `STATIC_MAX_LEVEL` constant. The\ninstrumentation macros macros check this value before recording an event or\nconstructing a span. By default, no levels are disabled.\n\nFor example, a crate can disable trace level instrumentation in debug builds\nand trace, debug, and info level instrumentation in release builds with the\nfollowing configuration:\n\n```toml\n[dependencies]\ntracing = { version = \"0.1\", features = [\"max_level_debug\", \"release_max_level_warn\"] }\n```\n## Notes\n\nPlease note that `tracing`'s static max level features do *not* control the\n[`log`] records that may be emitted when [`tracing`'s \"log\" feature flag][f] is\nenabled. This is to allow `tracing` to be disabled entirely at compile time\nwhile still emitting `log` records --- such as when a library using\n`tracing` is used by an application using `log` that doesn't want to\ngenerate any `tracing`-related code, but does want to collect `log` records.\n\nThis means that if the \"log\" feature is in use, some code may be generated\nfor `log` records emitted by disabled `tracing` events. If this is not\ndesirable, `log` records may be disabled separately using [`log`'s static\nmax level features][`log` crate].\n\n[`log`]: https://docs.rs/log/\n[`log` crate]: https://docs.rs/log/latest/log/#compile-time-filters\n[f]: https://docs.rs/tracing/latest/tracing/#emitting-log-records","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[178,180,183],"is_stripped":false}}},"56":{"id":56,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"generic":"T"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"207":{"id":207,"crate_id":0,"name":"entered","span":{"filename":"src/span.rs","begin":[896,5],"end":[902,6]},"visibility":"public","docs":"Enters this span, consuming it and returning a [guard][`EnteredSpan`]\nthat will exit the span when dropped.\n\n<pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n    <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n    <code>Span::entered</code> may produce incorrect traces if the returned drop\n    guard is held across an await point. See <a href=\"#in-asynchronous-code\">the\n    <code>Span::enter</code> documentation</a> for details.\n</pre>\n\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\nThis is similar to the [`Span::enter`] method, except that it moves the\nspan by value into the returned guard, rather than borrowing it.\nTherefore, this method can be used to create and enter a span in a\nsingle expression, without requiring a `let`-binding. For example:\n\n```\n# use tracing::info_span;\nlet _span = info_span!(\"something_interesting\").entered();\n```\nrather than:\n```\n# use tracing::info_span;\nlet span = info_span!(\"something_interesting\");\nlet _e = span.enter();\n```\n\nFurthermore, `entered` may be used when the span must be stored in some\nother struct or be passed to a function while remaining entered.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The returned <a href=\"../struct.EnteredSpan.html\">\n    <code>EnteredSpan</code></a> guard does not implement <code>Send</code>.\n    Dropping the guard will exit <em>this</em> span, and if the guard is sent\n    to another thread and dropped there, that thread may never have entered\n    this span. Thus, <code>EnteredSpan</code>s should not be sent between threads.\n</pre>\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n\n# Examples\n\nThe returned guard can be [explicitly exited][EnteredSpan::exit],\nreturning the un-entered span:\n\n```\n# use tracing::{Level, span};\nlet span = span!(Level::INFO, \"doing_something\").entered();\n\n// code here is within the span\n\n// explicitly exit the span, returning it\nlet span = span.exit();\n\n// code here is no longer within the span\n\n// enter the span again\nlet span = span.entered();\n\n// now we are inside the span once again\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\").entered();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSince the [`EnteredSpan`] guard can dereference to the [`Span`] itself,\nthe span may still be accessed while entered. For example:\n\n```rust\n# use tracing::info_span;\nuse tracing::field;\n\n// create the span with an empty field, and enter it.\nlet span = info_span!(\"my_span\", some_field = field::Empty).entered();\n\n// we can still record a value for the field while the span is entered.\nspan.record(\"some_field\", &\"hello world!\");\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"`Span::enter`":45,"`Span`":44,"super::Id":186,"super::subscriber::Subscriber::exit()":201,"EnteredSpan::exit":206,"`EnteredSpan`":205,"super::subscriber::Subscriber::enter()":200},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"358":{"id":358,"crate_id":0,"name":"tracing","span":{"filename":"src/lib.rs","begin":[1,1],"end":[1131,2]},"visibility":"public","docs":" A scoped, structured logging and diagnostics system.\n\n # Overview\n\n `tracing` is a framework for instrumenting Rust programs to collect\n structured, event-based diagnostic information.\n\n In asynchronous systems like Tokio, interpreting traditional log messages can\n often be quite challenging. Since individual tasks are multiplexed on the same\n thread, associated events and log lines are intermixed making it difficult to\n trace the logic flow. `tracing` expands upon logging-style diagnostics by\n allowing libraries and applications to record structured events with additional\n information about *temporality* and *causality* — unlike a log message, a span\n in `tracing` has a beginning and end time, may be entered and exited by the\n flow of execution, and may exist within a nested tree of similar spans. In\n addition, `tracing` spans are *structured*, with the ability to record typed\n data as well as textual messages.\n\n The `tracing` crate provides the APIs necessary for instrumenting libraries\n and applications to emit trace data.\n\n *Compiler support: [requires `rustc` 1.63+][msrv]*\n\n [msrv]: #supported-rust-versions\n # Core Concepts\n\n The core of `tracing`'s API is composed of _spans_, _events_ and\n _subscribers_. We'll cover these in turn.\n\n ## Spans\n\n To record the flow of execution through a program, `tracing` introduces the\n concept of [spans]. Unlike a log line that represents a _moment in\n time_, a span represents a _period of time_ with a beginning and an end. When a\n program begins executing in a context or performing a unit of work, it\n _enters_ that context's span, and when it stops executing in that context,\n it _exits_ the span. The span in which a thread is currently executing is\n referred to as that thread's _current_ span.\n\n For example:\n ```\n use tracing::{span, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my_span\");\n // `enter` returns a RAII guard which, when dropped, exits the span. this\n // indicates that we are in the span for the current lexical scope.\n let _enter = span.enter();\n // perform some work in the context of `my_span`...\n # }\n```\n\n The [`span` module][span]'s documentation provides further details on how to\n use spans.\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n\n  **Warning**: In asynchronous code that uses async/await syntax,\n  `Span::enter` may produce incorrect traces if the returned drop\n  guard is held across an await point. See\n  [the method documentation][Span#in-asynchronous-code] for details.\n\n </pre></div>\n\n ## Events\n\n An [`Event`] represents a _moment_ in time. It signifies something that\n happened while a trace was being recorded. `Event`s are comparable to the log\n records emitted by unstructured logging code, but unlike a typical log line,\n an `Event` may occur within the context of a span.\n\n For example:\n ```\n use tracing::{event, span, Level};\n\n # fn main() {\n // records an event outside of any span context:\n event!(Level::INFO, \"something happened\");\n\n let span = span!(Level::INFO, \"my_span\");\n let _guard = span.enter();\n\n // records an event within \"my_span\".\n event!(Level::DEBUG, \"something happened inside my_span\");\n # }\n```\n\n In general, events should be used to represent points in time _within_ a\n span — a request returned with a given status code, _n_ new items were\n taken from a queue, and so on.\n\n The [`Event` struct][`Event`] documentation provides further details on using\n events.\n\n ## Subscribers\n\n As `Span`s and `Event`s occur, they are recorded or aggregated by\n implementations of the [`Subscriber`] trait. `Subscriber`s are notified\n when an `Event` takes place and when a `Span` is entered or exited. These\n notifications are represented by the following `Subscriber` trait methods:\n\n + [`event`][Subscriber::event], called when an `Event` takes place,\n + [`enter`], called when execution enters a `Span`,\n + [`exit`], called when execution exits a `Span`\n\n In addition, subscribers may implement the [`enabled`] function to _filter_\n the notifications they receive based on [metadata] describing each `Span`\n or `Event`. If a call to `Subscriber::enabled` returns `false` for a given\n set of metadata, that `Subscriber` will *not* be notified about the\n corresponding `Span` or `Event`. For performance reasons, if no currently\n active subscribers express interest in a given set of metadata by returning\n `true`, then the corresponding `Span` or `Event` will never be constructed.\n\n # Usage\n\n First, add this to your `Cargo.toml`:\n\n ```toml\n [dependencies]\n tracing = \"0.1\"\n ```\n\n ## Recording Spans and Events\n\n Spans and events are recorded using macros.\n\n ### Spans\n\n The [`span!`] macro expands to a [`Span` struct][`Span`] which is used to\n record a span. The [`Span::enter`] method on that struct records that the\n span has been entered, and returns a [RAII] guard object, which will exit\n the span when dropped.\n\n For example:\n\n ```rust\n use tracing::{span, Level};\n # fn main() {\n // Construct a new span named \"my span\" with trace log level.\n let span = span!(Level::TRACE, \"my span\");\n\n // Enter the span, returning a guard object.\n let _enter = span.enter();\n\n // Any trace events that occur before the guard is dropped will occur\n // within the span.\n\n // Dropping the guard will exit the span.\n # }\n ```\n\n The [`#[instrument]`][instrument] attribute provides an easy way to\n add `tracing` spans to functions. A function annotated with `#[instrument]`\n will create and enter a span with that function's name every time the\n function is called, with arguments to that function will be recorded as\n fields using `fmt::Debug`.\n\n For example:\n ```ignore\n # // this doctest is ignored because we don't have a way to say\n # // that it should only be run with cfg(feature = \"attributes\")\n use tracing::{Level, event, instrument};\n\n #[instrument]\n pub fn my_function(my_arg: usize) {\n     // This event will be recorded inside a span named `my_function` with the\n     // field `my_arg`.\n     event!(Level::INFO, \"inside my_function!\");\n     // ...\n }\n # fn main() {}\n ```\n\n For functions which don't have built-in tracing support and can't have\n the `#[instrument]` attribute applied (such as from an external crate),\n the [`Span` struct][`Span`] has a [`in_scope()` method][`in_scope`]\n which can be used to easily wrap synchronous code in a span.\n\n For example:\n ```rust\n use tracing::info_span;\n\n # fn doc() -> Result<(), ()> {\n # mod serde_json {\n #    pub(crate) fn from_slice(buf: &[u8]) -> Result<(), ()> { Ok(()) }\n # }\n # let buf: [u8; 0] = [];\n let json = info_span!(\"json.parse\").in_scope(|| serde_json::from_slice(&buf))?;\n # let _ = json; // suppress unused variable warning\n # Ok(())\n # }\n ```\n\n You can find more examples showing how to use this crate [here][examples].\n\n [RAII]: https://github.com/rust-unofficial/patterns/blob/main/src/patterns/behavioural/RAII.md\n [examples]: https://github.com/tokio-rs/tracing/tree/master/examples\n\n ### Events\n\n [`Event`]s are recorded using the [`event!`] macro:\n\n ```rust\n # fn main() {\n use tracing::{event, Level};\n event!(Level::INFO, \"something has happened!\");\n # }\n ```\n\n ## Using the Macros\n\n The [`span!`] and [`event!`] macros as well as the `#[instrument]` attribute\n use fairly similar syntax, with some exceptions.\n\n ### Configuring Attributes\n\n Both macros require a [`Level`] specifying the verbosity of the span or\n event. Optionally, the, [target] and [parent span] may be overridden. If the\n target and parent span are not overridden, they will default to the\n module path where the macro was invoked and the current span (as determined\n by the subscriber), respectively.\n\n For example:\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(target: \"app_spans\", Level::TRACE, \"my span\");\n event!(target: \"app_events\", Level::INFO, \"something has happened!\");\n # }\n ```\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my span\");\n event!(parent: &span, Level::INFO, \"something has happened!\");\n # }\n ```\n\n The span macros also take a string literal after the level, to set the name\n of the span (as above).  In the case of the event macros, the name of the event can\n be overridden (the default is `event file:line`) using the `name:` specifier.\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(Level::TRACE, \"my span\");\n event!(name: \"some_info\", Level::INFO, \"something has happened!\");\n # }\n ```\n\n ### Recording Fields\n\n Structured fields on spans and events are specified using the syntax\n `field_name = field_value`. Fields are separated by commas.\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n // records an event with two fields:\n //  - \"answer\", with the value 42\n //  - \"question\", with the value \"life, the universe and everything\"\n event!(Level::INFO, answer = 42, question = \"life, the universe, and everything\");\n # }\n ```\n\n As shorthand, local variables may be used as field values without an\n assignment, similar to [struct initializers]. For example:\n\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n\n span!(Level::TRACE, \"login\", user);\n // is equivalent to:\n span!(Level::TRACE, \"login\", user = user);\n # }\n```\n\n Field names can include dots, but should not be terminated by them:\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n let email = \"ferris@rust-lang.org\";\n span!(Level::TRACE, \"login\", user, user.email = email);\n # }\n```\n\n Since field names can include dots, fields on local structs can be used\n using the local variable shorthand:\n ```\n # use tracing::{span, Level};\n # fn main() {\n # struct User {\n #    name: &'static str,\n #    email: &'static str,\n # }\n let user = User {\n     name: \"ferris\",\n     email: \"ferris@rust-lang.org\",\n };\n // the span will have the fields `user.name = \"ferris\"` and\n // `user.email = \"ferris@rust-lang.org\"`.\n span!(Level::TRACE, \"login\", user.name, user.email);\n # }\n```\n\n Fields with names that are not Rust identifiers, or with names that are Rust reserved words,\n may be created using quoted string literals. However, this may not be used with the local\n variable shorthand.\n ```\n # use tracing::{span, Level};\n # fn main() {\n // records an event with fields whose names are not Rust identifiers\n //  - \"guid:x-request-id\", containing a `:`, with the value \"abcdef\"\n //  - \"type\", which is a reserved word, with the value \"request\"\n span!(Level::TRACE, \"api\", \"guid:x-request-id\" = \"abcdef\", \"type\" = \"request\");\n # }\n```\n\n Constant expressions can also be used as field names. Constants\n must be enclosed in curly braces (`{}`) to indicate that the *value*\n of the constant is to be used as the field name, rather than the\n constant's name. For example:\n ```\n # use tracing::{span, Level};\n # fn main() {\n const RESOURCE_NAME: &str = \"foo\";\n // this span will have the field `foo = \"some_id\"`\n span!(Level::TRACE, \"get\", { RESOURCE_NAME } = \"some_id\");\n # }\n```\n\n The `?` sigil is shorthand that specifies a field should be recorded using\n its [`fmt::Debug`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n #[derive(Debug)]\n struct MyStruct {\n     field: &'static str,\n }\n\n let my_struct = MyStruct {\n     field: \"Hello world!\"\n };\n\n // `my_struct` will be recorded using its `fmt::Debug` implementation.\n event!(Level::TRACE, greeting = ?my_struct);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::debug(&my_struct));\n # }\n ```\n\n The `%` sigil operates similarly, but indicates that the value should be\n recorded using its [`fmt::Display`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, greeting = %my_struct.field);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::display(&my_struct.field));\n # }\n ```\n\n The `%` and `?` sigils may also be used with local variable shorthand:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, %my_struct.field);\n # }\n ```\n\n Additionally, a span may declare fields with the special value [`Empty`],\n which indicates that that the value for that field does not currently exist\n but may be recorded later. For example:\n\n ```\n use tracing::{trace_span, field};\n\n // Create a span with two fields: `greeting`, with the value \"hello world\", and\n // `parting`, without a value.\n let span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n // ...\n\n // Now, record a value for parting as well.\n span.record(\"parting\", &\"goodbye world!\");\n ```\n\n Finally, events may also include human-readable messages, in the form of a\n [format string][fmt] and (optional) arguments, **after** the event's\n key-value fields. If a format string and arguments are provided,\n they will implicitly create a new field named `message` whose value is the\n provided set of format arguments.\n\n For example:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n let question = \"the ultimate question of life, the universe, and everything\";\n let answer = 42;\n // records an event with the following fields:\n // - `question.answer` with the value 42,\n // - `question.tricky` with the value `true`,\n // - \"message\", with the value \"the answer to the ultimate question of life, the\n //    universe, and everything is 42.\"\n event!(\n     Level::DEBUG,\n     question.answer = answer,\n     question.tricky = true,\n     \"the answer to {} is {}.\", question, answer\n );\n # }\n ```\n\n Specifying a formatted message in this manner does not allocate by default.\n\n [struct initializers]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\n [target]: Metadata::target\n [parent span]: span::Attributes::parent\n [determined contextually]: span::Attributes::is_contextual\n [`fmt::Debug`]: std::fmt::Debug\n [`fmt::Display`]: std::fmt::Display\n [fmt]: std::fmt#usage\n [`Empty`]: field::Empty\n\n ### Shorthand Macros\n\n `tracing` also offers a number of macros with preset verbosity levels.\n The [`trace!`], [`debug!`], [`info!`], [`warn!`], and [`error!`] behave\n similarly to the [`event!`] macro, but with the [`Level`] argument already\n specified, while the corresponding [`trace_span!`], [`debug_span!`],\n [`info_span!`], [`warn_span!`], and [`error_span!`] macros are the same,\n but for the [`span!`] macro.\n\n These are intended both as a shorthand, and for compatibility with the [`log`]\n crate (see the next section).\n\n [`span!`]: span!\n [`event!`]: event!\n [`trace!`]: trace!\n [`debug!`]: debug!\n [`info!`]: info!\n [`warn!`]: warn!\n [`error!`]: error!\n [`trace_span!`]: trace_span!\n [`debug_span!`]: debug_span!\n [`info_span!`]: info_span!\n [`warn_span!`]: warn_span!\n [`error_span!`]: error_span!\n\n ### For `log` Users\n\n Users of the [`log`] crate should note that `tracing` exposes a set of\n macros for creating `Event`s (`trace!`, `debug!`, `info!`, `warn!`, and\n `error!`) which may be invoked with the same syntax as the similarly-named\n macros from the `log` crate. Often, the process of converting a project to\n use `tracing` can begin with a simple drop-in replacement.\n\n Let's consider the `log` crate's yak-shaving example:\n\n ```rust,ignore\n use std::{error::Error, io};\n use tracing::{debug, error, info, span, warn, Level};\n\n // the `#[tracing::instrument]` attribute creates and enters a span\n // every time the instrumented function is called. The span is named after the\n // the function or method. Parameters passed to the function are recorded as fields.\n #[tracing::instrument]\n pub fn shave(yak: usize) -> Result<(), Box<dyn Error + 'static>> {\n     // this creates an event at the DEBUG level with two fields:\n     // - `excitement`, with the key \"excitement\" and the value \"yay!\"\n     // - `message`, with the key \"message\" and the value \"hello! I'm gonna shave a yak.\"\n     //\n     // unlike other fields, `message`'s shorthand initialization is just the string itself.\n     debug!(excitement = \"yay!\", \"hello! I'm gonna shave a yak.\");\n     if yak == 3 {\n         warn!(\"could not locate yak!\");\n         // note that this is intended to demonstrate `tracing`'s features, not idiomatic\n         // error handling! in a library or application, you should consider returning\n         // a dedicated `YakError`. libraries like snafu or thiserror make this easy.\n         return Err(io::Error::new(io::ErrorKind::Other, \"shaving yak failed!\").into());\n     } else {\n         debug!(\"yak shaved successfully\");\n     }\n     Ok(())\n }\n\n pub fn shave_all(yaks: usize) -> usize {\n     // Constructs a new span named \"shaving_yaks\" at the TRACE level,\n     // and a field whose key is \"yaks\". This is equivalent to writing:\n     //\n     // let span = span!(Level::TRACE, \"shaving_yaks\", yaks = yaks);\n     //\n     // local variables (`yaks`) can be used as field values\n     // without an assignment, similar to struct initializers.\n     let _span = span!(Level::TRACE, \"shaving_yaks\", yaks).entered();\n\n     info!(\"shaving yaks\");\n\n     let mut yaks_shaved = 0;\n     for yak in 1..=yaks {\n         let res = shave(yak);\n         debug!(yak, shaved = res.is_ok());\n\n         if let Err(ref error) = res {\n             // Like spans, events can also use the field initialization shorthand.\n             // In this instance, `yak` is the field being initalized.\n             error!(yak, error = error.as_ref(), \"failed to shave yak!\");\n         } else {\n             yaks_shaved += 1;\n         }\n         debug!(yaks_shaved);\n     }\n\n     yaks_shaved\n }\n ```\n\n ## In libraries\n\n Libraries should link only to the `tracing` crate, and use the provided\n macros to record whatever information will be useful to downstream\n consumers.\n\n ## In executables\n\n In order to record trace events, executables have to use a `Subscriber`\n implementation compatible with `tracing`. A `Subscriber` implements a\n way of collecting trace data, such as by logging it to standard output.\n\n This library does not contain any `Subscriber` implementations; these are\n provided by [other crates](#related-crates).\n\n The simplest way to use a subscriber is to call the [`set_global_default`]\n function:\n\n ```\n extern crate tracing;\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n tracing::subscriber::set_global_default(my_subscriber)\n     .expect(\"setting tracing default failed\");\n # }\n ```\n\n <pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In general, libraries should <em>not</em> call\n     <code>set_global_default()</code>! Doing so will cause conflicts when\n     executables that depend on the library try to set the default later.\n </pre>\n\n This subscriber will be used as the default in all threads for the\n remainder of the duration of the program, similar to setting the logger\n in the `log` crate.\n\n In addition, the default subscriber can be set through using the\n [`with_default`] function. This follows the `tokio` pattern of using\n closures to represent executing code in a context that is exited at the end\n of the closure. For example:\n\n ```rust\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n # #[cfg(feature = \"std\")]\n tracing::subscriber::with_default(my_subscriber, || {\n     // Any trace events generated in this closure or by functions it calls\n     // will be collected by `my_subscriber`.\n })\n # }\n ```\n\n This approach allows trace data to be collected by multiple subscribers\n within different contexts in the program. Note that the override only applies to the\n currently executing thread; other threads will not see the change from with_default.\n\n Any trace events generated outside the context of a subscriber will not be collected.\n\n Once a subscriber has been set, instrumentation points may be added to the\n executable using the `tracing` crate's macros.\n\n ## `log` Compatibility\n\n The [`log`] crate provides a simple, lightweight logging facade for Rust.\n While `tracing` builds upon `log`'s foundation with richer structured\n diagnostic data, `log`'s simplicity and ubiquity make it the \"lowest common\n denominator\" for text-based logging in Rust — a vast majority of Rust\n libraries and applications either emit or consume `log` records. Therefore,\n `tracing` provides multiple forms of interoperability with `log`: `tracing`\n instrumentation can emit `log` records, and a compatibility layer enables\n `tracing` [`Subscriber`]s to consume `log` records as `tracing` [`Event`]s.\n\n ### Emitting `log` Records\n\n This crate provides two feature flags, \"log\" and \"log-always\", which will\n cause [spans] and [events] to emit `log` records. When the \"log\" feature is\n enabled, if no `tracing` `Subscriber` is active, invoking an event macro or\n creating a span with fields will emit a `log` record. This is intended\n primarily for use in libraries which wish to emit diagnostics that can be\n consumed by applications using `tracing` *or* `log`, without paying the\n additional overhead of emitting both forms of diagnostics when `tracing` is\n in use.\n\n Enabling the \"log-always\" feature will cause `log` records to be emitted\n even if a `tracing` `Subscriber` _is_ set. This is intended to be used in\n applications where a `log` `Logger` is being used to record a textual log,\n and `tracing` is used only to record other forms of diagnostics (such as\n metrics, profiling, or distributed tracing data). Unlike the \"log\" feature,\n libraries generally should **not** enable the \"log-always\" feature, as doing\n so will prevent applications from being able to opt out of the `log` records.\n\n See [here][flags] for more details on this crate's feature flags.\n\n The generated `log` records' messages will be a string representation of the\n span or event's fields, and all additional information recorded by `log`\n (target, verbosity level, module path, file, and line number) will also be\n populated. Additionally, `log` records are also generated when spans are\n entered, exited, and closed. Since these additional span lifecycle logs have\n the potential to be very verbose, and don't include additional fields, they\n will always be emitted at the `Trace` level, rather than inheriting the\n level of the span that generated them. Furthermore, they are are categorized\n under a separate `log` target, \"tracing::span\" (and its sub-target,\n \"tracing::span::active\", for the logs on entering and exiting a span), which\n may be enabled or disabled separately from other `log` records emitted by\n `tracing`.\n\n ### Consuming `log` Records\n\n The [`tracing-log`] crate provides a compatibility layer which\n allows a `tracing` [`Subscriber`] to consume `log` records as though they\n were `tracing` [events]. This allows applications using `tracing` to record\n the logs emitted by dependencies using `log` as events within the context of\n the application's trace tree. See [that crate's documentation][log-tracer]\n for details.\n\n [log-tracer]: https://docs.rs/tracing-log/latest/tracing_log/#convert-log-records-to-tracing-events\n\n ## Related Crates\n\n In addition to `tracing` and `tracing-core`, the [`tokio-rs/tracing`] repository\n contains several additional crates designed to be used with the `tracing` ecosystem.\n This includes a collection of `Subscriber` implementations, as well as utility\n and adapter crates to assist in writing `Subscriber`s and instrumenting\n applications.\n\n In particular, the following crates are likely to be of interest:\n\n  - [`tracing-futures`] provides a compatibility layer with the `futures`\n    crate, allowing spans to be attached to `Future`s, `Stream`s, and `Executor`s.\n  - [`tracing-subscriber`] provides `Subscriber` implementations and\n    utilities for working with `Subscriber`s. This includes a [`FmtSubscriber`]\n    `FmtSubscriber` for logging formatted trace data to stdout, with similar\n    filtering and formatting to the [`env_logger`] crate.\n  - [`tracing-log`] provides a compatibility layer with the [`log`] crate,\n    allowing log messages to be recorded as `tracing` `Event`s within the\n    trace tree. This is useful when a project using `tracing` have\n    dependencies which use `log`. Note that if you're using\n    `tracing-subscriber`'s `FmtSubscriber`, you don't need to depend on\n    `tracing-log` directly.\n  - [`tracing-appender`] provides utilities for outputting tracing data,\n     including a file appender and non blocking writer.\n\n Additionally, there are also several third-party crates which are not\n maintained by the `tokio` project. These include:\n\n  - [`tracing-timing`] implements inter-event timing metrics on top of `tracing`.\n    It provides a subscriber that records the time elapsed between pairs of\n    `tracing` events and generates histograms.\n  - [`tracing-opentelemetry`] provides a subscriber for emitting traces to\n    [OpenTelemetry]-compatible distributed tracing systems.\n  - [`tracing-honeycomb`] Provides a layer that reports traces spanning multiple machines to [honeycomb.io]. Backed by [`tracing-distributed`].\n  - [`tracing-distributed`] Provides a generic implementation of a layer that reports traces spanning multiple machines to some backend.\n  - [`tracing-actix-web`] provides `tracing` integration for the `actix-web` web framework.\n  - [`tracing-actix`] provides `tracing` integration for the `actix` actor\n    framework.\n  - [`axum-insights`] provides `tracing` integration and Application insights export for the `axum` web framework.\n  - [`tracing-gelf`] implements a subscriber for exporting traces in Greylog\n    GELF format.\n  - [`tracing-coz`] provides integration with the [coz] causal profiler\n    (Linux-only).\n  - [`tracing-bunyan-formatter`] provides a layer implementation that reports events and spans\n    in [bunyan] format, enriched with timing information.\n  - [`tracing-wasm`] provides a `Subscriber`/`Layer` implementation that reports\n    events and spans via browser `console.log` and [User Timing API (`window.performance`)].\n  - [`tracing-web`] provides a layer implementation of level-aware logging of events\n    to web browsers' `console.*` and span events to the [User Timing API (`window.performance`)].\n  - [`tide-tracing`] provides a [tide] middleware to trace all incoming requests and responses.\n  - [`test-log`] takes care of initializing `tracing` for tests, based on\n    environment variables with an `env_logger` compatible syntax.\n  - [`tracing-unwrap`] provides convenience methods to report failed unwraps\n    on `Result` or `Option` types to a `Subscriber`.\n  - [`diesel-tracing`] provides integration with [`diesel`] database connections.\n  - [`tracing-tracy`] provides a way to collect [Tracy] profiles in instrumented\n    applications.\n  - [`tracing-elastic-apm`] provides a layer for reporting traces to [Elastic APM].\n  - [`tracing-etw`] provides a layer for emitting Windows [ETW] events.\n  - [`tracing-fluent-assertions`] provides a fluent assertions-style testing\n    framework for validating the behavior of `tracing` spans.\n  - [`sentry-tracing`] provides a layer for reporting events and traces to [Sentry].\n  - [`tracing-forest`] provides a subscriber that preserves contextual coherence by\n    grouping together logs from the same spans during writing.\n  - [`tracing-loki`] provides a layer for shipping logs to [Grafana Loki].\n  - [`tracing-logfmt`] provides a layer that formats events and spans into the logfmt format.\n  - [`reqwest-tracing`] provides a middleware to trace [`reqwest`] HTTP requests.\n  - [`tracing-cloudwatch`] provides a layer that sends events to AWS CloudWatch Logs.\n  - [`clippy-tracing`] provides a tool to add, remove and check for `tracing::instrument`.\n  - [`json-subscriber`] provides a subscriber for emitting JSON logs. The output can be customized much more than with [`tracing-subscriber`]'s JSON output.\n\n If you're the maintainer of a `tracing` ecosystem crate not listed above,\n please let us know! We'd love to add your project to the list!\n\n [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry\n [OpenTelemetry]: https://opentelemetry.io/\n [`tracing-honeycomb`]: https://crates.io/crates/tracing-honeycomb\n [`tracing-distributed`]: https://crates.io/crates/tracing-distributed\n [honeycomb.io]: https://www.honeycomb.io/\n [`tracing-actix-web`]: https://crates.io/crates/tracing-actix-web\n [`tracing-actix`]: https://crates.io/crates/tracing-actix\n [`axum-insights`]: https://crates.io/crates/axum-insights\n [`tracing-gelf`]: https://crates.io/crates/tracing-gelf\n [`tracing-coz`]: https://crates.io/crates/tracing-coz\n [coz]: https://github.com/plasma-umass/coz\n [`tracing-bunyan-formatter`]: https://crates.io/crates/tracing-bunyan-formatter\n [bunyan]: https://github.com/trentm/node-bunyan\n [`tracing-wasm`]: https://docs.rs/tracing-wasm\n [`tracing-web`]: https://docs.rs/tracing-web\n [User Timing API (`window.performance`)]: https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\n [`tide-tracing`]: https://crates.io/crates/tide-tracing\n [tide]: https://crates.io/crates/tide\n [`test-log`]: https://crates.io/crates/test-log\n [`tracing-unwrap`]: https://docs.rs/tracing-unwrap\n [`diesel`]: https://crates.io/crates/diesel\n [`diesel-tracing`]: https://crates.io/crates/diesel-tracing\n [`tracing-tracy`]: https://crates.io/crates/tracing-tracy\n [Tracy]: https://github.com/wolfpld/tracy\n [`tracing-elastic-apm`]: https://crates.io/crates/tracing-elastic-apm\n [Elastic APM]: https://www.elastic.co/apm\n [`tracing-etw`]: https://github.com/microsoft/rust_win_etw/tree/main/win_etw_tracing\n [ETW]: https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing\n [`tracing-fluent-assertions`]: https://crates.io/crates/tracing-fluent-assertions\n [`sentry-tracing`]: https://crates.io/crates/sentry-tracing\n [Sentry]: https://sentry.io/welcome/\n [`tracing-forest`]: https://crates.io/crates/tracing-forest\n [`tracing-loki`]: https://crates.io/crates/tracing-loki\n [Grafana Loki]: https://grafana.com/oss/loki/\n [`tracing-logfmt`]: https://crates.io/crates/tracing-logfmt\n [`reqwest-tracing`]: https://crates.io/crates/reqwest-tracing\n [`reqwest`]: https://crates.io/crates/reqwest\n [`tracing-cloudwatch`]: https://crates.io/crates/tracing-cloudwatch\n [`clippy-tracing`]: https://crates.io/crates/clippy-tracing\n [`json-subscriber`]: https://crates.io/crates/json-subscriber\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Some of these ecosystem crates are currently\n     unreleased and/or in earlier stages of development. They may be less stable\n     than <code>tracing</code> and <code>tracing-core</code>.\n </pre>\n\n ## Crate Feature Flags\n\n The following crate [feature flags] are available:\n\n * A set of features controlling the [static verbosity level].\n * `log`: causes trace instrumentation points to emit [`log`] records as well\n   as trace events, if a default `tracing` subscriber has not been set. This\n   is intended for use in libraries whose users may be using either `tracing`\n   or `log`.\n * `log-always`: Emit `log` records from all `tracing` spans and events, even\n   if a `tracing` subscriber has been set. This should be set only by\n   applications which intend to collect traces and logs separately; if an\n   adapter is used to convert `log` records into `tracing` events, this will\n   cause duplicate events to occur.\n * `attributes`: Includes support for the `#[instrument]` attribute.\n   This is on by default, but does bring in the `syn` crate as a dependency,\n   which may add to the compile time of crates that do not already use it.\n * `std`: Depend on the Rust standard library (enabled by default).\n\n   `no_std` users may disable this feature with `default-features = false`:\n\n   ```toml\n   [dependencies]\n   tracing = { version = \"0.1.38\", default-features = false }\n   ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: <code>tracing</code>'s <code>no_std</code> support\n     requires <code>liballoc</code>.\n </pre>\n\n ### Unstable Features\n\n These feature flags enable **unstable** features. The public API may break in 0.1.x\n releases. To enable these features, the `--cfg tracing_unstable` must be passed to\n `rustc` when compiling.\n\n The following unstable feature flags are currently available:\n\n * `valuable`: Enables support for recording [field values] using the\n   [`valuable`] crate.\n\n #### Enabling Unstable Features\n\n The easiest way to set the `tracing_unstable` cfg is to use the `RUSTFLAGS`\n env variable when running `cargo` commands:\n\n ```shell\n RUSTFLAGS=\"--cfg tracing_unstable\" cargo build\n ```\n Alternatively, the following can be added to the `.cargo/config` file in a\n project to automatically enable the cfg flag for that project:\n\n ```toml\n [build]\n rustflags = [\"--cfg\", \"tracing_unstable\"]\n ```\n\n [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n [field values]: crate::field\n [`valuable`]: https://crates.io/crates/valuable\n\n ## Supported Rust Versions\n\n Tracing is built against the latest stable release. The minimum supported\n version is 1.63. The current Tracing version is not guaranteed to build on\n Rust versions earlier than the minimum supported version.\n\n Tracing follows the same compiler support policies as the rest of the Tokio\n project. The current stable Rust compiler and the three most recent minor\n versions before it will always be supported. For example, if the current\n stable compiler version is 1.69, the minimum supported version will not be\n increased past 1.66, three minor versions prior. Increasing the minimum\n supported compiler version is not considered a semver breaking change as\n long as doing so complies with this policy.\n\n [`log`]: https://docs.rs/log/0.4.6/log/\n [span]: mod@span\n [spans]: mod@span\n [`Span`]: span::Span\n [`in_scope`]: span::Span::in_scope\n [event]: Event\n [events]: Event\n [`Subscriber`]: subscriber::Subscriber\n [Subscriber::event]: subscriber::Subscriber::event\n [`enter`]: subscriber::Subscriber::enter\n [`exit`]: subscriber::Subscriber::exit\n [`enabled`]: subscriber::Subscriber::enabled\n [metadata]: Metadata\n [`field::display`]: field::display\n [`field::debug`]: field::debug\n [`set_global_default`]: subscriber::set_global_default\n [`with_default`]: subscriber::with_default\n [`tokio-rs/tracing`]: https://github.com/tokio-rs/tracing\n [`tracing-futures`]: https://crates.io/crates/tracing-futures\n [`tracing-subscriber`]: https://crates.io/crates/tracing-subscriber\n [`tracing-log`]: https://crates.io/crates/tracing-log\n [`tracing-timing`]: https://crates.io/crates/tracing-timing\n [`tracing-appender`]: https://crates.io/crates/tracing-appender\n [`env_logger`]: https://crates.io/crates/env_logger\n [`FmtSubscriber`]: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/struct.Subscriber.html\n [static verbosity level]: level_filters#compile-time-filters\n [instrument]: https://docs.rs/tracing-attributes/latest/tracing_attributes/attr.instrument.html\n [flags]: #crate-feature-flags","links":{"subscriber::Subscriber::exit":201,"std::fmt#usage":373,"subscriber::set_global_default":327,"subscriber::Subscriber":17,"subscriber::Subscriber::enabled":208,"span::Span::in_scope":202,"trace_span!":316,"mod@span":34,"Metadata":20,"error!":369,"level_filters#compile-time-filters":182,"`Level`":313,"Event":35,"Metadata::target":315,"`Span::enter`":45,"crate::field":43,"std::fmt::Debug":41,"debug!":366,"span::Span":44,"trace!":365,"warn_span!":319,"`Event`":35,"field::Empty":215,"subscriber::Subscriber::event":370,"error_span!":320,"field::debug":374,"info!":367,"span::Attributes::is_contextual":376,"Span#in-asynchronous-code":44,"std::fmt::Display":372,"subscriber::with_default":326,"warn!":368,"span::Attributes::parent":371,"subscriber::Subscriber::enter":200,"span!":314,"info_span!":318,"event!":359,"field::display":375,"debug_span!":317},"attrs":[{"other":"#[<cfg_attr>(not(feature = \"std\"), no_std)]"},{"other":"#[<cfg_attr>(docsrs, feature(doc_cfg), deny(rustdoc::broken_intra_doc_links))]"},{"other":"#[doc(html_logo_url =\n\"https://raw.githubusercontent.com/tokio-rs/tracing/master/assets/logo-type.png\",\nissue_tracker_base_url = \"https://github.com/tokio-rs/tracing/issues/\")]"},{"other":"#[warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub, bad_style, dead_code, improper_ctypes,\nnon_shorthand_field_patterns, no_mangle_generic_items, overflowing_literals,\npath_statements, patterns_in_fns_without_body, private_interfaces,\nprivate_bounds, unconditional_recursion, unused, unused_allocation,\nunused_comparisons, unused_parens, while_true)]"}],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[18,43,177,182,34,332,347,348,349,350,351,352,354,355,356,357,359,314,316,317,318,319,320,362,361,360,365,366,367,368,369],"is_stripped":false}}},"81":{"id":81,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":82,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"232":{"id":232,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":90,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[88],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"106":{"id":106,"crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"path":"Infallible","id":107,"args":null}}}}},"257":{"id":257,"crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1451,5],"end":[1469,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"282":{"id":282,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1534,1],"end":[1548,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[281,206],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"5":{"id":5,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[134,1],"end":[134,48]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":6,"is_glob":false}}},"156":{"id":156,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":87,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[85],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"307":{"id":307,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1443,1],"end":[1447,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}}}}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}},"items":[306],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"30":{"id":30,"crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[161,1],"end":[166,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"AsField","id":23,"args":null},"for":{"primitive":"str"},"items":[29],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"332":{"id":332,"crate_id":0,"name":"subscriber","span":{"filename":"src/subscriber.rs","begin":[1,1],"end":[65,57]},"visibility":"public","docs":"Collects and records trace data.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[325,326,327,328,329,330],"is_stripped":false}}},"206":{"id":206,"crate_id":0,"name":"exit","span":{"filename":"src/span.rs","begin":[1542,5],"end":[1547,6]},"visibility":"public","docs":"Exits this span, returning the underlying [`Span`].","links":{"`Span`":44},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Span","id":44,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"357":{"id":357,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[972,1],"end":[972,40]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"attributes\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"attributes\")))]"},{"other":"#[doc(inline)]"}],"deprecation":null,"inner":{"use":{"source":"tracing_attributes::instrument","name":"instrument","id":203,"is_glob":false}}},"231":{"id":231,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":87,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[85],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"256":{"id":256,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1431,1],"end":[1435,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}},"items":[255],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"130":{"id":130,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[236,1],"end":[252,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"path":"$crate::__private::PinnedFieldsOf","id":131,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"__Origin","id":132,"args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"constraints":[]}}}}}],"constraints":[]}}}},"bounds":[{"trait_bound":{"trait":{"path":"$crate::__private::Unpin","id":133,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":133,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"281":{"id":281,"crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1536,5],"end":[1538,6]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"155":{"id":155,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"306":{"id":306,"crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1444,5],"end":[1446,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"29":{"id":29,"crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[163,5],"end":[165,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Field","id":22,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"180":{"id":180,"crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,57],"end":[53,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::LevelFilter","name":"LevelFilter","id":181,"is_glob":false}}},"54":{"id":54,"crate_id":0,"name":"Instrument","span":{"filename":"src/instrument.rs","begin":[20,1],"end":[131,2]},"visibility":"public","docs":"Attaches spans to a [`std::future::Future`].\n\nExtension trait allowing futures to be\ninstrumented with a `tracing` [span].\n\n[span]: super::Span","links":{"super::Span":44,"`std::future::Future`":46},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":false,"items":[51,53],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":55,"args":null},"generic_params":[],"modifier":"none"}}],"implementations":[56]}}},"205":{"id":205,"crate_id":0,"name":"EnteredSpan","span":{"filename":"src/span.rs","begin":[401,1],"end":[411,2]},"visibility":"public","docs":"An owned version of [`Entered`], a guard representing a span which has been\nentered and is currently executing.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::entered`] function.\n\n[`Span::entered`]: super::Span::entered()","links":{"`Entered`":204,"super::Span::entered()":207},"attrs":[{"must_use":{"reason":"once a span has been entered, it should be exited"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[],"where_predicates":[]},"impls":[282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,301,303,305,307,310,312]}}},"356":{"id":356,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[968,1],"end":[968,26]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[doc(inline)]"}],"deprecation":null,"inner":{"use":{"source":"self::span::Span","name":"Span","id":44,"is_glob":false}}},"79":{"id":79,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":80,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"230":{"id":230,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,1],"end":[393,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"path":"WithSubscriber","id":61,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"104":{"id":104,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":105,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[100,102],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"255":{"id":255,"crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1432,5],"end":[1434,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"resolved_path":{"path":"Span","id":44,"args":null}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"129":{"id":129,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,21],"end":[244,26]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::fmt::Debug","id":41,"args":null},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":41,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[126],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"3":{"id":3,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[131,1],"end":[131,48]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::with_default","name":"with_default","id":4,"is_glob":false}}},"154":{"id":154,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"305":{"id":305,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1437,1],"end":[1441,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}}}}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}}}],"constraints":[]}}}},"items":[304],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"28":{"id":28,"crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[150,1],"end":[159,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"AsField","id":23,"args":null},"for":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Field","id":22,"args":null}}}},"items":[27],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"330":{"id":330,"crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[2,1],"end":[2,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::subscriber","name":"subscriber","id":331,"is_glob":true}}},"53":{"id":53,"crate_id":0,"name":"in_current_span","span":{"filename":"src/instrument.rs","begin":[128,5],"end":[130,6]},"visibility":"default","docs":"Instruments this type with the [current] [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\nThis can be used to propagate the current span when spawning a new future.\n\n# Examples\n\n```rust\nuse tracing::Instrument;\n\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# async fn doc() {\nlet span = tracing::info_span!(\"my_span\");\nlet _enter = span.enter();\n\n// ...\n\nlet future = async {\n    tracing::debug!(\"this event will occur inside `my_span`\");\n    // ...\n};\ntokio::spawn(future.in_current_span());\n# }\n```\n\n[current]: super::Span::current()\n[entered]: super::Span::enter()\n[`Span`]: crate::Span\n[`Future`]: std::future::Future","links":{"super::Span::current()":49,"super::Span::enter()":45,"`Drop`":47,"std::future::Future":46,"crate::Span":44},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"204":{"id":204,"crate_id":0,"name":"Entered","span":{"filename":"src/span.rs","begin":[387,1],"end":[389,2]},"visibility":"public","docs":"A guard representing a span which has been entered and is currently\nexecuting.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::enter`] function.\n\n[`Span::enter`]: super::Span::enter","links":{"super::Span::enter":45},"attrs":[{"must_use":{"reason":"once a span has been entered, it should be exited"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":[260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,276,278]}}},"355":{"id":355,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,38],"end":[965,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Metadata","name":"Metadata","id":20,"is_glob":false}}},"229":{"id":229,"crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,1],"end":[325,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"path":"Instrument","id":54,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"254":{"id":254,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1425,1],"end":[1429,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}],"constraints":[]}}}},"items":[253],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"153":{"id":153,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":82,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"304":{"id":304,"crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1438,5],"end":[1440,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"27":{"id":27,"crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[152,5],"end":[158,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"Metadata","id":20,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"Field","id":22,"args":null}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"178":{"id":178,"crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,24],"end":[53,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::metadata::ParseLevelFilterError","name":"ParseLevelFilterError","id":179,"is_glob":false}}},"329":{"id":329,"crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[65,1],"end":[65,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":14,"is_glob":false}}},"52":{"id":52,"crate_id":0,"name":"Instrumented","span":{"filename":"src/instrument.rs","begin":[254,1],"end":[288,2]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Span`].\n\nThis type is returned by the [`Instrument`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Span`]: crate::Span","links":{"`Instrument`":54,"std::future::Future":46,"crate::Span":44},"attrs":[{"must_use":{"reason":"futures do nothing unless you `.await` or poll them"}}],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"has_stripped_fields":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"impls":[148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,169,170,173,176]}}},"354":{"id":354,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,31],"end":[965,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"tracing_core::Level","name":"Level","id":313,"is_glob":false}}},"77":{"id":77,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Freeze","id":78,"args":null},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":78,"args":null},"for":{"resolved_path":{"path":"WithDispatch","id":57,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"228":{"id":228,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":82,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"102":{"id":102,"crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":103,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":null,"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":101,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"253":{"id":253,"crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1426,5],"end":[1428,6]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}}]],"output":{"generic":"Self"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"278":{"id":278,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1559,1],"end":[1564,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Drop","id":47,"args":null},"for":{"resolved_path":{"path":"Entered","id":204,"args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"constraints":[]}}}},"items":[277],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"1":{"id":1,"crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[128,1],"end":[128,47]},"visibility":"public","docs":null,"links":{},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"}],"deprecation":null,"inner":{"use":{"source":"tracing_core::dispatcher::set_default","name":"set_default","id":2,"is_glob":false}}},"152":{"id":152,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":80,"args":null},"for":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"303":{"id":303,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[399,10],"end":[399,15]},"visibility":"default","docs":null,"links":{},"attrs":["automatically_derived"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":41,"args":null},"for":{"resolved_path":{"path":"EnteredSpan","id":205,"args":null}},"items":[302],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"26":{"id":26,"crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[139,1],"end":[148,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"AsField","id":23,"args":null},"for":{"resolved_path":{"path":"Field","id":22,"args":null}},"items":[25],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"177":{"id":177,"crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[1,1],"end":[429,2]},"visibility":"public","docs":"Attach a span to a `std::future::Future`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[54,61,57,52],"is_stripped":false}}},"328":{"id":328,"crate_id":0,"name":"set_default","span":{"filename":"src/subscriber.rs","begin":[58,1],"end":[63,2]},"visibility":"public","docs":"Sets the [`Subscriber`] as the default for the current thread for the\nduration of the lifetime of the returned [`DefaultGuard`].\n\nThe default subscriber is used when creating a new [`Span`] or [`Event`].\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event\n[`DefaultGuard`]: super::dispatcher::DefaultGuard","links":{"super::dispatcher::DefaultGuard":6,"super::subscriber::Subscriber":17,"super::event::Event":35,"super::span::Span":44},"attrs":[{"other":"#[<cfg>(feature = \"std\")]"},{"other":"#[<cfg_attr>(docsrs, doc(cfg(feature = \"std\")))]"},{"must_use":{"reason":"Dropping the guard unregisters the subscriber."}}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"path":"DefaultGuard","id":6,"args":null}},"is_c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"path":"Subscriber","id":17,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Send","id":74,"args":null},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sync","id":76,"args":null},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"51":{"id":51,"crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[86,5],"end":[91,6]},"visibility":"default","docs":"Instruments this type with the provided [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\n# Examples\n\nInstrumenting a future:\n\n```rust\nuse tracing::Instrument;\n\n# async fn doc() {\nlet my_future = async {\n    // ...\n};\n\nmy_future\n    .instrument(tracing::info_span!(\"my_future\"))\n    .await\n# }\n```\n\nThe [`Span::or_current`] combinator can be used in combination with\n`instrument` to ensure that the [current span] is attached to the\nfuture if the span passed to `instrument` is [disabled]:\n\n```\nuse tracing::Instrument;\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet my_future = async {\n    // ...\n};\n\nlet outer_span = tracing::info_span!(\"outer\").entered();\n\n// If the \"my_future\" span is enabled, then the spawned task will\n// be within both \"my_future\" *and* \"outer\", since \"outer\" is\n// \"my_future\"'s parent. However, if \"my_future\" is disabled,\n// the spawned task will *not* be in any span.\ntokio::spawn(\n    my_future\n        .instrument(tracing::debug_span!(\"my_future\"))\n);\n\n// Using `Span::or_current` ensures the spawned task is instrumented\n// with the current span, if the new span passed to `instrument` is\n// not enabled. This means that if the \"my_future\"  span is disabled,\n// the spawned task will still be instrumented with the \"outer\" span:\n# let my_future = async {};\ntokio::spawn(\n   my_future\n        .instrument(tracing::debug_span!(\"my_future\").or_current())\n);\n```\n\n[entered]: super::Span::enter()\n[`Span::or_current`]: super::Span::or_current()\n[current span]: super::Span::current()\n[disabled]: super::Span::is_disabled()\n[`Future`]: std::future::Future","links":{"super::Span::is_disabled()":50,"super::Span::current()":49,"super::Span::enter()":45,"`Drop`":47,"super::Span::or_current()":48,"std::future::Future":46,"`Span`":44},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}],["span",{"resolved_path":{"path":"Span","id":44,"args":null}}]],"output":{"resolved_path":{"path":"Instrumented","id":52,"args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"202":{"id":202,"crate_id":0,"name":"in_scope","span":{"filename":"src/span.rs","begin":[1100,5],"end":[1103,6]},"visibility":"public","docs":"Executes the given function in the context of this span.\n\nIf this span is enabled, then this function enters the span, invokes `f`\nand then exits the span. If the span is disabled, `f` will still be\ninvoked, but in the context of the currently-executing span (if there is\none).\n\nReturns the result of evaluating `f`.\n\n# Examples\n\n```\n# use tracing::{trace, span, Level};\nlet my_span = span!(Level::TRACE, \"my_span\");\n\nmy_span.in_scope(|| {\n    // this event occurs within the span.\n    trace!(\"i'm in the span!\");\n});\n\n// this event occurs outside the span.\ntrace!(\"i'm not in the span!\");\n```\n\nCalling a function and returning the result:\n```\n# use tracing::{info_span, Level};\nfn hello_world() -> String {\n    \"Hello world!\".to_owned()\n}\n\nlet span = info_span!(\"hello_world\");\n// the span will be entered for the duration of the call to\n// `hello_world`.\nlet a_string = span.in_scope(hello_world);\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"FnOnce","id":212,"args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"227":{"id":227,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":80,"args":null},"for":{"resolved_path":{"path":"Span","id":44,"args":null}},"items":[],"is_negative":true,"is_synthetic":true,"blanket_impl":null}}},"252":{"id":252,"crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1419,1],"end":[1423,2]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":95,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Span","id":44,"args":null}}}}}],"constraints":[]}}},"for":{"resolved_path":{"path":"Option","id":21,"args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","is_mutable":false,"type":{"resolved_path":{"path":"Id","id":186,"args":null}}}}}],"constraints":[]}}}},"items":[251],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"126":{"id":126,"crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[244,21],"end":[244,26]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Hint)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":127,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":128,"args":null}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"277":{"id":277,"crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1561,5],"end":[1563,6]},"visibility":"default","docs":null,"links":{},"attrs":[{"other":"#[attr = Inline(Always)]"}],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1762":{"crate_id":5,"path":["libc","unix","linux_like","linux","iwreq_data"],"kind":"union"},"2089":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"327":{"crate_id":0,"path":["tracing","subscriber","set_global_default"],"kind":"function"},"1208":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1535":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","can_frame"],"kind":"struct"},"654":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2416":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2743":{"crate_id":23,"path":["pin_project_lite"],"kind":"module"},"981":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1862":{"crate_id":10,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2189":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"427":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1308":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"754":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1635":{"crate_id":5,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2516":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1081":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1962":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1408":{"crate_id":3,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"527":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2289":{"crate_id":17,"path":["object","read","macho","dyld_cache","RelocationStateV3"],"kind":"enum"},"854":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1735":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_thrspy"],"kind":"struct"},"2616":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"300":{"crate_id":2,"path":["core","ops","deref","Receiver"],"kind":"trait"},"1181":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2062":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1508":{"crate_id":3,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"627":{"crate_id":1,"path":["std","sys","process","unix","common","Command"],"kind":"struct"},"2389":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"954":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1835":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","max_align_t"],"kind":"struct"},"2716":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2162":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"400":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1281":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1608":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_rollover_stats"],"kind":"struct"},"727":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2489":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1054":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1935":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2262":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"500":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1381":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1708":{"crate_id":5,"path":["libc","unix","linux_like","linux","epoll_params"],"kind":"struct"},"827":{"crate_id":3,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2589":{"crate_id":18,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"1154":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2035":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2362":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"600":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1481":{"crate_id":3,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"927":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"46":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1808":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2689":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"373":{"crate_id":3,"path":["alloc","fmt"],"kind":"module"},"1254":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2135":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2462":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"700":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1581":{"crate_id":5,"path":["libc","unix","linux_like","file_clone_range"],"kind":"struct"},"1027":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1908":{"crate_id":10,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"473":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1354":{"crate_id":2,"path":["core","ops","range","OneSidedRangeBound"],"kind":"enum"},"2235":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1681":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"800":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2562":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1127":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"246":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2008":{"crate_id":16,"path":["gimli","read","addr","AddrHeader"],"kind":"struct"},"2335":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"573":{"crate_id":1,"path":["std","sync","nonpoison","mutex","MappedMutexGuard"],"kind":"struct"},"1454":{"crate_id":3,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1781":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"900":{"crate_id":2,"path":["core","num","niche_types","Nanoseconds"],"kind":"struct"},"2662":{"crate_id":2,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"1227":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2108":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2435":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"673":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1554":{"crate_id":5,"path":["libc","unix","sigval"],"kind":"struct"},"1881":{"crate_id":10,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1000":{"crate_id":2,"path":["core","core_arch","simd","f16x4"],"kind":"struct"},"2762":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"446":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1327":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2208":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2535":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"773":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1654":{"crate_id":5,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1100":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1981":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"546":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1427":{"crate_id":3,"path":["alloc","slice","to_vec_in","to_vec","DropGuard"],"kind":"struct"},"2308":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2635":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"873":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"1754":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_req_u"],"kind":"union"},"1200":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"319":{"crate_id":0,"path":["tracing","warn_span"],"kind":"macro"},"2081":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"646":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1527":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","big","u256"],"kind":"struct"},"2408":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1854":{"crate_id":10,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"973":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2735":{"crate_id":14,"path":["cfg_if"],"kind":"module"},"1300":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"419":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2181":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2508":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"746":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1627":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1954":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"192":{"crate_id":20,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"1073":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1400":{"crate_id":3,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"519":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2281":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheMappingIterator"],"kind":"struct"},"2608":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"846":{"crate_id":3,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1727":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_desc"],"kind":"struct"},"2054":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1173":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"619":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpStream"],"kind":"struct"},"1500":{"crate_id":3,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2381":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2708":{"crate_id":1,"path":["std","io"],"kind":"module"},"946":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1827":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2154":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"392":{"crate_id":2,"path":["core","line"],"kind":"macro"},"1273":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"719":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1600":{"crate_id":5,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2481":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1046":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1927":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1373":{"crate_id":2,"path":["core","core_simd","swizzle","shift_elements_right","Shift"],"kind":"struct"},"492":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2254":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"819":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1700":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_missed"],"kind":"struct"},"2581":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2027":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1146":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1473":{"crate_id":3,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"592":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2354":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2681":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"919":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"38":{"crate_id":20,"path":["tracing_core","span","Record"],"kind":"struct"},"1800":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","mbstate_t"],"kind":"struct"},"2127":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"365":{"crate_id":0,"path":["tracing","trace"],"kind":"macro"},"1246":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1573":{"crate_id":5,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"692":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2454":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1019":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1900":{"crate_id":10,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2227":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"465":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1346":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"792":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1673":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_clock_time"],"kind":"struct"},"2554":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1119":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2000":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2327":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"565":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1446":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"892":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1773":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2654":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"1219":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2100":{"crate_id":16,"path":["gimli","read","macros","MacroIter"],"kind":"struct"},"1546":{"crate_id":5,"path":["libc","unix","rlimit"],"kind":"struct"},"665":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2427":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"992":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"111":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1873":{"crate_id":10,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2754":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2200":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"438":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1319":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"1646":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous__kernel_fsid_t"],"kind":"struct"},"765":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2527":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1092":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1973":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2300":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"538":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1419":{"crate_id":3,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1746":{"crate_id":5,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"865":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2627":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"1192":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2073":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2400":{"crate_id":17,"path":["object","elf","Relr64"],"kind":"struct"},"638":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1519":{"crate_id":3,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1846":{"crate_id":8,"path":["miniz_oxide","MZError"],"kind":"enum"},"965":{"crate_id":2,"path":["core","fmt","FormattingOptions"],"kind":"struct"},"2727":{"crate_id":6,"path":["rustc_std_workspace_core"],"kind":"module"},"411":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1292":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2173":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2500":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"738":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1619":{"crate_id":5,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1065":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1946":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"511":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1392":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2273":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1719":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_mmap_offsets"],"kind":"struct"},"838":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2600":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"1165":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2046":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2373":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"611":{"crate_id":1,"path":["std","sys","fs","unix","FileTimes"],"kind":"struct"},"1492":{"crate_id":3,"path":["alloc","boxed","convert","from","StringError"],"kind":"struct"},"1819":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"57":{"crate_id":0,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"938":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2700":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1265":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"384":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2146":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2473":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"711":{"crate_id":3,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1592":{"crate_id":5,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1919":{"crate_id":13,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1038":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"484":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1365":{"crate_id":2,"path":["core","sync","atomic","Sealed"],"kind":"trait"},"2246":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2573":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"811":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1692":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_sm4_ccm"],"kind":"struct"},"2019":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1138":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"584":{"crate_id":1,"path":["std","sync","poison","once","Once"],"kind":"struct"},"1465":{"crate_id":3,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2346":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2673":{"crate_id":21,"path":["once_cell","imp","Guard"],"kind":"struct"},"911":{"crate_id":2,"path":["core","num","niche_types","NonZeroCharInner"],"kind":"struct"},"1792":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1238":{"crate_id":2,"path":["core","clone","UseCloned"],"kind":"trait"},"2119":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"684":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1565":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2446":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1892":{"crate_id":10,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1011":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1338":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"457":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2219":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"784":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1665":{"crate_id":5,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2546":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1992":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1111":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1438":{"crate_id":3,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"557":{"crate_id":1,"path":["std","sync","mpmc","IntoIter"],"kind":"struct"},"2319":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2646":{"crate_id":20,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"884":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1765":{"crate_id":5,"path":["libc","unix","linux_like","linux","iwreq"],"kind":"struct"},"2092":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1211":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1538":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","sockaddr_can"],"kind":"struct"},"657":{"crate_id":1,"path":["std","sys","fs","unix","FileAttr"],"kind":"struct"},"2419":{"crate_id":17,"path":["object","macho","DyldCacheSlideInfo2"],"kind":"struct"},"2746":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"103":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"984":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1865":{"crate_id":10,"path":["hashbrown","map","Keys"],"kind":"struct"},"2192":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"430":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1311":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"757":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1638":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2519":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"203":{"crate_id":22,"path":["tracing_attributes","instrument"],"kind":"proc_attribute"},"1084":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1965":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1411":{"crate_id":3,"path":["alloc","collections","btree","node","drop_key_val","Dropper"],"kind":"struct"},"530":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2292":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheRelocationIteratorV5"],"kind":"struct"},"857":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1738":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rela"],"kind":"struct"},"2619":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"1184":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2065":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1511":{"crate_id":3,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"630":{"crate_id":1,"path":["std","sys","process","unix","unix","ExitStatus"],"kind":"struct"},"2392":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"957":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"76":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1838":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2719":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2165":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"403":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1284":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1611":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket3_hdr"],"kind":"struct"},"730":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2492":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1057":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1938":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2265":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"503":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1384":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1711":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"830":{"crate_id":1,"path":["std","sys","stdio","unix","Stdin"],"kind":"struct"},"2592":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1157":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2038":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2365":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"603":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1484":{"crate_id":3,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"930":{"crate_id":2,"path":["core","marker","variance","PhantomInvariantLifetime"],"kind":"struct"},"1811":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","timex"],"kind":"struct"},"2692":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"1257":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2138":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1584":{"crate_id":5,"path":["libc","unix","linux_like","statx"],"kind":"struct"},"703":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2465":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1030":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1911":{"crate_id":10,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"476":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1357":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2238":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1684":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"803":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2565":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1130":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2011":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2338":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"576":{"crate_id":1,"path":["std","sync","nonpoison","rwlock","RwLockWriteGuard"],"kind":"struct"},"1457":{"crate_id":3,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1784":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"22":{"crate_id":20,"path":["tracing_core","field","Field"],"kind":"struct"},"903":{"crate_id":2,"path":["core","num","niche_types","NonZeroU32Inner"],"kind":"struct"},"2665":{"crate_id":21,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"1230":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2111":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2438":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"676":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1557":{"crate_id":5,"path":["libc","unix","servent"],"kind":"struct"},"1884":{"crate_id":10,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1003":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2765":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"449":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1330":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2211":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2538":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"776":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1657":{"crate_id":5,"path":["libc","unix","linux_like","linux","fanotify_event_info_fid"],"kind":"struct"},"1103":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1984":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"549":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1430":{"crate_id":3,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2311":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2638":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"876":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1757":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1203":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2084":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"649":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1530":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","env","Status"],"kind":"struct"},"2411":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1857":{"crate_id":10,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"95":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"976":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2738":{"crate_id":17,"path":["object"],"kind":"module"},"1303":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"422":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2184":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2511":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"749":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1630":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1957":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1076":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1403":{"crate_id":3,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"522":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2284":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheSlideInfo"],"kind":"enum"},"2611":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"849":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1730":{"crate_id":5,"path":["libc","unix","linux_like","linux","mount_attr"],"kind":"struct"},"2057":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1176":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"622":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1503":{"crate_id":3,"path":["alloc","collections","btree","set","entry","VacantEntry"],"kind":"struct"},"2384":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2711":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"949":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1830":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1276":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"395":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"module"},"2157":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"722":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1603":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_hdr"],"kind":"struct"},"2484":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1049":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1930":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1376":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"495":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2257":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"822":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1703":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_pmksa"],"kind":"struct"},"2584":{"crate_id":18,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"2030":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1149":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1476":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"595":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2357":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2684":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"922":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"41":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1803":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","timespec"],"kind":"struct"},"2130":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"368":{"crate_id":0,"path":["tracing","warn"],"kind":"macro"},"1249":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1576":{"crate_id":5,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"695":{"crate_id":3,"path":["alloc","borrow","Cow"],"kind":"enum"},"2457":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1022":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1903":{"crate_id":10,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2230":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"468":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1349":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"795":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1676":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_sys_offset_precise"],"kind":"struct"},"2557":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1122":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2003":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2330":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"568":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1449":{"crate_id":3,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"895":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"14":{"crate_id":20,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"1776":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2657":{"crate_id":20,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"1222":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2103":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1549":{"crate_id":5,"path":["libc","unix","hostent"],"kind":"struct"},"668":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2430":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"995":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1876":{"crate_id":10,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2757":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2203":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"441":{"crate_id":1,"path":["std","collections","hash","set","OccupiedEntry"],"kind":"struct"},"1322":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"1649":{"crate_id":5,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"768":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2530":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1095":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1976":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2303":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"541":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1422":{"crate_id":3,"path":["alloc","collections","vec_deque","truncate_front","Dropper"],"kind":"struct"},"1749":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"868":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2630":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"314":{"crate_id":0,"path":["tracing","span"],"kind":"macro"},"1195":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2076":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2403":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"641":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1522":{"crate_id":3,"path":["alloc","sync","ArcInner"],"kind":"struct"},"968":{"crate_id":2,"path":["core","str","pattern","Utf8Pattern"],"kind":"enum"},"87":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1849":{"crate_id":9,"path":["adler2","Adler32"],"kind":"struct"},"2730":{"crate_id":9,"path":["adler2"],"kind":"module"},"414":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1295":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2176":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2503":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"741":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1622":{"crate_id":5,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1068":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1949":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"514":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1395":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2276":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1722":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_umem_reg"],"kind":"struct"},"841":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2603":{"crate_id":18,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"1168":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2049":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2376":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"614":{"crate_id":1,"path":["std","sys","fs","unix","ReadDir"],"kind":"struct"},"1495":{"crate_id":3,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1822":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"941":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2703":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1268":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"387":{"crate_id":20,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"2149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2476":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"714":{"crate_id":3,"path":["alloc","vec","Vec"],"kind":"struct"},"1595":{"crate_id":5,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1922":{"crate_id":13,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1041":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"487":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1368":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2249":{"crate_id":17,"path":["object","read","elf","relocation","CrelIteratorHeader"],"kind":"struct"},"2576":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"814":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1695":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_param"],"kind":"struct"},"2022":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1141":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"587":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockReadGuard"],"kind":"struct"},"1468":{"crate_id":3,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2349":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2676":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"33":{"crate_id":20,"path":["tracing_core","field","Value"],"kind":"trait"},"914":{"crate_id":2,"path":["core","num","niche_types","NonZeroIsizeInner"],"kind":"struct"},"1795":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1241":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"360":{"crate_id":0,"path":["tracing","enabled"],"kind":"macro"},"2122":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"687":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1568":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2449":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1895":{"crate_id":10,"path":["hashbrown","map","Entry"],"kind":"enum"},"133":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1014":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1341":{"crate_id":2,"path":["core","marker","variance","sealed","Sealed"],"kind":"trait"},"460":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2222":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2549":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"787":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1668":{"crate_id":5,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1995":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1114":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1441":{"crate_id":3,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"560":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2322":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2649":{"crate_id":20,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"6":{"crate_id":20,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"887":{"crate_id":2,"path":["core","num","dec2flt","decimal_seq","DecimalSeq"],"kind":"struct"},"1768":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_perout_request"],"kind":"struct"},"2095":{"crate_id":16,"path":["gimli","read","macros","DebugMacinfo"],"kind":"struct"},"1214":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"660":{"crate_id":1,"path":["std","sys","process","unix","common","cstring_array","CStringIter"],"kind":"struct"},"1541":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2422":{"crate_id":17,"path":["object","macho","DyldCacheSlideInfo5"],"kind":"struct"},"2749":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"987":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1868":{"crate_id":10,"path":["hashbrown","set","Iter"],"kind":"struct"},"2195":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"433":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1314":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"760":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1641":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2522":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1087":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1968":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1414":{"crate_id":3,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"533":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2295":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"860":{"crate_id":1,"path":["std","sys","net","connection","socket","unix","Socket"],"kind":"struct"},"1741":{"crate_id":5,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2622":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2068":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1187":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1514":{"crate_id":3,"path":["alloc","task","LocalWake"],"kind":"trait"},"633":{"crate_id":1,"path":["std","sys","process","env","CommandEnvs"],"kind":"struct"},"2395":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"960":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1841":{"crate_id":8,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2722":{"crate_id":20,"path":["tracing_core","callsite","rebuild_interest_cache"],"kind":"function"},"2168":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"406":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1287":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1614":{"crate_id":5,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"733":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2495":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"179":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"1060":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1941":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2268":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"506":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1387":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1714":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_sys_offset"],"kind":"struct"},"833":{"crate_id":1,"path":["std","sys","stdio","unix","Stdout"],"kind":"struct"},"2595":{"crate_id":18,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"1160":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2041":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2368":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"606":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1487":{"crate_id":3,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"933":{"crate_id":2,"path":["core","marker","variance","PhantomInvariant"],"kind":"struct"},"52":{"crate_id":0,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"1814":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2695":{"crate_id":2,"path":["core","str","converts","from_utf8_unchecked"],"kind":"function"},"379":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1260":{"crate_id":2,"path":["core","pin","unsafe_pinned","UnsafePinned"],"kind":"struct"},"2141":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1587":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"706":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2468":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1033":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"1914":{"crate_id":13,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"479":{"crate_id":1,"path":["std","io","pipe","PipeReader"],"kind":"struct"},"1360":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1687":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"806":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2568":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1133":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2014":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2341":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"579":{"crate_id":1,"path":["std","sync","poison","condvar","WaitTimeoutResult"],"kind":"struct"},"1460":{"crate_id":3,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1787":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"906":{"crate_id":2,"path":["core","num","niche_types","NonZeroI8Inner"],"kind":"struct"},"2668":{"crate_id":21,"path":["once_cell","sync","Lazy"],"kind":"struct"},"1233":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"2114":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2441":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"679":{"crate_id":1,"path":["std","sys","fs","unix","Dir"],"kind":"struct"},"1560":{"crate_id":5,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1887":{"crate_id":10,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1006":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2768":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"452":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1333":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2214":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2541":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"779":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1660":{"crate_id":5,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1106":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1987":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"552":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1433":{"crate_id":3,"path":["alloc","sync","UniqueArc"],"kind":"struct"},"2314":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1760":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"879":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2641":{"crate_id":18,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"1206":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2087":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"652":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1533":{"crate_id":4,"path":["compiler_builtins","math","libm_math","generic","fma","Norm"],"kind":"struct"},"2414":{"crate_id":17,"path":["object","macho","PtrauthKey"],"kind":"enum"},"1860":{"crate_id":10,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"979":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2741":{"crate_id":21,"path":["once_cell"],"kind":"module"},"1306":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"425":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2187":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2514":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"752":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1633":{"crate_id":5,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1960":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1079":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1406":{"crate_id":3,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"525":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2287":{"crate_id":17,"path":["object","read","macho","dyld_cache","RelocationStateV2"],"kind":"enum"},"2614":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"852":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1733":{"crate_id":5,"path":["libc","unix","linux_like","linux","dmabuf_cmsg"],"kind":"struct"},"2060":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1179":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"625":{"crate_id":1,"path":["std","sys","process","unix","common","Stdio"],"kind":"enum"},"1506":{"crate_id":3,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2387":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2714":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"952":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"enum"},"1833":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1279":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"398":{"crate_id":2,"path":["core","marker","UnsafeUnpin"],"kind":"trait"},"2160":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"725":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1606":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_req"],"kind":"struct"},"2487":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1052":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1933":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1379":{"crate_id":2,"path":["core","core_simd","swizzle","extract","Extract"],"kind":"struct"},"498":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2260":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"825":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1706":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_range"],"kind":"struct"},"2587":{"crate_id":18,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"2033":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1152":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1479":{"crate_id":3,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"598":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2360":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2687":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"44":{"crate_id":0,"path":["tracing","span","Span"],"kind":"struct"},"925":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1806":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2133":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1252":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1579":{"crate_id":5,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"698":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2460":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1025":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1906":{"crate_id":10,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2233":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"471":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1352":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"798":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1679":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2560":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"244":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1125":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2006":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1452":{"crate_id":3,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"571":{"crate_id":1,"path":["std","sync","nonpoison","mutex","Mutex"],"kind":"struct"},"2333":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"898":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber"],"kind":"trait"},"1779":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2660":{"crate_id":20,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"1225":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2106":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1552":{"crate_id":5,"path":["libc","unix","winsize"],"kind":"struct"},"671":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2433":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"998":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"117":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1879":{"crate_id":10,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2760":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2206":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"444":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1325":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1652":{"crate_id":5,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"771":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2533":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1098":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1979":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2306":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"544":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1425":{"crate_id":3,"path":["alloc","rc","Weak"],"kind":"struct"},"1752":{"crate_id":5,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"871":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2633":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"317":{"crate_id":0,"path":["tracing","debug_span"],"kind":"macro"},"1198":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2079":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2406":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"644":{"crate_id":1,"path":["std","thread","spawnhook","SpawnHooks"],"kind":"struct"},"1525":{"crate_id":4,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"971":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"90":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1852":{"crate_id":10,"path":["hashbrown","control","tag","Tag"],"kind":"struct"},"2733":{"crate_id":12,"path":["std_detect"],"kind":"module"},"417":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1298":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2179":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2506":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"744":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1625":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1071":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1952":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"517":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1398":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2279":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1725":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_statistics_v1"],"kind":"struct"},"844":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2606":{"crate_id":18,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"1171":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2052":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2379":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"617":{"crate_id":1,"path":["std","sys","fs","unix","File"],"kind":"struct"},"1498":{"crate_id":3,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1825":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"944":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2706":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1271":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"390":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2152":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2479":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"717":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1598":{"crate_id":5,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1925":{"crate_id":15,"path":["addr2line","unit","SupUnits"],"kind":"struct"},"1044":{"crate_id":2,"path":["core","array","iter","iter_inner","PolymorphicIter"],"kind":"struct"},"490":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1371":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2252":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2579":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"817":{"crate_id":2,"path":["core","slice","GetDisjointMutError"],"kind":"enum"},"1698":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_quality"],"kind":"struct"},"1144":{"crate_id":2,"path":["core","escape","AlwaysEscaped"],"kind":"struct"},"2025":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"590":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1471":{"crate_id":3,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"2352":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2679":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"36":{"crate_id":20,"path":["tracing_core","span","Attributes"],"kind":"struct"},"917":{"crate_id":2,"path":["core","num","niche_types","U64NotAllOnes"],"kind":"struct"},"1798":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_error"],"kind":"struct"},"1244":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2125":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"690":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1571":{"crate_id":5,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2452":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1898":{"crate_id":10,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"136":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1017":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1344":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"463":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2225":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2552":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"790":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1671":{"crate_id":5,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1998":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1117":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1444":{"crate_id":3,"path":["alloc","alloc","Global"],"kind":"struct"},"563":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2325":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2652":{"crate_id":20,"path":["tracing_core","field","HexBytes"],"kind":"struct"},"890":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1771":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2098":{"crate_id":16,"path":["gimli","read","macros","MacroString"],"kind":"enum"},"1217":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"663":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1544":{"crate_id":5,"path":["libc","unix","utimbuf"],"kind":"struct"},"2425":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2752":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"990":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1871":{"crate_id":10,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2198":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"436":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1317":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"763":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1644":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rel"],"kind":"struct"},"2525":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1090":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1971":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"209":{"crate_id":1,"path":["std","task"],"kind":"module"},"1417":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"536":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2298":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"863":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1744":{"crate_id":5,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2625":{"crate_id":18,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"2071":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1190":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1517":{"crate_id":3,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"636":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2398":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2725":{"crate_id":4,"path":["compiler_builtins"],"kind":"module"},"963":{"crate_id":2,"path":["core","fmt","Sign"],"kind":"enum"},"82":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1844":{"crate_id":8,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2171":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"409":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1290":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1617":{"crate_id":5,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"736":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2498":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"182":{"crate_id":0,"path":["tracing","level_filters"],"kind":"module"},"1063":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1944":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2271":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"509":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1390":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"836":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1717":{"crate_id":5,"path":["libc","unix","linux_like","linux","sockaddr_xdp"],"kind":"struct"},"2598":{"crate_id":18,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"1163":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2044":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2371":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"609":{"crate_id":1,"path":["std","sys","env","common","Env"],"kind":"struct"},"1490":{"crate_id":3,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"936":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"55":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1817":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2698":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"382":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1263":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2144":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1590":{"crate_id":5,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"709":{"crate_id":3,"path":["alloc","sync","Arc"],"kind":"struct"},"2471":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1036":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1917":{"crate_id":13,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2244":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"482":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1363":{"crate_id":2,"path":["core","random","Distribution"],"kind":"trait"},"1690":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"809":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2571":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1136":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2017":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2344":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"582":{"crate_id":1,"path":["std","sync","poison","mutex","MutexGuard"],"kind":"struct"},"1463":{"crate_id":3,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1790":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"909":{"crate_id":2,"path":["core","num","niche_types","NonZeroI64Inner"],"kind":"struct"},"2671":{"crate_id":21,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1236":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2117":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2444":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"682":{"crate_id":1,"path":["std","sys","process","unix","unix","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1563":{"crate_id":5,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1890":{"crate_id":10,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1009":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"128":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"455":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1336":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2217":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2544":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"782":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1663":{"crate_id":5,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1109":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1990":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"555":{"crate_id":1,"path":["std","sync","mpmc","Iter"],"kind":"struct"},"1436":{"crate_id":3,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2317":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1763":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_event"],"kind":"struct"},"882":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2644":{"crate_id":20,"path":["tracing_core","dispatcher","Kind"],"kind":"enum"},"1209":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"328":{"crate_id":0,"path":["tracing","subscriber","set_default"],"kind":"function"},"2090":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2417":{"crate_id":17,"path":["object","macho","DyldCacheMappingAndSlideInfo"],"kind":"struct"},"655":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1536":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","canfd_frame"],"kind":"struct"},"1863":{"crate_id":10,"path":["hashbrown","map","HashMap"],"kind":"struct"},"101":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"982":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2744":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1309":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"428":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2190":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2517":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"755":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1636":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1963":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1082":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"528":{"crate_id":1,"path":["std","path","NormalizeError"],"kind":"struct"},"1409":{"crate_id":3,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheRelocationIteratorV3"],"kind":"struct"},"2617":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"855":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1736":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_mlme"],"kind":"struct"},"2063":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1182":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"628":{"crate_id":1,"path":["std","sys","process","unix","common","ExitCode"],"kind":"struct"},"1509":{"crate_id":3,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2390":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2717":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"74":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"955":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1836":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1282":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"401":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2163":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"728":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1609":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_stats"],"kind":"struct"},"2490":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1936":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1055":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1382":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"501":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2263":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"828":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1709":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2590":{"crate_id":18,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"2036":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1155":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1482":{"crate_id":3,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"601":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2363":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2690":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"47":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"928":{"crate_id":2,"path":["core","marker","variance","PhantomCovariantLifetime"],"kind":"struct"},"1809":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2136":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1255":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"374":{"crate_id":20,"path":["tracing_core","field","debug"],"kind":"function"},"1582":{"crate_id":5,"path":["libc","unix","linux_like","sock_filter"],"kind":"struct"},"701":{"crate_id":1,"path":["std","panicking","panic_handler","FormatStringPayload"],"kind":"struct"},"2463":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1028":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1909":{"crate_id":10,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2236":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"474":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1355":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"801":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1682":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2563":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1128":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2009":{"crate_id":16,"path":["gimli","read","addr","AddrEntryIter"],"kind":"struct"},"1455":{"crate_id":3,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"574":{"crate_id":1,"path":["std","sync","nonpoison","rwlock","RwLock"],"kind":"struct"},"2336":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"901":{"crate_id":2,"path":["core","num","niche_types","NonZeroU8Inner"],"kind":"struct"},"20":{"crate_id":20,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"1782":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2663":{"crate_id":20,"path":["tracing_core","sealed","Sealed"],"kind":"trait"},"1228":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2109":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1555":{"crate_id":5,"path":["libc","unix","itimerval"],"kind":"struct"},"674":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2436":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1001":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"1882":{"crate_id":10,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2763":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2209":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"447":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1328":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1655":{"crate_id":5,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"774":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2536":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1101":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1982":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2309":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"547":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1428":{"crate_id":3,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1755":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_bd_header_u"],"kind":"union"},"874":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2636":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"320":{"crate_id":0,"path":["tracing","error_span"],"kind":"macro"},"1201":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2082":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2409":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"647":{"crate_id":3,"path":["alloc","boxed","Box"],"kind":"struct"},"1528":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","big","i256"],"kind":"struct"},"974":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"93":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1855":{"crate_id":10,"path":["hashbrown","control","bitmask","BitMaskIter"],"kind":"struct"},"2736":{"crate_id":15,"path":["addr2line"],"kind":"module"},"420":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1301":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2182":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1628":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"747":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2509":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1074":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1955":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"520":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1401":{"crate_id":3,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheMappingVersionIterator"],"kind":"enum"},"1728":{"crate_id":5,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_completion"],"kind":"struct"},"847":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2609":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"1174":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2055":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2382":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"620":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpListener"],"kind":"struct"},"1501":{"crate_id":3,"path":["alloc","collections","btree","set","entry","Entry"],"kind":"enum"},"1828":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"947":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2709":{"crate_id":1,"path":["std","env"],"kind":"module"},"1274":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"393":{"crate_id":20,"path":["tracing_core","callsite","DefaultCallsite"],"kind":"struct"},"2155":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2482":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"720":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1601":{"crate_id":5,"path":["libc","unix","linux_like","linux","sockaddr_pkt"],"kind":"struct"},"1928":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1047":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"493":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1374":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2255":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2582":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheMappingVersion"],"kind":"enum"},"820":{"crate_id":3,"path":["alloc","slice","Concat"],"kind":"trait"},"1701":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_scan_req"],"kind":"struct"},"1147":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2028":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"593":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1474":{"crate_id":3,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2355":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2682":{"crate_id":1,"path":["std","path","absolute"],"kind":"function"},"920":{"crate_id":2,"path":["core","intrinsics","AtomicOrdering"],"kind":"enum"},"1801":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","fpos64_t"],"kind":"struct"},"1247":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"366":{"crate_id":0,"path":["tracing","debug"],"kind":"macro"},"2128":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"693":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1574":{"crate_id":5,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2455":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1901":{"crate_id":10,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1020":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1347":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"466":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2228":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2555":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"793":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1674":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_extts_request"],"kind":"struct"},"2001":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1120":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1447":{"crate_id":3,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"566":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2328":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2655":{"crate_id":20,"path":["tracing_core","parent","Parent"],"kind":"enum"},"12":{"crate_id":20,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"893":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1774":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2101":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1220":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"666":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1547":{"crate_id":5,"path":["libc","unix","rusage"],"kind":"struct"},"2428":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2755":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"993":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1874":{"crate_id":10,"path":["hashbrown","table","Iter"],"kind":"struct"},"1320":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"439":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2201":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"766":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1647":{"crate_id":5,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2528":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"212":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1093":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1974":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1420":{"crate_id":3,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"539":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2301":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"866":{"crate_id":1,"path":["std","os","unix","process","ChildExt"],"kind":"trait"},"1747":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2628":{"crate_id":18,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"2074":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1193":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1520":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"639":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2401":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2728":{"crate_id":7,"path":["unwind"],"kind":"module"},"966":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1847":{"crate_id":8,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2174":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"412":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1293":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1620":{"crate_id":5,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"739":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2501":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1066":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1947":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2274":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"512":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1393":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"839":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1720":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_ring_offset_v1"],"kind":"struct"},"2601":{"crate_id":18,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1166":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2047":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2374":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"612":{"crate_id":1,"path":["std","sys","fs","unix","FileType"],"kind":"struct"},"1493":{"crate_id":3,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"939":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1820":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2701":{"crate_id":2,"path":["core","iter"],"kind":"module"},"385":{"crate_id":1,"path":["std"],"kind":"module"},"1266":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2147":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1593":{"crate_id":5,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"712":{"crate_id":3,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2474":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1039":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1920":{"crate_id":13,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2247":{"crate_id":17,"path":["object","read","elf","relocation","RelrIterator"],"kind":"struct"},"485":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1366":{"crate_id":2,"path":["core","slice","private_get_disjoint_mut_index","Sealed"],"kind":"trait"},"1693":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aria_gcm_128"],"kind":"struct"},"812":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2574":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1139":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2020":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2347":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"585":{"crate_id":1,"path":["std","sync","poison","once","OnceState"],"kind":"struct"},"1466":{"crate_id":3,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1793":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"912":{"crate_id":2,"path":["core","num","niche_types","UsizeNoHighBit"],"kind":"struct"},"2674":{"crate_id":23,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"358":{"crate_id":0,"path":["tracing"],"kind":"module"},"1239":{"crate_id":2,"path":["core","mem","drop_guard","DropGuard"],"kind":"struct"},"2120":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2447":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"685":{"crate_id":1,"path":["std","sys","sync","once_box","OnceBox"],"kind":"struct"},"1566":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1012":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1893":{"crate_id":10,"path":["hashbrown","table","Drain"],"kind":"struct"},"131":{"crate_id":23,"path":["pin_project_lite","__private","PinnedFieldsOf"],"kind":"type_alias"},"458":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1339":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2220":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2547":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"785":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1666":{"crate_id":5,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1112":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1993":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"558":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1439":{"crate_id":3,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2320":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1766":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_1"],"kind":"union"},"4":{"crate_id":20,"path":["tracing_core","dispatcher","with_default"],"kind":"function"},"885":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2647":{"crate_id":20,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"1212":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"331":{"crate_id":20,"path":["tracing_core","subscriber"],"kind":"module"},"2093":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2420":{"crate_id":17,"path":["object","macho","DyldCacheSlideInfo3"],"kind":"struct"},"658":{"crate_id":1,"path":["std","sys","fs","unix","StatxExtraFields"],"kind":"struct"},"1539":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1866":{"crate_id":10,"path":["hashbrown","map","Values"],"kind":"struct"},"985":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2747":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1312":{"crate_id":2,"path":["core","intrinsics","fallback","CarryingMulAdd"],"kind":"trait"},"431":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2193":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2520":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"758":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1639":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1966":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"204":{"crate_id":0,"path":["tracing","span","Entered"],"kind":"struct"},"1085":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"531":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1412":{"crate_id":3,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2293":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldRelocation"],"kind":"struct"},"2620":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"858":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1739":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rela"],"kind":"struct"},"2066":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1185":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"631":{"crate_id":1,"path":["std","sys","process","unix","unix","ExitStatusError"],"kind":"struct"},"1512":{"crate_id":3,"path":["alloc","vec","peek_mut","PeekMut"],"kind":"struct"},"2393":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2720":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"958":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1839":{"crate_id":8,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1285":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"404":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2166":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"731":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1612":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_bd_ts"],"kind":"struct"},"2493":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1939":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"177":{"crate_id":0,"path":["tracing","instrument"],"kind":"module"},"1058":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1385":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"504":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2266":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2593":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"831":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1712":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2039":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1158":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1485":{"crate_id":3,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"604":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2366":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2693":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"931":{"crate_id":2,"path":["core","marker","variance","PhantomCovariant"],"kind":"struct"},"1812":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2139":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"377":{"crate_id":2,"path":["core","marker","MetaSized"],"kind":"trait"},"1258":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"704":{"crate_id":1,"path":["std","panicking","resume_unwind","RewrapBox"],"kind":"struct"},"1585":{"crate_id":5,"path":["libc","unix","linux_like","statx_timestamp"],"kind":"struct"},"2466":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1031":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1912":{"crate_id":12,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2239":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"477":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1358":{"crate_id":2,"path":["core","ffi","va_list","sealed","Sealed"],"kind":"trait"},"804":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1685":{"crate_id":5,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2566":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1131":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2012":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1458":{"crate_id":3,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"577":{"crate_id":1,"path":["std","sync","nonpoison","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2339":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"904":{"crate_id":2,"path":["core","num","niche_types","NonZeroU64Inner"],"kind":"struct"},"23":{"crate_id":0,"path":["tracing","field","AsField"],"kind":"trait"},"1785":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2666":{"crate_id":21,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"2112":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1231":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"1558":{"crate_id":5,"path":["libc","unix","protoent"],"kind":"struct"},"677":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","thread_info","UnlockOnDrop"],"kind":"struct"},"2439":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1004":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"123":{"crate_id":3,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1885":{"crate_id":10,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2766":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2212":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"450":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1331":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"1658":{"crate_id":5,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"777":{"crate_id":1,"path":["std","io","default_write_fmt","Adapter"],"kind":"struct"},"2539":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1104":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1985":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2312":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"550":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1431":{"crate_id":3,"path":["alloc","sync","Weak"],"kind":"struct"},"1758":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"877":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2639":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1204":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2085":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2412":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"650":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","lru","Lru"],"kind":"struct"},"1531":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","feature_detect","Flags"],"kind":"struct"},"977":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1858":{"crate_id":10,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2739":{"crate_id":18,"path":["memchr"],"kind":"module"},"423":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1304":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2185":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1631":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"750":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2512":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1077":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1958":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"523":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1404":{"crate_id":3,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheRelocationIterator"],"kind":"struct"},"1731":{"crate_id":5,"path":["libc","unix","linux_like","linux","mnt_ns_info"],"kind":"struct"},"850":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2612":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"1177":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2058":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2385":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"623":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1504":{"crate_id":3,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1831":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"69":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"950":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2712":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"396":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"macro"},"1277":{"crate_id":2,"path":["core","fmt","num_buffer","NumBuffer"],"kind":"struct"},"2158":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2485":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"723":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1604":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_hdr_variant1"],"kind":"struct"},"1931":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1050":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"496":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1377":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2258":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2585":{"crate_id":18,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"823":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1704":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_pmkid_cand"],"kind":"struct"},"1150":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2031":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"596":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1477":{"crate_id":3,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2358":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1804":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"923":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2685":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1250":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"369":{"crate_id":0,"path":["tracing","error"],"kind":"macro"},"2131":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"696":{"crate_id":3,"path":["alloc","string","String"],"kind":"struct"},"1577":{"crate_id":5,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2458":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1904":{"crate_id":10,"path":["hashbrown","set","Entry"],"kind":"enum"},"1023":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1350":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"469":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2231":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2558":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"796":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1677":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_extts_event"],"kind":"struct"},"2004":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1123":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1450":{"crate_id":3,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"569":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2331":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2658":{"crate_id":20,"path":["tracing_core","callsite","private","Private"],"kind":"struct"},"896":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1777":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2104":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1223":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"669":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1550":{"crate_id":5,"path":["libc","unix","iovec"],"kind":"struct"},"2431":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2758":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"996":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1877":{"crate_id":10,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1323":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"442":{"crate_id":1,"path":["std","collections","hash","set","VacantEntry"],"kind":"struct"},"2204":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"769":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1650":{"crate_id":5,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2531":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1096":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1977":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"215":{"crate_id":20,"path":["tracing_core","field","Empty"],"kind":"struct"},"1423":{"crate_id":3,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"542":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2304":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"869":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1750":{"crate_id":5,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2631":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"2077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1196":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1523":{"crate_id":3,"path":["alloc","string","ToString"],"kind":"trait"},"642":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2404":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2731":{"crate_id":10,"path":["hashbrown"],"kind":"module"},"969":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1850":{"crate_id":10,"path":["hashbrown","control","bitmask","BitMask"],"kind":"struct"},"2177":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"415":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1296":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1623":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"742":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2504":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1069":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1950":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2277":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldFile"],"kind":"struct"},"515":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1396":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"842":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1723":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_umem_reg_v1"],"kind":"struct"},"2604":{"crate_id":18,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"1169":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2050":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1496":{"crate_id":3,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"615":{"crate_id":1,"path":["std","sys","fs","unix","OpenOptions"],"kind":"struct"},"2377":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"942":{"crate_id":2,"path":["core","bstr","ByteStr"],"kind":"struct"},"61":{"crate_id":0,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"1823":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2704":{"crate_id":2,"path":["core","write"],"kind":"macro"},"388":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"1269":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2150":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1596":{"crate_id":5,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"715":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2477":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1042":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1923":{"crate_id":15,"path":["addr2line","line","LineLocationRangeIter"],"kind":"struct"},"2250":{"crate_id":17,"path":["object","read","elf","relocation","CrelIteratorState"],"kind":"struct"},"488":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1369":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1696":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_point"],"kind":"struct"},"815":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2577":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1142":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2023":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2350":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"588":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockWriteGuard"],"kind":"struct"},"1469":{"crate_id":3,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1796":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","tcp_info"],"kind":"struct"},"34":{"crate_id":0,"path":["tracing","span"],"kind":"module"},"915":{"crate_id":2,"path":["core","num","niche_types","U32NotAllOnes"],"kind":"struct"},"2677":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"361":{"crate_id":0,"path":["tracing","span_enabled"],"kind":"macro"},"1242":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2123":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2450":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"688":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1569":{"crate_id":5,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1015":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1896":{"crate_id":10,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"461":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1342":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2223":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2550":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"788":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1669":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1115":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1996":{"crate_id":16,"path":["gimli","constants","DwMacinfo"],"kind":"struct"},"561":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1442":{"crate_id":3,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2323":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1769":{"crate_id":5,"path":["libc","unix","linux_like","linux","xsk_tx_metadata"],"kind":"struct"},"888":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2650":{"crate_id":20,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"1215":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2096":{"crate_id":16,"path":["gimli","read","macros","DebugMacro"],"kind":"struct"},"2423":{"crate_id":17,"path":["object","macho","DyldCacheSlidePointer5"],"kind":"struct"},"661":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1542":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","can_filter"],"kind":"struct"},"1869":{"crate_id":10,"path":["hashbrown","set","Intersection"],"kind":"struct"},"107":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"988":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2750":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1315":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"434":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2196":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2523":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"761":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1642":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1969":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1088":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"534":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1415":{"crate_id":3,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2296":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2623":{"crate_id":18,"path":["memchr","memchr","Memchr"],"kind":"struct"},"861":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1742":{"crate_id":5,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1188":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2069":{"crate_id":16,"path":["gimli","read","index","IndexSectionId"],"kind":"enum"},"634":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1515":{"crate_id":3,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2396":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2723":{"crate_id":2,"path":["core"],"kind":"module"},"80":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"961":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1842":{"crate_id":8,"path":["miniz_oxide","inflate","output_buffer","InputWrapper"],"kind":"struct"},"1288":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"407":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2169":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"734":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1615":{"crate_id":5,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2496":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1942":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1061":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1388":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"507":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2269":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2596":{"crate_id":18,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"834":{"crate_id":1,"path":["std","sys","stdio","unix","Stderr"],"kind":"struct"},"1715":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_pin_desc"],"kind":"struct"},"2042":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1161":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1488":{"crate_id":3,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"607":{"crate_id":1,"path":["std","sys","args","common","Args"],"kind":"struct"},"2369":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2696":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"934":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1815":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2142":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"380":{"crate_id":23,"path":["pin_project_lite","pin_project"],"kind":"macro"},"1261":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"707":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1588":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2469":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1034":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1915":{"crate_id":13,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"480":{"crate_id":1,"path":["std","io","pipe","PipeWriter"],"kind":"struct"},"1361":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"807":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1688":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2569":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1134":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2015":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1461":{"crate_id":3,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"580":{"crate_id":1,"path":["std","sync","poison","condvar","Condvar"],"kind":"struct"},"2342":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"907":{"crate_id":2,"path":["core","num","niche_types","NonZeroI16Inner"],"kind":"struct"},"1788":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2669":{"crate_id":21,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2115":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"353":{"crate_id":20,"path":["tracing_core","event"],"kind":"module"},"1234":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1561":{"crate_id":5,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"680":{"crate_id":1,"path":["std","sys","net","connection","socket","LookupHost"],"kind":"struct"},"2442":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2769":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1007":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1888":{"crate_id":10,"path":["hashbrown","set","Drain"],"kind":"struct"},"2215":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"453":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1334":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1661":{"crate_id":5,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"780":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2542":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1107":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1988":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2315":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"553":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1434":{"crate_id":3,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"880":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1761":{"crate_id":5,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2642":{"crate_id":18,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"326":{"crate_id":0,"path":["tracing","subscriber","with_default"],"kind":"function"},"1207":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2088":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2415":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"653":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1534":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","j1939","j1939_filter"],"kind":"struct"},"980":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1861":{"crate_id":10,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2742":{"crate_id":22,"path":["tracing_attributes"],"kind":"module"},"426":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1307":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2188":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1634":{"crate_id":5,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"753":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2515":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1080":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1961":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheRelocationIteratorV2"],"kind":"struct"},"526":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1407":{"crate_id":3,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1734":{"crate_id":5,"path":["libc","unix","linux_like","linux","dmabuf_token"],"kind":"struct"},"853":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2615":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"1180":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"299":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2061":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2388":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"626":{"crate_id":1,"path":["std","sys","process","unix","common","ProgramKind"],"kind":"enum"},"1507":{"crate_id":3,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"1834":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"953":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2715":{"crate_id":2,"path":["core","intrinsics","disjoint_bitor"],"kind":"function"},"399":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1280":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2161":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2488":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"726":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1607":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_req3"],"kind":"struct"},"1934":{"crate_id":16,"path":["gimli","common","DebugAddrOffset"],"kind":"struct"},"1053":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"499":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1380":{"crate_id":2,"path":["core","core_simd","vector","splat","splat_rt","Splat"],"kind":"struct"},"2261":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2588":{"crate_id":18,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"826":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1707":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_priv_args"],"kind":"struct"},"1153":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2034":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"599":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1480":{"crate_id":3,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2361":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1807":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"926":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2688":{"crate_id":3,"path":["alloc","alloc","alloc"],"kind":"function"},"1253":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"372":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2134":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2461":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"699":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1580":{"crate_id":5,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1907":{"crate_id":10,"path":["hashbrown","table","Entry"],"kind":"enum"},"1026":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1353":{"crate_id":2,"path":["core","ops","range","IntoBounds"],"kind":"trait"},"472":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2234":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2561":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"799":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1680":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2007":{"crate_id":16,"path":["gimli","read","addr","AddrHeaderIter"],"kind":"struct"},"1126":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"572":{"crate_id":1,"path":["std","sync","nonpoison","mutex","MutexGuard"],"kind":"struct"},"1453":{"crate_id":3,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2334":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2661":{"crate_id":2,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"18":{"crate_id":0,"path":["tracing","dispatcher"],"kind":"module"},"899":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1780":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2107":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1226":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"672":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1553":{"crate_id":5,"path":["libc","unix","linger"],"kind":"struct"},"2434":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2761":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"999":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1880":{"crate_id":10,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1326":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"445":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2207":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"772":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1653":{"crate_id":5,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2534":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1980":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1099":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1426":{"crate_id":3,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"545":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2307":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"872":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1753":{"crate_id":5,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2634":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"2080":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"318":{"crate_id":0,"path":["tracing","info_span"],"kind":"macro"},"1199":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1526":{"crate_id":4,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"645":{"crate_id":1,"path":["std","thread","spawnhook","ChildSpawnHooks"],"kind":"struct"},"2407":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2734":{"crate_id":13,"path":["rustc_demangle"],"kind":"module"},"972":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1853":{"crate_id":10,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2180":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"418":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1299":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1626":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"745":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2507":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1072":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1953":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheMappingSlice"],"kind":"enum"},"518":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1399":{"crate_id":3,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"845":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1726":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_options"],"kind":"struct"},"2607":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"1172":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2053":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1499":{"crate_id":3,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"618":{"crate_id":1,"path":["std","sys","fs","unix","Mode"],"kind":"struct"},"2380":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"945":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1826":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2707":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"391":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1272":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2153":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1599":{"crate_id":5,"path":["libc","unix","linux_like","linux","fanout_args"],"kind":"struct"},"718":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2480":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1045":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1926":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2253":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"491":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1372":{"crate_id":2,"path":["core","core_simd","swizzle","shift_elements_left","Shift"],"kind":"struct"},"1699":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_discarded"],"kind":"struct"},"818":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2580":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1145":{"crate_id":2,"path":["core","escape","MaybeEscaped"],"kind":"struct"},"2026":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2353":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"591":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1472":{"crate_id":3,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1799":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","sem_t"],"kind":"struct"},"918":{"crate_id":2,"path":["core","num","niche_types","I64NotAllOnes"],"kind":"struct"},"2680":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1245":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2126":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2453":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"691":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1572":{"crate_id":5,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1018":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"137":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1899":{"crate_id":10,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"464":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1345":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2226":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1672":{"crate_id":5,"path":["libc","unix","linux_like","linux","open_how"],"kind":"struct"},"791":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2553":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1118":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1999":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"564":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1445":{"crate_id":3,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2326":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1772":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"10":{"crate_id":20,"path":["tracing_core","dispatcher","set_global_default"],"kind":"function"},"891":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2653":{"crate_id":20,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"1218":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2099":{"crate_id":16,"path":["gimli","read","macros","MacroEntry"],"kind":"enum"},"2426":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"664":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1545":{"crate_id":5,"path":["libc","unix","timeval"],"kind":"struct"},"1872":{"crate_id":10,"path":["hashbrown","set","Union"],"kind":"struct"},"991":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2753":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1318":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"437":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2199":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2526":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"764":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1645":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rel"],"kind":"struct"},"1972":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1091":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"537":{"crate_id":1,"path":["std","process","CommandEnvs"],"kind":"struct"},"1418":{"crate_id":3,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2299":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2626":{"crate_id":18,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"864":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1745":{"crate_id":5,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1191":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2072":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"637":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1518":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2399":{"crate_id":17,"path":["object","elf","Relr32"],"kind":"struct"},"2726":{"crate_id":5,"path":["libc"],"kind":"module"},"964":{"crate_id":2,"path":["core","fmt","DebugAsHex"],"kind":"enum"},"1845":{"crate_id":8,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1291":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"410":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2172":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"737":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1618":{"crate_id":5,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2499":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1945":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"183":{"crate_id":0,"path":["tracing","level_filters","STATIC_MAX_LEVEL"],"kind":"constant"},"1064":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1391":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"510":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2272":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2599":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"837":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1718":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_ring_offset"],"kind":"struct"},"2045":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1164":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1491":{"crate_id":3,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"610":{"crate_id":1,"path":["std","sys","fd","unix","FileDesc"],"kind":"struct"},"2372":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2699":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"937":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1818":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2145":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"383":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1264":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"710":{"crate_id":3,"path":["alloc","rc","Rc"],"kind":"struct"},"1591":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_versions"],"kind":"enum"},"2472":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1037":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1918":{"crate_id":13,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1364":{"crate_id":2,"path":["core","sync","atomic","AtomicPrimitive"],"kind":"trait"},"483":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2245":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"810":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1691":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_sm4_gcm"],"kind":"struct"},"2572":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1137":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2018":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1464":{"crate_id":3,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"583":{"crate_id":1,"path":["std","sync","poison","mutex","MappedMutexGuard"],"kind":"struct"},"2345":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"910":{"crate_id":2,"path":["core","num","niche_types","NonZeroI128Inner"],"kind":"struct"},"1791":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2672":{"crate_id":21,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"2118":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1237":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"1564":{"crate_id":5,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"683":{"crate_id":1,"path":["std","sys","process","unix","unix","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2445":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1010":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1891":{"crate_id":10,"path":["hashbrown","table","IterHashMut"],"kind":"struct"},"2218":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"456":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1337":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1664":{"crate_id":5,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"783":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2545":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1110":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1991":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2318":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"556":{"crate_id":1,"path":["std","sync","mpmc","TryIter"],"kind":"struct"},"1437":{"crate_id":3,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"883":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2":{"crate_id":20,"path":["tracing_core","dispatcher","set_default"],"kind":"function"},"1764":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_iwreq"],"kind":"union"},"2645":{"crate_id":20,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"1210":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2091":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2418":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"656":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1537":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","canxl_frame"],"kind":"struct"},"983":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1864":{"crate_id":10,"path":["hashbrown","map","Iter"],"kind":"struct"},"2745":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"429":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1310":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2191":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1637":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"756":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2518":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1083":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1964":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2291":{"crate_id":17,"path":["object","read","macho","dyld_cache","RelocationStateV5"],"kind":"enum"},"529":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1410":{"crate_id":3,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1737":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_michaelmicfailure"],"kind":"struct"},"856":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2618":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1183":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2064":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2391":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"629":{"crate_id":1,"path":["std","sys","process","unix","common","CommandArgs"],"kind":"struct"},"1510":{"crate_id":3,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1837":{"crate_id":5,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"956":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2718":{"crate_id":2,"path":["core","ptr","without_provenance"],"kind":"function"},"402":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1283":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2164":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2491":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"729":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1610":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_stats_v3"],"kind":"struct"},"1056":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1937":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"502":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1383":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2264":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2591":{"crate_id":18,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"829":{"crate_id":1,"path":["std","sys","fs","unix","cfm","CachedFileMetadata"],"kind":"struct"},"1710":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1156":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2037":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"602":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1483":{"crate_id":3,"path":["alloc","string","IntoChars"],"kind":"struct"},"2364":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1810":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"929":{"crate_id":2,"path":["core","marker","variance","PhantomContravariantLifetime"],"kind":"struct"},"2691":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"1256":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2137":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"375":{"crate_id":20,"path":["tracing_core","field","display"],"kind":"function"},"2464":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"702":{"crate_id":1,"path":["std","panicking","panic_handler","StaticStrPayload"],"kind":"struct"},"1583":{"crate_id":5,"path":["libc","unix","linux_like","sock_fprog"],"kind":"struct"},"1910":{"crate_id":10,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1029":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1356":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"475":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2237":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2564":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"802":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1683":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2010":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"248":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1129":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"575":{"crate_id":1,"path":["std","sync","nonpoison","rwlock","RwLockReadGuard"],"kind":"struct"},"1456":{"crate_id":3,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2337":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2664":{"crate_id":21,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"21":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"902":{"crate_id":2,"path":["core","num","niche_types","NonZeroU16Inner"],"kind":"struct"},"1783":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2110":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1229":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"675":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"1556":{"crate_id":5,"path":["libc","unix","tms"],"kind":"struct"},"2437":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2764":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1002":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1883":{"crate_id":10,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1329":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"448":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2210":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"775":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1656":{"crate_id":5,"path":["libc","unix","linux_like","linux","fanotify_event_info_header"],"kind":"struct"},"2537":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1983":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1102":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1429":{"crate_id":3,"path":["alloc","string","Drain"],"kind":"struct"},"548":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2310":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2637":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"875":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1756":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_block_desc"],"kind":"struct"},"2083":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1202":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1529":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","env","Round"],"kind":"enum"},"648":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2410":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2737":{"crate_id":16,"path":["gimli"],"kind":"module"},"94":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"975":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1856":{"crate_id":10,"path":["hashbrown","raw","ProbeSeq"],"kind":"struct"},"2183":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"421":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1302":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"748":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1629":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2510":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1075":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1956":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2283":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheMapping"],"kind":"struct"},"521":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1402":{"crate_id":3,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"848":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1729":{"crate_id":5,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_request"],"kind":"struct"},"2610":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"1175":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2056":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1502":{"crate_id":3,"path":["alloc","collections","btree","set","entry","OccupiedEntry"],"kind":"struct"},"621":{"crate_id":1,"path":["std","sys","net","connection","socket","UdpSocket"],"kind":"struct"},"2383":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"948":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1829":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2710":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2156":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"394":{"crate_id":20,"path":["tracing_core","callsite"],"kind":"module"},"1275":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"1602":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_auxdata"],"kind":"struct"},"721":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2483":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1048":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1929":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2256":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"494":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1375":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1702":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_encode_ext"],"kind":"struct"},"821":{"crate_id":3,"path":["alloc","slice","Join"],"kind":"trait"},"2583":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelocationIterator"],"kind":"enum"},"1148":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2029":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2356":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"594":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1475":{"crate_id":3,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1802":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","fpos_t"],"kind":"struct"},"921":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"40":{"crate_id":20,"path":["tracing_core","field","Visit"],"kind":"trait"},"2683":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"367":{"crate_id":0,"path":["tracing","info"],"kind":"macro"},"1248":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2129":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2456":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"694":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1575":{"crate_id":5,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1021":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1902":{"crate_id":10,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"467":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1348":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2229":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1675":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_sys_offset_extended"],"kind":"struct"},"794":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2556":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1121":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2002":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2329":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"567":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1448":{"crate_id":3,"path":["alloc","bstr","ByteString"],"kind":"struct"},"1775":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"894":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2656":{"crate_id":20,"path":["tracing_core","span","Current"],"kind":"struct"},"1221":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2102":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2429":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"667":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1548":{"crate_id":5,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1875":{"crate_id":10,"path":["hashbrown","table","IterHash"],"kind":"struct"},"113":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"994":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2756":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"440":{"crate_id":1,"path":["std","collections","hash","set","Entry"],"kind":"enum"},"1321":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2202":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2529":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"767":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1648":{"crate_id":5,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1975":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1094":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"540":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1421":{"crate_id":3,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2302":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2629":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"867":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1748":{"crate_id":5,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1194":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"313":{"crate_id":20,"path":["tracing_core","metadata","Level"],"kind":"struct"},"2075":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"640":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1521":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2402":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1848":{"crate_id":9,"path":["adler2","algo","U32X4"],"kind":"struct"},"967":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2729":{"crate_id":8,"path":["miniz_oxide"],"kind":"module"},"1294":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"413":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2175":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"740":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1621":{"crate_id":5,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2502":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1948":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"186":{"crate_id":20,"path":["tracing_core","span","Id"],"kind":"struct"},"1067":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatNInner"],"kind":"struct"},"1394":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"513":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2275":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2602":{"crate_id":18,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"840":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1721":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_mmap_offsets_v1"],"kind":"struct"},"2048":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1167":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1494":{"crate_id":3,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"613":{"crate_id":1,"path":["std","sys","fs","unix","FilePermissions"],"kind":"struct"},"2375":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2702":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"59":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"940":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1821":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2148":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"386":{"crate_id":20,"path":["tracing_core","callsite","Callsite"],"kind":"trait"},"1267":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"713":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1594":{"crate_id":5,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2475":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1040":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1921":{"crate_id":13,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1367":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"486":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2248":{"crate_id":17,"path":["object","read","elf","relocation","Crel"],"kind":"struct"},"813":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1694":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aria_gcm_256"],"kind":"struct"},"2575":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1140":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2021":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1467":{"crate_id":3,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"586":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLock"],"kind":"struct"},"2348":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"913":{"crate_id":2,"path":["core","num","niche_types","NonZeroUsizeInner"],"kind":"struct"},"32":{"crate_id":20,"path":["tracing_core","field"],"kind":"module"},"1794":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","ptrace_sud_config"],"kind":"struct"},"2675":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2121":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"359":{"crate_id":0,"path":["tracing","event"],"kind":"macro"},"1240":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1567":{"crate_id":5,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"686":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2448":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1013":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1894":{"crate_id":10,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2221":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"459":{"crate_id":1,"path":["std","fs","TryLockError"],"kind":"enum"},"1340":{"crate_id":2,"path":["core","marker","variance","Variance"],"kind":"trait"},"1667":{"crate_id":5,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"786":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2548":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1113":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1994":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2321":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"559":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1440":{"crate_id":3,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"886":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1767":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_2"],"kind":"union"},"2648":{"crate_id":20,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"332":{"crate_id":0,"path":["tracing","subscriber"],"kind":"module"},"1213":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2094":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1540":{"crate_id":5,"path":["libc","new","linux_uapi","linux","can","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"659":{"crate_id":1,"path":["std","sys","io","io_slice","iovec","IoSlice"],"kind":"struct"},"2421":{"crate_id":17,"path":["object","macho","DyldCacheSlidePointer3"],"kind":"struct"},"986":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"105":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1867":{"crate_id":10,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2748":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"432":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1313":{"crate_id":2,"path":["core","intrinsics","fallback","DisjointBitOr"],"kind":"trait"},"2194":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1640":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"759":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2521":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1086":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"205":{"crate_id":0,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"1967":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2294":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldRelocationAuth"],"kind":"struct"},"532":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1413":{"crate_id":3,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1740":{"crate_id":5,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"859":{"crate_id":3,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2621":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1186":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2067":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2394":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"632":{"crate_id":1,"path":["std","sys","process","env","CommandEnv"],"kind":"struct"},"1513":{"crate_id":3,"path":["alloc","task","Wake"],"kind":"trait"},"1840":{"crate_id":8,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"78":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"959":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2721":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"405":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1286":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2167":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2494":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"732":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1613":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket_hdr_v1"],"kind":"struct"},"1059":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1940":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"505":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1386":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2267":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2594":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"832":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1713":{"crate_id":5,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1159":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2040":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"605":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1486":{"crate_id":3,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2367":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1813":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"932":{"crate_id":2,"path":["core","marker","variance","PhantomContravariant"],"kind":"struct"},"2694":{"crate_id":2,"path":["core","ffi","primitives","c_char"],"kind":"type_alias"},"1259":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"378":{"crate_id":20,"path":["tracing_core","dispatcher","has_been_set"],"kind":"function"},"2140":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2467":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"705":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1586":{"crate_id":5,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1913":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1032":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1359":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"478":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2240":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2567":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"805":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1686":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2013":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1132":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"578":{"crate_id":1,"path":["std","sync","nonpoison","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1459":{"crate_id":3,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2340":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2667":{"crate_id":21,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"24":{"crate_id":0,"path":["tracing","sealed","Sealed"],"kind":"trait"},"905":{"crate_id":2,"path":["core","num","niche_types","NonZeroU128Inner"],"kind":"struct"},"1786":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1232":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2113":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"678":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1559":{"crate_id":5,"path":["libc","unix","in6_addr"],"kind":"struct"},"2440":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2767":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1005":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1886":{"crate_id":10,"path":["hashbrown","map","Drain"],"kind":"struct"},"1332":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"451":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2213":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"778":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1659":{"crate_id":5,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2540":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1986":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1105":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1432":{"crate_id":3,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"551":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2313":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2640":{"crate_id":18,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"878":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1759":{"crate_id":5,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2086":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1205":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1532":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","hex_float","HexFloatParseError"],"kind":"struct"},"651":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2413":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2740":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"978":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1859":{"crate_id":10,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2186":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"424":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1305":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"751":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1632":{"crate_id":5,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2513":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1078":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1959":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2286":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheRelocationIteratorVersion"],"kind":"enum"},"524":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1405":{"crate_id":3,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"851":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1732":{"crate_id":5,"path":["libc","unix","linux_like","linux","pidfd_info"],"kind":"struct"},"2613":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1178":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2059":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1505":{"crate_id":3,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"624":{"crate_id":1,"path":["std","sys","process","unix","common","cstring_array","CStringArray"],"kind":"struct"},"2386":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"951":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1832":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","clone_args"],"kind":"struct"},"2713":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2159":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"397":{"crate_id":20,"path":["tracing_core"],"kind":"module"},"1278":{"crate_id":2,"path":["core","fmt","num_buffer","NumBufferTrait"],"kind":"trait"},"1605":{"crate_id":5,"path":["libc","unix","linux_like","linux","tpacket2_hdr"],"kind":"struct"},"724":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2486":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1051":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1932":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2259":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"497":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1378":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1705":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_statistics"],"kind":"struct"},"824":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2586":{"crate_id":18,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1151":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2032":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2359":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"597":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1478":{"crate_id":3,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"924":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"43":{"crate_id":0,"path":["tracing","field"],"kind":"module"},"1805":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2686":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1251":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2132":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"370":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","event"],"kind":"function"},"2459":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"697":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1578":{"crate_id":5,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1024":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1905":{"crate_id":10,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"470":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1351":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2232":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1678":{"crate_id":5,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"797":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2559":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1124":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2005":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2332":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"570":{"crate_id":1,"path":["std","sync","nonpoison","WouldBlock"],"kind":"struct"},"1451":{"crate_id":3,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1778":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16":{"crate_id":20,"path":["tracing_core","dispatcher","WeakDispatch"],"kind":"struct"},"897":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2659":{"crate_id":20,"path":["tracing_core","field","fmt","NullCallsite"],"kind":"struct"},"1224":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2105":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2432":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"670":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1551":{"crate_id":5,"path":["libc","unix","pollfd"],"kind":"struct"},"1878":{"crate_id":10,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"997":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2759":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"443":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1324":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2205":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2532":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"770":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1651":{"crate_id":5,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1978":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1097":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"543":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"1424":{"crate_id":3,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2632":{"crate_id":18,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"870":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1751":{"crate_id":5,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1197":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"316":{"crate_id":0,"path":["tracing","trace_span"],"kind":"macro"},"2078":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"643":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1524":{"crate_id":4,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2405":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1851":{"crate_id":10,"path":["hashbrown","control","group","sse2","Group"],"kind":"struct"},"970":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2732":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1297":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"416":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2178":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2505":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"743":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1624":{"crate_id":5,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1951":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"189":{"crate_id":0,"path":["tracing","span","AsId"],"kind":"trait"},"1070":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1397":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"516":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2278":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2605":{"crate_id":18,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"843":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1724":{"crate_id":5,"path":["libc","unix","linux_like","linux","xdp_statistics"],"kind":"struct"},"2051":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1170":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"616":{"crate_id":1,"path":["std","sys","fs","unix","DirBuilder"],"kind":"struct"},"1497":{"crate_id":3,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2378":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2705":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"943":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1824":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2151":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"389":{"crate_id":2,"path":["core","file"],"kind":"macro"},"1270":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"716":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1597":{"crate_id":5,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2478":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1043":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1924":{"crate_id":15,"path":["addr2line","unit","LocationRangeIter"],"kind":"struct"},"1370":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"489":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2251":{"crate_id":17,"path":["object","read","elf","relocation","CrelIterator"],"kind":"struct"},"816":{"crate_id":2,"path":["core","slice","GetDisjointMutIndex"],"kind":"trait"},"1697":{"crate_id":5,"path":["libc","unix","linux_like","linux","iw_freq"],"kind":"struct"},"2578":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2024":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1143":{"crate_id":2,"path":["core","escape","MaybeEscapedCharacter"],"kind":"union"},"1470":{"crate_id":3,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"589":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2351":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"916":{"crate_id":2,"path":["core","num","niche_types","I32NotAllOnes"],"kind":"struct"},"35":{"crate_id":20,"path":["tracing_core","event","Event"],"kind":"struct"},"1797":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_pidfd"],"kind":"struct"},"2678":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2124":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"362":{"crate_id":0,"path":["tracing","event_enabled"],"kind":"macro"},"1243":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1570":{"crate_id":5,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"689":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2451":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1016":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"1897":{"crate_id":10,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2224":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"462":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1343":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1670":{"crate_id":5,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"789":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2551":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1116":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1997":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2324":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"562":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1443":{"crate_id":3,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"889":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"8":{"crate_id":20,"path":["tracing_core","dispatcher","get_default"],"kind":"function"},"1770":{"crate_id":5,"path":["libc","unix","linux_like","linux","__c_anonymous_xsk_tx_metadata_union"],"kind":"union"},"2651":{"crate_id":20,"path":["tracing_core","field","Iter"],"kind":"struct"},"1216":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2097":{"crate_id":16,"path":["gimli","read","macros","MacroUnitHeader"],"kind":"struct"},"1543":{"crate_id":5,"path":["libc","unix","group"],"kind":"struct"},"662":{"crate_id":1,"path":["std","sys","thread_local","native","lazy","State"],"kind":"enum"},"2424":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"989":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1870":{"crate_id":10,"path":["hashbrown","set","Difference"],"kind":"struct"},"2751":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"435":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1316":{"crate_id":2,"path":["core","ffi","va_list","VaArgSafe"],"kind":"trait"},"2197":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1643":{"crate_id":5,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"762":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2524":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1089":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1970":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"208":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","enabled"],"kind":"function"},"2297":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"535":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1416":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1743":{"crate_id":5,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"862":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2624":{"crate_id":18,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"1189":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2070":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2397":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"635":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1516":{"crate_id":3,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1843":{"crate_id":8,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"962":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2724":{"crate_id":3,"path":["alloc"],"kind":"module"},"408":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1289":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2170":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2497":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"735":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1616":{"crate_id":5,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1062":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"181":{"crate_id":20,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"1943":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"508":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1389":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2270":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1716":{"crate_id":5,"path":["libc","unix","linux_like","linux","ptp_clock_caps"],"kind":"struct"},"835":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2597":{"crate_id":18,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"1162":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2043":{"crate_id":16,"path":["gimli","read","dwarf","UnitRef"],"kind":"struct"},"608":{"crate_id":1,"path":["std","sys","env","common","EnvStrDebug"],"kind":"struct"},"1489":{"crate_id":3,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2370":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1816":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"54":{"crate_id":0,"path":["tracing","instrument","Instrument"],"kind":"trait"},"935":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2697":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1262":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"381":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"2143":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2470":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"708":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1589":{"crate_id":5,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1916":{"crate_id":13,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1035":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"1362":{"crate_id":2,"path":["core","pat","RangePattern"],"kind":"trait"},"481":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2570":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"808":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1689":{"crate_id":5,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_ccm_128"],"kind":"struct"},"2016":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1135":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"581":{"crate_id":1,"path":["std","sync","poison","mutex","Mutex"],"kind":"struct"},"1462":{"crate_id":3,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2343":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2670":{"crate_id":21,"path":["once_cell","race","OnceBool"],"kind":"struct"},"908":{"crate_id":2,"path":["core","num","niche_types","NonZeroI32Inner"],"kind":"struct"},"1789":{"crate_id":5,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1235":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"2116":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"681":{"crate_id":1,"path":["std","sys","process","unix","unix","do_exec","Reset"],"kind":"struct"},"1562":{"crate_id":5,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2443":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2770":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"127":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1008":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1889":{"crate_id":10,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1335":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"454":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2216":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"781":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1662":{"crate_id":5,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2543":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1989":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1108":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1435":{"crate_id":3,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"554":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2316":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2643":{"crate_id":20,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"881":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"}},"external_crates":{"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tracing_attributes","html_root_url":null},"3":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"adler2","html_root_url":"https://docs.rs/adler2/2.0.0/"},"20":{"name":"tracing_core","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"pin_project_lite","html_root_url":null},"4":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"once_cell","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"target":{"triple":"x86_64-unknown-linux-gnu","target_features":[{"name":"adx","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"aes","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"amx-avx512","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-bf16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-complex","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-int8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-movrs","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tf32","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tile","implies_features":[],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-transpose","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"apxf","implies_features":[],"unstable_feature_gate":"apx_target_feature","globally_enabled":false},{"name":"avx","implies_features":["sse4.2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx2","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx10.1","implies_features":["avx512bf16","avx512bitalg","avx512bw","avx512cd","avx512dq","avx512f","avx512fp16","avx512ifma","avx512vbmi","avx512vbmi2","avx512vl","avx512vnni","avx512vpopcntdq"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx10.2","implies_features":["avx10.1"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx512bf16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bitalg","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bw","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512cd","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512dq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512f","implies_features":["avx2","fma","f16c"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512fp16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512ifma","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi2","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vl","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vnni","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vp2intersect","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vpopcntdq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxifma","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxneconvert","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnni","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint8","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint16","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi1","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi2","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"cmpxchg16b","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"ermsb","implies_features":[],"unstable_feature_gate":"ermsb_target_feature","globally_enabled":false},{"name":"f16c","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fma","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fxsr","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"gfni","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"kl","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"lahfsahf","implies_features":[],"unstable_feature_gate":"lahfsahf_target_feature","globally_enabled":false},{"name":"lzcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movbe","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movrs","implies_features":[],"unstable_feature_gate":"movrs_target_feature","globally_enabled":false},{"name":"pclmulqdq","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"popcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"prfchw","implies_features":[],"unstable_feature_gate":"prfchw_target_feature","globally_enabled":false},{"name":"rdrand","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rdseed","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rtm","implies_features":[],"unstable_feature_gate":"rtm_target_feature","globally_enabled":false},{"name":"sha","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sha512","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sm3","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sm4","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"soft-float","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":false},{"name":"sse","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse2","implies_features":["sse"],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse3","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.1","implies_features":["ssse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.2","implies_features":["sse4.1"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4a","implies_features":["sse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"ssse3","implies_features":["sse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"tbm","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"vaes","implies_features":["avx2","aes"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"vpclmulqdq","implies_features":["avx","pclmulqdq"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"widekl","implies_features":["kl"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"x87","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":true},{"name":"xop","implies_features":["avx","sse4a"],"unstable_feature_gate":"xop_target_feature","globally_enabled":false},{"name":"xsave","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsavec","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaveopt","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaves","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false}]},"format_version":55}