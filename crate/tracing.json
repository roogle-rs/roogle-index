{"root":"0:0:3043","crate_version":"0.1.40","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[422,0],"end":[1373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:1187","0:167:4041","0:170:3172","0:173:3012","0:174:1226","0:175:3325","0:178:3681","0:179:4208","0:180:4261","0:183:4288","0:186:795","0:189:4295","0:191:3040","0:194:3175","0:195:4262","0:196:4336","0:197:4371","0:198:3999","0:199:2985","0:200:3649"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13298:28366":{"id":"2:13298:28366","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:9084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:3703":{"id":"0:134:3703","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[426,4],"end":[428,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:4663-0:381:4014":{"id":"a:2:32444:4663-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:191:3040":{"id":"0:191:3040","crate_id":0,"name":"record","span":{"filename":"src/span.rs","begin":[1194,4],"end":[1210,5]},"visibility":"public","docs":"Records that the field described by `field` has the value `value`.\n\nThis may be used with [`field::Empty`] to declare fields whose values\nare not known when the span is created, and record them later:\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, record a value for parting as well.\n// (note that the field name is passed as a string slice)\nspan.record(\"parting\", \"goodbye world!\");\n```\nHowever, it may also be used to record a _new_ value for a field whose\nvalue was already recorded:\n```\nuse tracing::info_span;\n# fn do_something() -> Result<(), ()> { Err(()) }\n\n// Initially, let's assume that our attempt to do something is going okay...\nlet span = info_span!(\"doing_something\", is_okay = true);\nlet _e = span.enter();\n\nmatch do_something() {\n    Ok(something) => {\n        // ...\n    }\n    Err(_) => {\n        // Things are no longer okay!\n        span.record(\"is_okay\", false);\n    }\n}\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The fields associated with a span are part\n    of its <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>.\n    The <a href=\"../struct.Metadata.html\"><code>Metadata</code></a>\n    describing a particular span is constructed statically when the span\n    is created and cannot be extended later to add new fields. Therefore,\n    you cannot record a value for a field that was not specified when the\n    span was created:\n</pre>\n\n```\nuse tracing::{trace_span, field};\n\n// Create a span with two fields: `greeting`, with the value \"hello world\", and\n// `parting`, without a value.\nlet span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n// ...\n\n// Now, you try to record a value for a new field, `new_field`, which was not\n// declared as `Empty` or populated when you created `span`.\n// You won't get any error, but the assignment will have no effect!\nspan.record(\"new_field\", \"interesting_value_you_really_need\");\n\n// Instead, all fields that may be recorded after span creation should be declared up front,\n// using field::Empty when a value is not known, as we did for `parting`.\n// This `record` call will indeed replace field::Empty with \"you will be remembered\".\nspan.record(\"parting\", \"you will be remembered\");\n```\n\n[`field::Empty`]: super::field::Empty\n[`Metadata`]: super::Metadata","links":{"super::field::Empty":"20:842:4615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"field::Value","id":"20:288:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:4295":{"id":"0:189:4295","crate_id":0,"name":"has_field","span":{"filename":"src/span.rs","begin":[1117,4],"end":[1122,5]},"visibility":"public","docs":"Returns true if this `Span` has a field for the given\n[`Field`][super::field::Field] or field name.","links":{"super::field::Field":"20:837:3024"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:610":{"id":"0:34:610","crate_id":0,"name":"debug","span":{"filename":"src/macros.rs","begin":[1580,0],"end":[1831,1]},"visibility":"public","docs":"Constructs an event at the debug level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::debug;\n# fn main() {\n# #[derive(Debug)] struct Position { x: f32, y: f32 }\n\nlet pos = Position { x: 3.234, y: -1.223 };\n\ndebug!(?pos.x, ?pos.y);\ndebug!(target: \"app_events\", position = ?pos, \"New position\");\ndebug!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3043","crate::event!":"0:29:2976"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:0:3043":{"id":"0:0:3043","crate_id":0,"name":"tracing","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1125,1]},"visibility":"public","docs":" A scoped, structured logging and diagnostics system.\n\n # Overview\n\n `tracing` is a framework for instrumenting Rust programs to collect\n structured, event-based diagnostic information.\n\n In asynchronous systems like Tokio, interpreting traditional log messages can\n often be quite challenging. Since individual tasks are multiplexed on the same\n thread, associated events and log lines are intermixed making it difficult to\n trace the logic flow. `tracing` expands upon logging-style diagnostics by\n allowing libraries and applications to record structured events with additional\n information about *temporality* and *causality* — unlike a log message, a span\n in `tracing` has a beginning and end time, may be entered and exited by the\n flow of execution, and may exist within a nested tree of similar spans. In\n addition, `tracing` spans are *structured*, with the ability to record typed\n data as well as textual messages.\n\n The `tracing` crate provides the APIs necessary for instrumenting libraries\n and applications to emit trace data.\n\n *Compiler support: [requires `rustc` 1.56+][msrv]*\n\n [msrv]: #supported-rust-versions\n # Core Concepts\n\n The core of `tracing`'s API is composed of _spans_, _events_ and\n _subscribers_. We'll cover these in turn.\n\n ## Spans\n\n To record the flow of execution through a program, `tracing` introduces the\n concept of [spans]. Unlike a log line that represents a _moment in\n time_, a span represents a _period of time_ with a beginning and an end. When a\n program begins executing in a context or performing a unit of work, it\n _enters_ that context's span, and when it stops executing in that context,\n it _exits_ the span. The span in which a thread is currently executing is\n referred to as that thread's _current_ span.\n\n For example:\n ```\n use tracing::{span, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my_span\");\n // `enter` returns a RAII guard which, when dropped, exits the span. this\n // indicates that we are in the span for the current lexical scope.\n let _enter = span.enter();\n // perform some work in the context of `my_span`...\n # }\n```\n\n The [`span` module][span]'s documentation provides further details on how to\n use spans.\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n\n  **Warning**: In asynchronous code that uses async/await syntax,\n  `Span::enter` may produce incorrect traces if the returned drop\n  guard is held across an await point. See\n  [the method documentation][Span#in-asynchronous-code] for details.\n\n </pre></div>\n\n ## Events\n\n An [`Event`] represents a _moment_ in time. It signifies something that\n happened while a trace was being recorded. `Event`s are comparable to the log\n records emitted by unstructured logging code, but unlike a typical log line,\n an `Event` may occur within the context of a span.\n\n For example:\n ```\n use tracing::{event, span, Level};\n\n # fn main() {\n // records an event outside of any span context:\n event!(Level::INFO, \"something happened\");\n\n let span = span!(Level::INFO, \"my_span\");\n let _guard = span.enter();\n\n // records an event within \"my_span\".\n event!(Level::DEBUG, \"something happened inside my_span\");\n # }\n```\n\n In general, events should be used to represent points in time _within_ a\n span — a request returned with a given status code, _n_ new items were\n taken from a queue, and so on.\n\n The [`Event` struct][`Event`] documentation provides further details on using\n events.\n\n ## Subscribers\n\n As `Span`s and `Event`s occur, they are recorded or aggregated by\n implementations of the [`Subscriber`] trait. `Subscriber`s are notified\n when an `Event` takes place and when a `Span` is entered or exited. These\n notifications are represented by the following `Subscriber` trait methods:\n\n + [`event`][Subscriber::event], called when an `Event` takes place,\n + [`enter`], called when execution enters a `Span`,\n + [`exit`], called when execution exits a `Span`\n\n In addition, subscribers may implement the [`enabled`] function to _filter_\n the notifications they receive based on [metadata] describing each `Span`\n or `Event`. If a call to `Subscriber::enabled` returns `false` for a given\n set of metadata, that `Subscriber` will *not* be notified about the\n corresponding `Span` or `Event`. For performance reasons, if no currently\n active subscribers express interest in a given set of metadata by returning\n `true`, then the corresponding `Span` or `Event` will never be constructed.\n\n # Usage\n\n First, add this to your `Cargo.toml`:\n\n ```toml\n [dependencies]\n tracing = \"0.1\"\n ```\n\n ## Recording Spans and Events\n\n Spans and events are recorded using macros.\n\n ### Spans\n\n The [`span!`] macro expands to a [`Span` struct][`Span`] which is used to\n record a span. The [`Span::enter`] method on that struct records that the\n span has been entered, and returns a [RAII] guard object, which will exit\n the span when dropped.\n\n For example:\n\n ```rust\n use tracing::{span, Level};\n # fn main() {\n // Construct a new span named \"my span\" with trace log level.\n let span = span!(Level::TRACE, \"my span\");\n\n // Enter the span, returning a guard object.\n let _enter = span.enter();\n\n // Any trace events that occur before the guard is dropped will occur\n // within the span.\n\n // Dropping the guard will exit the span.\n # }\n ```\n\n The [`#[instrument]`][instrument] attribute provides an easy way to\n add `tracing` spans to functions. A function annotated with `#[instrument]`\n will create and enter a span with that function's name every time the\n function is called, with arguments to that function will be recorded as\n fields using `fmt::Debug`.\n\n For example:\n ```ignore\n # // this doctest is ignored because we don't have a way to say\n # // that it should only be run with cfg(feature = \"attributes\")\n use tracing::{Level, event, instrument};\n\n #[instrument]\n pub fn my_function(my_arg: usize) {\n     // This event will be recorded inside a span named `my_function` with the\n     // field `my_arg`.\n     event!(Level::INFO, \"inside my_function!\");\n     // ...\n }\n # fn main() {}\n ```\n\n For functions which don't have built-in tracing support and can't have\n the `#[instrument]` attribute applied (such as from an external crate),\n the [`Span` struct][`Span`] has a [`in_scope()` method][`in_scope`]\n which can be used to easily wrap synchonous code in a span.\n\n For example:\n ```rust\n use tracing::info_span;\n\n # fn doc() -> Result<(), ()> {\n # mod serde_json {\n #    pub(crate) fn from_slice(buf: &[u8]) -> Result<(), ()> { Ok(()) }\n # }\n # let buf: [u8; 0] = [];\n let json = info_span!(\"json.parse\").in_scope(|| serde_json::from_slice(&buf))?;\n # let _ = json; // suppress unused variable warning\n # Ok(())\n # }\n ```\n\n You can find more examples showing how to use this crate [here][examples].\n\n [RAII]: https://github.com/rust-unofficial/patterns/blob/main/src/patterns/behavioural/RAII.md\n [examples]: https://github.com/tokio-rs/tracing/tree/master/examples\n\n ### Events\n\n [`Event`]s are recorded using the [`event!`] macro:\n\n ```rust\n # fn main() {\n use tracing::{event, Level};\n event!(Level::INFO, \"something has happened!\");\n # }\n ```\n\n ## Using the Macros\n\n The [`span!`] and [`event!`] macros as well as the `#[instrument]` attribute\n use fairly similar syntax, with some exceptions.\n\n ### Configuring Attributes\n\n Both macros require a [`Level`] specifying the verbosity of the span or\n event. Optionally, the, [target] and [parent span] may be overridden. If the\n target and parent span are not overridden, they will default to the\n module path where the macro was invoked and the current span (as determined\n by the subscriber), respectively.\n\n For example:\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(target: \"app_spans\", Level::TRACE, \"my span\");\n event!(target: \"app_events\", Level::INFO, \"something has happened!\");\n # }\n ```\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n let span = span!(Level::TRACE, \"my span\");\n event!(parent: &span, Level::INFO, \"something has happened!\");\n # }\n ```\n\n The span macros also take a string literal after the level, to set the name\n of the span (as above).  In the case of the event macros, the name of the event can\n be overridden (the default is `event file:line`) using the `name:` specifier.\n\n ```\n # use tracing::{span, event, Level};\n # fn main() {\n span!(Level::TRACE, \"my span\");\n event!(name: \"some_info\", Level::INFO, \"something has happened!\");\n # }\n ```\n\n ### Recording Fields\n\n Structured fields on spans and events are specified using the syntax\n `field_name = field_value`. Fields are separated by commas.\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n // records an event with two fields:\n //  - \"answer\", with the value 42\n //  - \"question\", with the value \"life, the universe and everything\"\n event!(Level::INFO, answer = 42, question = \"life, the universe, and everything\");\n # }\n ```\n\n As shorthand, local variables may be used as field values without an\n assignment, similar to [struct initializers]. For example:\n\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n\n span!(Level::TRACE, \"login\", user);\n // is equivalent to:\n span!(Level::TRACE, \"login\", user = user);\n # }\n```\n\n Field names can include dots, but should not be terminated by them:\n ```\n # use tracing::{span, Level};\n # fn main() {\n let user = \"ferris\";\n let email = \"ferris@rust-lang.org\";\n span!(Level::TRACE, \"login\", user, user.email = email);\n # }\n```\n\n Since field names can include dots, fields on local structs can be used\n using the local variable shorthand:\n ```\n # use tracing::{span, Level};\n # fn main() {\n # struct User {\n #    name: &'static str,\n #    email: &'static str,\n # }\n let user = User {\n     name: \"ferris\",\n     email: \"ferris@rust-lang.org\",\n };\n // the span will have the fields `user.name = \"ferris\"` and\n // `user.email = \"ferris@rust-lang.org\"`.\n span!(Level::TRACE, \"login\", user.name, user.email);\n # }\n```\n\n Fields with names that are not Rust identifiers, or with names that are Rust reserved words,\n may be created using quoted string literals. However, this may not be used with the local\n variable shorthand.\n ```\n # use tracing::{span, Level};\n # fn main() {\n // records an event with fields whose names are not Rust identifiers\n //  - \"guid:x-request-id\", containing a `:`, with the value \"abcdef\"\n //  - \"type\", which is a reserved word, with the value \"request\"\n span!(Level::TRACE, \"api\", \"guid:x-request-id\" = \"abcdef\", \"type\" = \"request\");\n # }\n```\n\n Constant expressions can also be used as field names. Constants\n must be enclosed in curly braces (`{}`) to indicate that the *value*\n of the constant is to be used as the field name, rather than the\n constant's name. For example:\n ```\n # use tracing::{span, Level};\n # fn main() {\n const RESOURCE_NAME: &str = \"foo\";\n // this span will have the field `foo = \"some_id\"`\n span!(Level::TRACE, \"get\", { RESOURCE_NAME } = \"some_id\");\n # }\n```\n\n The `?` sigil is shorthand that specifies a field should be recorded using\n its [`fmt::Debug`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n #[derive(Debug)]\n struct MyStruct {\n     field: &'static str,\n }\n\n let my_struct = MyStruct {\n     field: \"Hello world!\"\n };\n\n // `my_struct` will be recorded using its `fmt::Debug` implementation.\n event!(Level::TRACE, greeting = ?my_struct);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::debug(&my_struct));\n # }\n ```\n\n The `%` sigil operates similarly, but indicates that the value should be\n recorded using its [`fmt::Display`] implementation:\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, greeting = %my_struct.field);\n // is equivalent to:\n event!(Level::TRACE, greeting = tracing::field::display(&my_struct.field));\n # }\n ```\n\n The `%` and `?` sigils may also be used with local variable shorthand:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n # #[derive(Debug)]\n # struct MyStruct {\n #     field: &'static str,\n # }\n #\n # let my_struct = MyStruct {\n #     field: \"Hello world!\"\n # };\n // `my_struct.field` will be recorded using its `fmt::Display` implementation.\n event!(Level::TRACE, %my_struct.field);\n # }\n ```\n\n Additionally, a span may declare fields with the special value [`Empty`],\n which indicates that that the value for that field does not currently exist\n but may be recorded later. For example:\n\n ```\n use tracing::{trace_span, field};\n\n // Create a span with two fields: `greeting`, with the value \"hello world\", and\n // `parting`, without a value.\n let span = trace_span!(\"my_span\", greeting = \"hello world\", parting = field::Empty);\n\n // ...\n\n // Now, record a value for parting as well.\n span.record(\"parting\", &\"goodbye world!\");\n ```\n\n Finally, events may also include human-readable messages, in the form of a\n [format string][fmt] and (optional) arguments, **after** the event's\n key-value fields. If a format string and arguments are provided,\n they will implicitly create a new field named `message` whose value is the\n provided set of format arguments.\n\n For example:\n\n ```\n # use tracing::{event, Level};\n # fn main() {\n let question = \"the ultimate question of life, the universe, and everything\";\n let answer = 42;\n // records an event with the following fields:\n // - `question.answer` with the value 42,\n // - `question.tricky` with the value `true`,\n // - \"message\", with the value \"the answer to the ultimate question of life, the\n //    universe, and everything is 42.\"\n event!(\n     Level::DEBUG,\n     question.answer = answer,\n     question.tricky = true,\n     \"the answer to {} is {}.\", question, answer\n );\n # }\n ```\n\n Specifying a formatted message in this manner does not allocate by default.\n\n [struct initializers]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\n [target]: Metadata::target\n [parent span]: span::Attributes::parent\n [determined contextually]: span::Attributes::is_contextual\n [`fmt::Debug`]: std::fmt::Debug\n [`fmt::Display`]: std::fmt::Display\n [fmt]: std::fmt#usage\n [`Empty`]: field::Empty\n\n ### Shorthand Macros\n\n `tracing` also offers a number of macros with preset verbosity levels.\n The [`trace!`], [`debug!`], [`info!`], [`warn!`], and [`error!`] behave\n similarly to the [`event!`] macro, but with the [`Level`] argument already\n specified, while the corresponding [`trace_span!`], [`debug_span!`],\n [`info_span!`], [`warn_span!`], and [`error_span!`] macros are the same,\n but for the [`span!`] macro.\n\n These are intended both as a shorthand, and for compatibility with the [`log`]\n crate (see the next section).\n\n [`span!`]: span!\n [`event!`]: event!\n [`trace!`]: trace!\n [`debug!`]: debug!\n [`info!`]: info!\n [`warn!`]: warn!\n [`error!`]: error!\n [`trace_span!`]: trace_span!\n [`debug_span!`]: debug_span!\n [`info_span!`]: info_span!\n [`warn_span!`]: warn_span!\n [`error_span!`]: error_span!\n\n ### For `log` Users\n\n Users of the [`log`] crate should note that `tracing` exposes a set of\n macros for creating `Event`s (`trace!`, `debug!`, `info!`, `warn!`, and\n `error!`) which may be invoked with the same syntax as the similarly-named\n macros from the `log` crate. Often, the process of converting a project to\n use `tracing` can begin with a simple drop-in replacement.\n\n Let's consider the `log` crate's yak-shaving example:\n\n ```rust,ignore\n use std::{error::Error, io};\n use tracing::{debug, error, info, span, warn, Level};\n\n // the `#[tracing::instrument]` attribute creates and enters a span\n // every time the instrumented function is called. The span is named after the\n // the function or method. Parameters passed to the function are recorded as fields.\n #[tracing::instrument]\n pub fn shave(yak: usize) -> Result<(), Box<dyn Error + 'static>> {\n     // this creates an event at the DEBUG level with two fields:\n     // - `excitement`, with the key \"excitement\" and the value \"yay!\"\n     // - `message`, with the key \"message\" and the value \"hello! I'm gonna shave a yak.\"\n     //\n     // unlike other fields, `message`'s shorthand initialization is just the string itself.\n     debug!(excitement = \"yay!\", \"hello! I'm gonna shave a yak.\");\n     if yak == 3 {\n         warn!(\"could not locate yak!\");\n         // note that this is intended to demonstrate `tracing`'s features, not idiomatic\n         // error handling! in a library or application, you should consider returning\n         // a dedicated `YakError`. libraries like snafu or thiserror make this easy.\n         return Err(io::Error::new(io::ErrorKind::Other, \"shaving yak failed!\").into());\n     } else {\n         debug!(\"yak shaved successfully\");\n     }\n     Ok(())\n }\n\n pub fn shave_all(yaks: usize) -> usize {\n     // Constructs a new span named \"shaving_yaks\" at the TRACE level,\n     // and a field whose key is \"yaks\". This is equivalent to writing:\n     //\n     // let span = span!(Level::TRACE, \"shaving_yaks\", yaks = yaks);\n     //\n     // local variables (`yaks`) can be used as field values\n     // without an assignment, similar to struct initializers.\n     let _span = span!(Level::TRACE, \"shaving_yaks\", yaks).entered();\n\n     info!(\"shaving yaks\");\n\n     let mut yaks_shaved = 0;\n     for yak in 1..=yaks {\n         let res = shave(yak);\n         debug!(yak, shaved = res.is_ok());\n\n         if let Err(ref error) = res {\n             // Like spans, events can also use the field initialization shorthand.\n             // In this instance, `yak` is the field being initalized.\n             error!(yak, error = error.as_ref(), \"failed to shave yak!\");\n         } else {\n             yaks_shaved += 1;\n         }\n         debug!(yaks_shaved);\n     }\n\n     yaks_shaved\n }\n ```\n\n ## In libraries\n\n Libraries should link only to the `tracing` crate, and use the provided\n macros to record whatever information will be useful to downstream\n consumers.\n\n ## In executables\n\n In order to record trace events, executables have to use a `Subscriber`\n implementation compatible with `tracing`. A `Subscriber` implements a\n way of collecting trace data, such as by logging it to standard output.\n\n This library does not contain any `Subscriber` implementations; these are\n provided by [other crates](#related-crates).\n\n The simplest way to use a subscriber is to call the [`set_global_default`]\n function:\n\n ```\n extern crate tracing;\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n tracing::subscriber::set_global_default(my_subscriber)\n     .expect(\"setting tracing default failed\");\n # }\n ```\n\n <pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In general, libraries should <em>not</em> call\n     <code>set_global_default()</code>! Doing so will cause conflicts when\n     executables that depend on the library try to set the default later.\n </pre>\n\n This subscriber will be used as the default in all threads for the\n remainder of the duration of the program, similar to setting the logger\n in the `log` crate.\n\n In addition, the default subscriber can be set through using the\n [`with_default`] function. This follows the `tokio` pattern of using\n closures to represent executing code in a context that is exited at the end\n of the closure. For example:\n\n ```rust\n # pub struct FooSubscriber;\n # use tracing::{span::{Id, Attributes, Record}, Metadata};\n # impl tracing::Subscriber for FooSubscriber {\n #   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n #   fn record(&self, _: &Id, _: &Record) {}\n #   fn event(&self, _: &tracing::Event) {}\n #   fn record_follows_from(&self, _: &Id, _: &Id) {}\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn enter(&self, _: &Id) {}\n #   fn exit(&self, _: &Id) {}\n # }\n # impl FooSubscriber {\n #   fn new() -> Self { FooSubscriber }\n # }\n # fn main() {\n\n let my_subscriber = FooSubscriber::new();\n # #[cfg(feature = \"std\")]\n tracing::subscriber::with_default(my_subscriber, || {\n     // Any trace events generated in this closure or by functions it calls\n     // will be collected by `my_subscriber`.\n })\n # }\n ```\n\n This approach allows trace data to be collected by multiple subscribers\n within different contexts in the program. Note that the override only applies to the\n currently executing thread; other threads will not see the change from with_default.\n\n Any trace events generated outside the context of a subscriber will not be collected.\n\n Once a subscriber has been set, instrumentation points may be added to the\n executable using the `tracing` crate's macros.\n\n ## `log` Compatibility\n\n The [`log`] crate provides a simple, lightweight logging facade for Rust.\n While `tracing` builds upon `log`'s foundation with richer structured\n diagnostic data, `log`'s simplicity and ubiquity make it the \"lowest common\n denominator\" for text-based logging in Rust — a vast majority of Rust\n libraries and applications either emit or consume `log` records. Therefore,\n `tracing` provides multiple forms of interoperability with `log`: `tracing`\n instrumentation can emit `log` records, and a compatibility layer enables\n `tracing` [`Subscriber`]s to consume `log` records as `tracing` [`Event`]s.\n\n ### Emitting `log` Records\n\n This crate provides two feature flags, \"log\" and \"log-always\", which will\n cause [spans] and [events] to emit `log` records. When the \"log\" feature is\n enabled, if no `tracing` `Subscriber` is active, invoking an event macro or\n creating a span with fields will emit a `log` record. This is intended\n primarily for use in libraries which wish to emit diagnostics that can be\n consumed by applications using `tracing` *or* `log`, without paying the\n additional overhead of emitting both forms of diagnostics when `tracing` is\n in use.\n\n Enabling the \"log-always\" feature will cause `log` records to be emitted\n even if a `tracing` `Subscriber` _is_ set. This is intended to be used in\n applications where a `log` `Logger` is being used to record a textual log,\n and `tracing` is used only to record other forms of diagnostics (such as\n metrics, profiling, or distributed tracing data). Unlike the \"log\" feature,\n libraries generally should **not** enable the \"log-always\" feature, as doing\n so will prevent applications from being able to opt out of the `log` records.\n\n See [here][flags] for more details on this crate's feature flags.\n\n The generated `log` records' messages will be a string representation of the\n span or event's fields, and all additional information recorded by `log`\n (target, verbosity level, module path, file, and line number) will also be\n populated. Additionally, `log` records are also generated when spans are\n entered, exited, and closed. Since these additional span lifecycle logs have\n the potential to be very verbose, and don't include additional fields, they\n will always be emitted at the `Trace` level, rather than inheriting the\n level of the span that generated them. Furthermore, they are are categorized\n under a separate `log` target, \"tracing::span\" (and its sub-target,\n \"tracing::span::active\", for the logs on entering and exiting a span), which\n may be enabled or disabled separately from other `log` records emitted by\n `tracing`.\n\n ### Consuming `log` Records\n\n The [`tracing-log`] crate provides a compatibility layer which\n allows a `tracing` [`Subscriber`] to consume `log` records as though they\n were `tracing` [events]. This allows applications using `tracing` to record\n the logs emitted by dependencies using `log` as events within the context of\n the application's trace tree. See [that crate's documentation][log-tracer]\n for details.\n\n [log-tracer]: https://docs.rs/tracing-log/latest/tracing_log/#convert-log-records-to-tracing-events\n\n ## Related Crates\n\n In addition to `tracing` and `tracing-core`, the [`tokio-rs/tracing`] repository\n contains several additional crates designed to be used with the `tracing` ecosystem.\n This includes a collection of `Subscriber` implementations, as well as utility\n and adapter crates to assist in writing `Subscriber`s and instrumenting\n applications.\n\n In particular, the following crates are likely to be of interest:\n\n  - [`tracing-futures`] provides a compatibility layer with the `futures`\n    crate, allowing spans to be attached to `Future`s, `Stream`s, and `Executor`s.\n  - [`tracing-subscriber`] provides `Subscriber` implementations and\n    utilities for working with `Subscriber`s. This includes a [`FmtSubscriber`]\n    `FmtSubscriber` for logging formatted trace data to stdout, with similar\n    filtering and formatting to the [`env_logger`] crate.\n  - [`tracing-log`] provides a compatibility layer with the [`log`] crate,\n    allowing log messages to be recorded as `tracing` `Event`s within the\n    trace tree. This is useful when a project using `tracing` have\n    dependencies which use `log`. Note that if you're using\n    `tracing-subscriber`'s `FmtSubscriber`, you don't need to depend on\n    `tracing-log` directly.\n  - [`tracing-appender`] provides utilities for outputting tracing data,\n     including a file appender and non blocking writer.\n\n Additionally, there are also several third-party crates which are not\n maintained by the `tokio` project. These include:\n\n  - [`tracing-timing`] implements inter-event timing metrics on top of `tracing`.\n    It provides a subscriber that records the time elapsed between pairs of\n    `tracing` events and generates histograms.\n  - [`tracing-opentelemetry`] provides a subscriber for emitting traces to\n    [OpenTelemetry]-compatible distributed tracing systems.\n  - [`tracing-honeycomb`] Provides a layer that reports traces spanning multiple machines to [honeycomb.io]. Backed by [`tracing-distributed`].\n  - [`tracing-distributed`] Provides a generic implementation of a layer that reports traces spanning multiple machines to some backend.\n  - [`tracing-actix-web`] provides `tracing` integration for the `actix-web` web framework.\n  - [`tracing-actix`] provides `tracing` integration for the `actix` actor\n    framework.\n  - [`axum-insights`] provides `tracing` integration and Application insights export for the `axum` web framework.\n  - [`tracing-gelf`] implements a subscriber for exporting traces in Greylog\n    GELF format.\n  - [`tracing-coz`] provides integration with the [coz] causal profiler\n    (Linux-only).\n  - [`tracing-bunyan-formatter`] provides a layer implementation that reports events and spans\n    in [bunyan] format, enriched with timing information.\n  - [`tracing-wasm`] provides a `Subscriber`/`Layer` implementation that reports\n    events and spans via browser `console.log` and [User Timing API (`window.performance`)].\n  - [`tracing-web`] provides a layer implementation of level-aware logging of events\n    to web browsers' `console.*` and span events to the [User Timing API (`window.performance`)].\n  - [`tide-tracing`] provides a [tide] middleware to trace all incoming requests and responses.\n  - [`test-log`] takes care of initializing `tracing` for tests, based on\n    environment variables with an `env_logger` compatible syntax.\n  - [`tracing-unwrap`] provides convenience methods to report failed unwraps\n    on `Result` or `Option` types to a `Subscriber`.\n  - [`diesel-tracing`] provides integration with [`diesel`] database connections.\n  - [`tracing-tracy`] provides a way to collect [Tracy] profiles in instrumented\n    applications.\n  - [`tracing-elastic-apm`] provides a layer for reporting traces to [Elastic APM].\n  - [`tracing-etw`] provides a layer for emitting Windows [ETW] events.\n  - [`tracing-fluent-assertions`] provides a fluent assertions-style testing\n    framework for validating the behavior of `tracing` spans.\n  - [`sentry-tracing`] provides a layer for reporting events and traces to [Sentry].\n  - [`tracing-forest`] provides a subscriber that preserves contextual coherence by\n    grouping together logs from the same spans during writing.\n  - [`tracing-loki`] provides a layer for shipping logs to [Grafana Loki].\n  - [`tracing-logfmt`] provides a layer that formats events and spans into the logfmt format.\n  - [`reqwest-tracing`] provides a middleware to trace [`reqwest`] HTTP requests.\n  - [`tracing-cloudwatch`] provides a layer that sends events to AWS CloudWatch Logs.\n  - [`clippy-tracing`] provides a tool to add, remove and check for `tracing::instrument`.\n\n If you're the maintainer of a `tracing` ecosystem crate not listed above,\n please let us know! We'd love to add your project to the list!\n\n [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry\n [OpenTelemetry]: https://opentelemetry.io/\n [`tracing-honeycomb`]: https://crates.io/crates/tracing-honeycomb\n [`tracing-distributed`]: https://crates.io/crates/tracing-distributed\n [honeycomb.io]: https://www.honeycomb.io/\n [`tracing-actix-web`]: https://crates.io/crates/tracing-actix-web\n [`tracing-actix`]: https://crates.io/crates/tracing-actix\n [`axum-insights`]: https://crates.io/crates/axum-insights\n [`tracing-gelf`]: https://crates.io/crates/tracing-gelf\n [`tracing-coz`]: https://crates.io/crates/tracing-coz\n [coz]: https://github.com/plasma-umass/coz\n [`tracing-bunyan-formatter`]: https://crates.io/crates/tracing-bunyan-formatter\n [bunyan]: https://github.com/trentm/node-bunyan\n [`tracing-wasm`]: https://docs.rs/tracing-wasm\n [`tracing-web`]: https://docs.rs/tracing-web\n [User Timing API (`window.performance`)]: https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\n [`tide-tracing`]: https://crates.io/crates/tide-tracing\n [tide]: https://crates.io/crates/tide\n [`test-log`]: https://crates.io/crates/test-log\n [`tracing-unwrap`]: https://docs.rs/tracing-unwrap\n [`diesel`]: https://crates.io/crates/diesel\n [`diesel-tracing`]: https://crates.io/crates/diesel-tracing\n [`tracing-tracy`]: https://crates.io/crates/tracing-tracy\n [Tracy]: https://github.com/wolfpld/tracy\n [`tracing-elastic-apm`]: https://crates.io/crates/tracing-elastic-apm\n [Elastic APM]: https://www.elastic.co/apm\n [`tracing-etw`]: https://github.com/microsoft/rust_win_etw/tree/main/win_etw_tracing\n [ETW]: https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing\n [`tracing-fluent-assertions`]: https://crates.io/crates/tracing-fluent-assertions\n [`sentry-tracing`]: https://crates.io/crates/sentry-tracing\n [Sentry]: https://sentry.io/welcome/\n [`tracing-forest`]: https://crates.io/crates/tracing-forest\n [`tracing-loki`]: https://crates.io/crates/tracing-loki\n [Grafana Loki]: https://grafana.com/oss/loki/\n [`tracing-logfmt`]: https://crates.io/crates/tracing-logfmt\n [`reqwest-tracing`]: https://crates.io/crates/reqwest-tracing\n [`reqwest`]: https://crates.io/crates/reqwest\n [`tracing-cloudwatch`]: https://crates.io/crates/tracing-cloudwatch\n [`clippy-tracing`]: https://crates.io/crates/clippy-tracing\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Some of these ecosystem crates are currently\n     unreleased and/or in earlier stages of development. They may be less stable\n     than <code>tracing</code> and <code>tracing-core</code>.\n </pre>\n\n ## Crate Feature Flags\n\n The following crate [feature flags] are available:\n\n * A set of features controlling the [static verbosity level].\n * `log`: causes trace instrumentation points to emit [`log`] records as well\n   as trace events, if a default `tracing` subscriber has not been set. This\n   is intended for use in libraries whose users may be using either `tracing`\n   or `log`.\n * `log-always`: Emit `log` records from all `tracing` spans and events, even\n   if a `tracing` subscriber has been set. This should be set only by\n   applications which intend to collect traces and logs separately; if an\n   adapter is used to convert `log` records into `tracing` events, this will\n   cause duplicate events to occur.\n * `attributes`: Includes support for the `#[instrument]` attribute.\n   This is on by default, but does bring in the `syn` crate as a dependency,\n   which may add to the compile time of crates that do not already use it.\n * `std`: Depend on the Rust standard library (enabled by default).\n\n   `no_std` users may disable this feature with `default-features = false`:\n\n   ```toml\n   [dependencies]\n   tracing = { version = \"0.1.38\", default-features = false }\n   ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: <code>tracing</code>'s <code>no_std</code> support\n     requires <code>liballoc</code>.\n </pre>\n\n ### Unstable Features\n\n These feature flags enable **unstable** features. The public API may break in 0.1.x\n releases. To enable these features, the `--cfg tracing_unstable` must be passed to\n `rustc` when compiling.\n\n The following unstable feature flags are currently available:\n\n * `valuable`: Enables support for recording [field values] using the\n   [`valuable`] crate.\n\n #### Enabling Unstable Features\n\n The easiest way to set the `tracing_unstable` cfg is to use the `RUSTFLAGS`\n env variable when running `cargo` commands:\n\n ```shell\n RUSTFLAGS=\"--cfg tracing_unstable\" cargo build\n ```\n Alternatively, the following can be added to the `.cargo/config` file in a\n project to automatically enable the cfg flag for that project:\n\n ```toml\n [build]\n rustflags = [\"--cfg\", \"tracing_unstable\"]\n ```\n\n [feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n [field values]: crate::field\n [`valuable`]: https://crates.io/crates/valuable\n\n ## Supported Rust Versions\n\n Tracing is built against the latest stable release. The minimum supported\n version is 1.56. The current Tracing version is not guaranteed to build on\n Rust versions earlier than the minimum supported version.\n\n Tracing follows the same compiler support policies as the rest of the Tokio\n project. The current stable Rust compiler and the three most recent minor\n versions before it will always be supported. For example, if the current\n stable compiler version is 1.69, the minimum supported version will not be\n increased past 1.66, three minor versions prior. Increasing the minimum\n supported compiler version is not considered a semver breaking change as\n long as doing so complies with this policy.\n\n [`log`]: https://docs.rs/log/0.4.6/log/\n [span]: mod@span\n [spans]: mod@span\n [`Span`]: span::Span\n [`in_scope`]: span::Span::in_scope\n [event]: Event\n [events]: Event\n [`Subscriber`]: subscriber::Subscriber\n [Subscriber::event]: subscriber::Subscriber::event\n [`enter`]: subscriber::Subscriber::enter\n [`exit`]: subscriber::Subscriber::exit\n [`enabled`]: subscriber::Subscriber::enabled\n [metadata]: Metadata\n [`field::display`]: field::display\n [`field::debug`]: field::debug\n [`set_global_default`]: subscriber::set_global_default\n [`with_default`]: subscriber::with_default\n [`tokio-rs/tracing`]: https://github.com/tokio-rs/tracing\n [`tracing-futures`]: https://crates.io/crates/tracing-futures\n [`tracing-subscriber`]: https://crates.io/crates/tracing-subscriber\n [`tracing-log`]: https://crates.io/crates/tracing-log\n [`tracing-timing`]: https://crates.io/crates/tracing-timing\n [`tracing-appender`]: https://crates.io/crates/tracing-appender\n [`env_logger`]: https://crates.io/crates/env_logger\n [`FmtSubscriber`]: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/struct.Subscriber.html\n [static verbosity level]: level_filters#compile-time-filters\n [instrument]: https://docs.rs/tracing-attributes/latest/tracing_attributes/attr.instrument.html\n [flags]: #crate-feature-flags","links":{"info_span!":"0:26:3205","span!":"0:23:2981","warn!":"0:36:1956","error!":"0:37:3388","event!":"0:29:2976","`Level`":"20:1000:2986","Event":"20:829:2977","info!":"0:35:3370","subscriber::set_global_default":"0:261:3467","mod@span":"0:141:2981","std::fmt#usage":"5:4912:808","field::Empty":"20:842:4615","subscriber::Subscriber::enter":"20:691:3681","Metadata::target":"20:494:1760","level_filters#compile-time-filters":"0:135:2992","Span#in-asynchronous-code":"0:365:2988","span::Span":"0:365:2988","debug!":"0:34:610","span::Attributes::parent":"20:635:3162","`Span::enter`":"0:178:3681","std::fmt::Display":"2:10382:128","error_span!":"0:28:3221","debug_span!":"0:25:3197","subscriber::with_default":"0:258:3465","trace!":"0:33:3347","crate::field":"0:57:795","span::Span::in_scope":"0:183:4288","subscriber::Subscriber::event":"20:690:2976","subscriber::Subscriber::exit":"20:692:4266","warn_span!":"0:27:3213","subscriber::Subscriber::enabled":"20:684:3010","Metadata":"20:477:2987","trace_span!":"0:24:3189","std::fmt::Debug":"2:10377:119","subscriber::Subscriber":"20:681:2980","`Event`":"20:829:2977"},"attrs":["#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/tokio-rs/tracing/master/assets/logo-type.png\",\nissue_tracker_base_url = \"https://github.com/tokio-rs/tracing/issues/\")]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub, bad_style, dead_code, improper_ctypes,\nnon_shorthand_field_patterns, no_mangle_generic_items, overflowing_literals,\npath_statements, patterns_in_fns_without_body, private_in_public,\nunconditional_recursion, unused, unused_allocation, unused_comparisons,\nunused_parens, while_true)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:2974","0:57:795","0:73:2972","0:135:2992","0:141:2981","0:255:2979","0:4-0:88:2973","0:6-20:798:2975","0:7-20:829:2977","0:8-20:288:2978","0:9-20:681:2980","0:17-20:239:2976","0:18-20:1000:2986","0:19-20:477:2987","0:20-0:365:2988","0:21-22:204:2972","0:29:2976","0:23:2981","0:24:3189","0:25:3197","0:26:3205","0:27:3213","0:28:3221","0:30:3261","0:31:3268","0:32:3010","0:33:3347","0:34:610","0:35:3370","0:36:1956","0:37:3388"],"is_stripped":false}}},"0:277:3042":{"id":"0:277:3042","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[1124,4],"end":[1124,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:13682:198":{"id":"2:13682:198","crate_id":2,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"5:5692:36212":{"id":"5:5692:36212","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:4728","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:4728","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5707:36215":{"id":"5:5707:36215","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:28297":{"id":"2:13393:28297","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3999":{"id":"0:198:3999","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1320,4],"end":[1322,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-20:1000:2986":{"id":"0:18-20:1000:2986","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,30],"end":[962,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::Level","name":"Level","id":"20:1000:2986","glob":false}}},"2:13293:33945":{"id":"2:13293:33945","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:33940"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:9086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3001:137":{"id":"2:3001:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32309:7510","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2989:838":{"id":"2:2989:838","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:327:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:1325":{"id":"0:124:1325","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[383,4],"end":[389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:44834:150","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:284:479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2998-0:278:3651":{"id":"b:2:2998-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1437,0],"end":[1441,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:218:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13302:29290":{"id":"2:13302:29290","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:3172":{"id":"0:170:3172","crate_id":0,"name":"child_of","span":{"filename":"src/span.rs","begin":[484,4],"end":[493,5]},"visibility":"public","docs":"Constructs a new `Span` as child of the given parent span, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:477:2987","super::Span::follows_from":"0:197:4371","super::field::ValueSet":"20:274:3017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["parent",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}],["meta",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:274:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:35512":{"id":"2:13369:35512","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:3700":{"id":"0:119:3700","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[354,4],"end":[356,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:3010":{"id":"0:32:3010","crate_id":0,"name":"enabled","span":{"filename":"src/macros.rs","begin":[1184,0],"end":[1264,1]},"visibility":"public","docs":"Checks whether a span or event is [enabled] based on the provided [metadata].\n\n[enabled]: crate::Subscriber::enabled\n[metadata]: crate::Metadata\n\nThis macro is a specialized tool: it is intended to be used prior\nto an expensive computation required *just* for that event, but\n*cannot* be done as part of an argument to that event, such as\nwhen multiple events are emitted (e.g., iterating over a collection\nand emitting an event for each item).\n\n# Usage\n\n[Subscribers] can make filtering decisions based all the data included in a\nspan or event's [`Metadata`]. This means that it is possible for `enabled!`\nto return a _false positive_ (indicating that something would be enabled\nwhen it actually would not be) or a _false negative_ (indicating that\nsomething would be disabled when it would actually be enabled).\n\n[Subscribers]: crate::subscriber::Subscriber\n[`Metadata`]: crate::metadata::Metadata\n\nThis occurs when a subscriber is using a _more specific_ filter than the\nmetadata provided to the `enabled!` macro. Some situations that can result\nin false positives or false negatives include:\n\n- If a subscriber is using a filter which may enable a span or event based\non field names, but `enabled!` is invoked without listing field names,\n`enabled!` may return a false negative if a specific field name would\ncause the subscriber to enable something that would otherwise be disabled.\n- If a subscriber is using a filter which enables or disables specific events by\nfile path and line number,  a particular event may be enabled/disabled\neven if an `enabled!` invocation with the same level, target, and fields\nindicated otherwise.\n- The subscriber can choose to enable _only_ spans or _only_ events, which `enabled`\nwill not reflect.\n\n`enabled!()` requires a [level](crate::Level) argument, an optional `target:`\nargument, and an optional set of field names. If the fields are not provided,\nthey are considered to be unknown. `enabled!` attempts to match the\nsyntax of `event!()` as closely as possible, which can be seen in the\nexamples below.\n\n# Examples\n\nIf the current subscriber is interested in recording `DEBUG`-level spans and\nevents in the current file and module path, this will evaluate to true:\n```rust\nuse tracing::{enabled, Level};\n\nif enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", and at the\nlevel  `DEBUG`, this will evaluate to true:\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n```\n\nIf the current subscriber is interested in recording spans and events\nin the current file and module path, with the target \"my_crate\", at\nthe level `DEBUG`, and with a field named \"hello\", this will evaluate\nto true:\n\n```rust\n# use tracing::{enabled, Level};\nif enabled!(target: \"my_crate\", Level::DEBUG, hello) {\n    // some expensive work...\n}\n```\n\n# Alternatives\n\n`enabled!` queries subscribers with [`Metadata`] where\n[`is_event`] and [`is_span`] both return `false`. Alternatively,\nuse [`event_enabled!`] or [`span_enabled!`] to ensure one of these\nreturns true.\n\n\n[`Metadata`]: crate::Metadata\n[`is_event`]: crate::Metadata::is_event\n[`is_span`]: crate::Metadata::is_span\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::Subscriber::enabled":"20:684:3010","`event_enabled!`":"0:30:3261","crate::span_enabled":"0:31:3268","crate::subscriber::Subscriber":"20:681:2980","crate::Metadata::is_span":"20:500:5185","crate::metadata::Metadata":"20:477:2987","crate::Level":"20:1000:2986","crate::Metadata::is_event":"20:499:5183","crate::Metadata":"20:477:2987"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! enabled {\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr ) => { ... };\n    (target: $target:expr, $lvl:expr ) => { ... };\n    (kind: $kind:expr, target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr, $($field:tt)*) => { ... };\n    (kind: $kind:expr, $lvl:expr) => { ... };\n    ($lvl:expr) => { ... };\n    ($lvl:expr, $($field:tt)*) => { ... };\n}"}},"b:0:110-0:365:2988":{"id":"b:0:110-0:365:2988","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13355:35505":{"id":"2:13355:35505","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:35504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:9080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:278:3651":{"id":"b:0:110-0:278:3651","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51-20:169:3009":{"id":"0:51-20:169:3009","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,4],"end":[136,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::get_default","name":"get_default","id":"20:169:3009","glob":false}}},"0:63:3567":{"id":"0:63:3567","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[141,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13340:29288":{"id":"2:13340:29288","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-20:824:3466":{"id":"0:49-20:824:3466","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[134,0],"end":[134,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:824:3466","glob":false}}},"2:2986:3652":{"id":"2:2986:3652","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2960:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:3175":{"id":"0:194:3175","crate_id":0,"name":"record_all","span":{"filename":"src/span.rs","begin":[1213,4],"end":[1235,5]},"visibility":"public","docs":"Records all the fields in the provided `ValueSet`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["values",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:274:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:381:4014":{"id":"b:2:2710-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:4432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13265:35494":{"id":"2:13265:35494","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:3221":{"id":"0:28:3221","crate_id":0,"name":"error_span","span":{"filename":"src/macros.rs","begin":[490,0],"end":[535,1]},"visibility":"public","docs":"Constructs a span at the error level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, error_span, Level};\n# fn main() {\nerror_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::ERROR, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::error_span;\n# fn main() {\nlet span = error_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3043","crate::span!":"0:23:2981","crate#configuring-attributes":"0:0:3043","crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"2:13308:28793":{"id":"2:13308:28793","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:35517":{"id":"2:13397:35517","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:35517"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:8971","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:278:3651":{"id":"b:2:2983-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:3652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13284:35499":{"id":"2:13284:35499","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:4770","str::slice_unchecked":"2:13283:35498"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:375:4009":{"id":"a:2:3206:246-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7-20:829:2977":{"id":"0:7-20:829:2977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,37],"end":[952,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::event::Event","name":"Event","id":"20:829:2977","glob":false}}},"b:0:125-0:375:4009":{"id":"b:0:125-0:375:4009","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:4261":{"id":"0:180:4261","crate_id":0,"name":"or_current","span":{"filename":"src/span.rs","begin":[1027,4],"end":[1032,5]},"visibility":"public","docs":"Returns this span, if it was [enabled] by the current [`Subscriber`], or\nthe [current span] (whose lexical distance may be further than expected),\n if this span [is disabled].\n\nThis method can be useful when propagating spans to spawned threads or\n[async tasks]. Consider the following:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nIf the current [`Subscriber`] enables the [`DEBUG`] level, then both\nthe \"parent\" and \"child\" spans will be enabled. Thus, when the \"spawaned\na thread!\" event occurs, it will be inside of the \"child\" span. Because\n\"parent\" is the parent of \"child\", the event will _also_ be inside of\n\"parent\".\n\nHowever, if the [`Subscriber`] only enables the [`INFO`] level, the \"child\"\nspan will be disabled. When the thread is spawned, the\n`child_span.entered()` call will do nothing, since \"child\" is not\nenabled. In this case, the \"spawned a thread!\" event occurs outside of\n*any* span, since the \"child\" span was responsible for propagating its\nparent to the spawned thread.\n\nIf this is not the desired behavior, `Span::or_current` can be used to\nensure that the \"parent\" span is propagated in both cases, either as a\nparent of \"child\" _or_ directly. For example:\n\n```\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\n// If DEBUG is enabled, then \"child\" will be enabled, and `or_current`\n// returns \"child\". Otherwise, if DEBUG is not enabled, \"child\" will be\n// disabled, and `or_current` returns \"parent\".\nlet child_span = tracing::debug_span!(\"child\").or_current();\n\nstd::thread::spawn(move || {\n    let _entered = child_span.entered();\n\n    tracing::info!(\"spawned a thread!\");\n\n    // ...\n});\n```\n\nWhen spawning [asynchronous tasks][async tasks], `Span::or_current` can\nbe used similarly, in combination with [`instrument`]:\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// ...\n\nlet child_span = tracing::debug_span!(\"child\");\n\ntokio::spawn(\n    async {\n        tracing::info!(\"spawned a task!\");\n\n        // ...\n\n    }.instrument(child_span.or_current())\n);\n```\n\nIn general, `or_current` should be preferred over nesting an\n[`instrument`]  call inside of an [`in_current_span`] call, as using\n`or_current` will be more efficient.\n\n```\nuse tracing::Instrument;\n# // lol\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\nasync fn my_async_fn() {\n    // ...\n}\n\nlet _parent_span = tracing::info_span!(\"parent\").entered();\n\n// Do this:\ntokio::spawn(\n    my_async_fn().instrument(tracing::debug_span!(\"child\").or_current())\n);\n\n// ...rather than this:\ntokio::spawn(\n    my_async_fn()\n        .instrument(tracing::debug_span!(\"child\"))\n        .in_current_span()\n);\n```\n\n[enabled]: crate::Subscriber::enabled\n[`Subscriber`]: crate::Subscriber\n[current span]: Span::current\n[is disabled]: Span::is_disabled\n[`INFO`]: crate::Level::INFO\n[`DEBUG`]: crate::Level::DEBUG\n[async tasks]: std::task\n[`instrument`]: crate::instrument::Instrument::instrument\n[`in_current_span`]: crate::instrument::Instrument::in_current_span","links":{"crate::Subscriber::enabled":"20:684:3010","crate::instrument::Instrument::instrument":"0:89:2972","std::task":"1:7176:3572","Span::is_disabled":"0:195:4262","Span::current":"0:175:3325","crate::Level::INFO":"20:526:3206","crate::Level::DEBUG":"20:527:3198","crate::instrument::Instrument::in_current_span":"0:90:3624","crate::Subscriber":"20:681:2980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[397,0],"end":[429,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:129:2974","0:130:3615","0:131:3696","0:132:3698","0:133:3700","0:134:3703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:198":{"id":"0:123:198","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[381,4],"end":[381,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:2993-0:381:4014":{"id":"b:2:2993-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:3205":{"id":"0:26:3205","crate_id":0,"name":"info_span","span":{"filename":"src/macros.rs","begin":[329,0],"end":[374,1]},"visibility":"public","docs":"Constructs a span at the info level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{span, info_span, Level};\n# fn main() {\ninfo_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::INFO, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::info_span;\n# fn main() {\nlet span = info_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3043","crate::span!":"0:23:2981","crate#configuring-attributes":"0:0:3043","crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"2:13358:35506":{"id":"2:13358:35506","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:3651":{"id":"0:278:3651","crate_id":0,"name":"WithDispatch","span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Subscriber`].\n\nThis type is returned by the [`WithSubscriber`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Subscriber`]: crate::Subscriber","links":{"std::future::Future":"2:44834:150","crate::Subscriber":"20:681:2980","`WithSubscriber`":"0:91:3627"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:127","a:2:32385:236-0:278:3651","a:2:42247:10727-0:278:3651","a:2:3241:4660-0:278:3651","a:2:42248:10921-0:278:3651","a:2:3206:246-0:278:3651","b:0:110-0:278:3651","b:0:125-0:278:3651","b:2:2987-0:278:3651","b:2:2983-0:278:3651","b:2:2998-0:278:3651","b:2:2993-0:278:3651","b:2:2713-0:278:3651","b:2:2710-0:278:3651","b:2:13680-0:278:3651","b:2:3822-0:278:3651","b:5:790-0:278:3651","0:121","0:282","0:285","0:313"]}}},"2:13362:35508":{"id":"2:13362:35508","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:3370":{"id":"0:35:3370","crate_id":0,"name":"info","span":{"filename":"src/macros.rs","begin":[1868,0],"end":[2119,1]},"visibility":"public","docs":"Constructs an event at the info level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::info;\n# // this is so the test will still work in no-std mode\n# #[derive(Debug)]\n# pub struct Ipv4Addr;\n# impl Ipv4Addr { fn new(o1: u8, o2: u8, o3: u8, o4: u8) -> Self { Self } }\n# fn main() {\n# struct Connection { port: u32, speed: f32 }\nuse tracing::field;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\nlet conn = Connection { port: 40, speed: 3.20 };\n\ninfo!(conn.port, \"connected to {:?}\", addr);\ninfo!(\n    target: \"connection_events\",\n    ip = ?addr,\n    conn.port,\n    ?conn.speed,\n);\ninfo!(name: \"completed\", \"completed connection to {:?}\", addr);\n# }\n```","links":{"crate#using-the-macros":"0:0:3043","crate::event!":"0:29:2976"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! info {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"a:2:42248:10921-0:278:3651":{"id":"a:2:42248:10921-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:10921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13366:35511":{"id":"2:13366:35511","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:16141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13337:29286":{"id":"2:13337:29286","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:29284","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:9077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:3197":{"id":"0:25:3197","crate_id":0,"name":"debug_span","span":{"filename":"src/macros.rs","begin":[248,0],"end":[293,1]},"visibility":"public","docs":"Constructs a span at the debug level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{debug_span, span, Level};\n# fn main() {\ndebug_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::DEBUG, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::debug_span;\n# fn main() {\nlet span = debug_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3043","crate::span!":"0:23:2981","crate#configuring-attributes":"0:0:3043","crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! debug_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1449,0],"end":[1453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:225:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3206:246-0:278:3651":{"id":"a:2:3206:246-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2993-0:321:3614":{"id":"b:2:2993-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:3999":{"id":"0:241:3999","crate_id":0,"name":"id","span":{"filename":"src/span.rs","begin":[1542,4],"end":[1544,5]},"visibility":"public","docs":"Returns this span's `Id`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13683:163":{"id":"2:13683:163","crate_id":2,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"2:13381:35514":{"id":"2:13381:35514","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:3982":{"id":"0:162:3982","crate_id":0,"name":"as_id","span":{"filename":"src/span.rs","begin":[338,4],"end":[338,35]},"visibility":"default","docs":"Returns the `Id` of the span that `self` corresponds to, or `None` if\nthis corresponds to a disabled span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:48-20:155:3465":{"id":"0:48-20:155:3465","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[131,0],"end":[131,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::with_default","name":"with_default","id":"20:155:3465","glob":false}}},"0:164:1187":{"id":"0:164:1187","crate_id":0,"name":"new","span":{"filename":"src/span.rs","begin":[436,4],"end":[438,5]},"visibility":"public","docs":"Constructs a new `Span` with the given [metadata] and set of\n[field values].\n\nThe new span will be constructed by the currently-active [`Subscriber`],\nwith the current span as its parent (if one exists).\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[`Subscriber`]: super::subscriber::Subscriber\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:477:2987","super::subscriber::Subscriber":"20:681:2980","super::field::ValueSet":"20:274:3017","super::Span::follows_from":"0:197:4371"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:274:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:321:3614":{"id":"b:0:110-0:321:3614","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[161,0],"end":[166,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:68:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:3979":{"id":"0:161:3979","crate_id":0,"name":"AsId","span":{"filename":"src/span.rs","begin":[335,0],"end":[339,1]},"visibility":"public","docs":"Trait implemented by types which have a span `Id`.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:162:3982"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:277:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"a:2:42247:10727-0:365:2988":{"id":"a:2:42247:10727-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:206:880":{"id":"0:206:880","crate_id":0,"name":"hash","span":{"filename":"src/span.rs","begin":[1387,4],"end":[1389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hasher",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"2:10603:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1455,0],"end":[1476,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3443:4385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:227:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1565,0],"end":[1570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3443:4385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:248:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13288:29278":{"id":"2:13288:29278","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:29277"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[380,0],"end":[390,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:123:198","0:124:1325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2710-0:321:3614":{"id":"b:2:2710-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:4432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:479":{"id":"0:284:479","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[244,13],"end":[244,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2710-0:365:2988":{"id":"b:2:2710-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2712:4432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13394:29134":{"id":"2:13394:29134","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40401"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:4660-0:381:4014":{"id":"a:2:3241:4660-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2973":{"id":"0:88:2973","crate_id":0,"name":"Instrument","span":{"filename":"src/instrument.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Attaches spans to a [`std::future::Future`].\n\nExtension trait allowing futures to be\ninstrumented with a `tracing` [span].\n\n[span]: super::Span","links":{"super::Span":"0:365:2988","`std::future::Future`":"2:44834:150"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:89:2972","0:90:3624"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:110"]}}},"0:380:808":{"id":"0:380:808","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:4009":{"id":"0:375:4009","crate_id":0,"name":"Entered","span":{"filename":"src/span.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"A guard representing a span which has been entered and is currently\nexecuting.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::enter`] function.\n\n[`Span::enter`]: super::Span::enter","links":{"super::Span::enter":"0:178:3681"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:32385:236-0:375:4009","a:2:32444:4663-0:375:4009","a:2:42247:10727-0:375:4009","a:2:3241:4660-0:375:4009","a:2:42248:10921-0:375:4009","a:2:3206:246-0:375:4009","b:0:110-0:375:4009","b:0:125-0:375:4009","b:2:2987-0:375:4009","b:2:2983-0:375:4009","b:2:2998-0:375:4009","b:2:2993-0:375:4009","b:2:2713-0:375:4009","b:2:2710-0:375:4009","b:2:3822-0:375:4009","0:378","0:246"]}}},"2:3824:1834":{"id":"2:3824:1834","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39868:4591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:29280":{"id":"2:13322:29280","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5710:28293":{"id":"5:5710:28293","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:28296"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3443:4385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:361:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13285:29273":{"id":"2:13285:29273","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:29277","str::split_at_mut":"2:13286:29274"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1956":{"id":"0:36:1956","crate_id":0,"name":"warn","span":{"filename":"src/macros.rs","begin":[2149,0],"end":[2400,1]},"visibility":"public","docs":"Constructs an event at the warn level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::warn;\n# fn main() {\n\nlet warn_description = \"Invalid Input\";\nlet input = &[0x27, 0x45];\n\nwarn!(?input, warning = warn_description);\nwarn!(\n    target: \"input_events\",\n    warning = warn_description,\n    \"Received warning for input: {:?}\", input,\n);\nwarn!(name: \"invalid\", ?input);\n# }\n```","links":{"crate#using-the-macros":"0:0:3043","crate::event!":"0:29:2976"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"2:13301:33943":{"id":"2:13301:33943","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:9088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:321:3614":{"id":"b:2:2713-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:27975"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13319:28365":{"id":"2:13319:28365","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:33945","str::rsplit":"2:13325:29282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:8702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381:4014":{"id":"0:381:4014","crate_id":0,"name":"EnteredSpan","span":{"filename":"src/span.rs","begin":[401,0],"end":[411,1]},"visibility":"public","docs":"An owned version of [`Entered`], a guard representing a span which has been\nentered and is currently executing.\n\nWhen the guard is dropped, the span will be exited.\n\nThis is returned by the [`Span::entered`] function.\n\n[`Span::entered`]: super::Span::entered()","links":{"`Entered`":"0:375:4009","super::Span::entered()":"0:179:4208"},"attrs":["#[must_use = \"once a span has been entered, it should be exited\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:240","a:2:32385:236-0:381:4014","a:2:32444:4663-0:381:4014","a:2:42247:10727-0:381:4014","a:2:3241:4660-0:381:4014","a:2:42248:10921-0:381:4014","a:2:3206:246-0:381:4014","b:0:110-0:381:4014","b:0:125-0:381:4014","b:2:2987-0:381:4014","b:2:2983-0:381:4014","b:2:2998-0:381:4014","b:2:2993-0:381:4014","b:2:2713-0:381:4014","b:2:2710-0:381:4014","b:2:3822-0:381:4014","0:243","0:223","0:384","0:249","0:219"]}}},"0:327:808":{"id":"0:327:808","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[264,13],"end":[264,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:375:4009":{"id":"b:2:2993-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13286:29274":{"id":"2:13286:29274","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:29273","str::split_at_mut_checked":"2:13288:29278"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:381:4014":{"id":"b:2:3822-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2710-0:278:3651":{"id":"b:2:2710-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2712:4432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:365:2988":{"id":"0:20-0:365:2988","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[965,0],"end":[965,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"self::span::Span","name":"Span","id":"0:365:2988","glob":false}}},"0:129:2974":{"id":"0:129:2974","crate_id":0,"name":"dispatcher","span":{"filename":"src/instrument.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Borrows the [`Dispatch`] that is entered when this type is polled.","links":{"`Dispatch`":"20:798:2975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:798:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13315:5221":{"id":"2:13315:5221","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2974":{"id":"0:46:2974","crate_id":0,"name":"dispatcher","span":{"filename":"src/dispatcher.rs","begin":[1,0],"end":[145,47]},"visibility":"public","docs":"Dispatches trace events to [`Subscriber`]s.\n\nThe _dispatcher_ is the component of the tracing system which is responsible\nfor forwarding trace data from the instrumentation points that generate it\nto the subscriber that collects it.\n\n# Using the Trace Dispatcher\n\nEvery thread in a program using `tracing` has a _default subscriber_. When\nevents occur, or spans are created, they are dispatched to the thread's\ncurrent subscriber.\n\n## Setting the Default Subscriber\n\nBy default, the current subscriber is an empty implementation that does\nnothing. To use a subscriber implementation, it must be set as the default.\nThere are two methods for doing so: [`with_default`] and\n[`set_global_default`]. `with_default` sets the default subscriber for the\nduration of a scope, while `set_global_default` sets a default subscriber\nfor the entire process.\n\nTo use either of these functions, we must first wrap our subscriber in a\n[`Dispatch`], a cloneable, type-erased reference to a subscriber. For\nexample:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\nuse dispatcher::Dispatch;\n\nlet my_subscriber = FooSubscriber::new();\nlet my_dispatch = Dispatch::new(my_subscriber);\n```\nThen, we can use [`with_default`] to set our `Dispatch` as the default for\nthe duration of a block:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\n# #[cfg(feature = \"std\")]\ndispatcher::with_default(&my_dispatch, || {\n    // my_subscriber is the default\n});\n\n// no default subscriber again\n```\nIt's important to note that `with_default` will not propagate the current\nthread's default subscriber to any threads spawned within the `with_default`\nblock. To propagate the default subscriber to new threads, either use\n`with_default` from the new thread, or use `set_global_default`.\n\nAs an alternative to `with_default`, we can use [`set_global_default`] to\nset a `Dispatch` as the default for all threads, for the lifetime of the\nprogram. For example:\n```rust\n# pub struct FooSubscriber;\n# use tracing_core::{\n#   dispatcher, Event, Metadata,\n#   span::{Attributes, Id, Record}\n# };\n# impl tracing_core::Subscriber for FooSubscriber {\n#   fn new_span(&self, _: &Attributes) -> Id { Id::from_u64(0) }\n#   fn record(&self, _: &Id, _: &Record) {}\n#   fn event(&self, _: &Event) {}\n#   fn record_follows_from(&self, _: &Id, _: &Id) {}\n#   fn enabled(&self, _: &Metadata) -> bool { false }\n#   fn enter(&self, _: &Id) {}\n#   fn exit(&self, _: &Id) {}\n# }\n# impl FooSubscriber { fn new() -> Self { FooSubscriber } }\n# let my_subscriber = FooSubscriber::new();\n# let my_dispatch = dispatcher::Dispatch::new(my_subscriber);\n// no default subscriber\n\ndispatcher::set_global_default(my_dispatch)\n    // `set_global_default` will return an error if the global default\n    // subscriber has already been set.\n    .expect(\"global default was already set!\");\n\n// `my_subscriber` is now the default\n```\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: The thread-local scoped dispatcher (<code>with_default</code>)\nrequires the Rust standard library. <code>no_std</code> users should\nuse <a href=\"fn.set_global_default.html\"><code>set_global_default</code></a>\ninstead.\n</pre>\n\n## Accessing the Default Subscriber\n\nA thread's current default subscriber can be accessed using the\n[`get_default`] function, which executes a closure with a reference to the\ncurrently default `Dispatch`. This is used primarily by `tracing`\ninstrumentation.\n\n[`Subscriber`]: crate::Subscriber","links":{"`get_default`":"20:169:3009","`with_default`":"20:155:3465","`set_global_default`":"20:158:3467","crate::Subscriber":"20:681:2980","`Dispatch`":"20:798:2975"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:47-20:157:3464","0:48-20:155:3465","0:49-20:824:3466","0:51-20:169:3009","0:52-20:158:3467","0:53-20:798:2975","0:54-20:160:3468","0:55-20:802:3469"],"is_stripped":false}}},"b:2:3822-0:375:4009":{"id":"b:2:3822-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13390:29131":{"id":"2:13390:29131","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:16214","Self::is_ascii":"2:13389:28291"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:16214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:365:2988":{"id":"b:2:3822-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:120:3703":{"id":"0:120:3703","crate_id":0,"name":"into_inner","span":{"filename":"src/instrument.rs","begin":[361,4],"end":[373,5]},"visibility":"public","docs":"Consumes the `Instrumented`, returning the wrapped type.\n\nNote that this drops the span.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1386,0],"end":[1390,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10595:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:206:880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42248:10921-0:375:4009":{"id":"a:2:42248:10921-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:10921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13277:29248":{"id":"2:13277:29248","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:321:3614":{"id":"b:2:2998-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2710-0:375:4009":{"id":"b:2:2710-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2704:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2712:4432"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141:2981":{"id":"0:141:2981","crate_id":0,"name":"span","span":{"filename":"src/span.rs","begin":[1,0],"end":[1623,1]},"visibility":"public","docs":" Spans represent periods of time in which a program was executing in a\n particular context.\n\n A span consists of [fields], user-defined key-value pairs of arbitrary data\n that describe the context the span represents, and a set of fixed attributes\n that describe all `tracing` spans and events. Attributes describing spans\n include:\n\n - An [`Id`] assigned by the subscriber that uniquely identifies it in relation\n   to other spans.\n - The span's [parent] in the trace tree.\n - [Metadata] that describes static characteristics of all spans\n   originating from that callsite, such as its name, source code location,\n   [verbosity level], and the names of its fields.\n\n # Creating Spans\n\n Spans are created using the [`span!`] macro. This macro is invoked with the\n following arguments, in order:\n\n - The [`target`] and/or [`parent`][parent] attributes, if the user wishes to\n   override their default values.\n - The span's [verbosity level]\n - A string literal providing the span's name.\n - Finally, zero or more arbitrary key/value fields.\n\n [`target`]: super::Metadata::target\n\n For example:\n ```rust\n use tracing::{span, Level};\n\n /// Construct a new span at the `INFO` level named \"my_span\", with a single\n /// field named answer , with the value `42`.\n let my_span = span!(Level::INFO, \"my_span\", answer = 42);\n ```\n\n The documentation for the [`span!`] macro provides additional examples of\n the various options that exist when creating spans.\n\n The [`trace_span!`], [`debug_span!`], [`info_span!`], [`warn_span!`], and\n [`error_span!`] exist as shorthand for constructing spans at various\n verbosity levels.\n\n ## Recording Span Creation\n\n The [`Attributes`] type contains data associated with a span, and is\n provided to the [`Subscriber`] when a new span is created. It contains\n the span's metadata, the ID of [the span's parent][parent] if one was\n explicitly set, and any fields whose values were recorded when the span was\n constructed. The subscriber, which is responsible for recording `tracing`\n data, can then store or record these values.\n\n # The Span Lifecycle\n\n ## Entering a Span\n\n A thread of execution is said to _enter_ a span when it begins executing,\n and _exit_ the span when it switches to another context. Spans may be\n entered through the [`enter`], [`entered`], and [`in_scope`] methods.\n\n The [`enter`] method enters a span, returning a [guard] that exits the span\n when dropped\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var);\n\n // `my_span` exists but has not been entered.\n\n // Enter `my_span`...\n let _enter = my_span.enter();\n\n // Perform some work inside of the context of `my_span`...\n // Dropping the `_enter` guard will exit the span.\n```\n\n <div class=\"example-wrap\" style=\"display:inline-block\"><pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n     <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n     <code>Span::enter</code> may produce incorrect traces if the returned drop\n     guard is held across an await point. See\n     <a href=\"struct.Span.html#in-asynchronous-code\">the method documentation</a>\n     for details.\n </pre></div>\n\n The [`entered`] method is analogous to [`enter`], but moves the span into\n the returned guard, rather than borrowing it. This allows creating and\n entering a span in a single expression:\n\n ```\n # use tracing::{span, Level};\n // Create a span and enter it, returning a guard:\n let span = span!(Level::INFO, \"my_span\").entered();\n\n // We are now inside the span! Like `enter()`, the guard returned by\n // `entered()` will exit the span when it is dropped...\n\n // ...but, it can also be exited explicitly, returning the `Span`\n // struct:\n let span = span.exit();\n ```\n\n Finally, [`in_scope`] takes a closure or function pointer and executes it\n inside the span:\n\n ```\n # use tracing::{span, Level};\n let my_var: u64 = 5;\n let my_span = span!(Level::TRACE, \"my_span\", my_var = &my_var);\n\n my_span.in_scope(|| {\n     // perform some work in the context of `my_span`...\n });\n\n // Perform some work outside of the context of `my_span`...\n\n my_span.in_scope(|| {\n     // Perform some more work in the context of `my_span`.\n });\n ```\n\n <pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n     <strong>Note</strong>: Since entering a span takes <code>&self</code>, and\n     <code>Span</code>s are <code>Clone</code>, <code>Send</code>, and\n     <code>Sync</code>, it is entirely valid for multiple threads to enter the\n     same span concurrently.\n </pre>\n\n ## Span Relationships\n\n Spans form a tree structure — unless it is a root span, all spans have a\n _parent_, and may have one or more _children_. When a new span is created,\n the current span becomes the new span's parent. The total execution time of\n a span consists of the time spent in that span and in the entire subtree\n represented by its children. Thus, a parent span always lasts for at least\n as long as the longest-executing span in its subtree.\n\n ```\n # use tracing::{Level, span};\n // this span is considered the \"root\" of a new trace tree:\n span!(Level::INFO, \"root\").in_scope(|| {\n     // since we are now inside \"root\", this span is considered a child\n     // of \"root\":\n     span!(Level::DEBUG, \"outer_child\").in_scope(|| {\n         // this span is a child of \"outer_child\", which is in turn a\n         // child of \"root\":\n         span!(Level::TRACE, \"inner_child\").in_scope(|| {\n             // and so on...\n         });\n     });\n     // another span created here would also be a child of \"root\".\n });\n```\n\n In addition, the parent of a span may be explicitly specified in\n the `span!` macro. For example:\n\n ```rust\n # use tracing::{Level, span};\n // Create, but do not enter, a span called \"foo\".\n let foo = span!(Level::INFO, \"foo\");\n\n // Create and enter a span called \"bar\".\n let bar = span!(Level::INFO, \"bar\");\n let _enter = bar.enter();\n\n // Although we have currently entered \"bar\", \"baz\"'s parent span\n // will be \"foo\".\n let baz = span!(parent: &foo, Level::INFO, \"baz\");\n ```\n\n A child span should typically be considered _part_ of its parent. For\n example, if a subscriber is recording the length of time spent in various\n spans, it should generally include the time spent in a span's children as\n part of that span's duration.\n\n In addition to having zero or one parent, a span may also _follow from_ any\n number of other spans. This indicates a causal relationship between the span\n and the spans that it follows from, but a follower is *not* typically\n considered part of the duration of the span it follows. Unlike the parent, a\n span may record that it follows from another span after it is created, using\n the [`follows_from`] method.\n\n As an example, consider a listener task in a server. As the listener accepts\n incoming connections, it spawns new tasks that handle those connections. We\n might want to have a span representing the listener, and instrument each\n spawned handler task with its own span. We would want our instrumentation to\n record that the handler tasks were spawned as a result of the listener task.\n However, we might not consider the handler tasks to be _part_ of the time\n spent in the listener task, so we would not consider those spans children of\n the listener span. Instead, we would record that the handler tasks follow\n from the listener, recording the causal relationship but treating the spans\n as separate durations.\n\n ## Closing Spans\n\n Execution may enter and exit a span multiple times before that span is\n _closed_. Consider, for example, a future which has an associated\n span and enters that span every time it is polled:\n ```rust\n # use std::future::Future;\n # use std::task::{Context, Poll};\n # use std::pin::Pin;\n struct MyFuture {\n    // data\n    span: tracing::Span,\n }\n\n impl Future for MyFuture {\n     type Output = ();\n\n     fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n         let _enter = self.span.enter();\n         // Do actual future work...\n # Poll::Ready(())\n     }\n }\n ```\n\n If this future was spawned on an executor, it might yield one or more times\n before `poll` returns [`Poll::Ready`]. If the future were to yield, then\n the executor would move on to poll the next future, which may _also_ enter\n an associated span or series of spans. Therefore, it is valid for a span to\n be entered repeatedly before it completes. Only the time when that span or\n one of its children was the current span is considered to be time spent in\n that span. A span which is not executing and has not yet been closed is said\n to be _idle_.\n\n Because spans may be entered and exited multiple times before they close,\n [`Subscriber`]s have separate trait methods which are called to notify them\n of span exits and when span handles are dropped. When execution exits a\n span, [`exit`] will always be called with that span's ID to notify the\n subscriber that the span has been exited. When span handles are dropped, the\n [`drop_span`] method is called with that span's ID. The subscriber may use\n this to determine whether or not the span will be entered again.\n\n If there is only a single handle with the capacity to exit a span, dropping\n that handle \"closes\" the span, since the capacity to enter it no longer\n exists. For example:\n ```\n # use tracing::{Level, span};\n {\n     span!(Level::TRACE, \"my_span\").in_scope(|| {\n         // perform some work in the context of `my_span`...\n     }); // --> Subscriber::exit(my_span)\n\n     // The handle to `my_span` only lives inside of this block; when it is\n     // dropped, the subscriber will be informed via `drop_span`.\n\n } // --> Subscriber::drop_span(my_span)\n ```\n\n However, if multiple handles exist, the span can still be re-entered even if\n one or more is dropped. For determining when _all_ handles to a span have\n been dropped, `Subscriber`s have a [`clone_span`] method, which is called\n every time a span handle is cloned. Combined with `drop_span`, this may be\n used to track the number of handles to a given span — if `drop_span` has\n been called one more time than the number of calls to `clone_span` for a\n given ID, then no more handles to the span with that ID exist. The\n subscriber may then treat it as closed.\n\n # When to use spans\n\n As a rule of thumb, spans should be used to represent discrete units of work\n (e.g., a given request's lifetime in a server) or periods of time spent in a\n given context (e.g., time spent interacting with an instance of an external\n system, such as a database).\n\n Which scopes in a program correspond to new spans depend somewhat on user\n intent. For example, consider the case of a loop in a program. Should we\n construct one span and perform the entire loop inside of that span, like:\n\n ```rust\n # use tracing::{Level, span};\n # let n = 1;\n let span = span!(Level::TRACE, \"my_loop\");\n let _enter = span.enter();\n for i in 0..n {\n     # let _ = i;\n     // ...\n }\n ```\n Or, should we create a new span for each iteration of the loop, as in:\n ```rust\n # use tracing::{Level, span};\n # let n = 1u64;\n for i in 0..n {\n     let span = span!(Level::TRACE, \"my_loop\", iteration = i);\n     let _enter = span.enter();\n     // ...\n }\n ```\n\n Depending on the circumstances, we might want to do either, or both. For\n example, if we want to know how long was spent in the loop overall, we would\n create a single span around the entire loop; whereas if we wanted to know how\n much time was spent in each individual iteration, we would enter a new span\n on every iteration.\n\n [fields]: super::field\n [Metadata]: super::Metadata\n [verbosity level]: super::Level\n [`Poll::Ready`]: std::task::Poll::Ready\n [`span!`]: super::span!\n [`trace_span!`]: super::trace_span!\n [`debug_span!`]: super::debug_span!\n [`info_span!`]: super::info_span!\n [`warn_span!`]: super::warn_span!\n [`error_span!`]: super::error_span!\n [`clone_span`]: super::subscriber::Subscriber::clone_span()\n [`drop_span`]: super::subscriber::Subscriber::drop_span()\n [`exit`]: super::subscriber::Subscriber::exit\n [`Subscriber`]: super::subscriber::Subscriber\n [`enter`]: Span::enter()\n [`entered`]: Span::entered()\n [`in_scope`]: Span::in_scope()\n [`follows_from`]: Span::follows_from()\n [guard]: Entered\n [parent]: #span-relationships","links":{"std::task::Poll::Ready":"2:44861:218","super::info_span!":"0:26:3205","Span::enter()":"0:178:3681","`Attributes`":"20:1095:3975","super::trace_span!":"0:24:3189","super::span!":"0:23:2981","Span::in_scope()":"0:183:4288","Span::entered()":"0:179:4208","Span::follows_from()":"0:197:4371","super::subscriber::Subscriber::drop_span()":"20:694:5006","super::field":"0:57:795","`Id`":"20:1080:2982","super::Metadata":"20:477:2987","super::Level":"20:1000:2986","super::subscriber::Subscriber":"20:681:2980","Entered":"0:375:4009","super::subscriber::Subscriber::exit":"20:692:4266","super::subscriber::Subscriber::clone_span()":"20:693:4064","super::debug_span!":"0:25:3197","super::warn_span!":"0:27:3213","super::Metadata::target":"20:494:1760","super::error_span!":"0:28:3221"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143-20:1095:3975","0:144-20:1080:2982","0:145-20:1103:3018","0:161:3979","0:365:2988","0:375:4009","0:381:4014"],"is_stripped":false}}},"0:24:3189":{"id":"0:24:3189","crate_id":0,"name":"trace_span","span":{"filename":"src/macros.rs","begin":[167,0],"end":[212,1]},"visibility":"public","docs":"Constructs a span at the trace level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\ntrace_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::TRACE, \"my_span\");\n# }\n```\n\n```rust\n# use tracing::{trace_span, span, Level};\n# fn main() {\nlet span = trace_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3043","crate::span!":"0:23:2981","crate#configuring-attributes":"0:0:3043","crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"0:109:1325":{"id":"0:109:1325","crate_id":0,"name":"poll","span":{"filename":"src/instrument.rs","begin":[318,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Context","id":"2:13881:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Poll","id":"2:44859:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:44834:150","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3002:1819":{"id":"2:3002:1819","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:3700":{"id":"0:133:3700","crate_id":0,"name":"inner_pin_mut","span":{"filename":"src/instrument.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Get a pinned mutable reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42247:10727-0:381:4014":{"id":"a:2:42247:10727-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:365:2988":{"id":"b:2:2987-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13271:28276":{"id":"2:13271:28276","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:16145"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:790-0:278:3651":{"id":"b:5:790-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:792:5285","5:793:5286","5:794:5287"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225:838":{"id":"0:225:838","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1450,4],"end":[1452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[315,0],"end":[323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:108:198","0:109:1325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:2992":{"id":"0:135:2992","crate_id":0,"name":"level_filters","span":{"filename":"src/level_filters.rs","begin":[1,0],"end":[98,1]},"visibility":"public","docs":"Trace verbosity level filtering.\n\n# Compile time filters\n\nTrace verbosity levels can be statically disabled at compile time via Cargo\nfeatures, similar to the [`log` crate]. Trace instrumentation at disabled\nlevels will be skipped and will not even be present in the resulting binary\nunless the verbosity level is specified dynamically. This level is\nconfigured separately for release and debug builds. The features are:\n\n* `max_level_off`\n* `max_level_error`\n* `max_level_warn`\n* `max_level_info`\n* `max_level_debug`\n* `max_level_trace`\n* `release_max_level_off`\n* `release_max_level_error`\n* `release_max_level_warn`\n* `release_max_level_info`\n* `release_max_level_debug`\n* `release_max_level_trace`\n\nThese features control the value of the `STATIC_MAX_LEVEL` constant. The\ninstrumentation macros macros check this value before recording an event or\nconstructing a span. By default, no levels are disabled.\n\nFor example, a crate can disable trace level instrumentation in debug builds\nand trace, debug, and info level instrumentation in release builds with the\nfollowing configuration:\n\n```toml\n[dependencies]\ntracing = { version = \"0.1\", features = [\"max_level_debug\", \"release_max_level_warn\"] }\n```\n## Notes\n\nPlease note that `tracing`'s static max level features do *not* control the\n[`log`] records that may be emitted when [`tracing`'s \"log\" feature flag][f] is\nenabled. This is to allow `tracing` to be disabled entirely at compile time\nwhile still emitting `log` records --- such as when a library using\n`tracing` is used by an application using `log` that doesn't want to\ngenerate any `tracing`-related code, but does want to collect `log` records.\n\nThis means that if the \"log\" feature is in use, some code may be generated\nfor `log` records emitted by disabled `tracing` events. If this is not\ndesirable, `log` records may be disabled separately using [`log`'s static\nmax level features][`log` crate].\n\n[`log`]: https://docs.rs/log/\n[`log` crate]: https://docs.rs/log/latest/log/#compile-time-filters\n[f]: https://docs.rs/tracing/latest/tracing/#emitting-log-records","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:137-20:1030:3748","0:138-20:1016:3394","0:139:3393"],"is_stripped":false}}},"2:13364:35509":{"id":"2:13364:35509","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:793:5286":{"id":"5:793:5286","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1375,0],"end":[1384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2760:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:204:703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:321:3614":{"id":"0:321:3614","crate_id":0,"name":"Instrumented","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"public","docs":"A [`Future`] that has been instrumented with a `tracing` [`Span`].\n\nThis type is returned by the [`Instrument`] extension trait. See that\ntrait's documentation for details.\n\n[`Future`]: std::future::Future\n[`Span`]: crate::Span","links":{"crate::Span":"0:365:2988","std::future::Future":"2:44834:150","`Instrument`":"0:88:2973"},"attrs":["#[must_use = \"futures do nothing unless you `.await` or poll them\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:112","a:2:32385:236-0:321:3614","a:2:42247:10727-0:321:3614","a:2:3241:4660-0:321:3614","a:2:42248:10921-0:321:3614","a:2:3206:246-0:321:3614","b:0:110-0:321:3614","b:0:125-0:321:3614","b:2:2987-0:321:3614","b:2:2983-0:321:3614","b:2:2998-0:321:3614","b:2:2993-0:321:3614","b:2:2713-0:321:3614","b:2:2710-0:321:3614","b:2:13680-0:321:3614","b:2:3822-0:321:3614","b:5:790-0:321:3614","0:356","0:106","0:328","0:359","0:325"]}}},"2:13274:29250":{"id":"2:13274:29250","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:13680-0:278:3651":{"id":"b:2:13680-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:44837:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:13682:198","2:13683:163","2:13684:962"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"5:5699:36214":{"id":"5:5699:36214","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:3393":{"id":"0:139:3393","crate_id":0,"name":"STATIC_MAX_LEVEL","span":{"filename":"src/level_filters.rs","begin":[66,0],"end":[66,64]},"visibility":"public","docs":"The statically configured maximum trace level.\n\nSee the [module-level documentation] for information on how to configure\nthis.\n\nThis value is checked by the `event!` and `span!` macros. Code that\nmanually constructs events or spans via the `Event::record` function or\n`Span` constructors should compare the level against this value to\ndetermine if those spans or events are enabled.\n\n[module-level documentation]: self#compile-time-filters","links":{"self#compile-time-filters":"0:135:2992"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"resolved_path":{"name":"LevelFilter","id":"20:1016:3394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"_","value":null,"is_literal":false}}},"b:5:790-0:321:3614":{"id":"b:5:790-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:792:5285","5:793:5286","5:794:5287"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3206:246-0:381:4014":{"id":"a:2:3206:246-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2998-0:381:4014":{"id":"b:2:2998-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250:675":{"id":"0:250:675","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1574,4],"end":[1576,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137-20:1030:3748":{"id":"0:137-20:1030:3748","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,23],"end":[53,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::metadata::ParseLevelFilterError","name":"ParseLevelFilterError","id":"20:1030:3748","glob":false}}},"b:2:3822-0:321:3614":{"id":"b:2:3822-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13281:3682":{"id":"2:13281:3682","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:838":{"id":"0:216:838","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1432,4],"end":[1434,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:278:3651":{"id":"b:2:2993-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:13680-0:321:3614":{"id":"b:2:13680-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"2:44837:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:13682:198","2:13683:163","2:13684:962"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:174:1226":{"id":"0:174:1226","crate_id":0,"name":"none","span":{"filename":"src/span.rs","begin":[533,4],"end":[538,5]},"visibility":"public","docs":"Constructs a new span that is *completely disabled*.\n\nThis can be used rather than `Option<Span>` to represent cases where a\nspan is not present.\n\nEntering, exiting, and recording values on this span will do nothing.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:4371":{"id":"0:197:4371","crate_id":0,"name":"follows_from","span":{"filename":"src/span.rs","begin":[1310,4],"end":[1317,5]},"visibility":"public","docs":"Indicates that the span with the given ID has an indirect causal\nrelationship with this span.\n\nThis relationship differs somewhat from the parent-child relationship: a\nspan may have any number of prior spans, rather than a single one; and\nspans are not considered to be executing _inside_ of the spans they\nfollow from. This means that a span may close even if subsequent spans\nthat follow from it are still open, and time spent inside of a\nsubsequent span should not be included in the time its precedents were\nexecuting. This is used to model causal relationships such as when a\nsingle future spawns several related background tasks, et cetera.\n\nIf this span is disabled, or the resulting follows-from relationship\nwould be invalid, this function will do nothing.\n\n# Examples\n\nSetting a `follows_from` relationship with a `Span`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span1 = span!(Level::INFO, \"span_1\");\nlet span2 = span!(Level::DEBUG, \"span_2\");\nspan2.follows_from(span1);\n```\n\nSetting a `follows_from` relationship with the current span:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nspan.follows_from(Span::current());\n```\n\nSetting a `follows_from` relationship with a `Span` reference:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet curr = Span::current();\nspan.follows_from(&curr);\n```\n\nSetting a `follows_from` relationship with an `Id`:\n```\n# use tracing::{span, Id, Level, Span};\nlet span = span!(Level::INFO, \"hello!\");\nlet id = span.id();\nspan.follows_from(id);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"impl_trait":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"impl Into<Option<Id>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32444:4663-0:375:4009":{"id":"a:2:32444:4663-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2987-0:375:4009":{"id":"b:2:2987-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:330:479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:29:2976":{"id":"0:29:2976","crate_id":0,"name":"event","span":{"filename":"src/macros.rs","begin":[585,0],"end":[1023,1]},"visibility":"public","docs":"Constructs a new `Event`.\n\nThe event macro is invoked with a `Level` and up to 32 key-value fields.\nOptionally, a format string and arguments may follow the fields; this will\nbe used to construct an implicit field named \"message\".\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::{event, Level};\n\n# fn main() {\nlet data = (42, \"forty-two\");\nlet private_data = \"private\";\nlet error = \"a bad error\";\n\nevent!(Level::ERROR, %error, \"Received error\");\nevent!(\n    target: \"app_events\",\n    Level::WARN,\n    private_data,\n    ?data,\n    \"App warning: {}\",\n    error\n);\nevent!(name: \"answer\", Level::INFO, the_answer = data.0);\nevent!(Level::INFO, the_answer = data.0);\n# }\n```\n","links":{"crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $lvl:expr, $($arg:tt)+) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (name: $name:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (name: $name:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* } ) => { ... };\n    (target: $target:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, $lvl:expr, $($k:ident).+ = $($fields:tt)* ) => { ... };\n    (target: $target:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ( $lvl:expr, { $($fields:tt)* }, $($arg:tt)+ ) => { ... };\n    ($lvl:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    ($lvl:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    ($lvl:expr, ?$($k:ident).+) => { ... };\n    ($lvl:expr, %$($k:ident).+) => { ... };\n    ($lvl:expr, $($k:ident).+) => { ... };\n    ( $lvl:expr, $($arg:tt)+ ) => { ... };\n}"}},"2:13266:35495":{"id":"2:13266:35495","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-20:798:2975":{"id":"0:53-20:798:2975","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,37],"end":[136,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::Dispatch","name":"Dispatch","id":"20:798:2975","glob":false}}},"2:13378:35513":{"id":"2:13378:35513","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1540,0],"end":[1554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:3999","0:242:4266"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:198":{"id":"0:108:198","crate_id":0,"name":"Output","span":{"filename":"src/instrument.rs","begin":[316,4],"end":[316,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Future","id":"2:44834:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:29250","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:33940":{"id":"2:13295:33940","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:33945"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:9087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:375:4009":{"id":"b:0:110-0:375:4009","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:3624":{"id":"0:90:3624","crate_id":0,"name":"in_current_span","span":{"filename":"src/instrument.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":"Instruments this type with the [current] [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\nThis can be used to propagate the current span when spawning a new future.\n\n# Examples\n\n```rust\nuse tracing::Instrument;\n\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# async fn doc() {\nlet span = tracing::info_span!(\"my_span\");\nlet _enter = span.enter();\n\n// ...\n\nlet future = async {\n    tracing::debug!(\"this event will occur inside `my_span`\");\n    // ...\n};\ntokio::spawn(future.in_current_span());\n# }\n```\n\n[current]: super::Span::current()\n[entered]: super::Span::enter()\n[`Span`]: crate::Span\n[`Future`]: std::future::Future","links":{"crate::Span":"0:365:2988","std::future::Future":"2:44834:150","super::Span::enter()":"0:178:3681","`Drop`":"2:3443:4385","super::Span::current()":"0:175:3325"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:10719":{"id":"2:13400:10719","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:10719"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:8962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-20:259:795":{"id":"0:58-20:259:795","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[114,0],"end":[114,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::field","name":"field","id":"20:259:795","glob":true}}},"b:2:2993-0:365:2988":{"id":"b:2:2993-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2963:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:137","2:2997:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:3698":{"id":"0:118:3698","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[349,4],"end":[351,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:4660-0:321:3614":{"id":"a:2:3241:4660-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2713-0:365:2988":{"id":"b:2:2713-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27975"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:369:479":{"id":"0:369:479","crate_id":0,"name":"clone","span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42247:10727-0:278:3651":{"id":"a:2:42247:10727-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:55-20:802:3469":{"id":"0:55-20:802:3469","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,70],"end":[136,82]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::WeakDispatch","name":"WeakDispatch","id":"20:802:3469","glob":false}}},"0:175:3325":{"id":"0:175:3325","crate_id":0,"name":"current","span":{"filename":"src/span.rs","begin":[549,4],"end":[561,5]},"visibility":"public","docs":"Returns a handle to the span [considered by the `Subscriber`] to be the\ncurrent span.\n\nIf the subscriber indicates that it does not track the current span, or\nthat the thread from which this function is called is not currently\ninside a span, the returned span will be disabled.\n\n[considered by the `Subscriber`]:\n    super::subscriber::Subscriber::current_span","links":{"super::subscriber::Subscriber::current_span":"20:696:4063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:3388":{"id":"0:37:3388","crate_id":0,"name":"error","span":{"filename":"src/macros.rs","begin":[2426,0],"end":[2677,1]},"visibility":"public","docs":"Constructs an event at the error level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::error;\n# fn main() {\n\nlet (err_info, port) = (\"No connection\", 22);\n\nerror!(port, error = %err_info);\nerror!(target: \"app_events\", \"App Error: {}\", err_info);\nerror!({ info = err_info }, \"error on port: {}\", port);\nerror!(name: \"invalid_input\", \"Invalid input: {}\", err_info);\n# }\n```","links":{"crate#using-the-macros":"0:0:3043","crate::event!":"0:29:2976"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! error {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1431,0],"end":[1435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:216:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:92:3649":{"id":"0:92:3649","crate_id":0,"name":"with_subscriber","span":{"filename":"src/instrument.rs","begin":[176,4],"end":[184,5]},"visibility":"default","docs":"Attaches the provided [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached [`Subscriber`] will be set as the [default] when the returned\n[`Future`] is polled.\n\n# Examples\n\n```\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# use tracing::subscriber::NoSubscriber as MyOtherSubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Set the default `Subscriber`\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n\n// Create a different `Subscriber` and attach it to a future.\nlet other_subscriber = MyOtherSubscriber::default();\nlet future = async {\n    tracing::info!(\"this event will be recorded by the other `Subscriber`\");\n    // ...\n};\n\nfuture\n    // Attach the other `Subscriber` to the future before awaiting it\n    .with_subscriber(other_subscriber)\n    .await;\n\n// Once the future has completed, we return to the default `Subscriber`.\ntracing::info!(\"this event will be recorded by the default `Subscriber`\");\n# }\n```\n\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:681:2980","`WithDispatch`":"0:278:3651","std::future::Future":"2:44834:150","crate::dispatcher#setting-the-default-subscriber":"0:46:2974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Dispatch","id":"20:798:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:28295":{"id":"2:13391:28295","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13684:962":{"id":"2:13684:962","crate_id":2,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"2:44837:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:3563":{"id":"0:60:3563","crate_id":0,"name":"AsField","span":{"filename":"src/field.rs","begin":[129,0],"end":[135,1]},"visibility":"public","docs":"Trait implemented to allow a type to be used as a field key.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n<strong>Note</strong>: Although this is implemented for both the\n<a href=\"./struct.Field.html\"><code>Field</code></a> type <em>and</em> any\ntype that can be borrowed as an <code>&str</code>, only <code>Field</code>\nallows <em>O</em>(1) access.\nIndexing a field with a string results in an iterative search that performs\nstring comparisons. Thus, if possible, once the key for a field is known, it\nshould be used whenever possible.\n</pre>","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:61:3567"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"crate::sealed::Sealed","id":"0:277:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:64","0:67"]}}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[236,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:307:4976","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:3012":{"id":"0:173:3012","crate_id":0,"name":"new_disabled","span":{"filename":"src/span.rs","begin":[519,4],"end":[524,5]},"visibility":"public","docs":"Constructs a new disabled span with the given `Metadata`.\n\nThis should be used when a span is constructed from a known callsite,\nbut the subscriber indicates that it is disabled.\n\nEntering, exiting, and recording values on this span will not notify the\n`Subscriber` but _may_ record log messages if the `log` feature flag is\nenabled.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3822-0:278:3651":{"id":"b:2:3822-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3820:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3824:1834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2713-0:375:4009":{"id":"b:2:2713-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2715:27975"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19-20:477:2987":{"id":"0:19-20:477:2987","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,37],"end":[962,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::Metadata","name":"Metadata","id":"20:477:2987","glob":false}}},"2:13384:35515":{"id":"2:13384:35515","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:365:2988":{"id":"a:2:3206:246-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256-20:668:2979":{"id":"0:256-20:668:2979","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[2,0],"end":[2,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::subscriber","name":"subscriber","id":"20:668:2979","glob":true}}},"0:4-0:88:2973":{"id":"0:4-0:88:2973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[951,0],"end":[951,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"self::instrument::Instrument","name":"Instrument","id":"0:88:2973","glob":false}}},"0:209:808":{"id":"0:209:808","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[1393,4],"end":[1422,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:4288":{"id":"0:183:4288","crate_id":0,"name":"in_scope","span":{"filename":"src/span.rs","begin":[1100,4],"end":[1103,5]},"visibility":"public","docs":"Executes the given function in the context of this span.\n\nIf this span is enabled, then this function enters the span, invokes `f`\nand then exits the span. If the span is disabled, `f` will still be\ninvoked, but in the context of the currently-executing span (if there is\none).\n\nReturns the result of evaluating `f`.\n\n# Examples\n\n```\n# use tracing::{trace, span, Level};\nlet my_span = span!(Level::TRACE, \"my_span\");\n\nmy_span.in_scope(|| {\n    // this event occurs within the span.\n    trace!(\"i'm in the span!\");\n});\n\n// this event occurs outside the span.\ntrace!(\"i'm not in the span!\");\n```\n\nCalling a function and returning the result:\n```\n# use tracing::{info_span, Level};\nfn hello_world() -> String {\n    \"Hello world!\".to_owned()\n}\n\nlet span = info_span!(\"hello_world\");\n// the span will be entered for the duration of the call to\n// `hello_world`.\nlet a_string = span.in_scope(hello_world);\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3455:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1443,0],"end":[1447,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"items":["0:221:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2985":{"id":"0:199:2985","crate_id":0,"name":"metadata","span":{"filename":"src/span.rs","begin":[1325,4],"end":[1327,5]},"visibility":"public","docs":"Returns this span's `Metadata`, if it is enabled.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:35500":{"id":"2:13300:35500","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:9085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1572,0],"end":[1577,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3443:4385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:3213":{"id":"0:27:3213","crate_id":0,"name":"warn_span","span":{"filename":"src/macros.rs","begin":[410,0],"end":[455,1]},"visibility":"public","docs":"Constructs a span at the warn level.\n\n[Fields] and [attributes] are set using the same syntax as the [`span!`]\nmacro.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n[attributes]: crate#configuring-attributes\n[Fields]: crate#recording-fields\n[`span!`]: crate::span!\n\n# Examples\n\n```rust\n# use tracing::{warn_span, span, Level};\n# fn main() {\nwarn_span!(\"my_span\");\n// is equivalent to:\nspan!(Level::WARN, \"my_span\");\n# }\n```\n\n```rust\nuse tracing::warn_span;\n# fn main() {\nlet span = warn_span!(\"my span\");\nspan.in_scope(|| {\n    // do work inside the span...\n});\n# }\n```","links":{"crate#recording-fields":"0:0:3043","crate::span!":"0:23:2981","crate#configuring-attributes":"0:0:3043","crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! warn_span {\n    (target: $target:expr, parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $name:expr, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $name:expr) => { ... };\n    (target: $target:expr, $name:expr, $($field:tt)*) => { ... };\n    (target: $target:expr, $name:expr) => { ... };\n    ($name:expr, $($field:tt)*) => { ... };\n    ($name:expr) => { ... };\n}"}},"2:13352:35504":{"id":"2:13352:35504","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:35505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:9079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:3696":{"id":"0:117:3696","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[344,4],"end":[346,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:3347":{"id":"0:33:3347","crate_id":0,"name":"trace","span":{"filename":"src/macros.rs","begin":[1303,0],"end":[1554,1]},"visibility":"public","docs":"Constructs an event at the trace level.\n\nThis functions similarly to the [`event!`] macro. See [the top-level\ndocumentation][lib] for details on the syntax accepted by\nthis macro.\n\n[`event!`]: crate::event!\n[lib]: crate#using-the-macros\n\n# Examples\n\n```rust\nuse tracing::trace;\n# #[derive(Debug, Copy, Clone)] struct Position { x: f32, y: f32 }\n# impl Position {\n# const ORIGIN: Self = Self { x: 0.0, y: 0.0 };\n# fn dist(&self, other: Position) -> f32 {\n#    let x = (other.x - self.x).exp2(); let y = (self.y - other.y).exp2();\n#    (x + y).sqrt()\n# }\n# }\n# fn main() {\nlet pos = Position { x: 3.234, y: -1.223 };\nlet origin_dist = pos.dist(Position::ORIGIN);\n\ntrace!(position = ?pos, ?origin_dist);\ntrace!(\n    target: \"app_events\",\n    position = ?pos,\n    \"x is {} and y is {}\",\n    if pos.x >= 0.0 { \"positive\" } else { \"negative\" },\n    if pos.y >= 0.0 { \"positive\" } else { \"negative\" }\n);\ntrace!(name: \"completed\", position = ?pos);\n# }\n```","links":{"crate#using-the-macros":"0:0:3043","crate::event!":"0:29:2976"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! trace {\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, target: $target:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, target: $target:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (target: $target:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, ?$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, %$($k:ident).+ $($field:tt)+ ) => { ... };\n    (name: $name:expr, parent: $parent:expr, $($arg:tt)+ ) => { ... };\n    (name: $name:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (name: $name:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (name: $name:expr, $($arg:tt)+ ) => { ... };\n    (target: $target:expr, { $($field:tt)* }, $($arg:tt)* ) => { ... };\n    (target: $target:expr, $($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, ?$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, %$($k:ident).+ $($field:tt)* ) => { ... };\n    (target: $target:expr, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, { $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    (parent: $parent:expr, $($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+ = $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, ?$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, %$($k:ident).+, $($field:tt)*) => { ... };\n    (parent: $parent:expr, $($arg:tt)+) => { ... };\n    ({ $($field:tt)+ }, $($arg:tt)+ ) => { ... };\n    ($($k:ident).+ = $($field:tt)*) => { ... };\n    (?$($k:ident).+ = $($field:tt)*) => { ... };\n    (%$($k:ident).+ = $($field:tt)*) => { ... };\n    ($($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+, $($field:tt)*) => { ... };\n    (%$($k:ident).+, $($field:tt)*) => { ... };\n    (?$($k:ident).+) => { ... };\n    (%$($k:ident).+) => { ... };\n    ($($k:ident).+) => { ... };\n    ($($arg:tt)+) => { ... };\n}"}},"a:2:3241:4660-0:278:3651":{"id":"a:2:3241:4660-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[327,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:114:2981","0:115:3693","0:116:3615","0:117:3696","0:118:3698","0:119:3700","0:120:3703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:838":{"id":"0:218:838","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1438,4],"end":[1440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["span",{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:35502":{"id":"2:13331:35502","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:16144","str::split":"2:13319:28365","prim@char":"1:12355:475","str::split_terminator":"2:13328:35501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:9074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13346:4554":{"id":"2:13346:4554","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:35503"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:9082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3649":{"id":"0:200:3649","crate_id":0,"name":"with_subscriber","span":{"filename":"src/span.rs","begin":[1368,4],"end":[1372,5]},"visibility":"public","docs":"Invokes a function with a reference to this span's ID and subscriber.\n\nif this span is enabled, the provided function is called, and the result is returned.\nIf the span is disabled, the function is not called, and this method returns `None`\ninstead.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3455:142","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:798:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"impl FnOnce((&Id, &Dispatch)) -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3455:142","args":{"parenthesized":{"inputs":[{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Dispatch","id":"20:798:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:29136":{"id":"2:13396:29136","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40401"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:4066","2:13265:35494","2:13266:35495","2:13268:35496","2:13271:28276","2:13272:35497","2:13273:335","2:13274:29250","2:13275:29247","2:13277:29248","2:13279:29249","2:13281:3682","2:13283:35498","2:13284:35499","2:13285:29273","2:13286:29274","2:13287:29277","2:13288:29278","2:13290:9089","2:13291:9101","2:13292:8679","2:13293:33945","2:13295:33940","2:13298:28366","2:13300:35500","2:13301:33943","2:13302:29290","2:13305:28791","2:13308:28793","2:13311:5261","2:13315:5221","2:13319:28365","2:13322:29280","2:13325:29282","2:13328:35501","2:13331:35502","2:13334:29284","2:13337:29286","2:13340:29288","2:13343:29289","2:13346:4554","2:13349:35503","2:13352:35504","2:13355:35505","2:13358:35506","2:13360:35507","2:13362:35508","2:13364:35509","2:13365:35510","2:13366:35511","2:13369:35512","2:13372:28095","2:13375:29291","2:13378:35513","2:13381:35514","2:13384:35515","2:13387:35516","2:13389:28291","2:13390:29131","2:13391:28295","2:13392:28296","2:13393:28297","2:13394:29134","2:13395:29135","2:13396:29136","2:13397:35517","2:13400:10719","2:13401:35518"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:278:3651":{"id":"b:2:2713-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2715:27975"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:125-0:278:3651":{"id":"b:0:125-0:278:3651","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1556,0],"end":[1563,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3414:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:244:248","0:245:634"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[347,9],"end":[347,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:369:479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:3696":{"id":"0:131:3696","crate_id":0,"name":"inner_mut","span":{"filename":"src/instrument.rs","begin":[409,4],"end":[411,5]},"visibility":"public","docs":"Mutably borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:365:2988":{"id":"b:2:2983-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:3652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13401:35518":{"id":"2:13401:35518","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:35518"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:8970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:790-0:365:2988":{"id":"b:5:790-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2726:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:786:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:792:5285","5:793:5286","5:794:5287"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6-20:798:2975":{"id":"0:6-20:798:2975","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,15],"end":[952,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::dispatcher::Dispatch","name":"Dispatch","id":"20:798:2975","glob":false}}},"a:2:32444:4663-0:365:2988":{"id":"a:2:32444:4663-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:242:4266":{"id":"0:242:4266","crate_id":0,"name":"exit","span":{"filename":"src/span.rs","begin":[1548,4],"end":[1553,5]},"visibility":"public","docs":"Exits this span, returning the underlying [`Span`].","links":{"`Span`":"0:365:2988"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32385:236-0:278:3651":{"id":"a:2:32385:236-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:115:3693":{"id":"0:115:3693","crate_id":0,"name":"span_mut","span":{"filename":"src/instrument.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Mutably borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2715:27975":{"id":"2:2715:27975","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1425,0],"end":[1429,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Id","id":"20:1080:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"items":["0:212:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2998-0:375:4009":{"id":"b:2:2998-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13264:4066":{"id":"2:13264:4066","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:29249":{"id":"2:13279:29249","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:278:3651":{"id":"b:2:2987-0:278:3651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13292:8679":{"id":"2:13292:8679","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:5993","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:248":{"id":"0:244:248","crate_id":0,"name":"Target","span":{"filename":"src/span.rs","begin":[1557,4],"end":[1557,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13349:35503":{"id":"2:13349:35503","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:4554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:9083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:110-0:381:4014":{"id":"b:0:110-0:381:4014","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[150,0],"end":[159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:66:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:4208":{"id":"0:179:4208","crate_id":0,"name":"entered","span":{"filename":"src/span.rs","begin":[896,4],"end":[902,5]},"visibility":"public","docs":"Enters this span, consuming it and returning a [guard][`EnteredSpan`]\nthat will exit the span when dropped.\n\n<pre class=\"compile_fail\" style=\"white-space:normal;font:inherit;\">\n    <strong>Warning</strong>: In asynchronous code that uses async/await syntax,\n    <code>Span::entered</code> may produce incorrect traces if the returned drop\n    guard is held across an await point. See <a href=\"#in-asynchronous-code\">the\n    <code>Span::enter</code> documentation</a> for details.\n</pre>\n\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\nThis is similar to the [`Span::enter`] method, except that it moves the\nspan by value into the returned guard, rather than borrowing it.\nTherefore, this method can be used to create and enter a span in a\nsingle expression, without requiring a `let`-binding. For example:\n\n```\n# use tracing::info_span;\nlet _span = info_span!(\"something_interesting\").entered();\n```\nrather than:\n```\n# use tracing::info_span;\nlet span = info_span!(\"something_interesting\");\nlet _e = span.enter();\n```\n\nFurthermore, `entered` may be used when the span must be stored in some\nother struct or be passed to a function while remaining entered.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: The returned <a href=\"../struct.EnteredSpan.html\">\n    <code>EnteredSpan</code></a> guard does not implement <code>Send</code>.\n    Dropping the guard will exit <em>this</em> span, and if the guard is sent\n    to another thread and dropped there, that thread may never have entered\n    this span. Thus, <code>EnteredSpan</code>s should not be sent between threads.\n</pre>\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n\n# Examples\n\nThe returned guard can be [explicitly exited][EnteredSpan::exit],\nreturning the un-entered span:\n\n```\n# use tracing::{Level, span};\nlet span = span!(Level::INFO, \"doing_something\").entered();\n\n// code here is within the span\n\n// explicitly exit the span, returning it\nlet span = span.exit();\n\n// code here is no longer within the span\n\n// enter the span again\nlet span = span.entered();\n\n// now we are inside the span once again\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\").entered();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSince the [`EnteredSpan`] guard can dereference to the [`Span`] itself,\nthe span may still be accessed while entered. For example:\n\n```rust\n# use tracing::info_span;\nuse tracing::field;\n\n// create the span with an empty field, and enter it.\nlet span = info_span!(\"my_span\", some_field = field::Empty).entered();\n\n// we can still record a value for the field while the span is entered.\nspan.record(\"some_field\", &\"hello world!\");\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1080:2982","`EnteredSpan`":"0:381:4014","`Span::enter`":"0:178:3681","`Span`":"0:365:2988","super::subscriber::Subscriber::exit()":"20:692:4266","super::subscriber::Subscriber::enter()":"20:691:3681","EnteredSpan::exit":"0:242:4266"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:675":{"id":"0:248:675","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1567,4],"end":[1569,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-22:204:2972":{"id":"0:21-22:204:2972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[969,0],"end":[969,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"attributes\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"tracing_attributes::instrument","name":"instrument","id":"22:204:2972","glob":false}}},"0:245:634":{"id":"0:245:634","crate_id":0,"name":"deref","span":{"filename":"src/span.rs","begin":[1560,4],"end":[1562,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:703":{"id":"0:204:703","crate_id":0,"name":"eq","span":{"filename":"src/span.rs","begin":[1376,4],"end":[1383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:838":{"id":"0:212:838","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1426,4],"end":[1428,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:35497":{"id":"2:13272:35497","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-20:158:3467":{"id":"0:52-20:158:3467","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,17],"end":[136,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::set_global_default","name":"set_global_default","id":"20:158:3467","glob":false}}},"2:13372:28095":{"id":"2:13372:28095","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:3464":{"id":"0:263:3464","crate_id":0,"name":"set_default","span":{"filename":"src/subscriber.rs","begin":[58,0],"end":[63,1]},"visibility":"public","docs":"Sets the [`Subscriber`] as the default for the current thread for the\nduration of the lifetime of the returned [`DefaultGuard`].\n\nThe default subscriber is used when creating a new [`Span`] or [`Event`].\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event\n[`DefaultGuard`]: super::dispatcher::DefaultGuard","links":{"super::subscriber::Subscriber":"20:681:2980","super::span::Span":"0:365:2988","super::event::Event":"20:829:2977","super::dispatcher::DefaultGuard":"20:824:3466"},"attrs":["#[cfg(feature = \"std\")]","#[must_use = \"Dropping the guard unregisters the subscriber.\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"DefaultGuard","id":"20:824:3466","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:681:2980","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:795":{"id":"0:57:795","crate_id":0,"name":"field","span":{"filename":"src/field.rs","begin":[1,0],"end":[170,37]},"visibility":"public","docs":"`Span` and `Event` key-value data.\n\nSpans and events may be annotated with key-value data, referred to as _fields_.\nThese fields consist of a mapping from a key (corresponding to\na `&str` but represented internally as an array index) to a [`Value`].\n\n# `Value`s and `Subscriber`s\n\n`Subscriber`s consume `Value`s as fields attached to [span]s or [`Event`]s.\nThe set of field keys on a given span or event is defined on its [`Metadata`].\nWhen a span is created, it provides [`Attributes`] to the `Subscriber`'s\n[`new_span`] method, containing any fields whose values were provided when\nthe span was created; and may call the `Subscriber`'s [`record`] method\nwith additional [`Record`]s if values are added for more of its fields.\nSimilarly, the [`Event`] type passed to the subscriber's [`event`] method\nwill contain any fields attached to each event.\n\n`tracing` represents values as either one of a set of Rust primitives\n(`i64`, `u64`, `f64`, `bool`, and `&str`) or using a `fmt::Display` or\n`fmt::Debug` implementation. `Subscriber`s are provided these primitive\nvalue types as `dyn Value` trait objects.\n\nThese trait objects can be formatted using `fmt::Debug`, but may also be\nrecorded as typed data by calling the [`Value::record`] method on these\ntrait objects with a _visitor_ implementing the [`Visit`] trait. This trait\nrepresents the behavior used to record values of various types. For example,\nan implementation of `Visit` might record integers by incrementing counters\nfor their field names rather than printing them.\n\n\n# Using `valuable`\n\n`tracing`'s [`Value`] trait is intentionally minimalist: it supports only a small\nnumber of Rust primitives as typed values, and only permits recording\nuser-defined types with their [`fmt::Debug`] or [`fmt::Display`]\nimplementations. However, there are some cases where it may be useful to record\nnested values (such as arrays, `Vec`s, or `HashMap`s containing values), or\nuser-defined `struct` and `enum` types without having to format them as\nunstructured text.\n\nTo address `Value`'s limitations, `tracing` offers experimental support for\nthe [`valuable`] crate, which provides object-safe inspection of structured\nvalues. User-defined types can implement the [`valuable::Valuable`] trait,\nand be recorded as a `tracing` field by calling their [`as_value`] method.\nIf the [`Subscriber`] also supports the `valuable` crate, it can\nthen visit those types fields as structured values using `valuable`.\n\n<pre class=\"ignore\" style=\"white-space:normal;font:inherit;\">\n    <strong>Note</strong>: <code>valuable</code> support is an\n    <a href = \"../index.html#unstable-features\">unstable feature</a>. See\n    the documentation on unstable features for details on how to enable it.\n</pre>\n\nFor example:\n```ignore\n// Derive `Valuable` for our types:\nuse valuable::Valuable;\n\n#[derive(Clone, Debug, Valuable)]\nstruct User {\n    name: String,\n    age: u32,\n    address: Address,\n}\n\n#[derive(Clone, Debug, Valuable)]\nstruct Address {\n    country: String,\n    city: String,\n    street: String,\n}\n\nlet user = User {\n    name: \"Arwen Undomiel\".to_string(),\n    age: 3000,\n    address: Address {\n        country: \"Middle Earth\".to_string(),\n        city: \"Rivendell\".to_string(),\n        street: \"leafy lane\".to_string(),\n    },\n};\n\n// Recording `user` as a `valuable::Value` will allow the `tracing` subscriber\n// to traverse its fields as a nested, typed structure:\ntracing::info!(current_user = user.as_value());\n```\n\nAlternatively, the [`valuable()`] function may be used to convert a type\nimplementing [`Valuable`] into a `tracing` field value.\n\nWhen the `valuable` feature is enabled, the [`Visit`] trait will include an\noptional [`record_value`] method. `Visit` implementations that wish to\nrecord `valuable` values can implement this method with custom behavior.\nIf a visitor does not implement `record_value`, the [`valuable::Value`] will\nbe forwarded to the visitor's [`record_debug`] method.\n\n[`fmt::Debug`]: std::fmt::Debug\n[`fmt::Display`]: std::fmt::Debug\n[`valuable`]: https://crates.io/crates/valuable\n[`valuable::Valuable`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html\n[`as_value`]: https://docs.rs/valuable/latest/valuable/trait.Valuable.html#tymethod.as_value\n[`valuable::Value`]: https://docs.rs/valuable/latest/valuable/enum.Value.html\n[`Subscriber`]: crate::Subscriber\n[`record_value`]: Visit::record_value\n[`record_debug`]: Visit::record_debug\n[span]: mod@crate::span\n[`Event`]: crate::event::Event\n[`Metadata`]: crate::Metadata\n[`Attributes`]: crate::span::Attributes\n[`Record`]: crate::span::Record\n[`new_span`]: crate::Subscriber::new_span\n[`record`]: crate::Subscriber::record\n[`event`]: crate::Subscriber::event","links":{"`Visit`":"20:278:3025","std::fmt::Debug":"2:10377:119","crate::Subscriber::new_span":"20:686:4037","crate::Subscriber":"20:681:2980","crate::event::Event":"20:829:2977","`Value`":"20:288:2978","Visit::record_debug":"20:287:3030","mod@crate::span":"0:141:2981","crate::span::Attributes":"20:1095:3975","`Value::record`":"20:289:3040","crate::span::Record":"20:1103:3018","crate::Metadata":"20:477:2987"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:60:3563","0:58-20:259:795"],"is_stripped":false}}},"0:89:2972":{"id":"0:89:2972","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[86,4],"end":[91,5]},"visibility":"default","docs":"Instruments this type with the provided [`Span`], returning an\n`Instrumented` wrapper.\n\nThe attached [`Span`] will be [entered] every time the instrumented\n[`Future`] is polled or [`Drop`]ped.\n\n# Examples\n\nInstrumenting a future:\n\n```rust\nuse tracing::Instrument;\n\n# async fn doc() {\nlet my_future = async {\n    // ...\n};\n\nmy_future\n    .instrument(tracing::info_span!(\"my_future\"))\n    .await\n# }\n```\n\nThe [`Span::or_current`] combinator can be used in combination with\n`instrument` to ensure that the [current span] is attached to the\nfuture if the span passed to `instrument` is [disabled]:\n\n```\nuse tracing::Instrument;\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n\nlet my_future = async {\n    // ...\n};\n\nlet outer_span = tracing::info_span!(\"outer\").entered();\n\n// If the \"my_future\" span is enabled, then the spawned task will\n// be within both \"my_future\" *and* \"outer\", since \"outer\" is\n// \"my_future\"'s parent. However, if \"my_future\" is disabled,\n// the spawned task will *not* be in any span.\ntokio::spawn(\n    my_future\n        .instrument(tracing::debug_span!(\"my_future\"))\n);\n\n// Using `Span::or_current` ensures the spawned task is instrumented\n// with the current span, if the new span passed to `instrument` is\n// not enabled. This means that if the \"my_future\"  span is disabled,\n// the spawned task will still be instrumented with the \"outer\" span:\n# let my_future = async {};\ntokio::spawn(\n   my_future\n        .instrument(tracing::debug_span!(\"my_future\").or_current())\n);\n```\n\n[entered]: super::Span::enter()\n[`Span::or_current`]: super::Span::or_current()\n[current span]: super::Span::current()\n[disabled]: super::Span::is_disabled()\n[`Future`]: std::future::Future","links":{"std::future::Future":"2:44834:150","super::Span::or_current()":"0:180:4261","super::Span::enter()":"0:178:3681","super::Span::is_disabled()":"0:195:4262","`Span`":"0:365:2988","`Drop`":"2:3443:4385","super::Span::current()":"0:175:3325"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["span",{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:3615":{"id":"0:116:3615","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:321:3614":{"id":"b:2:2987-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3241:4660-0:365:2988":{"id":"a:2:3241:4660-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:114:2981":{"id":"0:114:2981","crate_id":0,"name":"span","span":{"filename":"src/instrument.rs","begin":[329,4],"end":[331,5]},"visibility":"public","docs":"Borrows the `Span` that this type is instrumented by.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:10921-0:321:3614":{"id":"a:2:42248:10921-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:10921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13392:28296":{"id":"2:13392:28296","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:9089":{"id":"2:13290:9089","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:9067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42248:10921-0:381:4014":{"id":"a:2:42248:10921-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:10921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13311:5261":{"id":"2:13311:5261","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2987-0:381:4014":{"id":"b:2:2987-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'__pin","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"__Origin","id":"0:350:4976","args":{"angle_bracketed":{"args":[{"lifetime":"'__pin"},{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::__private::Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32444:4663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:794:5287":{"id":"5:794:5287","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17-20:239:2976":{"id":"0:17-20:239:2976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[962,23],"end":[962,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::event","name":"event","id":"20:239:2976","glob":false}}},"5:5693:4394":{"id":"5:5693:4394","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:125-0:321:3614":{"id":"b:0:125-0:321:3614","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/field.rs","begin":[139,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365:2988":{"id":"0:365:2988","crate_id":0,"name":"Span","span":{"filename":"src/span.rs","begin":[348,0],"end":[358,1]},"visibility":"public","docs":"A handle representing a span, with the capability to enter the span if it\nexists.\n\nIf the span was rejected by the current `Subscriber`'s filter, entering the\nspan will silently do nothing. Thus, the handle can be used in the same\nmanner regardless of whether or not the trace is currently being collected.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:163","a:2:32385:236-0:365:2988","a:2:32444:4663-0:365:2988","a:2:42247:10727-0:365:2988","a:2:3241:4660-0:365:2988","a:2:42248:10921-0:365:2988","a:2:3206:246-0:365:2988","b:0:110-0:365:2988","b:0:125-0:365:2988","b:2:2987-0:365:2988","b:2:2983-0:365:2988","b:2:2998-0:365:2988","b:2:2993-0:365:2988","b:2:2713-0:365:2988","b:2:2710-0:365:2988","b:2:3822-0:365:2988","b:5:790-0:365:2988","0:217","0:205","0:226","0:203","0:214","0:208","0:368","0:210"]}}},"a:2:32385:236-0:321:3614":{"id":"a:2:32385:236-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:125-0:365:2988":{"id":"b:0:125-0:365:2988","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:4041":{"id":"0:167:4041","crate_id":0,"name":"new_root","span":{"filename":"src/span.rs","begin":[460,4],"end":[462,5]},"visibility":"public","docs":"Constructs a new `Span` as the root of its own trace tree, with the\ngiven [metadata] and set of [field values].\n\nAfter the span is constructed, [field values] and/or [`follows_from`]\nannotations may be added to it.\n\n[metadata]: super::Metadata\n[field values]: super::field::ValueSet\n[`follows_from`]: super::Span::follows_from","links":{"super::Metadata":"20:477:2987","super::Span::follows_from":"0:197:4371","super::field::ValueSet":"20:274:3017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["meta",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}}],["values",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"field::ValueSet","id":"20:274:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:29277":{"id":"2:13287:29277","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:29278"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:36216":{"id":"5:5708:36216","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:4728","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:4728","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:3567":{"id":"0:68:3567","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[163,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:3667":{"id":"0:94:3667","crate_id":0,"name":"with_current_subscriber","span":{"filename":"src/instrument.rs","begin":[228,4],"end":[233,5]},"visibility":"default","docs":"Attaches the current [default] [`Subscriber`] to this type, returning a\n[`WithDispatch`] wrapper.\n\nThe attached `Subscriber` will be set as the [default] when the returned\n[`Future`] is polled.\n\nThis can be used to propagate the current dispatcher context when\nspawning a new future that may run on a different thread.\n\n# Examples\n\n```\n# mod tokio {\n#     pub(super) fn spawn(_: impl std::future::Future) {}\n# }\n# use tracing::subscriber::NoSubscriber as MySubscriber;\n# async fn docs() {\nuse tracing::instrument::WithSubscriber;\n\n// Using `set_default` (rather than `set_global_default`) sets the\n// default `Subscriber` for *this* thread only.\nlet _default = tracing::subscriber::set_default(MySubscriber::default());\n\nlet future = async {\n    // ...\n};\n\n// If a multi-threaded async runtime is in use, this spawned task may\n// run on a different thread, in a different default `Subscriber`'s context.\ntokio::spawn(future);\n\n// However, calling `with_current_subscriber` on the future before\n// spawning it, ensures that the current thread's default `Subscriber` is\n// propagated to the spawned task, regardless of where it executes:\n# let future = async { };\ntokio::spawn(future.with_current_subscriber());\n# }\n```\n[`Subscriber`]: super::Subscriber\n[default]: crate::dispatcher#setting-the-default-subscriber\n[`Future`]: std::future::Future","links":{"super::Subscriber":"20:681:2980","`WithDispatch`":"0:278:3651","std::future::Future":"2:44834:150","crate::dispatcher#setting-the-default-subscriber":"0:46:2974"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:479":{"id":"0:330:479","crate_id":0,"name":"clone","span":{"filename":"src/instrument.rs","begin":[264,20],"end":[264,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:35510":{"id":"2:13365:35510","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:36213":{"id":"5:5696:36213","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:28791":{"id":"2:13305:28791","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:795":{"id":"0:186:795","crate_id":0,"name":"field","span":{"filename":"src/span.rs","begin":[1107,4],"end":[1112,5]},"visibility":"public","docs":"Returns a [`Field`][super::field::Field] for the field with the\ngiven `name`, if one exists,","links":{"super::field::Field":"20:837:3024"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["field",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"field::Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"field::AsField","id":"0:60:3563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257-20:824:3466":{"id":"0:257-20:824:3466","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[6,0],"end":[6,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::DefaultGuard","name":"DefaultGuard","id":"20:824:3466","glob":false}}},"0:30:3261":{"id":"0:30:3261","crate_id":0,"name":"event_enabled","span":{"filename":"src/macros.rs","begin":[1053,0],"end":[1057,1]},"visibility":"public","docs":"Tests whether an event with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{event_enabled, Level};\nif event_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif event_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif event_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3010","crate::span_enabled":"0:31:3268"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! event_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"0:144-20:1080:2982":{"id":"0:144-20:1080:2982","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,41],"end":[320,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::span::Id","name":"Id","id":"20:1080:2982","glob":false}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[325,0],"end":[325,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["instrument","in_current_span"],"trait":{"name":"Instrument","id":"0:88:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32385:236-0:375:4009":{"id":"a:2:32385:236-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:3698":{"id":"0:132:3698","crate_id":0,"name":"inner_pin_ref","span":{"filename":"src/instrument.rs","begin":[414,4],"end":[416,5]},"visibility":"public","docs":"Get a pinned reference to the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Pin","id":"2:42278:3571","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WithDispatch","id":"0:278:3651","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:287:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[385,9],"end":[385,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:380:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32385:236-0:381:4014":{"id":"a:2:32385:236-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:178:3681":{"id":"0:178:3681","crate_id":0,"name":"enter","span":{"filename":"src/span.rs","begin":[785,4],"end":[788,5]},"visibility":"public","docs":"Enters this span, returning a guard that will exit the span when dropped.\n\nIf this span is enabled by the current subscriber, then this function will\ncall [`Subscriber::enter`] with the span's [`Id`], and dropping the guard\nwill call [`Subscriber::exit`]. If the span is disabled, this does\nnothing.\n\n# In Asynchronous Code\n\n**Warning**: in asynchronous code that uses [async/await syntax][syntax],\n`Span::enter` should be used very carefully or avoided entirely. Holding\nthe drop guard returned by `Span::enter` across `.await` points will\nresult in incorrect traces. For example,\n\n```\n# use tracing::info_span;\n# async fn some_other_async_function() {}\nasync fn my_async_function() {\n    let span = info_span!(\"my_async_function\");\n\n    // WARNING: This span will remain entered until this\n    // guard is dropped...\n    let _enter = span.enter();\n    // ...but the `await` keyword may yield, causing the\n    // runtime to switch to another task, while remaining in\n    // this span!\n    some_other_async_function().await\n\n    // ...\n}\n```\n\nThe drop guard returned by `Span::enter` exits the span when it is\ndropped. When an async function or async block yields at an `.await`\npoint, the current scope is _exited_, but values in that scope are\n**not** dropped (because the async block will eventually resume\nexecution from that await point). This means that _another_ task will\nbegin executing while _remaining_ in the entered span. This results in\nan incorrect trace.\n\nInstead of using `Span::enter` in asynchronous code, prefer the\nfollowing:\n\n* To enter a span for a synchronous section of code within an async\n  block or function, prefer [`Span::in_scope`]. Since `in_scope` takes a\n  synchronous closure and exits the span when the closure returns, the\n  span will always be exited before the next await point. For example:\n  ```\n  # use tracing::info_span;\n  # async fn some_other_async_function(_: ()) {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n\n      let some_value = span.in_scope(|| {\n          // run some synchronous code inside the span...\n      });\n\n      // This is okay! The span has already been exited before we reach\n      // the await point.\n      some_other_async_function(some_value).await;\n\n      // ...\n  }\n  ```\n* For instrumenting asynchronous code, `tracing` provides the\n  [`Future::instrument` combinator][instrument] for\n  attaching a span to a future (async function or block). This will\n  enter the span _every_ time the future is polled, and exit it whenever\n  the future yields.\n\n  `Instrument` can be used with an async block inside an async function:\n  ```ignore\n  # use tracing::info_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let span = info_span!(\"my_async_function\");\n      async move {\n         // This is correct! If we yield here, the span will be exited,\n         // and re-entered when we resume.\n         some_other_async_function().await;\n\n         //more asynchronous code inside the span...\n\n      }\n        // instrument the async block with the span...\n        .instrument(span)\n        // ...and await it.\n        .await\n  }\n  ```\n\n  It can also be used to instrument calls to async functions at the\n  callsite:\n  ```ignore\n  # use tracing::debug_span;\n  use tracing::Instrument;\n\n  # async fn some_other_async_function() {}\n  async fn my_async_function() {\n      let some_value = some_other_async_function()\n         .instrument(debug_span!(\"some_other_async_function\"))\n         .await;\n\n      // ...\n  }\n  ```\n\n* The [`#[instrument]` attribute macro][attr] can automatically generate\n  correct code when used on an async function:\n\n  ```ignore\n  # async fn some_other_async_function() {}\n  #[tracing::instrument(level = \"info\")]\n  async fn my_async_function() {\n\n      // This is correct! If we yield here, the span will be exited,\n      // and re-entered when we resume.\n      some_other_async_function().await;\n\n      // ...\n\n  }\n  ```\n\n[syntax]: https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html\n[`Span::in_scope`]: Span::in_scope()\n[instrument]: crate::Instrument\n[attr]: macro@crate::instrument\n\n# Examples\n\n```\n# use tracing::{span, Level};\nlet span = span!(Level::INFO, \"my_span\");\nlet guard = span.enter();\n\n// code here is within the span\n\ndrop(guard);\n\n// code here is no longer within the span\n\n```\n\nGuards need not be explicitly dropped:\n\n```\n# use tracing::trace_span;\nfn my_function() -> String {\n    // enter a span for the duration of this function.\n    let span = trace_span!(\"my_function\");\n    let _enter = span.enter();\n\n    // anything happening in functions we call is still inside the span...\n    my_other_function();\n\n    // returning from the function drops the guard, exiting the span.\n    return \"Hello world\".to_owned();\n}\n\nfn my_other_function() {\n    // ...\n}\n```\n\nSub-scopes may be created to limit the duration for which the span is\nentered:\n\n```\n# use tracing::{info, info_span};\nlet span = info_span!(\"my_great_span\");\n\n{\n    let _enter = span.enter();\n\n    // this event occurs inside the span.\n    info!(\"i'm in the span!\");\n\n    // exiting the scope drops the guard, exiting the span.\n}\n\n// this event is not inside the span.\ninfo!(\"i'm outside the span!\")\n```\n\n[`Subscriber::enter`]: super::subscriber::Subscriber::enter()\n[`Subscriber::exit`]: super::subscriber::Subscriber::exit()\n[`Id`]: super::Id","links":{"super::Id":"20:1080:2982","Span::in_scope()":"0:183:4288","macro@crate::instrument":"22:204:2972","super::subscriber::Subscriber::exit()":"20:692:4266","super::subscriber::Subscriber::enter()":"20:691:3681","crate::Instrument":"0:88:2973"},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:381:4014":{"id":"b:2:2983-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2986:3652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:2981":{"id":"0:23:2981","crate_id":0,"name":"span","span":{"filename":"src/macros.rs","begin":[20,0],"end":[131,1]},"visibility":"public","docs":"Constructs a new span.\n\nSee [the top-level documentation][lib] for details on the syntax accepted by\nthis macro.\n\n[lib]: crate#using-the-macros\n\n# Examples\n\nCreating a new span:\n```\n# use tracing::{span, Level};\n# fn main() {\nlet span = span!(Level::TRACE, \"my span\");\nlet _enter = span.enter();\n// do work inside the span...\n# }\n```","links":{"crate#using-the-macros":"0:0:3043"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span {\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (parent: $parent:expr, $lvl:expr, $name:expr) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    (target: $target:expr, $lvl:expr, $name:expr) => { ... };\n    ($lvl:expr, $name:expr, $($fields:tt)*) => { ... };\n    ($lvl:expr, $name:expr) => { ... };\n}"}},"2:13283:35498":{"id":"2:13283:35498","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:35499","crate::ops::Index":"2:39699:4769"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:138-20:1016:3394":{"id":"0:138-20:1016:3394","crate_id":0,"name":null,"span":{"filename":"src/level_filters.rs","begin":[53,56],"end":[53,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::LevelFilter","name":"LevelFilter","id":"20:1016:3394","glob":false}}},"0:61:3567":{"id":"0:61:3567","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[134,4],"end":[134,65]},"visibility":"default","docs":"Attempts to convert `&self` into a `Field` with the specified `metadata`.\n\nIf `metadata` defines this field, then the field is returned. Otherwise,\nthis returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:385:808":{"id":"0:385:808","crate_id":0,"name":"fmt","span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9-20:681:2980":{"id":"0:9-20:681:2980","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,65],"end":[952,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::subscriber::Subscriber","name":"Subscriber","id":"20:681:2980","glob":false}}},"a:2:42248:10921-0:365:2988":{"id":"a:2:42248:10921-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42248:10921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13375:29291":{"id":"2:13375:29291","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[1392,0],"end":[1423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:209:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13387:35516":{"id":"2:13387:35516","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:4722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:4722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:4722","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:10844":{"id":"5:5709:10844","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:4336":{"id":"0:196:4336","crate_id":0,"name":"is_none","span":{"filename":"src/span.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Returns `true` if this span was constructed by [`Span::none`] and is\nempty.\n\nIf `is_none` returns `true` for a given span, then [`is_disabled`] will\nalso return `true`. However, when a span is disabled by the subscriber\nrather than constructed by `Span::none`, this method will return\n`false`, while `is_disabled` will return `true`.\n\n[`Span::none`]: Span::none()\n[`is_disabled`]: Span::is_disabled()","links":{"Span::none()":"0:174:1226","Span::is_disabled()":"0:195:4262"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:28291":{"id":"2:13389:28291","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2712:4432":{"id":"2:2712:4432","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711:28294":{"id":"5:5711:28294","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:28297"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:792:5285":{"id":"5:792:5285","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:13328:35501":{"id":"2:13328:35501","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:16144","str::split":"2:13319:28365","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:35502"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:9073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:35507":{"id":"2:13360:35507","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2998-0:365:2988":{"id":"b:2:2998-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1819"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10377:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:385:808"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32385:236-0:365:2988":{"id":"a:2:32385:236-0:365:2988","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Span","id":"0:365:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:195:4262":{"id":"0:195:4262","crate_id":0,"name":"is_disabled","span":{"filename":"src/span.rs","begin":[1244,4],"end":[1246,5]},"visibility":"public","docs":"Returns `true` if this span was disabled by the subscriber and does not\nexist.\n\nSee also [`is_none`].\n\n[`is_none`]: Span::is_none()","links":{"Span::is_none()":"0:196:4336"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3241:4660-0:375:4009":{"id":"a:2:3241:4660-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3241:4660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:125-0:381:4014":{"id":"b:0:125-0:381:4014","crate_id":0,"name":null,"span":{"filename":"src/instrument.rs","begin":[393,0],"end":[393,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["with_subscriber","with_current_subscriber"],"trait":{"name":"WithSubscriber","id":"0:91:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:3567":{"id":"0:66:3567","crate_id":0,"name":"as_field","span":{"filename":"src/field.rs","begin":[152,4],"end":[158,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:477:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Field","id":"20:837:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:381:4014":{"id":"b:2:2713-0:381:4014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2707:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:27975"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:3627":{"id":"0:91:3627","crate_id":0,"name":"WithSubscriber","span":{"filename":"src/instrument.rs","begin":[136,0],"end":[234,1]},"visibility":"public","docs":"Extension trait allowing futures to be instrumented with\na `tracing` [`Subscriber`](crate::Subscriber).","links":{"crate::Subscriber":"20:681:2980"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:92:3649","0:94:3667"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32386:3568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:125"]}}},"0:221:838":{"id":"0:221:838","crate_id":0,"name":"from","span":{"filename":"src/span.rs","begin":[1444,4],"end":[1446,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["span",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"EnteredSpan","id":"0:381:4014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:3615":{"id":"0:130:3615","crate_id":0,"name":"inner","span":{"filename":"src/instrument.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Borrows the wrapped type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13343:29289":{"id":"2:13343:29289","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-20:288:2978":{"id":"0:8-20:288:2978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[952,51],"end":[952,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::field::Value","name":"Value","id":"20:288:2978","glob":false}}},"2:13291:9101":{"id":"2:13291:9101","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:9068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-20:160:3468":{"id":"0:54-20:160:3468","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[136,47],"end":[136,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:160:3468","glob":false}}},"0:143-20:1095:3975":{"id":"0:143-20:1095:3975","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,29],"end":[320,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::span::Attributes","name":"Attributes","id":"20:1095:3975","glob":false}}},"0:261:3467":{"id":"0:261:3467","crate_id":0,"name":"set_global_default","span":{"filename":"src/subscriber.rs","begin":[39,0],"end":[44,1]},"visibility":"public","docs":"Sets this subscriber as the global default for the duration of the entire program.\nWill be used as a fallback if no thread-local subscriber has been set in a thread (using `with_default`.)\n\nCan only be set once; subsequent attempts to set the global default will fail.\nReturns whether the initialization was successful.\n\nNote: Libraries should *NOT* call `set_global_default()`! That will cause conflicts when\nexecutables try to set them later.\n\n[span]: super::span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["subscriber",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetGlobalDefaultError","id":"20:160:3468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:681:2980","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:35496":{"id":"2:13268:35496","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:35495"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3206:246-0:321:3614":{"id":"a:2:3206:246-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42247:10727-0:321:3614":{"id":"a:2:42247:10727-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:361:675":{"id":"0:361:675","crate_id":0,"name":"drop","span":{"filename":"src/instrument.rs","begin":[254,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:675":{"id":"0:227:675","crate_id":0,"name":"drop","span":{"filename":"src/span.rs","begin":[1457,4],"end":[1475,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:29282":{"id":"2:13325:29282","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:16144","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:28365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:8706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:29247":{"id":"2:13275:29247","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13334:29284":{"id":"2:13334:29284","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:16144","str::rsplitn":"2:13337:29286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:9076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:9707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47-20:157:3464":{"id":"0:47-20:157:3464","crate_id":0,"name":null,"span":{"filename":"src/dispatcher.rs","begin":[128,0],"end":[128,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::set_default","name":"set_default","id":"20:157:3464","glob":false}}},"0:73:2972":{"id":"0:73:2972","crate_id":0,"name":"instrument","span":{"filename":"src/instrument.rs","begin":[1,0],"end":[429,1]},"visibility":"public","docs":"Attach a span to a `std::future::Future`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:88:2973","0:91:3627","0:278:3651","0:321:3614"],"is_stripped":false}}},"b:2:2983-0:375:4009":{"id":"b:2:2983-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2986:3652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:145-20:1103:3018":{"id":"0:145-20:1103:3018","crate_id":0,"name":null,"span":{"filename":"src/span.rs","begin":[320,45],"end":[320,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::span::Record","name":"Record","id":"20:1103:3018","glob":false}}},"0:255:2979":{"id":"0:255:2979","crate_id":0,"name":"subscriber","span":{"filename":"src/subscriber.rs","begin":[1,0],"end":[65,56]},"visibility":"public","docs":"Collects and records trace data.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:257-20:824:3466","0:258:3465","0:261:3467","0:263:3464","0:265-20:160:3468","0:256-20:668:2979"],"is_stripped":false}}},"2:2996:137":{"id":"2:2996:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:287:808":{"id":"0:287:808","crate_id":0,"name":"fmt","span":{"filename":"src/instrument.rs","begin":[244,20],"end":[244,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10345:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10326:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:3268":{"id":"0:31:3268","crate_id":0,"name":"span_enabled","span":{"filename":"src/macros.rs","begin":[1087,0],"end":[1091,1]},"visibility":"public","docs":"Tests whether a span with the specified level and target would be enabled.\n\nThis is similar to [`enabled!`], but queries the current subscriber specifically for\nan event, whereas [`enabled!`] queries for an event _or_ span.\n\nSee the documentation for [`enabled!]` for more details on using this macro.\nSee also [`span_enabled!`].\n\n# Examples\n\n```rust\n# use tracing::{span_enabled, Level};\nif span_enabled!(target: \"my_crate\", Level::DEBUG) {\n    // some expensive work...\n}\n// simpler\nif span_enabled!(Level::DEBUG) {\n    // some expensive work...\n}\n// with fields\nif span_enabled!(Level::DEBUG, foo_field) {\n    // some expensive work...\n}\n```\n\n[`enabled!`]: crate::enabled\n[`span_enabled!`]: crate::span_enabled","links":{"crate::enabled":"0:32:3010","crate::span_enabled":"0:31:3268"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! span_enabled {\n    ($($rest:tt)*) => { ... };\n}"}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:36212","5:5693:4394","5:5696:36213","5:5699:36214","5:5707:36215","5:5708:36216","5:5709:10844","5:5710:28293","5:5711:28294"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:3465":{"id":"0:258:3465","crate_id":0,"name":"with_default","span":{"filename":"src/subscriber.rs","begin":[20,0],"end":[25,1]},"visibility":"public","docs":"Sets this [`Subscriber`] as the default for the current thread for the\nduration of a closure.\n\nThe default subscriber is used when creating a new [`Span`] or\n[`Event`].\n\n\n[`Span`]: super::span::Span\n[`Subscriber`]: super::subscriber::Subscriber\n[`Event`]: super::event::Event","links":{"super::event::Event":"20:829:2977","super::subscriber::Subscriber":"20:681:2980","super::span::Span":"0:365:2988"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["subscriber",{"generic":"S"}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3455:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"impl FnOnce() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3455:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Subscriber","id":"20:681:2980","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32385:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3206:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:29135":{"id":"2:13395:29135","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:40401"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2997:1821":{"id":"2:2997:1821","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2967:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2983-0:321:3614":{"id":"b:2:2983-0:321:3614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2960:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2957:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Instrumented","id":"0:321:3614","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2986:3652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:265-20:160:3468":{"id":"0:265-20:160:3468","crate_id":0,"name":null,"span":{"filename":"src/subscriber.rs","begin":[65,0],"end":[65,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"tracing_core::dispatcher::SetGlobalDefaultError","name":"SetGlobalDefaultError","id":"20:160:3468","glob":false}}},"a:2:42247:10727-0:375:4009":{"id":"a:2:42247:10727-0:375:4009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42247:10727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entered","id":"0:375:4009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}}},"paths":{"17:14489:6450":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9938:23737":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14847:6576":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12478:6120":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44973:9128":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:12967:5866":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3089:5285":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11319:9710":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12824:23742":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3649:5040":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:22200:3042":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"20:1030:3748":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"17:11547:5929":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:23099:4637":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15596:6796":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:16235:6958":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43840:8708":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14516:6454":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:8746:16361":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:8234:16363":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3484:4770":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11790:5765":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14246:6410":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:2234:9492":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14545:6457":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1657:7779":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11764:6049":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:21751:10985":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6173:7077":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:2301:7271":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:43115:5032":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:47174:9250":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:873:9666":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11715:6042":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42197:5225":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1684:7792":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9133:9364":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14436:6446":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11825:9544":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:871:4616":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46123:9162":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12318:6097":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:40845:8983":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9416:5751":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:680:10721":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1620:5673":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:1407:9668":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:15126:6654":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"0:161:3979":{"crate_id":0,"path":["tracing","span","AsId"],"kind":"trait"},"17:14025:6359":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:169:3009":{"crate_id":20,"path":["tracing_core","dispatcher","get_default"],"kind":"function"},"1:7984:9284":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6028:7007":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:7770:9695":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6473:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6239:7085":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1489:7669":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7030:7183":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4983:7049":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44298:9085":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:16165:6942":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:6749:7148":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8241:9809":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8636:23682":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4873:7045":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:16269:6232":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:5603:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4890:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3438:9770":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:288:2978":{"crate_id":20,"path":["tracing_core","field","Value"],"kind":"trait"},"1:8788:9351":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10915:37168":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11350:9849":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:8031:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11503:5763":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:47002:9240":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5588:9780":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11702:6041":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7372:7017":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:23212:8752":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"11:1023:9668":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46729:9204":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6731:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:44351:8970":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14260:6412":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43132:9051":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5318:7059":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3395:9768":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:608:9476":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4981:5731":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:46205:9166":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14325:6420":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:908:9483":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:40924:8994":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11042:9506":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:830:9674":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6437:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12251:9562":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2880:7000":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:963:10738":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7924:5755":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10877:9503":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8551:9820":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4722:9701":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:160:3468":{"crate_id":20,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"1:8616:9818":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5230:8003":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6256:7090":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5036:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2930:3042":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7507:5653":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:7548:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10995:9806":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:5638:9784":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11668:9399":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:2323:9668":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:11510:9525":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:957:9661":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40528:8967":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:6461:5740":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:30766:4681":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9397:5616":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11026:23752":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4923:10872":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:592:9743":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"0:27:3213":{"crate_id":0,"path":["tracing","warn_span"],"kind":"macro"},"17:12543:9568":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:698:5225":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:15010:6630":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5541:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13594:6276":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15313:6701":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:10852:5718":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:33880:4753":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:8179:7333":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:11956:9410":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11497:9524":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5258:9779":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6623:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3427:4685":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:7818:16357":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:623:10718":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44961:7514":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46806:9236":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8228:4731":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:3342:7501":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:32386:3568":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:791:3003":{"crate_id":20,"path":["tracing_core","callsite","DefaultCallsite"],"kind":"struct"},"17:10018:23719":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"20:278:3025":{"crate_id":20,"path":["tracing_core","field","Visit"],"kind":"trait"},"16:4184:7037":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11773:6131":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7724:8680":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:40892:8989":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:41931:9022":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:44466:9102":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:670:9481":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"15:394:22772":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:47139:9247":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:1675:7786":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1037:4720":{"crate_id":20,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"5:1376:7271":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"0:57:795":{"crate_id":0,"path":["tracing","field"],"kind":"module"},"1:4487:9777":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43941:9738":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1703:7799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4990:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2566:8673":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:1207:9487":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:47081:9243":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3199:4658":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:15324:6705":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:16223:6955":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"14:202:16158":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"20:1123:2995":{"crate_id":20,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"11:671:4616":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5507:8136":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:8667:9338":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6183:5740":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:16093:6924":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:15616:6802":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8291:4927":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:10755:5759":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:46679:9202":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:4875:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:884:9673":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:553:7648":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15655:6811":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2415:22781":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44156:9077":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6843:7158":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41366:4580":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15273:6692":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13064:6162":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21687:33676":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:559:7651":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2704:6992":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:3436:9769":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7990:7326":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:902:7499":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13877:6340":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:14311:6417":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:1066:4721":{"crate_id":20,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"17:14414:6435":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:4810:7043":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:3264:9493":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14235:6408":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4008:9775":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:465:7596":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"9:328:7554":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:8308:8637":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:513:9485":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10325:9754":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5629:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:42081:9035":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41975:2988":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15190:6673":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"9:422:22656":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:36420:4760":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6708:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:7337:7242":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4997:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12175:9553":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"0:255:2979":{"crate_id":0,"path":["tracing","subscriber"],"kind":"module"},"6:5366:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10997:6004":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:5541:16128":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:41359:9011":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13497:6247":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:863:4618":{"crate_id":20,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"5:3711:4616":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40702:16421":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10887:37167":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:802:3469":{"crate_id":20,"path":["tracing_core","dispatcher","WeakDispatch"],"kind":"struct"},"2:8784:34625":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:33128:4745":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:3087:9696":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"18:563:5846":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11755:6048":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5379:7061":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15760:6841":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:45867:9133":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3906:9774":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46307:9172":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12969:6154":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:2467:2985":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:6111:7072":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9315:9831":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:7463:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12887:6149":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:1154:4608":{"crate_id":20,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"2:47276:9262":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:14341:6422":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:5089:10906":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:842:4615":{"crate_id":20,"path":["tracing_core","field","Empty"],"kind":"struct"},"17:12707:9574":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3300:33165":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13473:6243":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11657:4603":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:2003:10779":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:835:9661":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:43951:8712":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15092:6651":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15944:6196":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:2950:7003":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40691:8977":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8608:9821":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10913:9379":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"10:44:7516":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"11:708:9659":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:2820:6997":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2318:3705":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6123:7011":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:8050:5734":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9671:23718":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10396:5042":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13774:6321":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41166:9008":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:2530:6984":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:6037:5733":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:40757:5700":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15102:6652":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:35:3370":{"crate_id":0,"path":["tracing","info"],"kind":"macro"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10984:28091":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"10:36:7515":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7508:7265":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:12713:9078":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44620:9107":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:43105:9043":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8556:10853":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5139:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40823:8980":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46973:9239":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:16259:6227":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:3308:6973":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:4302:5616":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:8014:7023":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:7:9655":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"0:88:2973":{"crate_id":0,"path":["tracing","instrument","Instrument"],"kind":"trait"},"17:11227:9514":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:32916:4746":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"20:1070:4726":{"crate_id":20,"path":["tracing_core","parent","Parent"],"kind":"enum"},"6:1539:7693":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22227:8715":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44138:9076":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:96:27915":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5593:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4902:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:1674:5629":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46243:9168":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:9280:3990":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:3587:7032":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:44913:34683":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:5198:7055":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:689:5863":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"0:46:2974":{"crate_id":0,"path":["tracing","dispatcher"],"kind":"module"},"17:10137:23716":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:9407:9706":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15646:6809":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11204:9364":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46094:9153":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7478:5829":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"0:141:2981":{"crate_id":0,"path":["tracing","span"],"kind":"module"},"6:5395:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:379:9742":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7368:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9886:23735":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:944:9674":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:881:9667":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:256:9482":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:623:37175":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"9:480:22653":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:21720:33671":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16032:6200":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11214:9513":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43859:8709":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"0:139:3393":{"crate_id":0,"path":["tracing","level_filters","STATIC_MAX_LEVEL"],"kind":"constant"},"6:1711:7803":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1791:5634":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7712:8677":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5172:7054":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:6665:5653":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8233:4730":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:21701:33668":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:40054:16214":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11583:9534":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:23179:8749":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:23245:8755":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:11089:9509":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:7990:4615":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44630:9111":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:15266:6691":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:7414:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6526:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4333:10883":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:4843:5699":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3334:7503":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:8373:4926":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:2272:8653":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"0:60:3563":{"crate_id":0,"path":["tracing","field","AsField"],"kind":"trait"},"5:2168:9684":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:21810:10984":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:5085:16201":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11621:6034":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1625:7501":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:40585:16207":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15376:6722":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:4772:10905":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15390:6724":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:10390:5044":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:938:5673":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:46065:9151":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1589:7726":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:772:7499":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14449:6447":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"20:684:3010":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","enabled"],"kind":"function"},"6:5051:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12443:6117":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:13633:8992":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:21676:33676":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:8179:9288":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:13026:16150":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:3048:22810":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:34371:4757":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5186:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:573:5836":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9807:23723":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:7316:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:22239:33681":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5488:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:8870:9360":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:39703:4771":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:8105:7331":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46596:9199":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7765:7302":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44531:9104":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13766:6319":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:43780:9734":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10661:9500":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"22:0:2989":{"crate_id":22,"path":["tracing_attributes"],"kind":"module"},"20:259:795":{"crate_id":20,"path":["tracing_core","field"],"kind":"module"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7577:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:2684:6991":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12683:9572":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:7192:23675":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:22670:3042":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:10171:5033":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:0:4453":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"20:36:4581":{"crate_id":20,"path":["tracing_core","callsite","rebuild_interest_cache"],"kind":"function"},"6:4842:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11513:9714":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6462:23672":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6374:5739":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"9:445:22654":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15720:6830":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8590:9335":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12494:6121":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4819:8510":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:10828:37164":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12993:23743":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1609:4616":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:430:37129":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1727:7808":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9755:23715":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11092:5761":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6611:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45884:9136":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:11471:9076":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5241:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4404:7040":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10534:37166":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:4137:5653":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3804:5634":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6513:5350":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:12912:4722":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7587:5225":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:9389:5744":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:6419:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5044:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7070:5686":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:43993:9066":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6700:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:11574:7505":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11674:9850":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:3441:7031":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:45916:9138":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40658:8974":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:43880:9061":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7604:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12485:23865":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:5289:9779":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:79:22647":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2149:8684":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:14986:6628":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7424:23676":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6691:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:7036:5671":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:8302:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:4152:7036":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:11188:4616":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7209:5691":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:7703:16211":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:41152:9007":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16187:6948":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:8489:10813":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:4354:5616":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14855:6579":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10818:9502":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"15:306:22762":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10439:5996":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:42872:5035":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:798:2975":{"crate_id":20,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"16:3126:22811":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:651:5836":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6507:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:44829:9125":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:41375:9012":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:16138:6933":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14868:6586":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2724:6993":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46389:9176":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:327:22766":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3486:10838":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:698:5864":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:4577:5660":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:8008:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:829:2977":{"crate_id":20,"path":["tracing_core","event","Event"],"kind":"struct"},"1:11413:7574":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:16212:6953":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:3935:5673":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43906:8710":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10185:5987":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10638:5758":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:7578:9371":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:12031:9716":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4817:8508":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:6269:7091":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7361:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3870:9684":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3287:4768":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:3257:4749":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4883:10909":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5494:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:4905:5311":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:44052:8706":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:5965:9789":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:12072:16137":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:8209:7013":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:42278:3571":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:42269:16434":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:23026:33716":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40541:8968":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15138:6657":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5107:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3677:10831":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:47159:9249":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7058:7185":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:3141:5881":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:44342:8962":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:7152:10979":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4914:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:294:9470":{"crate_id":21,"path":["once_cell","race","OnceRef"],"kind":"struct"},"16:3110:7028":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:491:7609":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40551:8969":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:8353:8648":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5450:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:174:5828":{"crate_id":21,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"0:26:3205":{"crate_id":0,"path":["tracing","info_span"],"kind":"macro"},"17:11537:9527":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"20:271:4614":{"crate_id":20,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"1:568:5724":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:14463:6448":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10218:5988":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:8565:7394":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:1961:5616":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:46708:9203":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:3855:8652":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9361:9374":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:3100:35444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11524:9526":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:22584:34388":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:8290:8634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:13610:4655":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:9308:9830":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"13:229:7491":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:4927:10875":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:12729:9081":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6904:7167":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6188:7079":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4103:10857":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4501:5660":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:1696:7796":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:0:4463":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5127:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3267:4747":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:3279:4766":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:10344:9836":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11605:6032":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:2400:9673":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:44437:9093":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13581:6275":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:1080:2982":{"crate_id":20,"path":["tracing_core","span","Id"],"kind":"struct"},"2:10837:5713":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"0:24:3189":{"crate_id":0,"path":["tracing","trace_span"],"kind":"macro"},"6:5462:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:2137:9668":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:50:5616":{"crate_id":21,"path":["once_cell","imp","Guard"],"kind":"struct"},"1:1616:5653":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:1098:9486":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5708:9785":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:1016:3394":{"crate_id":20,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"5:4564:5616":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:7653:10737":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:4874:4667":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:6659:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11003:9785":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:656:9744":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:11357:9711":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14298:6416":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:32445:4665":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:597:5982":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:3597:9495":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5676:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5295:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11915:23839":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:668:2979":{"crate_id":20,"path":["tracing_core","subscriber"],"kind":"module"},"1:7869:5982":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4869:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:158:3467":{"crate_id":20,"path":["tracing_core","dispatcher","set_global_default"],"kind":"function"},"16:7716:37156":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:15078:6647":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:675:9747":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12189:9557":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:42206:9041":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4766:7042":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:40:5631":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9518:9707":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:3460:5673":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:7487:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46144:9163":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6502:22780":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:15289:6694":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15418:6731":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9916:23736":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:23223:8753":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:12225:9560":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:32309:7510":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15456:6739":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5602:9782":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:515:5839":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5482:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7212:7222":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7462:9621":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:32351:9722":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:2366:9679":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:785:7500":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13922:6346":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:2900:7001":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5381:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43619:9059":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:8043:37154":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7075:23674":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11341:9519":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:4406:9776":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12076:9552":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8641:9822":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22586:16376":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15176:6670":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:706:5866":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6696:9606":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11166:6009":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11942:33309":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:303:4728":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12508:6124":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:6143:8688":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43627:9060":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5249:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1611:9659":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2635:9762":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4167:10861":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:41381:9013":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44333:8971":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15116:6653":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4477:16112":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7879:9800":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8700:10917":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:13698:34879":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41947:10854":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"5:1561:5225":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5088:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:2420:5225":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:818:4624":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:46463:9194":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5851:9283":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:23041:33700":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7176:3572":{"crate_id":1,"path":["std","task"],"kind":"module"},"2:44667:9119":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:6796:9793":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5325:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8331:9811":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8765:4603":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"14:214:7481":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13946:6347":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:8503:7385":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8004:9285":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:219:5633":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12949:6097":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8085:9806":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46928:9238":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:22717:11062":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:47102:9244":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:10139:5037":{"crate_id":2,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"20:851:4616":{"crate_id":20,"path":["tracing_core","field","Iter"],"kind":"struct"},"1:5958:9786":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:5319:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:157:3464":{"crate_id":20,"path":["tracing_core","dispatcher","set_default"],"kind":"function"},"5:991:5641":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4956:7048":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5375:8065":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:1580:9675":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21930:8714":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:5972:5616":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:44256:9083":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11799:9540":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5301:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13046:6159":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11708:9799":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:361:5828":{"crate_id":21,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"11:1005:7271":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"0:23:2981":{"crate_id":0,"path":["tracing","span"],"kind":"macro"},"17:13485:6246":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:7760:8681":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12264:9563":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5113:7052":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3889:5886":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:8296:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:22534:11069":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4561:9778":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11634:6036":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4201:10862":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7472:32297":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12213:9559":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5057:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11730:6044":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44709:9122":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:333:5619":{"crate_id":21,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"15:288:22761":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:523:7632":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14575:6115":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8803:10931":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5477:8126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:4796:4611":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7586:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11018:28068":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:11392:8706":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:288:5634":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:1860:3569":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:39699:4769":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1521:7682":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11865:9548":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11493:9523":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13785:6324":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46051:9150":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6368:7106":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7595:5225":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:6129:4609":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"0:31:3268":{"crate_id":0,"path":["tracing","span_enabled"],"kind":"macro"},"16:6098:9578":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40945:8996":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:2590:6987":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:3303:33161":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1392:9669":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:4212:9673":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4211:10863":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3841:10855":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6064:7012":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15814:6851":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:43831:8707":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:8249:8625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:8319:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:403:9484":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5635:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7223:7223":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:6150:10652":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:8298:7347":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5570:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:34544:4759":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12422:6113":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11324:9516":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"14:40:6197":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2483:10803":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12278:9564":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6790:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8336:9812":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:16121:6931":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"23:53:4973":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:11898:6052":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:732:9680":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12362:6109":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8462:4615":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"9:500:7577":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:8238:16362":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6740:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:10601:152":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:6534:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11467:6030":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:40673:8976":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2840:6998":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"9:176:22721":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:47253:9261":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:40854:8984":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11694:9404":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4303:32296":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3730:4687":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6970:7009":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14177:6396":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11153:9502":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:10346:9835":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:1158:9672":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1861:9753":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:5622:9783":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1085:37122":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15434:6734":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9715:5757":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:3592:9333":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:928:5653":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:10638:4732":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:11035:9365":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:915:7500":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:39040:4765":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7999:9802":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6640:9587":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:40729:5993":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15931:6182":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:10573:37171":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4925:10874":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7282:7237":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:7702:16210":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:10643:4734":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:3308:7502":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:40739:10782":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:2550:6985":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22918:8719":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1667:7785":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:690:2976":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber","event"],"kind":"function"},"2:44184:9079":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"20:856:4617":{"crate_id":20,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"5:6792:5225":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5533:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6852:7159":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"20:4:2985":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"macro"},"2:40717:8978":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:613:37174":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"20:32:2984":{"crate_id":20,"path":["tracing_core","callsite","Callsite"],"kind":"trait"},"2:4430:9697":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7838:23678":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46357:9174":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:7845:5677":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13553:6265":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15678:6824":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11930:9409":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9269:9825":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6625:7146":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46501:9196":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10388:5043":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4215:10864":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5357:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:1601:9676":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:718:5870":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11674:6039":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9220:10952":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"9:236:4603":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2541:4466":{"crate_id":1,"path":["std","io"],"kind":"module"},"10:0:4456":{"crate_id":10,"path":["adler"],"kind":"module"},"1:1859:9752":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3241:4660":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5658:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12659:9570":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:7518:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1583:7499":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:1049:9669":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:12952:16144":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:41390:5708":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43869:9736":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6682:9792":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:7325:5752":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:33746:4752":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:21918:3042":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46883:9237":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3032:5730":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10954:23750":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21802:3042":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:23075:4623":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10284:5990":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15624:6803":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4807:10861":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:8598:9654":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6876:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4564:9699":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:1907:7502":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:7060:5684":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10955:9388":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:14111:6371":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14212:6407":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:5316:9704":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:10386:5034":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46080:9152":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5224:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:374:9472":{"crate_id":21,"path":["once_cell","race","OnceBool"],"kind":"struct"},"17:15281:6693":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15249:6683":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4267:7039":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5282:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:22990:8729":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:8267:7343":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:38461:4764":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:491:5835":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40993:5857":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6837:9619":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7386:7246":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:2301:8655":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6765:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:40570:8962":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3368:7504":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:7341:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13116:6169":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44084:9073":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:3090:35437":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12530:9567":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:34198:4756":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2604:16376":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:2751:486":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"6:570:7656":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:8165:7015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:949:9659":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11647:6037":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:2591:8662":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12141:5770":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:44004:9067":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:14271:6413":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14051:6363":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7350:7244":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:1900:7501":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3529:9013":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6902:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21928:10982":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:23201:8751":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:7717:32660":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:44483:9103":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44308:9086":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41408:9016":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:895:5636":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10503:10655":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:16198:6949":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:7454:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10889:9844":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:7919:9642":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:980:9666":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:8028:7327":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4672:10887":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:3665:4777":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:7684:8674":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:8261:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:23068:8741":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45899:9137":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14402:6433":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11051:9507":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7259:7236":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10218:9032":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"13:110:37134":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:8669:2978":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1494:7671":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12621:6127":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:9442:9375":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13187:6182":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43160:33707":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:12671:9571":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:4354:10885":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:16151:6939":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11115:9511":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6876:7164":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:8585:9651":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8341:10843":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:9710:9807":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:13844:6332":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:6953:8697":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:7527:8671":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"11:2148:9669":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:5497:5634":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6302:7098":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40883:8988":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15383:6723":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:15039:6638":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5255:7057":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:32444:4663":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:43919:9737":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5622:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1545:9673":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1236:10651":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:8528:7388":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:2467:6976":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9193:9367":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12647:9569":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:2469:10799":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:32355:2978":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:5168:10913":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13252:6200":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6713:9608":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9205:10953":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:45984:9146":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4829:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12808:6145":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:4821:8512":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:216:4592":{"crate_id":21,"path":["once_cell","sync","Lazy"],"kind":"struct"},"5:2179:9685":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15521:6783":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:11485:9077":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"20:806:3167":{"crate_id":20,"path":["tracing_core","dispatcher","Kind"],"kind":"enum"},"17:13272:6210":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10155:5985":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13387:6227":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13363:6223":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:735:27924":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5205:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8255:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10712:9767":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:7495:8670":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15333:6708":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6917:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:481:5834":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5641:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6770:8404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:14012:6358":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12030:9549":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:785:3042":{"crate_id":20,"path":["tracing_core","sealed","Sealed"],"kind":"trait"},"17:14091:6368":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:4372:4616":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7044:7014":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:6532:5351":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:6042:7010":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1597:7731":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10976:28096":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:10045:120":{"crate_id":2,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"1:8257:8652":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:2374:8661":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:12483:9717":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:12973:16142":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:40513:33717":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6738:37159":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14066:6366":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7563:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22982:8728":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11688:6040":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8545:9818":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2966:7004":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1129:5634":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10044:23739":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:15206:6675":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12388:6110":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11293:23770":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:6718:5747":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5341:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:7234:5694":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2322:10796":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:7391:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10399:5993":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:9328:9371":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:44661:9117":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13325:6217":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"0:36:1956":{"crate_id":0,"path":["tracing","warn"],"kind":"macro"},"16:0:4461":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8519:9006":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:38296:4761":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:11031:3042":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15463:6741":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:47200:9252":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:44720:16494":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:6256:8690":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11102:9510":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8539:9084":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40665:8975":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:13211:6196":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9341:28075":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:22572:11072":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3092:8658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44034:8702":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:11430:9712":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:47185:9251":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40787:9725":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:6799:10948":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2435:22808":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:589:5847":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:44020:5993":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:9545:9755":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15569:6784":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:10820:5712":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:5146:5616":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:521:27926":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:726:5873":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47148:9248":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6462:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14599:6471":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6205:23670":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:8343:8646":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12433:6115":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1500:7674":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2486:6982":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:159:3406":{"crate_id":20,"path":["tracing_core","dispatcher","has_been_set"],"kind":"function"},"6:6411:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40472:8963":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15822:6854":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:7539:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43434:9058":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22712:11064":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12792:5950":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:7308:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:1564:22736":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10092:23740":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11280:8705":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11142:6023":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2705:5727":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:15214:6677":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:39831:4772":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7551:5225":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8070:10769":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:47128:9246":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:0:4462":{"crate_id":17,"path":["object"],"kind":"module"},"2:31172:5406":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5562:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:8612:7027":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12454:6118":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4442:9698":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:1592:7500":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:328:7496":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:33813:4751":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12408:6112":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4947:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:3473:9494":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11075:6007":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:16176:6947":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:8186:9289":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14147:6377":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5551:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1643:7768":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8717:9348":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43849:9735":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12127:6089":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:113:27916":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6881:5634":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:39655:4779":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11241:9375":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"14:165:22742":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:34025:4755":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12342:6104":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:14587:6464":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:11098:5762":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:1922:9756":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11223:9119":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:46275:9170":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:15445:6738":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:42342:5225":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11313:6020":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:2440:5653":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:10709:9765":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:40836:8981":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44238:9082":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5417:7062":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:23267:8757":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:22558:3042":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1507:7677":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2780:9764":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1220:36562":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:41017:9003":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8602:10886":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12584:9502":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"20:466:2985":{"crate_id":20,"path":["tracing_core","metadata"],"kind":"module"},"5:4167:5634":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8622:9337":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:2990:7005":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13424:6233":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:479:7604":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44900:4692":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5648:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:824:3466":{"crate_id":20,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"6:5217:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:545:7643":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:9411:5750":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:41915:9020":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:6358:4693":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6998:7173":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14994:6629":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:2495:10809":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:564:7653":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7521:7268":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:43980:9063":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9256:9370":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"14:220:7483":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:6959:8696":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:6964:5706":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:5757:7066":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:102:7492":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:3313:37019":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8843:9356":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13024:23744":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6573:7140":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:8096:9650":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2931:16213":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:12978:16141":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5682:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1974:9757":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"0:30:3261":{"crate_id":0,"path":["tracing","event_enabled"],"kind":"macro"},"2:30798:33701":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:11128:5975":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1421:9672":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:6984:7026":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:1920:7504":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4937:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:274:3017":{"crate_id":20,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"11:2121:7271":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14372:6427":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15058:6639":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:2533:7506":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:598:37176":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10715:9769":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:6808:7006":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:473:7601":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:672:9745":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3693:4684":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:8:2983":{"crate_id":20,"path":["tracing_core","callsite"],"kind":"module"},"6:6882:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3559:5616":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:7697:16421":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22934:8723":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3678:34656":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5098:10907":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:1631:7502":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:1831:16320":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"18:581:5406":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14723:6473":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6731:9616":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42865:5034":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:3301:4616":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:10384:5035":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6678:4580":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11354:9520":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6449:8256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11853:9547":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42886:5044":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14529:6455":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11853:9774":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"0:258:3465":{"crate_id":0,"path":["tracing","subscriber","with_default"],"kind":"function"},"6:6631:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:2466:5673":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:8526:5993":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:8273:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5085:7051":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:155:3465":{"crate_id":20,"path":["tracing_core","dispatcher","with_default"],"kind":"function"},"17:13292:6211":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12328:6099":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9737:23717":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:7354:33457":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43379:4733":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8064:10725":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6480:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:6443:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"0:32:3010":{"crate_id":0,"path":["tracing","enabled"],"kind":"macro"},"17:14284:6415":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:23234:8754":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12089:6087":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:517:7629":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"23:37:4979":{"crate_id":23,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"16:4120:7035":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1256:36552":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:7736:5669":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:44452:9099":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2920:7002":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:123:5623":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5349:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:4792:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13437:6234":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15473:6746":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:12467:16442":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:7983:3042":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12150:6090":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7016:7181":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:43426:9057":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7807:37160":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:33340:4748":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:14977:6627":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5420:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"14:160:9655":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22850:8717":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46374:9175":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:22358:3042":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:8000:7022":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:2485:10804":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:47031:9241":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:30772:4682":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14386:6429":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10905:9504":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:21667:5406":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:364:5625":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10251:5989":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:239:2976":{"crate_id":20,"path":["tracing_core","event"],"kind":"module"},"1:3393:9767":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"0:381:4014":{"crate_id":0,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"1:9170:5225":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46161:9164":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43219:4374":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1530:7687":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3443:4385":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2860:6999":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1690:7795":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13015:6115":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1625:7756":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45931:9139":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:9235:10954":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9146:9365":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5405:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8174:9807":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:11212:9673":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7332:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:1642:9683":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11256:6013":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:23120:3042":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:12653:9070":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5311:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:42237:9727":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44924:4689":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:39868:4591":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12353:6108":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7159:7209":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10350:5992":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:1000:2986":{"crate_id":20,"path":["tracing_core","metadata","Level"],"kind":"struct"},"16:3695:7033":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6781:7151":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:46226:9167":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:507:5836":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:11499:9713":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5288:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6544:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:12338:28066":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"7:32:22640":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:396:5627":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10412:10464":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:10982:23751":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"9:53:22672":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:2380:4616":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:4332:5616":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:8233:23680":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:4595:5828":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40915:8993":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40958:8997":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4970:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3340:9765":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:0:2971":{"crate_id":20,"path":["tracing_core"],"kind":"module"},"2:3638:4773":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:42879:5043":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:974:9664":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:41352:9010":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:532:7638":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11567:9529":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:7431:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12056:6084":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:22797:8716":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:8137:7024":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:9320:9832":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1514:7679":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:538:7641":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1601:9674":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1920:9755":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:0:4577":{"crate_id":21,"path":["once_cell"],"kind":"module"},"1:1637:7503":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:21732:33679":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14079:6367":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1888:5653":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:4496:16185":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44558:9105":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:2620:6988":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8196:9290":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46019:9148":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"0:33:3347":{"crate_id":0,"path":["tracing","trace"],"kind":"macro"},"17:2175:23797":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6421:6966":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4694:7041":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:12322:32650":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:8626:7396":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:9103:9823":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10918:9288":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6794:7152":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:4341:10884":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:13924:4690":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:15400:6727":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6599:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11557:9528":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:2660:6990":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11191:9363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14788:6524":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:6406:9791":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7471:7261":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6680:9603":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"11:351:37130":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3347:37018":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:23157:8747":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:3834:7034":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:14356:6426":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:1893:5673":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:39861:4774":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:3724:9673":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7959:7324":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12399:6111":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"0:263:3464":{"crate_id":0,"path":["tracing","subscriber","set_default"],"kind":"function"},"16:5727:5985":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7537:37016":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3297:28748":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40968:8998":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43181:5032":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11595:6031":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:4852:5310":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"20:1130:4727":{"crate_id":20,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"6:6381:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4844:7044":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8050:10724":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:16050:6210":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:6282:5735":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:15:3033":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:76:37193":{"crate_id":20,"path":["tracing_core","callsite","private","Private"],"kind":"struct"},"17:13568:6271":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:6067:5616":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5742:5986":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11063:9508":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:685:9673":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:40578:8971":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13972:6057":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3337:4758":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12201:9558":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:1622:9660":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13375:6226":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3096:35435":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14131:6372":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:47315:9278":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40502:8964":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:14016:10739":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11841:9546":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:5779:10936":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10908:9377":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46336:9173":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:22360:10983":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6389:9580":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5265:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:7487:5225":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4957:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14968:6623":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15734:6832":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7401:37152":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:45852:9132":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:42115:9036":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"11:1140:9671":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2606:16377":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:2044:4678":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"23:0:3044":{"crate_id":23,"path":["pin_project_lite"],"kind":"module"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"0:91:3627":{"crate_id":0,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"11:798:5653":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:935:5639":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:45969:9145":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11788:9539":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8597:9336":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3903:9773":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"0:261:3467":{"crate_id":0,"path":["tracing","subscriber","set_global_default"],"kind":"function"},"16:5689:7065":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:1914:7503":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5025:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4964:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:643:5836":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7789:37157":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:497:7612":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"0:73:2972":{"crate_id":0,"path":["tracing","instrument"],"kind":"module"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5151:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4816:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12597:6126":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:15151:6662":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"9:0:4455":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:7597:5233":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11269:23769":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13455:6242":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:44288:9084":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:635:5859":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:754:5878":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13606:6279":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"0:0:3043":{"crate_id":0,"path":["tracing"],"kind":"module"},"0:34:610":{"crate_id":0,"path":["tracing","debug"],"kind":"macro"},"16:7969:7325":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15342:6709":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15222:6679":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42059:34035":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7829:5673":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:7495:7262":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:2772:6995":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15778:6847":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5282:7058":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:2154:8652":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:38351:4762":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:46634:9201":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:21804:10981":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:4060:5225":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:12327:10726":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:39881:8834":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6666:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:261:9483":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15168:6667":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:42189:9673":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21703:33674":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6493:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6658:9597":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:12958:9707":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:40814:9726":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:15410:6730":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13738:6312":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9162:9824":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10612:9499":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6638:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12464:23864":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:368:9471":{"crate_id":21,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"11:1105:9670":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:4153:10859":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10720:37165":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15836:6857":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:786:4590":{"crate_id":20,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"5:2821:8665":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15957:6875":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:7358:7016":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46484:9195":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:12767:8705":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13526:6256":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"0:278:3651":{"crate_id":0,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"6:4929:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5007:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"0:25:3197":{"crate_id":0,"path":["tracing","debug_span"],"kind":"macro"},"2:22968:34033":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14876:6587":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:358:37203":{"crate_id":20,"path":["tracing_core","field","fmt","NullCallsite"],"kind":"struct"},"17:12572:6023":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:5334:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"18:80:27914":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:23256:8756":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:8284:8633":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:44892:4691":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:45837:9129":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47238:9260":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12516:9565":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:46036:9149":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:299:7493":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:40977:8999":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1895:5673":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"23:4:3573":{"crate_id":23,"path":["pin_project_lite","pin_project"],"kind":"macro"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"0:375:4009":{"crate_id":0,"path":["tracing","span","Entered"],"kind":"struct"},"20:837:3024":{"crate_id":20,"path":["tracing_core","field","Field"],"kind":"struct"},"1:1613:5225":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:809:5673":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:15023:6635":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:2719:5713":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11998:9715":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"20:1103:3018":{"crate_id":20,"path":["tracing_core","span","Record"],"kind":"struct"},"2:32369:4611":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40794:8710":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:32376:8824":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:0:4457":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3610:9772":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"9:355:22669":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4929:7047":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22903:8718":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13344:6222":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11973:5769":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:44202:9080":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:42248:10921":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:953:9660":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44416:16156":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:13904:4693":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:2559:7511":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:538:5844":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6711:5634":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14912:6617":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:437:5936":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15701:6825":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14503:6453":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:135:2992":{"crate_id":0,"path":["tracing","level_filters"],"kind":"module"},"17:11189:6011":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8480:9331":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:9176:9366":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"0:321:3614":{"crate_id":0,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"17:2203:9489":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1098:9669":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2796:6996":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:23278:8758":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:500:5723":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5165:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"9:390:22655":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4902:7046":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46434:9193":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:23006:33697":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43961:9739":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15748:6839":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46290:9171":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9287:28074":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:47060:9242":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43144:7362":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:10754:5710":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:7517:5645":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:43932:8711":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5004:10871":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4921:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41142:9006":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:986:9667":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"20:477:2987":{"crate_id":20,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"17:15769:6845":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6144:23669":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2315:9761":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:40906:8992":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11812:9542":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9858:23734":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:2551:37132":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:2539:7507":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:2349:9669":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:1075:7271":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7554:23677":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6159:7074":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:10327:5040":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6866:3975":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"20:1113:4725":{"crate_id":20,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"2:42133:9037":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40874:8986":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:8199:8624":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:5278:33725":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:4717:9700":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:22496:11068":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12238:9561":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:2262:5650":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10769:37170":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13797:6326":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:8546:7391":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:82:5828":{"crate_id":21,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"17:10710:9501":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7305:7238":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:1551:7702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3252:4744":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:38406:4763":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11242:9515":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22957:4621":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:659:9477":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:5112:10908":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5387:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9781:23733":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15356:6716":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10759:6023":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4976:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:5844:5740":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42334:9673":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11719:9406":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:4325:10882":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12557:6007":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:3432:4686":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"20:681:2980":{"crate_id":20,"path":["tracing_core","subscriber","Subscriber"],"kind":"trait"},"2:32362:9723":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:6764:8691":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15608:6799":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:531:5841":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7668:5664":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7938:7321":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:4139:10858":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15197:6674":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6813:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:7448:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:1107:9672":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2337:8687":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"0:365:2988":{"crate_id":0,"path":["tracing","span","Span"],"kind":"struct"},"1:10595:9823":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10317:5991":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:5776:4266":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1632:7760":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13399:6230":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6953:7172":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:765:27925":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46613:9200":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:2354:37069":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6822:23673":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:11443:6028":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44317:9087":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4886:10887":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5709:23668":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:8014:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4694:10888":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11306:9392":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:44595:9106":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:896:9577":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:6440:23671":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22639:16376":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:7350:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:7907:7320":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:373:9741":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11743:6045":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8509:8980":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7397:5753":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10524:9498":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:45952:9144":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:124:4592":{"crate_id":21,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13235:6197":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11405:9522":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"14:0:4459":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5348:7060":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10622:37169":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7980:7021":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7416:9620":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10170:5986":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:4531:5616":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3342:9766":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4881:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14933:6622":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:44950:9127":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:1530:4616":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:14038:6361":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13538:6259":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:12499:16145":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:42247:10727":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12107:6023":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44609:16157":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8169:2987":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:16249:6959":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:5179:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:578:7661":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:30787:5032":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:13750:4653":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12929:6152":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3658:32424":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:740:9660":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47223:9259":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:47119:9245":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12371:6152":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13308:6215":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15426:6733":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6084:7068":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10394:5041":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:13593:9719":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:9460:9376":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9120:9363":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6337:7100":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:8330:8642":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:42093:9335":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:4986:9497":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:33612:4750":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1089:9668":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6823:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:4912:808":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:5305:4609":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7469:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1884:5225":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:6012:5653":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:45998:9147":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10967:9331":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12724:23741":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"0:28:3221":{"crate_id":0,"path":["tracing","error_span"],"kind":"macro"},"2:4786:5698":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2450:6974":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13855:6333":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14475:6449":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:5060:7050":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8249:9810":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5520:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:3014:22809":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12043:9550":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7567:8672":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"12:0:4458":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:2228:7505":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:11813:9773":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10419:5995":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:16069:6919":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:9984:23738":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13832:6330":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:11237:8702":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:586:7665":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:23088:4622":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5196:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:894:5225":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1584:7724":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10938:9289":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46258:9169":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:8320:23681":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:434:37123":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:14752:6493":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:23190:8750":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:8711:7403":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:22452:11067":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13674:6283":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8022:5759":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12300:23863":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:1569:7712":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6723:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:21749:3042":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:42326:4616":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5441:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:1064:22735":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2748:6994":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:854:9664":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5649:7064":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:39619:4780":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12768:23720":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:155:5620":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:7767:34133":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:22205:10987":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10026:34621":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46546:9197":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8859:9359":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43387:9053":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"20:1095:3975":{"crate_id":20,"path":["tracing_core","span","Attributes"],"kind":"struct"},"17:16079:6920":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12863:6148":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1897:9754":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:23168:8748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:546:6964":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:21822:8714":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3211:3976":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12289:6092":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6748:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"15:0:4460":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46176:9165":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40562:8970":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11392:9521":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11874:9775":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:30734:3570":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:22625:11073":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:5449:7063":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7883:7113":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:6255:5616":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:40624:8973":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:8483:7384":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3248:4662":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4109:10856":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46575:9198":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13173:6181":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11367:6007":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:3987:5894":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:5992:9790":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:5224:7056":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:41400:9014":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7168:7210":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44643:9115":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5428:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"0:29:2976":{"crate_id":0,"path":["tracing","event"],"kind":"macro"},"1:11725:9407":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8532:8702":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6408:7110":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13146:6173":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13509:6248":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3659:4775":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:3667:10812":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:15368:6719":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2142:16387":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"13:0:4452":{"crate_id":13,"path":["std_detect"],"kind":"module"},"14:31:9655":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3396:4778":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6716:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:8066:23679":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6521:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12306:9853":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:2037:9488":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2570:6986":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:2545:7508":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13412:6232":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5117:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"0:37:3388":{"crate_id":0,"path":["tracing","error"],"kind":"macro"},"17:15992:6905":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5255:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12900:6151":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13986:6355":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5471:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:527:5650":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2140:16386":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:14189:6398":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15635:6808":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:8267:8628":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:3282:4767":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:5144:7053":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:4821:9496":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:1008:4616":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:22684:11063":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6942:7171":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7949:7020":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8471:9330":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6564:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:6867:5748":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:13723:6308":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:903:9482":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:43416:4603":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10671:37163":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:15301:6700":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6890:7008":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13753:6317":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:42767:9709":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13999:6356":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:15582:6790":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:680:5860":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9154:4616":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43395:4735":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4223:10866":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4805:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14560:6461":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4896:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:10031:34343":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"22:204:2972":{"crate_id":22,"path":["tracing_attributes","instrument"],"kind":"proc_attribute"},"1:10929:9385":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:11258:9391":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"23:43:5314":{"crate_id":23,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:12690:9075":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11419:6023":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2506:6983":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6758:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11877:6050":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"8:0:4454":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7986:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11661:6038":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6588:7143":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5019:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1563:7710":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2640:6989":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12695:9573":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:4161:10860":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4241:7038":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6672:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5805:5671":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:41007:9002":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11080:5760":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44010:9068":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40466:8962":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:29:511":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"2:40767:9724":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7542:7270":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:33679:4754":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:16105:6926":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:10068:23722":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13089:6163":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5271:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:8058:9649":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5670:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7731:9041":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44326:9088":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"14:187:22749":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:485:7607":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6652:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4984:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5069:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:3927:5653":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12851:6147":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"20:990:3167":{"crate_id":20,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15799:6850":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:4643:4610":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:8151:7025":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:1109:4724":{"crate_id":20,"path":["tracing_core","span","Current"],"kind":"struct"},"1:8645:8497":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5586:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6680:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:5545:16129":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2741:9763":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:6853:9795":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:8223:7335":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11680:9403":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1642:7504":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:32474:4664":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:7642:8673":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:21718:33673":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11016:9505":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13959:6350":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6777:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:11215:28099":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13814:6329":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:30508:4620":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44102:9074":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8740:10743":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:42181:4616":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:11949:9410":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:842:10738":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:151:4009":{"crate_id":20,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8853:4616":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40936:8995":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:1880:4616":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13899:6341":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6914:7168":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"}},"external_crates":{"23":{"name":"pin_project_lite","html_root_url":null},"20":{"name":"tracing_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tracing_attributes","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"once_cell","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}