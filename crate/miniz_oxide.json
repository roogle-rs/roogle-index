{"root":"0:0:1675","crate_version":"0.6.2","includes_private":false,"index":{"0:123:2114":{"id":"0:123:2114","crate_id":0,"name":"set_compression_level","span":{"filename":"src/deflate/core.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"Set the compression level of the compressor.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:2000":{"id":"0:78:2000","crate_id":0,"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[185,4],"end":[185,63]},"visibility":"public","docs":"Force the compressor to only output static blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0004_0000","value":"262_144u32","is_literal":true}},"0:599:2009":{"id":"0:599:2009","crate_id":0,"name":"Filtered","span":{"filename":"src/deflate/core.rs","begin":[199,4],"end":[199,16]},"visibility":"default","docs":"Only use matches that are at least 5 bytes long.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"1","value":"1"}}},"0:935:1639":{"id":"0:935:1639","crate_id":0,"name":"Data","span":{"filename":"src/lib.rs","begin":[124,4],"end":[124,13]},"visibility":"default","docs":"Error in inflation; see [`inflate::stream::inflate()`] for details.\n\nNot returned from [`deflate::stream::deflate()`].","links":{"`inflate::stream::inflate()`":"0:527:1587","`deflate::stream::deflate()`":"0:325:1586"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-3","value":"-3"}}},"0:596:115":{"id":"0:596:115","crate_id":0,"name":"Default","span":{"filename":"src/deflate/core.rs","begin":[197,4],"end":[197,15]},"visibility":"default","docs":"Don't use any of the special strategies.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"4:5092:35637":{"id":"4:5092:35637","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:276:1884","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:6723:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:276:1884","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:6723:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:887:1610":{"id":"0:887:1610","crate_id":0,"name":"Block","span":{"filename":"src/lib.rs","begin":[61,4],"end":[61,13]},"visibility":"default","docs":"Not implemented.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"5","value":"5"}}},"b:1:2497-0:495:2989":{"id":"b:1:2497-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2501-0:871:1595":{"id":"b:1:2501-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:993:409":{"id":"0:993:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[179,22],"end":[179,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:671-0:904:1618":{"id":"b:4:671-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7718:3340-0:495:2989":{"id":"a:1:7718:3340-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:894:409":{"id":"0:894:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[42,22],"end":[42,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5093:3677":{"id":"4:5093:3677","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2646:214-0:964:1651":{"id":"a:1:2646:214-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:653:2027":{"id":"0:653:2027","crate_id":0,"name":"BadParam","span":{"filename":"src/deflate/core.rs","begin":[262,4],"end":[262,17]},"visibility":"default","docs":"Usage error.\n\nThis indicates that either the [`CompressorOxide`] experienced a previous error, or the\nstream has already been [`TDEFLFlush::Finish`]'d.","links":{"`CompressorOxide`":"0:111:1807","`TDEFLFlush::Finish`":"0:635:1608"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-2","value":"-2"}}},"0:698":{"id":"0:698","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:699:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:665":{"id":"0:665","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:666:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2646:214-0:985:1665":{"id":"a:1:2646:214-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2507-0:500:2992":{"id":"b:1:2507-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2497-0:679:1780":{"id":"b:1:2497-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2222-0:679:1780":{"id":"b:1:2222-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3305-0:652:1816":{"id":"b:1:3305-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2501-0:985:1665":{"id":"b:1:2501-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:310:2394":{"id":"0:310:2394","crate_id":0,"name":"compress_to_output","span":{"filename":"src/deflate/core.rs","begin":[2232,0],"end":[2250,1]},"visibility":"public","docs":"Main compression function. Callbacks output.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer.\n\nThe caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined\nbehaviour.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flush",{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["callback_func",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2919:2131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"usize"}]},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&[u8]) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2919:2131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:625:1815":{"id":"b:1:2507-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71:1886":{"id":"0:71:1886","crate_id":0,"name":"deflate_flags","span":{"filename":"src/deflate/core.rs","begin":[168,0],"end":[168,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:72:1979","0:73:1982","0:74:1986","0:75:1990","0:76:1993","0:77:1996","0:78:2000","0:79:2003"],"is_stripped":false}},"0:897:595":{"id":"0:897:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[42,29],"end":[42,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11385:34959":{"id":"1:11385:34959","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:11388:34960","prim@char":"1:58461:3071","self::pattern":"1:11022:3899"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50100:3720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:964:1651":{"id":"b:1:3305-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2507-0:505:2978":{"id":"b:1:2507-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:871:1595":{"id":"a:1:2646:214-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2512-0:964:1651":{"id":"b:1:2512-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:605:2012":{"id":"0:605:2012","crate_id":0,"name":"RLE","span":{"filename":"src/deflate/core.rs","begin":[203,4],"end":[203,11]},"visibility":"default","docs":"Only look for matches with a distance of 1, i.e do run-length encoding only.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"3","value":"3"}}},"1:11331:306":{"id":"1:11331:306","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11332:34947","`u8`":"1:58478:3085"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:602:1843":{"id":"0:602:1843","crate_id":0,"name":"HuffmanOnly","span":{"filename":"src/deflate/core.rs","begin":[201,4],"end":[201,19]},"visibility":"default","docs":"Don't look for matches, only huffman encode the literals.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"2","value":"2"}}},"1:11356:34953":{"id":"1:11356:34953","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11347:2178":{"id":"1:11347:2178","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49982:4203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[233,0],"end":[261,1]},"visibility":{"restricted":{"parent":"0:336:481","path":"::inflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2548:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:118:2101":{"id":"0:118:2101","crate_id":0,"name":"adler32","span":{"filename":"src/deflate/core.rs","begin":[438,4],"end":[440,5]},"visibility":"public","docs":"Get the adler32 checksum of the currently encoded data.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1614":{"id":"0:928:1614","crate_id":0,"name":"MZError","span":{"filename":"src/lib.rs","begin":[109,0],"end":[143,1]},"visibility":"public","docs":"A list of miniz failed status codes.\n\nThese are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:527:1587","`MZResult`":"0:568:1663","`StreamResult`":"0:985:1665","`deflate::stream::deflate()`":"0:325:1586","`Err`":"1:48178:126"},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:929:1631","0:932:1636","0:935:1639","0:938:1640","0:941:1644","0:944:1645","0:947:182"],"impls":["a:1:7719:3339-0:928:1614","a:1:2646:214-0:928:1614","a:1:7718:3340-0:928:1614","a:1:2660:222-0:928:1614","a:1:2710:3191-0:928:1614","b:1:2222-0:928:1614","b:1:2507-0:928:1614","b:1:2501-0:928:1614","b:1:2225-0:928:1614","b:1:2512-0:928:1614","b:1:3305-0:928:1614","b:1:2497-0:928:1614","b:4:671-0:928:1614","0:950","0:952","0:953","0:955","0:956","0:958","0:959","0:961"]}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:710:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7719:3339-0:491:2981":{"id":"a:1:7719:3339-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11397:3096":{"id":"1:11397:3096","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071","str::matches":"1:11397:3096","`DoubleEndedIterator`":"1:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50200:4214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:618:595":{"id":"0:618:595","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:615:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[36,24],"end":[36,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::shared::MZ_ADLER32_INIT","name":"MZ_ADLER32_INIT","id":"0:554:1591","glob":false}},"1:11349:31898":{"id":"1:11349:31898","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11348:31883"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50279:4219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11335:2212":{"id":"1:11335:2212","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:2587":{"id":"0:346:2587","crate_id":0,"name":"TINFL_LZ_DICT_SIZE","span":{"filename":"src/inflate/core.rs","begin":[11,0],"end":[11,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"usize"},"expr":"32_768","value":"32_768usize","is_literal":true}},"0:525:3020":{"id":"0:525:3020","crate_id":0,"name":"reset_as","span":{"filename":"src/inflate/stream.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Resets the state according to specified policy.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["policy",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ResetPolicy","id":"0:489:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:542:650":{"id":"0:542:650","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[93,4],"end":[103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"::core::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"::core::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:985:1665":{"id":"b:1:2507-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:612:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5362:1399":{"id":"4:5362:1399","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:128:2128":{"id":"b:1:3305-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2501-0:505:2978":{"id":"b:1:2501-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2512-0:871:1595":{"id":"b:1:2512-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:505:2978":{"id":"a:1:2710:3191-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2501-0:830:2468":{"id":"b:1:2501-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2501-0:382:2531":{"id":"b:1:2501-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:954:409":{"id":"0:954:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[108,22],"end":[108,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,16],"end":[194,20]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7718:3340-0:871:1595":{"id":"a:1:7718:3340-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11333:5635":{"id":"1:11333:5635","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:679:1780":{"id":"b:1:2225-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:111:1807":{"id":"a:1:2660:222-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7718:3340-0:505:2978":{"id":"a:1:7718:3340-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2710:3191-0:985:1665":{"id":"a:1:2710:3191-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:516:59":{"id":"0:516:59","crate_id":0,"name":"default","span":{"filename":"src/inflate/stream.rs","begin":[85,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,29],"end":[42,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5:1586":{"id":"0:5:1586","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/mod.rs","begin":[1,0],"end":[227,1]},"visibility":"public","docs":"This module contains functionality for compression.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:39:481","0:314:1776","0:679:1780","0:327:1795","0:328:1801"],"is_stripped":false}},"b:1:3305-0:505:2978":{"id":"b:1:3305-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:871:1595":{"id":"0:871:1595","crate_id":0,"name":"MZFlush","span":{"filename":"src/lib.rs","begin":[43,0],"end":[62,1]},"visibility":"public","docs":"A list of flush types.\n\nSee <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:872:174","0:875:1600","0:878:222","0:881:1606","0:884:1608","0:887:1610"],"impls":["0:563","a:1:7719:3339-0:871:1595","a:1:2646:214-0:871:1595","a:1:7718:3340-0:871:1595","a:1:2660:222-0:871:1595","a:1:2710:3191-0:871:1595","b:1:2222-0:871:1595","b:1:2507-0:871:1595","b:1:2501-0:871:1595","b:1:2225-0:871:1595","b:1:2512-0:871:1595","b:1:3305-0:871:1595","b:1:2497-0:871:1595","b:4:671-0:871:1595","0:80","0:890","0:892","0:893","0:895","0:896","0:898","0:899","0:901"]}},"0:662:1817":{"id":"0:662:1817","crate_id":0,"name":"Done","span":{"filename":"src/deflate/core.rs","begin":[275,4],"end":[275,12]},"visibility":"default","docs":"Compression succeeded and the deflate stream was ended.\n\nThis is the result of calling compression with [`TDEFLFlush::Finish`].","links":{"`TDEFLFlush::Finish`":"0:635:1608"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"1","value":"1"}}},"0:407:2692":{"id":"0:407:2692","crate_id":0,"name":"adler32_header","span":{"filename":"src/inflate/core.rs","begin":[224,4],"end":[230,5]},"visibility":"public","docs":"Returns the adler32 that was read from the zlib header if it exists.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:572:668":{"id":"0:572:668","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[201,4],"end":[203,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["res",{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:674":{"id":"0:674","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:635:1608":{"id":"0:635:1608","crate_id":0,"name":"Finish","span":{"filename":"src/deflate/core.rs","begin":[227,4],"end":[227,14]},"visibility":"default","docs":"Try to flush everything and end the deflate stream.\n\nOn success this will yield a [`TDEFLStatus::Done`] return status.","links":{"`TDEFLStatus::Done`":"0:662:1817"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"4","value":"4"}}},"0:375:2528":{"id":"0:375:2528","crate_id":0,"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","span":{"filename":"src/inflate/core.rs","begin":[128,4],"end":[128,64]},"visibility":"public","docs":"The output buffer should not wrap around.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"4","value":"4u32","is_literal":true}},"4:5091":{"id":"4:5091","crate_id":4,"name":null,"span":null,"visibility":{"restricted":{"parent":"4:5002:1345","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["4:5092:35637","4:5093:3677","4:5096:35638","4:5099:35639","4:5107:35640","4:5108:35641","4:5109:12027","4:5110:35642","4:5111:35643"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11359:34954":{"id":"1:11359:34954","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:58461:3071","self::pattern":"1:11022:3899"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:710:701":{"id":"0:710:701","crate_id":0,"name":"hash","span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2710:3191-0:866:2497":{"id":"a:1:2710:3191-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11366:3434":{"id":"1:11366:3434","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071","`None`":"1:48030:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11329:34945":{"id":"1:11329:34945","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10590:4384"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:2117":{"id":"0:124:2117","crate_id":0,"name":"set_compression_level_raw","span":{"filename":"src/deflate/core.rs","begin":[492,4],"end":[495,5]},"visibility":"public","docs":"Set the compression level of the compressor using an integer value.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:928:1614":{"id":"b:1:2225-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:523:3017":{"id":"0:523:3017","crate_id":0,"name":"new_boxed_with_window_bits","span":{"filename":"src/inflate/stream.rs","begin":[142,4],"end":[146,5]},"visibility":"public","docs":"Create a new state using miniz/zlib style window bits parameter.\n\nThe decompressor does not support different window sizes. As such,\nany positive (>0) value will set the zlib header flag, while a negative one\nwill not.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["window_bits",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:276:1884","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11326:34944":{"id":"1:11326:34944","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11324:34943"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[517,0],"end":[531,1]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2548:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7719:3339-0:111:1807":{"id":"a:1:7719:3339-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7718:3340-0:904:1618":{"id":"a:1:7718:3340-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11391:34961":{"id":"1:11391:34961","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:964:1651":{"id":"a:1:7719:3339-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3305-0:830:2468":{"id":"b:1:3305-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11348:31883":{"id":"1:11348:31883","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11349:31898"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50270:4218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2710:3191-0:871:1595":{"id":"a:1:2710:3191-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11429:34975":{"id":"1:11429:34975","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:669:409":{"id":"0:669:409","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:928:1614":{"id":"b:1:2222-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:481":{"id":"0:39:481","crate_id":0,"name":"core","span":{"filename":"src/deflate/core.rs","begin":[1,0],"end":[2463,1]},"visibility":"public","docs":"Streaming compression functionality.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:71:1886","0:595:1823","0:625:1815","0:652:1816","0:111:1807","0:128:2128","0:309:1814","0:310:2394","0:313:1804"],"is_stripped":false}},"0:705:595":{"id":"0:705:595","crate_id":0,"name":"eq","span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:898":{"id":"0:898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,40],"end":[42,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2710:3191-0:595:1823":{"id":"a:1:2710:3191-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:505:2978":{"id":"0:505:2978","crate_id":0,"name":"InflateState","span":{"filename":"src/inflate/stream.rs","begin":[60,0],"end":[82,1]},"visibility":"public","docs":"A struct that compbines a decompressor with extra data for streaming decompression.\n","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:518","a:1:7719:3339-0:505:2978","a:1:2646:214-0:505:2978","a:1:7718:3340-0:505:2978","a:1:2660:222-0:505:2978","a:1:2710:3191-0:505:2978","b:1:2222-0:505:2978","b:1:2507-0:505:2978","b:1:2501-0:505:2978","b:1:2225-0:505:2978","b:1:2512-0:505:2978","b:1:3305-0:505:2978","b:1:2497-0:505:2978","0:515"]}},"b:1:3305-0:382:2531":{"id":"b:1:3305-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:706":{"id":"0:706","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:623:701":{"id":"0:623:701","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:679:1780":{"id":"a:1:7719:3339-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:969:1658":{"id":"0:969:1658","crate_id":0,"name":"Raw","span":{"filename":"src/lib.rs","begin":[155,4],"end":[155,7]},"visibility":"default","docs":"Raw DEFLATE.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"b:1:3305-0:491:2981":{"id":"b:1:3305-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:864:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:4:671-0:928:1614":{"id":"b:4:671-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:376:2644":{"id":"0:376:2644","crate_id":0,"name":"TINFL_FLAG_COMPUTE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[136,4],"end":[136,50]},"visibility":"public","docs":"Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.\n\nIf [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.\n\nNOTE: Enabling/disabling this between calls to decompress will result in an incorect\nchecksum.","links":{"`TINFL_FLAG_IGNORE_ADLER32`":"0:377:2557"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"8","value":"8u32","is_literal":true}},"0:855":{"id":"0:855","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:856:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:538":{"id":"0:538","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[65,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:539:2494"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2222-0:505:2978":{"id":"b:1:2222-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:700":{"id":"0:700","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,16],"end":[15,20]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2710:3191-0:679:1780":{"id":"a:1:2710:3191-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:892":{"id":"0:892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,16],"end":[42,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11382:34958":{"id":"1:11382:34958","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11022:3899","str::split_terminator":"1:11379:34957","str::split":"1:11370:34955","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50064:4208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11442:34979":{"id":"1:11442:34979","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:866:2497":{"id":"b:1:2222-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:4:671-0:964:1651":{"id":"b:4:671-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:629:222":{"id":"0:629:222","crate_id":0,"name":"Sync","span":{"filename":"src/deflate/core.rs","begin":[218,4],"end":[218,12]},"visibility":"default","docs":"Try to flush all the current data and output an empty raw block.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"2","value":"2"}}},"0:852":{"id":"0:852","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:853:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,0],"end":[210,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZResult","id":"0:568:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:574:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2222-0:491:2981":{"id":"b:1:2222-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:947:182":{"id":"0:947:182","crate_id":0,"name":"Param","span":{"filename":"src/lib.rs","begin":[142,4],"end":[142,19]},"visibility":"default","docs":"Bad parameters.\n\nThis can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See\n[`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","links":{"`deflate::stream::deflate()`":"0:325:1586","deflate::core::TDEFLStatus::BadParam":"0:653:2027"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-10_000","value":"-10000"}}},"a:1:2710:3191-0:652:1816":{"id":"a:1:2710:3191-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11337:5636":{"id":"1:11337:5636","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:964:1651":{"id":"b:1:2497-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,29],"end":[42,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:897:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2497-0:505:2978":{"id":"b:1:2497-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1001:701":{"id":"0:1001:701","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[179,44],"end":[179,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:500:2992":{"id":"a:1:7719:3339-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2501-0:652:1816":{"id":"b:1:2501-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2225-0:904:1618":{"id":"b:1:2225-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:908:1626":{"id":"0:908:1626","crate_id":0,"name":"StreamEnd","span":{"filename":"src/lib.rs","begin":[97,4],"end":[97,17]},"visibility":"default","docs":"Operation succeeded and end of deflate stream was found.\n\nX-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or\n[`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`\nrespectively.","links":{"deflate::core::TDEFLStatus::Done":"0:662:1817","inflate::TINFLStatus::Done":"0:843:1817"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"1","value":"1"}}},"0:127:59":{"id":"0:127:59","crate_id":0,"name":"default","span":{"filename":"src/deflate/core.rs","begin":[521,4],"end":[530,5]},"visibility":"default","docs":"Initialize the compressor with a level of 4, zlib wrapper and\nthe default strategy.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:500:2992":{"id":"b:1:2512-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:374:2558":{"id":"0:374:2558","crate_id":0,"name":"TINFL_FLAG_HAS_MORE_INPUT","span":{"filename":"src/inflate/core.rs","begin":[125,4],"end":[125,49]},"visibility":"public","docs":"There will be more input that hasn't been given to the decompressor yet.\n\nThis is useful when you want to decompress what you have so far,\neven if you know there is probably more input that hasn't gotten here yet (_e.g._, over a\nnetwork connection).  When [`decompress()`][super::decompress] reaches the end of the input\nwithout finding the end of the compressed stream, it will return\n[`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,\nindicating that you should get more data before calling again.  If not set, it will return\n[`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]\nsuggesting the stream is corrupt, since you claimed it was all there.","links":{"super::decompress":"0:455:2533","super::TINFLStatus::FailedCannotMakeProgress":"0:831:2476","super::TINFLStatus::NeedsMoreInput":"0:846:2491"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"2","value":"2u32","is_literal":true}},"b:1:2507-0:495:2989":{"id":"b:1:2507-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11341:34948":{"id":"1:11341:34948","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:58467:3076","str::slice_mut_unchecked":"1:11342:34949","crate::ops::Index":"1:2971:3148"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:564:909":{"id":"0:564:909","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[68,4],"end":[76,5]},"visibility":"public","docs":"Create an MZFlush value from an integer value.\n\nReturns `MZError::Param` on invalid values.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flush",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:491:2981":{"id":"b:1:2512-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:911:1628":{"id":"0:911:1628","crate_id":0,"name":"NeedDict","span":{"filename":"src/lib.rs","begin":[100,4],"end":[100,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"2","value":"2"}}},"a:1:7719:3339-0:625:1815":{"id":"a:1:7719:3339-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,29],"end":[108,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:951:650":{"id":"0:951:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[108,9],"end":[108,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:928:1614":{"id":"a:1:7719:3339-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11400:34963":{"id":"1:11400:34963","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071","str::matches":"1:11397:3096","`DoubleEndedIterator`":"1:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50218:4215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:831:2476":{"id":"0:831:2476","crate_id":0,"name":"FailedCannotMakeProgress","span":{"filename":"src/inflate/mod.rs","begin":[34,4],"end":[34,77]},"visibility":"default","docs":"More input data was expected, but the caller indicated that there was no more data, so the\ninput stream is likely truncated.\n\nThis can't happen if you have provided the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompression.  By setting that flag, you indicate more input exists but is not provided,\nand so reaching the end of the input data without finding the end of the compressed stream\nwould instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","links":{"Self::NeedsMoreInput":"0:846:2491","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:374:2558"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"-4"}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[242,0],"end":[252,1]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:909"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2512-0:928:1614":{"id":"b:1:2512-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:642:409":{"id":"0:642:409","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:639:650":{"id":"0:639:650","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:928:1614":{"id":"b:1:2497-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7718:3340-0:928:1614":{"id":"a:1:7718:3340-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:926:701":{"id":"0:926:701","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[84,44],"end":[84,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000":{"id":"0:1000","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,44],"end":[179,48]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1001:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:840:2482":{"id":"0:840:2482","crate_id":0,"name":"Failed","span":{"filename":"src/inflate/mod.rs","begin":[44,4],"end":[44,38]},"visibility":"default","docs":"Failed to decompress due to invalid data.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"-1"}}},"a:1:7718:3340-0:382:2531":{"id":"a:1:7718:3340-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:673:4525":{"id":"4:673:4525","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:503":{"id":"0:503","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[50,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:471:1776","path":"::inflate::stream"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:489:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:504:1879"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2501-0:128:2128":{"id":"b:1:2501-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2227:31362":{"id":"1:2227:31362","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[189,0],"end":[198,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:1672"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:119:2104":{"id":"0:119:2104","crate_id":0,"name":"prev_return_status","span":{"filename":"src/deflate/core.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Get the return status of the previous [`compress`](fn.compress.html)\ncall with this compressor.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:574:668":{"id":"0:574:668","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[207,4],"end":[209,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["res",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2710:3191-0:904:1618":{"id":"a:1:2710:3191-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2507-0:652:1816":{"id":"b:1:2507-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:625:1815":{"id":"a:1:2646:214-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11423:34973":{"id":"1:11423:34973","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:495:2989":{"id":"b:1:2512-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11324:34943":{"id":"1:11324:34943","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:491:2981":{"id":"b:1:2507-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:547:2524":{"id":"0:547:2524","crate_id":0,"name":"decompress_to_vec_zlib_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[173,0],"end":[178,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"`TINFLStatus::HasMoreOutput`":"0:849:2493","`Vec`":"4:6405:237","`Result`":"1:48172:205","DecompressError":"0:866:2497"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["max_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:866:2497":{"id":"b:1:3305-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7718:3340-0:652:1816":{"id":"a:1:7718:3340-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:849:2493":{"id":"0:849:2493","crate_id":0,"name":"HasMoreOutput","span":{"filename":"src/inflate/mod.rs","begin":[62,4],"end":[62,54]},"visibility":"default","docs":"There is still pending data that didn't fit in the output buffer.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"2"}}},"4:675:31367":{"id":"4:675:31367","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,29],"end":[146,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11435:34977":{"id":"1:11435:34977","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:679:1780":{"id":"b:1:2512-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:656:2030":{"id":"0:656:2030","crate_id":0,"name":"PutBufFailed","span":{"filename":"src/deflate/core.rs","begin":[267,4],"end":[267,21]},"visibility":"default","docs":"Error putting data into output buffer.\n\nThis usually indicates a too-small buffer.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-1","value":"-1"}}},"b:1:2507-0:871:1595":{"id":"b:1:2507-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:639:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:623:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,9],"end":[108,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:951:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7718:3340-0:985:1665":{"id":"a:1:7718:3340-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2512-0:866:2497":{"id":"b:1:2512-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:938:1640":{"id":"0:938:1640","crate_id":0,"name":"Mem","span":{"filename":"src/lib.rs","begin":[127,4],"end":[127,12]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-4","value":"-4"}}},"b:1:2501-0:679:1780":{"id":"b:1:2501-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"4:5111:35643":{"id":"4:5111:35643","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11443:34980"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2660:222-0:382:2531":{"id":"a:1:2660:222-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[158,0],"end":[173,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:566:1659","0:567:1661"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2225-0:595:1823":{"id":"b:1:2225-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2222-0:595:1823":{"id":"b:1:2222-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:689:1788":{"id":"0:689:1788","crate_id":0,"name":"UberCompression","span":{"filename":"src/deflate/mod.rs","begin":[24,4],"end":[24,24]},"visibility":"default","docs":"Even more checks, can be very slow.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"10","value":"10"}}},"b:4:671-0:871:1595":{"id":"b:4:671-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:692:1791":{"id":"0:692:1791","crate_id":0,"name":"DefaultLevel","span":{"filename":"src/deflate/mod.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Default compromise between speed and compression.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"6","value":"6"}}},"b:1:2222-0:128:2128":{"id":"b:1:2222-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:4:5360-0:866:2497":{"id":"b:4:5360-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5362:1399"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:491:2981":{"id":"a:1:2710:3191-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2660:222-0:491:2981":{"id":"a:1:2660:222-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:5109:12027":{"id":"4:5109:12027","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:489:2976":{"id":"0:489:2976","crate_id":0,"name":"ResetPolicy","span":{"filename":"src/inflate/stream.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"Tag that determines reset policy of [InflateState](struct.InflateState.html)","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:490:1879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:493","0:497","0:503"]}},"0:878:222":{"id":"0:878:222","crate_id":0,"name":"Sync","span":{"filename":"src/lib.rs","begin":[52,4],"end":[52,12]},"visibility":"default","docs":"Finish compressing the currently buffered data, and output an empty raw block.\nHas no use in decompression.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"2","value":"2"}}},"0:859:595":{"id":"0:859:595","crate_id":0,"name":"eq","span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:869":{"id":"0:869","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:870:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:843:1817":{"id":"0:843:1817","crate_id":0,"name":"Done","span":{"filename":"src/inflate/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":"Finished decompression without issues.\n\nThis indicates the end of the compressed stream has been reached.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"0"}}},"0:686:1786":{"id":"0:686:1786","crate_id":0,"name":"BestCompression","span":{"filename":"src/deflate/mod.rs","begin":[22,4],"end":[22,23]},"visibility":"default","docs":"Slow/high compression. Do a lot of checks to try to find good matches.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"9","value":"9"}}},"0:336:481":{"id":"0:336:481","crate_id":0,"name":"core","span":{"filename":"src/inflate/core.rs","begin":[1,0],"end":[1932,1]},"visibility":"public","docs":"Streaming decompression functionality.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:372:2515","0:346:2587","0:382:2531","0:455:2533"],"is_stripped":false}},"0:632:1606":{"id":"0:632:1606","crate_id":0,"name":"Full","span":{"filename":"src/deflate/core.rs","begin":[222,4],"end":[222,12]},"visibility":"default","docs":"Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\ndepend on previous data.","links":{"Self::Sync":"0:629:222"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"3","value":"3"}}},"1:11417:34971":{"id":"1:11417:34971","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11047:3903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:111:1807":{"id":"b:1:2497-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,16],"end":[179,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:405:2686":{"id":"0:405:2686","crate_id":0,"name":"init","span":{"filename":"src/inflate/core.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Set the current state to `Start`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:705:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3305-0:111:1807":{"id":"b:1:3305-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2512-0:111:1807":{"id":"b:1:2512-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:928:1614":{"id":"a:1:2660:222-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,29],"end":[108,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:957:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[230,0],"end":[240,1]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:111:1807":{"id":"0:111:1807","crate_id":0,"name":"CompressorOxide","span":{"filename":"src/deflate/core.rs","begin":[414,0],"end":[419,1]},"visibility":"public","docs":"Main compression struct.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:116","a:1:7719:3339-0:111:1807","a:1:2646:214-0:111:1807","a:1:7718:3340-0:111:1807","a:1:2660:222-0:111:1807","a:1:2710:3191-0:111:1807","b:1:2222-0:111:1807","b:1:2507-0:111:1807","b:1:2501-0:111:1807","b:1:2225-0:111:1807","b:1:2512-0:111:1807","b:1:3305-0:111:1807","b:1:2497-0:111:1807","0:126"]}},"a:1:2660:222-0:679:1780":{"id":"a:1:2660:222-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11345:4241":{"id":"1:11345:4241","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49966:4201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7718:3340-0:679:1780":{"id":"a:1:7718:3340-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7718:3340-0:830:2468":{"id":"a:1:7718:3340-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2710:3191-0:382:2531":{"id":"a:1:2710:3191-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7719:3339-0:595:1823":{"id":"a:1:7719:3339-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:5108:35641":{"id":"4:5108:35641","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:276:1884","`String`":"4:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:276:1884","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:6723:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2660:222-0:595:1823":{"id":"a:1:2660:222-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[200,0],"end":[204,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZResult","id":"0:568:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:572:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:650:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7718:3340-0:128:2128":{"id":"a:1:7718:3340-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:544:1824":{"id":"0:544:1824","crate_id":0,"name":"decompress_to_vec","span":{"filename":"src/inflate/mod.rs","begin":[124,0],"end":[126,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"DecompressError":"0:866:2497","`Result`":"1:48172:205","`Vec`":"4:6405:237"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:904:1618":{"id":"b:1:2507-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[198,0],"end":[231,1]},"visibility":{"restricted":{"parent":"0:336:481","path":"::inflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:909","0:405:2686","0:406:2101","0:407:2692"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:490:1879":{"id":"0:490:1879","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":"Performs reset","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2501-0:491:2981":{"id":"b:1:2501-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:111:1807":{"id":"a:1:2710:3191-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:944:1645":{"id":"0:944:1645","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[136,4],"end":[136,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-6","value":"-6"}}},"b:1:2501-0:928:1614":{"id":"b:1:2501-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11420:34972":{"id":"1:11420:34972","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:853:650":{"id":"0:853:650","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:902:701":{"id":"0:902:701","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[42,44],"end":[42,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:985:1665":{"id":"b:1:2497-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3307:1433":{"id":"1:3307:1433","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46501:4010","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2511:1420":{"id":"1:2511:1420","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11339:5637":{"id":"1:11339:5637","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11441:34978":{"id":"1:11441:34978","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:500:2992":{"id":"b:1:3305-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,40],"end":[108,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:76:1993":{"id":"0:76:1993","crate_id":0,"name":"TDEFL_RLE_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[180,4],"end":[180,51]},"visibility":"public","docs":"Only look for matches with a distance of 0.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0001_0000","value":"65_536u32","is_literal":true}},"0:612:650":{"id":"0:612:650","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:500:2992":{"id":"b:1:2222-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:652:1816":{"id":"a:1:2660:222-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:4:671-0:595:1823":{"id":"b:4:671-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11443:34980":{"id":"1:11443:34980","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:965:1653":{"id":"0:965:1653","crate_id":0,"name":"Zlib","span":{"filename":"src/lib.rs","begin":[150,4],"end":[150,8]},"visibility":"default","docs":"Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:74:1986":{"id":"0:74:1986","crate_id":0,"name":"TDEFL_GREEDY_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[175,4],"end":[175,59]},"visibility":"public","docs":"Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\nbytes to check for better matches.)","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0000_4000","value":"16_384u32","is_literal":true}},"0:314:1776":{"id":"0:314:1776","crate_id":0,"name":"stream","span":{"filename":"src/deflate/stream.rs","begin":[1,0],"end":[121,1]},"visibility":"public","docs":"Extra streaming compression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.\n\nThere is no DeflateState as the needed state is contained in the compressor struct itself.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:325:1586"],"is_stripped":false}},"0:989":{"id":"0:989","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,9],"end":[179,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:990:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,40],"end":[84,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7719:3339-0:871:1595":{"id":"a:1:7719:3339-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:679:1780":{"id":"0:679:1780","crate_id":0,"name":"CompressionLevel","span":{"filename":"src/deflate/mod.rs","begin":[16,0],"end":[29,1]},"visibility":"public","docs":"How much processing the compressor should do to compress the data.\n`NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\nof checks for matches in the hash chains and whether to use lazy or greedy parsing.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:680:1782","0:683:1784","0:686:1786","0:689:1788","0:692:1791","0:695:1793"],"impls":["a:1:7719:3339-0:679:1780","a:1:2646:214-0:679:1780","a:1:7718:3340-0:679:1780","a:1:2660:222-0:679:1780","a:1:2710:3191-0:679:1780","b:1:2222-0:679:1780","b:1:2507-0:679:1780","b:1:2501-0:679:1780","b:1:2225-0:679:1780","b:1:2512-0:679:1780","b:1:3305-0:679:1780","b:1:2497-0:679:1780","b:4:671-0:679:1780","0:698","0:700","0:701","0:703","0:704","0:706","0:707","0:709"]}},"0:964:1651":{"id":"0:964:1651","crate_id":0,"name":"DataFormat","span":{"filename":"src/lib.rs","begin":[148,0],"end":[156,1]},"visibility":"public","docs":"How compressed data is wrapped.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:965:1653","0:967:1656","0:969:1658"],"impls":["0:565","a:1:7719:3339-0:964:1651","a:1:2646:214-0:964:1651","a:1:7718:3340-0:964:1651","a:1:2660:222-0:964:1651","a:1:2710:3191-0:964:1651","b:1:2222-0:964:1651","b:1:2507-0:964:1651","b:1:2501-0:964:1651","b:1:2225-0:964:1651","b:1:2512-0:964:1651","b:1:3305-0:964:1651","b:1:2497-0:964:1651","b:4:671-0:964:1651","0:971","0:973","0:974","0:976","0:977","0:979","0:980","0:982"]}},"1:11447:34982":{"id":"1:11447:34982","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4452:34982"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50313:4223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:626:174":{"id":"0:626:174","crate_id":0,"name":"None","span":{"filename":"src/deflate/core.rs","begin":[215,4],"end":[215,12]},"visibility":"default","docs":"Normal operation.\n\nCompress as much as there is space for, and then return waiting for more input.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"b:1:2497-0:500:2992":{"id":"b:1:2497-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:702:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11403:34964":{"id":"1:11403:34964","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11022:3899","`DoubleEndedIterator`":"1:7062:120","prim@char":"1:58461:3071","str::rmatch_indices":"1:11406:34965"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50146:4211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:884:1608":{"id":"0:884:1608","crate_id":0,"name":"Finish","span":{"filename":"src/lib.rs","begin":[59,4],"end":[59,14]},"visibility":"default","docs":"Attempt to flush the remaining data and end the stream.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"4","value":"4"}}},"0:672:595":{"id":"0:672:595","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:2108":{"id":"0:121:2108","crate_id":0,"name":"data_format","span":{"filename":"src/deflate/core.rs","begin":[457,4],"end":[463,5]},"visibility":"public","docs":"Returns whether the compressor is wrapping the data in a zlib format or not.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:866:2497":{"id":"a:1:7719:3339-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:972:650":{"id":"0:972:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[146,9],"end":[146,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:625:1815":{"id":"0:625:1815","crate_id":0,"name":"TDEFLFlush","span":{"filename":"src/deflate/core.rs","begin":[211,0],"end":[228,1]},"visibility":"public","docs":"A list of deflate flush types.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:626:174","0:629:222","0:632:1606","0:635:1608"],"impls":["0:82","a:1:7719:3339-0:625:1815","a:1:2646:214-0:625:1815","a:1:7718:3340-0:625:1815","a:1:2660:222-0:625:1815","a:1:2710:3191-0:625:1815","b:1:2222-0:625:1815","b:1:2507-0:625:1815","b:1:2501-0:625:1815","b:1:2225-0:625:1815","b:1:2512-0:625:1815","b:1:3305-0:625:1815","b:1:2497-0:625:1815","b:4:671-0:625:1815","0:638","0:640","0:641","0:643","0:644","0:646","0:647","0:649","0:80"]}},"1:11413:34968":{"id":"1:11413:34968","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:522:2987":{"id":"0:522:2987","crate_id":0,"name":"last_status","span":{"filename":"src/inflate/stream.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Return the status of the last call to `inflate` with this `InflateState`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:901":{"id":"0:901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,44],"end":[42,48]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:902:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2512-0:505:2978":{"id":"b:1:2512-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:677:701":{"id":"0:677:701","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2501-0:904:1618":{"id":"b:1:2501-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,44],"end":[108,48]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:962:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,29],"end":[179,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:996:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7718:3340-0:500:2992":{"id":"a:1:7718:3340-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:967:1656":{"id":"0:967:1656","crate_id":0,"name":"ZLibIgnoreChecksum","span":{"filename":"src/lib.rs","begin":[153,4],"end":[153,22]},"visibility":"default","docs":"Zlib wrapped but ignore and don't compute the adler32 checksum.\nCurrently only used for inflate, behaves the same as Zlib for compression.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:987:1669":{"id":"0:987:1669","crate_id":0,"name":"bytes_written","span":{"filename":"src/lib.rs","begin":[184,4],"end":[184,28]},"visibility":"public","docs":"The number of bytes written to the output slice.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"1:11394:34962":{"id":"1:11394:34962","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2646:214-0:679:1780":{"id":"a:1:2646:214-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2225-0:985:1665":{"id":"b:1:2225-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:111:1807":{"id":"a:1:2646:214-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:519:909":{"id":"0:519:909","crate_id":0,"name":"new","span":{"filename":"src/inflate/stream.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Create a new state.\n\nNote that this struct is quite large due to internal buffers, and as such storing it on\nthe stack is not recommended.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data_format",{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:909":{"id":"0:117:909","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[426,4],"end":[435,5]},"visibility":"public","docs":"Create a new `CompressorOxide` with the given flags.\n\n# Notes\nThis function may be changed to take different parameters in the future.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flags",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:495:2989":{"id":"a:1:7719:3339-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2507-0:830:2468":{"id":"b:1:2507-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1675":{"id":"0:0:1675","crate_id":0,"name":"miniz_oxide","span":{"filename":"src/lib.rs","begin":[1,0],"end":[210,1]},"visibility":"public","docs":"A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\nDEFLATE/zlib encoder/decoder.\nThe plan for this crate is to be used as a back-end for the\n[flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\nneed to depend on a C library.\n\n# Usage\n## Simple compression/decompression:\n``` rust\n\nuse miniz_oxide::inflate::decompress_to_vec;\nuse miniz_oxide::deflate::compress_to_vec;\n\nfn roundtrip(data: &[u8]) {\n    let compressed = compress_to_vec(data, 6);\n    let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");\n#   let _ = decompressed;\n}\n\n# roundtrip(b\"Test_data test data lalalal blabla\");\n\n```","links":{},"attrs":["#![forbid(unsafe_code)]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5:1586","0:330:1587","0:559","0:561","0:562","0:871:1595","0:904:1618","0:928:1614","0:964:1651","0:568:1663","0:985:1665"],"is_stripped":false}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:677:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:992":{"id":"0:992","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,22],"end":[179,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:993:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:870:650":{"id":"0:870:650","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11323:34942":{"id":"1:11323:34942","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:859:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5099:35639":{"id":"4:5099:35639","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:890":{"id":"0:890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,9],"end":[42,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:891:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,16],"end":[84,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:652:1816":{"id":"0:652:1816","crate_id":0,"name":"TDEFLStatus","span":{"filename":"src/deflate/core.rs","begin":[257,0],"end":[276,1]},"visibility":"public","docs":"Return status of compression.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:653:2027","0:656:2030","0:659:1819","0:662:1817"],"impls":["a:1:7719:3339-0:652:1816","a:1:2646:214-0:652:1816","a:1:7718:3340-0:652:1816","a:1:2660:222-0:652:1816","a:1:2710:3191-0:652:1816","b:1:2222-0:652:1816","b:1:2507-0:652:1816","b:1:2501-0:652:1816","b:1:2225-0:652:1816","b:1:2512-0:652:1816","b:1:3305-0:652:1816","b:1:2497-0:652:1816","b:4:671-0:652:1816","0:665","0:667","0:668","0:670","0:671","0:673","0:674","0:676"]}},"b:1:2501-0:964:1651":{"id":"b:1:2501-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2507-0:679:1780":{"id":"b:1:2507-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:964:1651":{"id":"a:1:2710:3191-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,44],"end":[84,48]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:926:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2501-0:500:2992":{"id":"b:1:2501-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2515:127":{"id":"1:2515:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39273:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:1:7718:3340-0:111:1807":{"id":"a:1:7718:3340-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:404:909":{"id":"0:404:909","crate_id":0,"name":"new","span":{"filename":"src/inflate/core.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11350:34951":{"id":"1:11350:34951","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50250:4216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2501-0:595:1823":{"id":"b:1:2501-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:846:2491":{"id":"0:846:2491","crate_id":0,"name":"NeedsMoreInput","span":{"filename":"src/inflate/mod.rs","begin":[59,4],"end":[59,56]},"visibility":"default","docs":"The decompressor needs more input data to continue decompressing.\n\nThis occurs when there's no more consumable input, but the end of the stream hasn't been\nreached, and you have supplied the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompressor.  Had you not supplied that flag (which would mean you were asserting that you\nbelieved all the data was available) you would have gotten a\n[`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","links":{"core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:374:2558","Self::FailedCannotMakeProgress":"0:831:2476"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"1"}}},"b:1:3305-0:625:1815":{"id":"b:1:3305-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2500:1805":{"id":"1:2500:1805","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2474:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:871:1595":{"id":"b:1:2222-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:608:2014":{"id":"0:608:2014","crate_id":0,"name":"Fixed","span":{"filename":"src/deflate/core.rs","begin":[206,4],"end":[206,13]},"visibility":"default","docs":"Only use static/fixed blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"4","value":"4"}}},"0:524:1879":{"id":"0:524:1879","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Reset the decompressor without re-allocating memory, using the given\ndata format.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["data_format",{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:982":{"id":"0:982","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,44],"end":[146,48]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8800:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:983:701"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2512-0:830:2468":{"id":"b:1:2512-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:83:909":{"id":"0:83:909","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[243,4],"end":[251,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flush",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:128:2128":{"id":"b:1:2497-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2225-0:111:1807":{"id":"b:1:2225-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:504:1879":{"id":"0:504:1879","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[52,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2660:222-0:500:2992":{"id":"a:1:2660:222-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:495:2989":{"id":"0:495:2989","crate_id":0,"name":"ZeroReset","span":{"filename":"src/inflate/stream.rs","begin":[35,0],"end":[35,21]},"visibility":"public","docs":"Resets state and zero memory, continuing to use the same data format.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:7719:3339-0:495:2989","a:1:2646:214-0:495:2989","a:1:7718:3340-0:495:2989","a:1:2660:222-0:495:2989","a:1:2710:3191-0:495:2989","b:1:2222-0:495:2989","b:1:2507-0:495:2989","b:1:2501-0:495:2989","b:1:2225-0:495:2989","b:1:2512-0:495:2989","b:1:3305-0:495:2989","b:1:2497-0:495:2989","0:497"]}},"1:11353:34056":{"id":"1:11353:34056","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:952":{"id":"0:952","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,16],"end":[108,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7719:3339-0:904:1618":{"id":"a:1:7719:3339-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:667":{"id":"0:667","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,16],"end":[256,20]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:666:650":{"id":"0:666:650","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:695:1793":{"id":"0:695:1793","crate_id":0,"name":"DefaultCompression","span":{"filename":"src/deflate/mod.rs","begin":[28,4],"end":[28,27]},"visibility":"default","docs":"Use the default compression level.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-1","value":"-1"}}},"b:4:671-0:625:1815":{"id":"b:4:671-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:382:2531":{"id":"0:382:2531","crate_id":0,"name":"DecompressorOxide","span":{"filename":"src/inflate/core.rs","begin":[163,0],"end":[196,1]},"visibility":"public","docs":"Main decompression struct.\n","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:403","a:1:7719:3339-0:382:2531","a:1:2646:214-0:382:2531","a:1:7718:3340-0:382:2531","a:1:2660:222-0:382:2531","a:1:2710:3191-0:382:2531","b:1:2222-0:382:2531","b:1:2507-0:382:2531","b:1:2501-0:382:2531","b:1:2225-0:382:2531","b:1:2512-0:382:2531","b:1:3305-0:382:2531","b:1:2497-0:382:2531","0:408"]}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79:2003":{"id":"0:79:2003","crate_id":0,"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[187,4],"end":[187,60]},"visibility":"public","docs":"Force the compressor to only output raw/uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0008_0000","value":"524_288u32","is_literal":true}},"0:875:1600":{"id":"0:875:1600","crate_id":0,"name":"Partial","span":{"filename":"src/lib.rs","begin":[49,4],"end":[49,15]},"visibility":"default","docs":"Zlib partial flush.\nCurrently treated as [`Sync`].","links":{"`Sync`":"1:2660:222"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"1","value":"1"}}},"b:1:2225-0:382:2531":{"id":"b:1:2225-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7719:3339-0:985:1665":{"id":"a:1:7719:3339-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2222-0:111:1807":{"id":"b:1:2222-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:502:1546":{"id":"0:502:1546","crate_id":0,"name":"0","span":{"filename":"src/inflate/stream.rs","begin":[48,21],"end":[48,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:130:2130":{"id":"0:130:2130","crate_id":0,"name":"put_buf_func","span":{"filename":"src/deflate/core.rs","begin":[535,4],"end":[535,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"FnMut","id":"1:2919:2131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[]}],"lifetime":null}}}}},"0:409:59":{"id":"0:409:59","crate_id":0,"name":"default","span":{"filename":"src/inflate/core.rs","begin":[236,4],"end":[260,5]},"visibility":"default","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:985:1665":{"id":"b:1:2222-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:128:2128":{"id":"0:128:2128","crate_id":0,"name":"CallbackFunc","span":{"filename":"src/deflate/core.rs","begin":[534,0],"end":[536,1]},"visibility":"public","docs":"Callback function and user used in `compress_to_output`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:130:2130"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:7719:3339-0:128:2128","a:1:2646:214-0:128:2128","a:1:7718:3340-0:128:2128","a:1:2660:222-0:128:2128","a:1:2710:3191-0:128:2128","b:1:2222-0:128:2128","b:1:2507-0:128:2128","b:1:2501-0:128:2128","b:1:2225-0:128:2128","b:1:2512-0:128:2128","b:1:3305-0:128:2128","b:1:2497-0:128:2128"]}},"a:1:2660:222-0:495:2989":{"id":"a:1:2660:222-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2507-0:964:1651":{"id":"b:1:2507-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:866:2497":{"id":"a:1:2646:214-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:562":{"id":"0:562","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[36,41],"end":[36,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::shared::MZ_DEFAULT_WINDOW_BITS","name":"MZ_DEFAULT_WINDOW_BITS","id":"0:555:1592","glob":false}},"b:1:2512-0:128:2128":{"id":"b:1:2512-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11438:4092":{"id":"1:11438:4092","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:10984:126","`FromStr`":"1:10983:3845"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:10983:3845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:10983:3845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:652:1816":{"id":"b:1:2512-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:642:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:680:1782":{"id":"0:680:1782","crate_id":0,"name":"NoCompression","span":{"filename":"src/deflate/mod.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Don't do any compression, only output uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"1:11446:11197":{"id":"1:11446:11197","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4455:11197"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50304:4222","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5110:35642":{"id":"4:5110:35642","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11442:34979"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:500:2992":{"id":"0:500:2992","crate_id":0,"name":"FullReset","span":{"filename":"src/inflate/stream.rs","begin":[48,0],"end":[48,37]},"visibility":"public","docs":"Full reset of the state, including zeroing memory.\n\nRequires to provide new data format.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":["0:502:1546"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7719:3339-0:500:2992","a:1:2646:214-0:500:2992","a:1:7718:3340-0:500:2992","a:1:2660:222-0:500:2992","a:1:2710:3191-0:500:2992","b:1:2222-0:500:2992","b:1:2507-0:500:2992","b:1:2501-0:500:2992","b:1:2225-0:500:2992","b:1:2512-0:500:2992","b:1:3305-0:500:2992","b:1:2497-0:500:2992","0:503"]}},"1:2510:127":{"id":"1:2510:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:872:174":{"id":"0:872:174","crate_id":0,"name":"None","span":{"filename":"src/lib.rs","begin":[46,4],"end":[46,12]},"visibility":"default","docs":"Don't force any flushing.\nUsed when more input data is expected.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"0:921:595":{"id":"0:921:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[84,29],"end":[84,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:983:701":{"id":"0:983:701","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[146,44],"end":[146,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:671-0:985:1665":{"id":"b:4:671-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:500:2992":{"id":"a:1:2710:3191-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:77:1996":{"id":"0:77:1996","crate_id":0,"name":"TDEFL_FILTER_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[182,4],"end":[182,54]},"visibility":"public","docs":"Only use matches that are at least 6 bytes long.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0002_0000","value":"131_072u32","is_literal":true}},"0:699:650":{"id":"0:699:650","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:3339-0:652:1816":{"id":"a:1:7719:3339-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:707":{"id":"0:707","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:830:2468":{"id":"0:830:2468","crate_id":0,"name":"TINFLStatus","span":{"filename":"src/inflate/mod.rs","begin":[25,0],"end":[63,1]},"visibility":"public","docs":"Return status codes.","links":{},"attrs":["#[repr(i8)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:831:2476","0:834:2027","0:837:2480","0:840:2482","0:843:1817","0:846:2491","0:849:2493"],"impls":["0:538","a:1:7719:3339-0:830:2468","a:1:2646:214-0:830:2468","a:1:7718:3340-0:830:2468","a:1:2660:222-0:830:2468","a:1:2710:3191-0:830:2468","b:1:2222-0:830:2468","b:1:2507-0:830:2468","b:1:2501-0:830:2468","b:1:2225-0:830:2468","b:1:2512-0:830:2468","b:1:3305-0:830:2468","b:1:2497-0:830:2468","b:4:671-0:830:2468","0:852","0:854","0:855","0:857","0:858","0:860","0:861","0:863"]}},"0:860":{"id":"0:860","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:978:595":{"id":"0:978:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[146,29],"end":[146,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11322:2442":{"id":"1:11322:2442","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:861":{"id":"0:861","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373:2516":{"id":"0:373:2516","crate_id":0,"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","span":{"filename":"src/inflate/core.rs","begin":[113,4],"end":[113,52]},"visibility":"public","docs":"Should we try to parse a zlib header?\n\nIf unset, the function will expect an RFC1951 deflate stream.  If set, it will expect a\nRFC1950 zlib wrapper around the deflate stream.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"1","value":"1u32","is_literal":true}},"1:11370:34955":{"id":"1:11370:34955","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:7062:120","self::pattern":"1:11022:3899","str::rsplit":"1:11376:34956","prim@char":"1:58461:3071","str::split_whitespace":"1:11348:31883"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49996:3718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11406:34965":{"id":"1:11406:34965","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:58461:3071","self::pattern":"1:11022:3899","str::match_indices":"1:11403:34964","`DoubleEndedIterator`":"1:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50164:4212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,29],"end":[179,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11362:3465":{"id":"1:11362:3465","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:48030:174","self::pattern":"1:11022:3899","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11432:34976":{"id":"1:11432:34976","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:58461:3071","self::pattern":"1:11022:3899"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494:1879":{"id":"0:494:1879","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[24,4],"end":[31,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:671-0:652:1816":{"id":"b:4:671-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2497-0:871:1595":{"id":"b:1:2497-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7718:3340-0:866:2497":{"id":"a:1:7718:3340-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:917":{"id":"0:917","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,22],"end":[84,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:918:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2646:214-0:595:1823":{"id":"a:1:2646:214-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2225-0:505:2978":{"id":"b:1:2225-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7719:3339-0:128:2128":{"id":"a:1:7719:3339-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:455:2533":{"id":"0:455:2533","crate_id":0,"name":"decompress","span":{"filename":"src/inflate/core.rs","begin":[1067,0],"end":[1701,1]},"visibility":"public","docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.\n\n # Arguments\n\n `r` is a [`DecompressorOxide`] struct with the state of this stream.\n\n `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will\n start at the first byte of this buffer.\n\n `out` is a reference to the buffer that will store the decompressed data, and that\n stores previously decompressed data if any.\n\n * The offset given by `out_pos` indicates where in the output buffer slice writing should start.\n * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a\n wrapping manner, and it's size is required to be a power of 2.\n * The decompression function normally needs access to 32KiB of the previously decompressed data\n(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)\n     - If this data is not available, decompression may fail.\n     - Some deflate compressors allow specifying a window size which limits match distances to\n less than this, or alternatively an RLE mode where matches will only refer to the previous byte\n and thus allows a smaller output buffer. The window size can be specified in the zlib\n header structure, however, the header data should not be relied on to be correct.\n\n `flags` indicates settings and status to the decompression function.\n * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided\n in a subsequent call to this function.\n * See the the [`inflate_flags`] module for details on other flags.\n\n # Returns\n\n Returns a tuple containing the status of the compressor, the number of input bytes read, and the\n number of bytes output to `out`.\n\n This function shouldn't panic pending any bugs.","links":{"`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`":"0:375:2528","`inflate_flags`":"0:372:2515","`DecompressorOxide`":"0:382:2531","`TINFL_FLAG_HAS_MORE_INPUT`":"0:374:2558"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["r",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["out_pos",{"kind":"primitive","inner":"usize"}],["flags",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:1801":{"id":"0:328:1801","crate_id":0,"name":"compress_to_vec_zlib","span":{"filename":"src/deflate/mod.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10), and with a\nzlib wrapper.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["level",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:866:2497":{"id":"0:866:2497","crate_id":0,"name":"DecompressError","span":{"filename":"src/inflate/mod.rs","begin":[84,0],"end":[89,1]},"visibility":"public","docs":"Struct return when decompress_to_vec functions fail.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:867:1671","0:868:1808"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7719:3339-0:866:2497","a:1:2646:214-0:866:2497","a:1:7718:3340-0:866:2497","a:1:2660:222-0:866:2497","a:1:2710:3191-0:866:2497","b:1:2222-0:866:2497","b:1:2507-0:866:2497","b:1:2501-0:866:2497","b:1:2225-0:866:2497","b:1:2512-0:866:2497","b:1:3305-0:866:2497","b:1:2497-0:866:2497","b:4:5360-0:866:2497","0:869","0:541"]}},"b:1:3305-0:904:1618":{"id":"b:1:3305-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2225-0:491:2981":{"id":"b:1:2225-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:495:2989":{"id":"a:1:2710:3191-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2710:3191-0:830:2468":{"id":"a:1:2710:3191-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11352:31892":{"id":"1:11352:31892","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50288:4220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7718:3340-0:491:2981":{"id":"a:1:7718:3340-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2646:214-0:491:2981":{"id":"a:1:2646:214-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2646:214-0:652:1816":{"id":"a:1:2646:214-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:914":{"id":"0:914","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,9],"end":[84,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:915:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2512-0:904:1618":{"id":"b:1:2512-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,29],"end":[146,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:978:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:986:1667":{"id":"0:986:1667","crate_id":0,"name":"bytes_consumed","span":{"filename":"src/lib.rs","begin":[182,4],"end":[182,29]},"visibility":"public","docs":"The number of bytes consumed from the input slice.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:325:1586":{"id":"0:325:1586","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/stream.rs","begin":[22,0],"end":[97,1]},"visibility":"public","docs":"Try to compress from input to output with the given [`CompressorOxide`].\n\n# Errors\n\nReturns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called without [`MZFlush::Finish`] after the compression\nwas already finished.\n\nReturns [`MZError::Param`] if the compressor parameters are set wrong.\n\nReturns [`MZError::Stream`] when lower-level decompressor returns a\n[`TDEFLStatus::PutBufFailed`]; may not actually be possible.","links":{"`MZFlush::Finish`":"0:884:1608","`MZError::Param`":"0:947:182","`TDEFLStatus::PutBufFailed`":"0:656:2030","`CompressorOxide`":"0:111:1807","`MZError::Stream`":"0:932:1636","`MZError::Buf`":"0:941:1644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["compressor",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flush",{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:871:1595":{"id":"b:1:2225-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:500:2992":{"id":"a:1:2646:214-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:868:1808":{"id":"0:868:1808","crate_id":0,"name":"output","span":{"filename":"src/inflate/mod.rs","begin":[88,4],"end":[88,23]},"visibility":"public","docs":"The currently decompressed data if any.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},"0:73:1982":{"id":"0:73:1982","crate_id":0,"name":"TDEFL_COMPUTE_ADLER32","span":{"filename":"src/deflate/core.rs","begin":[172,4],"end":[172,55]},"visibility":"public","docs":"Should we compute the adler32 checksum.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0000_2000","value":"8_192u32","is_literal":true}},"0:920":{"id":"0:920","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,29],"end":[84,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:921:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2497-0:382:2531":{"id":"b:1:2497-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2512-0:625:1815":{"id":"b:1:2512-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2507-0:111:1807":{"id":"b:1:2507-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2503:668":{"id":"1:2503:668","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,0],"end":[77,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:909"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:864:701":{"id":"0:864:701","crate_id":0,"name":"hash","span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2501-0:495:2989":{"id":"b:1:2501-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[84,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:471:1776","path":"::inflate::stream"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2548:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:857":{"id":"0:857","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5096:35638":{"id":"4:5096:35638","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:1879":{"id":"0:122:1879","crate_id":0,"name":"reset","span":{"filename":"src/deflate/core.rs","begin":[468,4],"end":[475,5]},"visibility":"public","docs":"Reset the state of the compressor, keeping the same parameters.\n\nThis avoids re-allocating data.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:669:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2225-0:128:2128":{"id":"b:1:2225-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2507-0:128:2128":{"id":"b:1:2507-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7719:3339-0:505:2978":{"id":"a:1:7719:3339-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:979":{"id":"0:979","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,40],"end":[146,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:905:175":{"id":"0:905:175","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[90,4],"end":[90,10]},"visibility":"default","docs":"Operation succeeded.\n\nSome data was decompressed or compressed; see the byte counters in the [`StreamResult`] for\ndetails.","links":{"`StreamResult`":"0:985:1665"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"0:549:2545":{"id":"0:549:2545","crate_id":0,"name":"decompress_slice_iter_to_slice","span":{"filename":"src/inflate/mod.rs","begin":[238,0],"end":[275,1]},"visibility":"public","docs":"Decompress one or more source slices from an iterator into the output slice.\n\n* On success, returns the number of bytes that were written.\n* On failure, returns the failure status code.\n\nThis will fail if the output buffer is not large enough, but in that case\nthe output buffer will still contain the partial decompression.\n\n* `out` the output buffer.\n* `it` the iterator of input slices.\n* `zlib_header` if the first slice out of the iterator is expected to have a\n  Zlib header. Otherwise the slices are assumed to be the deflate data only.\n* `ignore_adler32` if the adler32 checksum should be calculated or not.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["out",{"kind":"borrowed_ref","inner":{"lifetime":"'out","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["it",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7139:155","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'inp","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["zlib_header",{"kind":"primitive","inner":"bool"}],["ignore_adler32",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'out","kind":{"lifetime":{"outlives":[]}}},{"name":"'inp","kind":{"lifetime":{"outlives":[]}}},{"name":"impl Iterator<Item = &'inp [u8]>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7139:155","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'inp","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:595:1823":{"id":"b:1:2507-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11440:4414":{"id":"1:11440:4414","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:975:409":{"id":"0:975:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[146,22],"end":[146,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7718:3340-0:595:1823":{"id":"a:1:7718:3340-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:618:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2222-0:625:1815":{"id":"b:1:2222-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2225-0:625:1815":{"id":"b:1:2225-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11444:34981":{"id":"1:11444:34981","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4454:34981"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50295:4221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:652:1816":{"id":"b:1:2222-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2497-0:491:2981":{"id":"b:1:2497-0:491:2981","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2516:1419":{"id":"1:2516:1419","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:834:2027":{"id":"0:834:2027","crate_id":0,"name":"BadParam","span":{"filename":"src/inflate/mod.rs","begin":[37,4],"end":[37,43]},"visibility":"default","docs":"The output buffer is an invalid size; consider the `flags` parameter.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"-3"}}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,16],"end":[146,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,22],"end":[146,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:975:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:962:701":{"id":"0:962:701","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[108,44],"end":[108,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[37,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:471:1776","path":"::inflate::stream"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:489:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:1879"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:4:671-0:679:1780":{"id":"b:4:671-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:491:2981":{"id":"0:491:2981","crate_id":0,"name":"MinReset","span":{"filename":"src/inflate/stream.rs","begin":[21,0],"end":[21,20]},"visibility":"public","docs":"Resets state, without performing expensive ops (e.g. zeroing buffer)\n\nNote that not zeroing buffer can lead to security issues when dealing with untrusted input.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:7719:3339-0:491:2981","a:1:2646:214-0:491:2981","a:1:7718:3340-0:491:2981","a:1:2660:222-0:491:2981","a:1:2710:3191-0:491:2981","b:1:2222-0:491:2981","b:1:2507-0:491:2981","b:1:2501-0:491:2981","b:1:2225-0:491:2981","b:1:2512-0:491:2981","b:1:3305-0:491:2981","b:1:2497-0:491:2981","0:493"]}},"b:1:3305-0:871:1595":{"id":"b:1:3305-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:327:1795":{"id":"0:327:1795","crate_id":0,"name":"compress_to_vec","span":{"filename":"src/deflate/mod.rs","begin":[110,0],"end":[112,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["level",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2501-0:866:2497":{"id":"b:1:2501-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:546:2522":{"id":"0:546:2522","crate_id":0,"name":"decompress_to_vec_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"`Result`":"1:48172:205","DecompressError":"0:866:2497","`Vec`":"4:6405:237","`TINFLStatus::HasMoreOutput`":"0:849:2493"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["max_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:520:3010":{"id":"0:520:3010","crate_id":0,"name":"new_boxed","span":{"filename":"src/inflate/stream.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Create a new state on the heap.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data_format",{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:276:1884","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:702:409":{"id":"0:702:409","crate_id":0,"name":"clone","span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:866:2497":{"id":"b:1:2225-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:899":{"id":"0:899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,40],"end":[42,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2225-0:500:2992":{"id":"b:1:2225-0:500:2992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FullReset","id":"0:500:2992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:625:1815":{"id":"a:1:2710:3191-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:372:2515":{"id":"0:372:2515","crate_id":0,"name":"inflate_flags","span":{"filename":"src/inflate/core.rs","begin":[108,0],"end":[108,21]},"visibility":"public","docs":"Flags to [`decompress()`] to control how inflation works.\n\nThese define bits for a bitmask argument.","links":{"`decompress()`":"0:455:2533"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:373:2516","0:374:2558","0:375:2528","0:376:2644","0:377:2557"],"is_stripped":false}},"b:1:2512-0:595:1823":{"id":"b:1:2512-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,16],"end":[210,20]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[98,0],"end":[160,1]},"visibility":{"restricted":{"parent":"0:471:1776","path":"::inflate::stream"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:519:909","0:520:3010","0:521:2982","0:522:2987","0:523:3017","0:524:1879","0:525:3020"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:539:2494":{"id":"0:539:2494","crate_id":0,"name":"from_i32","span":{"filename":"src/inflate/mod.rs","begin":[66,4],"end":[78,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2660:222-0:866:2497":{"id":"a:1:2660:222-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:891:650":{"id":"0:891:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[42,9],"end":[42,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:527:1587":{"id":"0:527:1587","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/stream.rs","begin":[185,0],"end":[286,1]},"visibility":"public","docs":"Try to decompress from `input` to `output` with the given [`InflateState`]\n\n# `flush`\n\nGenerally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be\nsupplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a\nsignal that the stream is expected to finish, and failing to do so is an error.  It isn't\nnecessary to specify it when the stream ends; you'll still get returned a\n[`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's\nlikely that you'll almost always just want to use [`MZFlush::None`].\n\n# Errors\n\nReturns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all\nconsumed.\n\nReturns [`MZError::Data`] if this or a a previous call failed with an error return from\n[`TINFLStatus`]; probably indicates corrupted data.\n\nReturns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on\ndecompression), or when called without [`MZFlush::Finish`] after an earlier call with\n[`MZFlush::Finish`] has been made.","links":{"`InflateState`":"0:505:2978","`MZError::Buf`":"0:941:1644","`TINFLStatus`":"0:830:2468","`MZStatus::StreamEnd`":"0:908:1626","`MZError::Data`":"0:935:1639","`MZFlush::Full`":"0:881:1606","`MZFlush::Finish`":"0:884:1608","`MZFlush`":"0:871:1595","`MZFlush::None`":"0:872:174","`MZError::Stream`":"0:932:1636"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["output",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flush",{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:932:1636":{"id":"0:932:1636","crate_id":0,"name":"Stream","span":{"filename":"src/lib.rs","begin":[119,4],"end":[119,15]},"visibility":"default","docs":"General stream error.\n\nSee [`inflate::stream::inflate()`] docs for details of how it can occur there.\n\nSee [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's\nbelieved impossible in practice.","links":{"`inflate::stream::inflate()`":"0:527:1587","`deflate::stream::deflate()`":"0:325:1586"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-2","value":"-2"}}},"b:1:2512-0:985:1665":{"id":"b:1:2512-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[35,0],"end":[35,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::shared::update_adler32","name":"mz_adler32_oxide","id":"0:558:1589","glob":false}},"b:1:2497-0:830:2468":{"id":"b:1:2497-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[23,0],"end":[32,1]},"visibility":{"restricted":{"parent":"0:471:1776","path":"::inflate::stream"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:489:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MinReset","id":"0:491:2981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:494:1879"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2660:222-0:128:2128":{"id":"a:1:2660:222-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2225-0:964:1651":{"id":"b:1:2225-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:566:1659":{"id":"0:566:1659","crate_id":0,"name":"from_window_bits","span":{"filename":"src/lib.rs","begin":[159,4],"end":[165,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["window_bits",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:647":{"id":"0:647","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:918:409":{"id":"0:918:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[84,22],"end":[84,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:495:2989":{"id":"b:1:3305-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11320":{"id":"1:11320","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10585:1345","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11321:783","1:11322:2442","1:11323:34942","1:11324:34943","1:11326:34944","1:11329:34945","1:11330:34946","1:11331:306","1:11332:34947","1:11333:5635","1:11335:2212","1:11337:5636","1:11339:5637","1:11341:34948","1:11342:34949","1:11343:34950","1:11344:2848","1:11345:4241","1:11346:3930","1:11347:2178","1:11348:31883","1:11349:31898","1:11350:34951","1:11351:34952","1:11352:31892","1:11353:34056","1:11356:34953","1:11359:34954","1:11362:3465","1:11366:3434","1:11370:34955","1:11373:31878","1:11376:34956","1:11379:34957","1:11382:34958","1:11385:34959","1:11388:34960","1:11391:34961","1:11394:34962","1:11397:3096","1:11400:34963","1:11403:34964","1:11406:34965","1:11409:34966","1:11411:34967","1:11413:34968","1:11415:34969","1:11416:34970","1:11417:34971","1:11420:34972","1:11423:34973","1:11426:34974","1:11429:34975","1:11432:34976","1:11435:34977","1:11438:4092","1:11440:4414","1:11441:34978","1:11442:34979","1:11443:34980","1:11444:34981","1:11446:11197","1:11447:34982"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2507-0:928:1614":{"id":"b:1:2507-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:990:650":{"id":"0:990:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:957:595":{"id":"0:957:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[108,29],"end":[108,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11409:34966":{"id":"1:11409:34966","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:941:1644":{"id":"0:941:1644","crate_id":0,"name":"Buf","span":{"filename":"src/lib.rs","begin":[133,4],"end":[133,12]},"visibility":"default","docs":"Buffer-related error.\n\nSee the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details\nof when it would trigger in the one you're using.","links":{"`inflate::stream::inflate()`":"0:527:1587","`deflate::stream::deflate()`":"0:325:1586"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-5","value":"-5"}}},"0:545:2449":{"id":"0:545:2449","crate_id":0,"name":"decompress_to_vec_zlib","span":{"filename":"src/inflate/mod.rs","begin":[137,0],"end":[143,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"DecompressError":"0:866:2497","`Result`":"1:48172:205","`Vec`":"4:6405:237"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"4:6405:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:904:1618":{"id":"b:1:2497-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3305-0:679:1780":{"id":"b:1:3305-0:679:1780","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2646:214-0:382:2531":{"id":"a:1:2646:214-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11416:34970":{"id":"1:11416:34970","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:674:31366":{"id":"4:674:31366","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:2115":{"id":"0:125:2115","crate_id":0,"name":"set_format_and_level","span":{"filename":"src/deflate/core.rs","begin":[506,4],"end":[514,5]},"visibility":"public","docs":"Update the compression settings of the compressor.\n\nChanging the `DataFormat` after compression has started will result in\na corrupted stream.\n\n# Notes\nThis function mainly intended for setting the initial settings after e.g creating with\n`default` or after calling `CompressorOxide::reset()`, and behaviour may be changed\nto disallow calling it after starting compression in the future.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["data_format",{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["level",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:856:409":{"id":"0:856:409","crate_id":0,"name":"clone","span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:854":{"id":"0:854","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,16],"end":[24,20]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2658:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11342:34949":{"id":"1:11342:34949","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:11341:34948","crate::ops::IndexMut":"1:2975:3149","`str`":"1:58467:3076"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:866:2497":{"id":"b:1:2497-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:4:671-0:830:2468":{"id":"b:4:671-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:673:4525","4:674:31366","4:675:31367"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11376:34956":{"id":"1:11376:34956","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:11370:34955","self::pattern":"1:11022:3899","`DoubleEndedIterator`":"1:7062:120","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50014:3722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11351:34952":{"id":"1:11351:34952","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50260:4217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:904:1618":{"id":"0:904:1618","crate_id":0,"name":"MZStatus","span":{"filename":"src/lib.rs","begin":[85,0],"end":[101,1]},"visibility":"public","docs":"A list of miniz successful status codes.\n\nThese are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`deflate::stream::deflate()`":"0:325:1586","`Ok`":"1:48175:175","`StreamResult`":"0:985:1665","`MZResult`":"0:568:1663","`inflate::stream::inflate()`":"0:527:1587"},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:905:175","0:908:1626","0:911:1628"],"impls":["a:1:7719:3339-0:904:1618","a:1:2646:214-0:904:1618","a:1:7718:3340-0:904:1618","a:1:2660:222-0:904:1618","a:1:2710:3191-0:904:1618","b:1:2222-0:904:1618","b:1:2507-0:904:1618","b:1:2501-0:904:1618","b:1:2225-0:904:1618","b:1:2512-0:904:1618","b:1:3305-0:904:1618","b:1:2497-0:904:1618","b:4:671-0:904:1618","0:914","0:916","0:917","0:919","0:920","0:922","0:923","0:925"]}},"1:11388:34960":{"id":"1:11388:34960","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:11022:3899","str::splitn":"1:11385:34959","prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50118:3716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:867:1671":{"id":"0:867:1671","crate_id":0,"name":"status","span":{"filename":"src/inflate/mod.rs","begin":[86,4],"end":[86,27]},"visibility":"public","docs":"Decompressor status on failure. See [TINFLStatus] for details.","links":{"TINFLStatus":"0:830:2468"},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"1:11415:34969":{"id":"1:11415:34969","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2646:214-0:830:2468":{"id":"a:1:2646:214-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11373:31878":{"id":"1:11373:31878","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:58461:3071","self::pattern":"1:11022:3899"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10846:3735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2512-0:382:2531":{"id":"b:1:2512-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,22],"end":[108,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:954:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:703":{"id":"0:703","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":{"restricted":{"parent":"0:5:1586","path":"::deflate"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionLevel","id":"0:679:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:313:1804":{"id":"0:313:1804","crate_id":0,"name":"create_comp_flags_from_zip_params","span":{"filename":"src/deflate/core.rs","begin":[2351,0],"end":[2381,1]},"visibility":"public","docs":"Create a set of compression flags using parameters used by zlib and other compressors.\nMainly intended for use with transition from c libraries as it deals with raw integers.\n\n# Parameters\n`level` determines compression level. Clamped to maximum of 10. Negative values result in\n`CompressionLevel::DefaultLevel`.\n`window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate\nstream.\n`strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.\n\n# Notes\nThis function may be removed or moved to the `miniz_oxide_c_api` in the future.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["level",{"kind":"primitive","inner":"i32"}],["window_bits",{"kind":"primitive","inner":"i32"}],["strategy",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:837:2480":{"id":"0:837:2480","crate_id":0,"name":"Adler32Mismatch","span":{"filename":"src/inflate/mod.rs","begin":[41,4],"end":[41,57]},"visibility":"default","docs":"The decompression went fine, but the adler32 checksum did not match the one\nprovided in the header.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"{ _ }","value":"-2"}}},"a:1:2660:222-0:505:2978":{"id":"a:1:2660:222-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:72:1979":{"id":"0:72:1979","crate_id":0,"name":"TDEFL_WRITE_ZLIB_HEADER","span":{"filename":"src/deflate/core.rs","begin":[170,4],"end":[170,57]},"visibility":"public","docs":"Whether to use a zlib wrapper.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0000_1000","value":"4_096u32","is_literal":true}},"a:1:7718:3340-0:964:1651":{"id":"a:1:7718:3340-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:881:1606":{"id":"0:881:1606","crate_id":0,"name":"Full","span":{"filename":"src/lib.rs","begin":[57,4],"end":[57,12]},"visibility":"default","docs":"Same as [`Sync`], but resets the compression dictionary so that further compressed\ndata does not depend on data compressed before the flush.\n\nHas no use in decompression, and is an error to supply in that case.","links":{"`Sync`":"1:2660:222"},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"3","value":"3"}}},"0:81:668":{"id":"0:81:668","crate_id":0,"name":"from","span":{"filename":"src/deflate/core.rs","begin":[231,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["flush",{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:615:409":{"id":"0:615:409","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2646:214-0:928:1614":{"id":"a:1:2646:214-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7719:3339-0:382:2531":{"id":"a:1:7719:3339-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11346:3930":{"id":"1:11346:3930","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:58461:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49972:4202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:923":{"id":"0:923","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,40],"end":[84,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[84,29],"end":[84,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:471:1776":{"id":"0:471:1776","crate_id":0,"name":"stream","span":{"filename":"src/inflate/stream.rs","begin":[1,0],"end":[418,1]},"visibility":"public","docs":"Extra streaming decompression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:489:2976","0:491:2981","0:495:2989","0:500:2992","0:505:2978","0:527:1587"],"is_stripped":false}},"b:1:2497-0:595:1823":{"id":"b:1:2497-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:985:1665":{"id":"0:985:1665","crate_id":0,"name":"StreamResult","span":{"filename":"src/lib.rs","begin":[180,0],"end":[187,1]},"visibility":"public","docs":"A structure containg the result of a call to the inflate or deflate streaming functions.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:986:1667","0:987:1669","0:988:1671"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:569","a:1:7719:3339-0:985:1665","a:1:2646:214-0:985:1665","a:1:7718:3340-0:985:1665","a:1:2660:222-0:985:1665","a:1:2710:3191-0:985:1665","b:1:2222-0:985:1665","b:1:2507-0:985:1665","b:1:2501-0:985:1665","b:1:2225-0:985:1665","b:1:2512-0:985:1665","b:1:3305-0:985:1665","b:1:2497-0:985:1665","b:4:671-0:985:1665","0:989","0:991","0:992","0:994","0:995","0:997","0:998","0:1000","0:571","0:573"]}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[92,0],"end":[104,1]},"visibility":{"restricted":{"parent":"0:330:1587","path":"::inflate"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8582:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2222-0:830:2468":{"id":"b:1:2222-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:830:2468":{"id":"a:1:2660:222-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:330:1587":{"id":"0:330:1587","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/mod.rs","begin":[1,0],"end":[337,1]},"visibility":"public","docs":"This module contains functionality for decompression.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:336:481","0:471:1776","0:830:2468","0:866:2497","0:544:1824","0:545:2449","0:546:2522","0:547:2524","0:549:2545"],"is_stripped":false}},"0:567:1661":{"id":"0:567:1661","crate_id":0,"name":"to_window_bits","span":{"filename":"src/lib.rs","begin":[167,4],"end":[172,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:929:1631":{"id":"0:929:1631","crate_id":0,"name":"ErrNo","span":{"filename":"src/lib.rs","begin":[111,4],"end":[111,14]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"-1","value":"-1"}}},"1:11426:34974":{"id":"1:11426:34974","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:58461:3071","self::pattern":"1:11022:3899"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2646:214-0:505:2978":{"id":"a:1:2646:214-0:505:2978","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7718:3340-0:625:1815":{"id":"a:1:7718:3340-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2646:214-0:128:2128":{"id":"a:1:2646:214-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:11411:34967":{"id":"1:11411:34967","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2507-0:866:2497":{"id":"b:1:2507-0:866:2497","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressError","id":"0:866:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2222-0:964:1651":{"id":"b:1:2222-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,22],"end":[42,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2239:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:894:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11344:2848":{"id":"1:11344:2848","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11343:34950"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:830:2468":{"id":"b:1:2225-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:998":{"id":"0:998","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,40],"end":[179,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2224:3058":{"id":"1:2224:3058","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:521:2982":{"id":"0:521:2982","crate_id":0,"name":"decompressor","span":{"filename":"src/inflate/stream.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Access the innner decompressor.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:996:595":{"id":"0:996:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[179,29],"end":[179,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2660:222-0:625:1815":{"id":"a:1:2660:222-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:959":{"id":"0:959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,40],"end":[108,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11343:34950":{"id":"1:11343:34950","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11344:2848"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11332:34947":{"id":"1:11332:34947","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:58478:3085"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:980":{"id":"0:980","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,40],"end":[146,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2274:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2660:222-0:904:1618":{"id":"a:1:2660:222-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11330:34946":{"id":"1:11330:34946","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:495:2989":{"id":"b:1:2222-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:309:1814":{"id":"0:309:1814","crate_id":0,"name":"compress","span":{"filename":"src/deflate/core.rs","begin":[2211,0],"end":[2222,1]},"visibility":"public","docs":"Main compression function. Tries to compress as much as possible from `in_buf` and\nputs compressed output into `out_buf`.\n\nThe value of `flush` determines if the compressor should attempt to flush all output\nand alternatively try to finish the stream.\n\nUse [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.\n\nNote that this function does not keep track of whether a flush marker has been output, so\nif called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the\noutput buffer if they want to avoid repeated flush markers.\nSee #105 for details.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer and the current position in the output buffer.","links":{"`TDEFLFlush::Sync`":"0:629:222","`TDEFLFlush::Finish`":"0:635:1608"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["out_buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flush",{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,9],"end":[146,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8577:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:972:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11379:34957":{"id":"1:11379:34957","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11022:3899","`DoubleEndedIterator`":"1:7062:120","prim@char":"1:58461:3071","str::rsplit_terminator":"1:11382:34958","str::split":"1:11370:34955"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50046:4207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:985:1665":{"id":"b:1:3305-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2501-0:625:1815":{"id":"b:1:2501-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2656:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2507-0:382:2531":{"id":"b:1:2507-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:570:1672":{"id":"0:570:1672","crate_id":0,"name":"error","span":{"filename":"src/lib.rs","begin":[191,4],"end":[197,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["error",{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:382:2531":{"id":"b:1:2222-0:382:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DecompressorOxide","id":"0:382:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2710:3191-0:128:2128":{"id":"a:1:2710:3191-0:128:2128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CallbackFunc","id":"0:128:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7719:3339-0:830:2468":{"id":"a:1:7719:3339-0:830:2468","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:3339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TINFLStatus","id":"0:830:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:75:1990":{"id":"0:75:1990","crate_id":0,"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[178,4],"end":[178,69]},"visibility":"public","docs":"Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\nthis flag is ignored.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"0x0000_8000","value":"32_768u32","is_literal":true}},"b:1:3305-0:928:1614":{"id":"b:1:3305-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:988:1671":{"id":"0:988:1671","crate_id":0,"name":"status","span":{"filename":"src/lib.rs","begin":[186,4],"end":[186,24]},"visibility":"public","docs":"The return status of the call.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"MZResult","id":"0:568:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"b:1:3305-0:595:1823":{"id":"b:1:3305-0:595:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressionStrategy","id":"0:595:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"4:5107:35640":{"id":"4:5107:35640","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498:1879":{"id":"0:498:1879","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[39,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"InflateState","id":"0:505:2978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2269:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:672:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2660:222-0:871:1595":{"id":"a:1:2660:222-0:871:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZFlush","id":"0:871:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2646:214-0:495:2989":{"id":"a:1:2646:214-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[421,0],"end":[515,1]},"visibility":{"restricted":{"parent":"0:39:481","path":"::deflate::core"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:909","0:118:2101","0:119:2104","0:120:643","0:121:2108","0:122:1879","0:123:2114","0:124:2117","0:125:2115"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:915:650":{"id":"0:915:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[84,9],"end":[84,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8537:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8526:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:495:2989":{"id":"b:1:2225-0:495:2989","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ZeroReset","id":"0:495:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2497-0:652:1816":{"id":"b:1:2497-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:659:1819":{"id":"0:659:1819","crate_id":0,"name":"Okay","span":{"filename":"src/deflate/core.rs","begin":[270,4],"end":[270,12]},"visibility":"default","docs":"Compression succeeded normally.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"0","value":"0"}}},"1:11321:783":{"id":"1:11321:783","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:58461:3071"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:595:1823":{"id":"0:595:1823","crate_id":0,"name":"CompressionStrategy","span":{"filename":"src/deflate/core.rs","begin":[195,0],"end":[207,1]},"visibility":"public","docs":"Strategy setting for compression.\n\nThe non-default settings offer some special-case compression variants.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:596:115","0:599:2009","0:602:1843","0:605:2012","0:608:2014"],"impls":["a:1:7719:3339-0:595:1823","a:1:2646:214-0:595:1823","a:1:7718:3340-0:595:1823","a:1:2660:222-0:595:1823","a:1:2710:3191-0:595:1823","b:1:2222-0:595:1823","b:1:2507-0:595:1823","b:1:2501-0:595:1823","b:1:2225-0:595:1823","b:1:2512-0:595:1823","b:1:3305-0:595:1823","b:1:2497-0:595:1823","b:4:671-0:595:1823","0:611","0:613","0:614","0:616","0:617","0:619","0:620","0:622"]}},"0:406:2101":{"id":"0:406:2101","crate_id":0,"name":"adler32","span":{"filename":"src/inflate/core.rs","begin":[214,4],"end":[220,5]},"visibility":"public","docs":"Returns the adler32 checksum of the currently decompressed data.\nNote: Will return Some(1) if decompressing zlib but ignoring adler32.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:652:1816":{"id":"b:1:2225-0:652:1816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLStatus","id":"0:652:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2227:31362"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2222-0:904:1618":{"id":"b:1:2222-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2224:3058"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:985:1665":{"id":"a:1:2660:222-0:985:1665","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2710:3191-0:928:1614":{"id":"a:1:2710:3191-0:928:1614","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:568:1663":{"id":"0:568:1663","crate_id":0,"name":"MZResult","span":{"filename":"src/lib.rs","begin":[176,0],"end":[176,46]},"visibility":"public","docs":"`Result` alias for all miniz status codes both successful and failed.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"MZError","id":"0:928:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:120:643":{"id":"0:120:643","crate_id":0,"name":"flags","span":{"filename":"src/deflate/core.rs","begin":[452,4],"end":[454,5]},"visibility":"public","docs":"Get the raw compressor flags.\n\n# Notes\nThis function may be deprecated or changed in the future to use more rust-style flags.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[179,40],"end":[179,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2657:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StreamResult","id":"0:985:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2501-0:111:1807":{"id":"b:1:2501-0:111:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CompressorOxide","id":"0:111:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2660:222-0:964:1651":{"id":"a:1:2660:222-0:964:1651","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DataFormat","id":"0:964:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:645:595":{"id":"0:645:595","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:650:701":{"id":"0:650:701","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377:2557":{"id":"0:377:2557","crate_id":0,"name":"TINFL_FLAG_IGNORE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[148,4],"end":[148,50]},"visibility":"public","docs":"Ignore adler32 checksum even if we are inflating a zlib stream.\n\nOverrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.\n\nNOTE: This flag does not exist in miniz as it does not support this and is a\ncustom addition for miniz_oxide.\n\nNOTE: Should not be changed from enabled to disabled after decompression has started,\nthis will result in checksum failure (outside the unlikely event where the checksum happens\nto match anyway).","links":{"`TINFL_FLAG_COMPUTE_ADLER32`":"0:376:2644"},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"primitive","inner":"u32"},"expr":"64","value":"64u32","is_literal":true}},"a:1:2646:214-0:904:1618":{"id":"a:1:2646:214-0:904:1618","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MZStatus","id":"0:904:1618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:683:1784":{"id":"0:683:1784","crate_id":0,"name":"BestSpeed","span":{"filename":"src/deflate/mod.rs","begin":[20,4],"end":[20,17]},"visibility":"default","docs":"Fast compression. Uses a special compression routine that is optimized for speed.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":{"expr":"1","value":"1"}}},"b:1:2497-0:625:1815":{"id":"b:1:2497-0:625:1815","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TDEFLFlush","id":"0:625:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2500:1805"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"4:3792:3483":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11022:3899":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:46893:4406":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8537:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:3721:3158":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9549:3720":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"0:929:1631":{"crate_id":0,"path":["miniz_oxide","MZError","ErrNo"],"kind":"variant"},"1:50046:4207":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:50492:3912":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:47551:4783":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:49982:4203":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6597:3818":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:50413:3907":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:50118:3716":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:48223:3483":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:2768:3861":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:47259:3994":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2806:3879":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:22387:4128":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9577:3721":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2216:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:53940:4064":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:1385:4485":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:3417:4624":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:56985:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50279:4219":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:21169:4099":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:6989:4458":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:1376:4424":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:46879:4221":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4249:4153":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:49070:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46396:197":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47156:3979":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:21658:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"0:692:1791":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultLevel"],"kind":"variant"},"0:941:1644":{"crate_id":0,"path":["miniz_oxide","MZError","Buf"],"kind":"variant"},"1:47064:3970":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:49896:3727":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:56920:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:6755:4479":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3141:227":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:52622:4068":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8590:3496":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:491:2981":{"crate_id":0,"path":["miniz_oxide","inflate","stream","MinReset"],"kind":"struct"},"1:20951:3960":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:52441:4872":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:21922:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:58460:3070":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"0:932:1636":{"crate_id":0,"path":["miniz_oxide","MZError","Stream"],"kind":"variant"},"4:6942:4463":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:47269:3995":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"0:325:1586":{"crate_id":0,"path":["miniz_oxide","deflate","stream","deflate"],"kind":"function"},"1:11955:3152":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"0:455:2533":{"crate_id":0,"path":["miniz_oxide","inflate","core","decompress"],"kind":"function"},"1:47496:4782":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:50974:156":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:50624:4308":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:5531:4430":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"0:840:2482":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Failed"],"kind":"variant"},"1:10811:4213":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:2734:37121":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:53978:4029":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"0:849:2493":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","HasMoreOutput"],"kind":"variant"},"0:599:2009":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Filtered"],"kind":"variant"},"1:47194:3989":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:3002:4422":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:5199:3163":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2772:3863":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:50961:4245":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:52936:4036":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8582:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:48767:3494":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:21260:4799":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:46933:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:46840:4403":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:58273:4917":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:46966:4299":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"0:887:1610":{"crate_id":0,"path":["miniz_oxide","MZFlush","Block"],"kind":"variant"},"0:313:1804":{"crate_id":0,"path":["miniz_oxide","deflate","core","create_comp_flags_from_zip_params"],"kind":"function"},"1:11665:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:53996:4898":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:1067:4492":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:7021:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46462:3710":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:6810:4146":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10772:4209":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:52152:4059":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:372:2515":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags"],"kind":"module"},"4:7000:4459":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:50146:4211":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:6978:218":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:9315:3718":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:19961:3419":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:54130:4908":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:20434:4021":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:2244:4497":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:46352:193":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49906:3728":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"0:656:2030":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","PutBufFailed"],"kind":"variant"},"1:4073:4145":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:21148:4790":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:58483:3090":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:2823:3887":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21237:4095":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:58471:3078":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:58459:3069":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:2796:3875":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:49825:3732":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:1680:3156":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:54016:4900":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3146:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:4356:3510":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:56972:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8588:3495":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"0:881:1606":{"crate_id":0,"path":["miniz_oxide","MZFlush","Full"],"kind":"variant"},"1:47244:3993":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:58473:3080":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:2477:231":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:52746:4060":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8596:3498":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:48028:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:49128:3492":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:8730:4785":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:2726:5008":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:46235:3485":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7139:155":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:48231:3160":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:6785:193":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:20221:4081":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:51974:4038":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:50991:4077":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:3094:3156":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:3898:2774":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:39322:3413":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21790:3709":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:54036:4902":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1737:4344":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:46521:4825":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:20277:3958":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:46580:3822":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:905:175":{"crate_id":0,"path":["miniz_oxide","MZStatus","Ok"],"kind":"variant"},"0:546:2522":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_with_limit"],"kind":"function"},"4:4735:4430":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"4:6723:3153":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:46418:196":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3068:3150":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:53012:4043":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11843:4246":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:3366:4015":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"0:549:2545":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_slice_iter_to_slice"],"kind":"function"},"1:6798:33212":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:2269:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2465:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:53046:4025":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:58485:3092":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:47218:3991":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4043:4144":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:46336:195":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:46796:3842":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46535:3508":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:6988:3984":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"0:967:1656":{"crate_id":0,"path":["miniz_oxide","DataFormat","ZLibIgnoreChecksum"],"kind":"variant"},"1:58467:3076":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:10590:4384":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"0:376:2644":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_COMPUTE_ADLER32"],"kind":"constant"},"1:48079:2549":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:56959:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:52174:4062":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4517:4400":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4178:202":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2658:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:48607:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:48155:3402":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:21757:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:49320:3651":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:53196:4049":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:5962:3158":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2789:3873":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:47133:3978":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:56563:4251":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:47095:3974":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2433:3209":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:50715:4232":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"0:327:1795":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec"],"kind":"function"},"1:21691:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3964:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:51891:4869":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:6288:3163":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:0:1676":{"crate_id":5,"path":["adler"],"kind":"module"},"1:9435:3736":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:50444:3911":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:58461:3071":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:58482:3089":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"4:620:4759":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"0:544:1824":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec"],"kind":"function"},"4:6747:3158":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:54062:4904":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2265:416":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:4706:767":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47086:3973":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:39309:4504":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"0:547:2524":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib_with_limit"],"kind":"function"},"1:50295:4221":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:48265:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:21201:4792":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:46376:194":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:49329:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10560:3706":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:46938:4297":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:20436:3959":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:2976:4420":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:336:481":{"crate_id":0,"path":["miniz_oxide","inflate","core"],"kind":"module"},"0:695:1793":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultCompression"],"kind":"variant"},"1:11638:34347":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:50014:3722":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:51992:4870":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:54005:4899":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:52298:4039":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:49031:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:48164:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"0:346:2587":{"crate_id":0,"path":["miniz_oxide","inflate","core","TINFL_LZ_DICT_SIZE"],"kind":"constant"},"1:1751:5011":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:4614:3828":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2817:3884":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11617:14922":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"0:625:1815":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:6474:4643":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:29723:4292":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:50953:4244":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:51003:3201":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9290:3483":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:50910:4866":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2274:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:21298:31739":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"0:602:1843":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","HuffmanOnly"],"kind":"variant"},"1:20158:4125":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"0:866:2497":{"crate_id":0,"path":["miniz_oxide","inflate","DecompressError"],"kind":"struct"},"1:10186:4651":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:8310:4187":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:50164:4212":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"0:489:2976":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ResetPolicy"],"kind":"trait"},"1:29523:3681":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:50519:3913":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:7823:3898":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:6793:4426":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:58481:3088":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:1672:1048":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:20246:4126":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:50918:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:1230:4501":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"0:626:174":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","None"],"kind":"variant"},"1:54051:4903":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11690:4788":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"0:314:1776":{"crate_id":0,"path":["miniz_oxide","deflate","stream"],"kind":"module"},"1:10576:3708":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2471:146":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:4059:3828":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:52122:4055":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:6317:3165":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"0:78:2000":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_STATIC_BLOCKS"],"kind":"constant"},"1:29617:4291":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8814:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2468:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:5827:1506":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:47124:3977":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:10983:3845":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:49341:2655":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:58472:3079":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"4:2730:37120":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2764:3859":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4259:3508":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"0:328:1801":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec_zlib"],"kind":"function"},"1:7409:3188":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:21350:4340":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:4988:4636":{"crate_id":4,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"4:2968:4419":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2975:3149":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:47208:3990":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:21277:31730":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2660:222":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:54192:4910":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:58477:3084":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"4:6972:5009":{"crate_id":4,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:49954:3943":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"0:659:1819":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Okay"],"kind":"variant"},"1:51767:4045":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:76:1494":{"crate_id":1,"path":["core","usize"],"kind":"module"},"4:939:4624":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:46810:4408":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:21343:5121":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:50260:4217":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2919:2131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47295:3997":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"0:374:2558":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_HAS_MORE_INPUT"],"kind":"constant"},"4:3337:2774":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8916:1315":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:47165:3987":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2219:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:53402:4069":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:6867:3154":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2710:3191":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:47023:4839":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"0:871:1595":{"crate_id":0,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"0:330:1587":{"crate_id":0,"path":["miniz_oxide","inflate"],"kind":"module"},"5:44:3048":{"crate_id":5,"path":["adler","Adler32"],"kind":"struct"},"1:11248:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2835:3871":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:50719:4234":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:1552:3828":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:8142:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:52268:4035":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:21625:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"0:679:1780":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:9266:2774":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:20283:3962":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:48379:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:1394:4486":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:3472:4445":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7720:3338":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:53654:4057":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3354:4009":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:6417:2256":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10109:3734":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:20234:3957":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:29483:3145":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:47073:3972":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:58468:3077":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:8584:3493":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:48455:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2657:219":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:58486:3093":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:3892:3828":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:3303:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:4092:4629":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2776:3865":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:49304:3652":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:19989:33233":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:50250:4216":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:58475:3082":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:52366:4027":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"0:969:1658":{"crate_id":0,"path":["miniz_oxide","DataFormat","Raw"],"kind":"variant"},"0:843:1817":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Done"],"kind":"variant"},"4:2725:37123":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"0:683:1784":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestSpeed"],"kind":"variant"},"0:74:1986":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_GREEDY_PARSING_FLAG"],"kind":"constant"},"4:3548:4624":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11833:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:46440:198":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:50200:4214":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:48104:3160":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"0:605:2012":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","RLE"],"kind":"variant"},"1:2831:3891":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:7055:3156":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:4014:238":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:54153:4909":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:20949:3957":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:21955:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"0:652:1816":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:7072:3157":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:2981:4421":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:51789:4033":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4113:3507":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:6955:4464":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6503:3971":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:52488:4873":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4187:4148":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:21823:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:20006:33436":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:4519:199":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:48493:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:1338:2774":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:4029:4629":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:50581:3916":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8800:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:6750:4781":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7085:3214":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:382:2531":{"crate_id":0,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:46274:3197":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6550:4123":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:6879:4470":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:29559:4290":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:47530:4650":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:49785:3713":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"0:495:2989":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ZeroReset"],"kind":"struct"},"1:49940:4303":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"0:72:1979":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_WRITE_ZLIB_HEADER"],"kind":"constant"},"1:49040:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"0:595:1823":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:47104:3975":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:20408:28782":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:6912:4462":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:51721:4065":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:58484:3091":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:8526:205":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:8577:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:6895:102":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:5611:31400":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"4:6777:3160":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:2784:3869":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"0:39:481":{"crate_id":0,"path":["miniz_oxide","deflate","core"],"kind":"module"},"1:48417:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:21252:4798":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:48240:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2481:230":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9119:216":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:52222:4047":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:50398:3904":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:46857:4222":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:52029:4871":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"0:846:2491":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","NeedsMoreInput"],"kind":"variant"},"1:50427:3910":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:47013:4644":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:47185:3988":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"0:965:1653":{"crate_id":0,"path":["miniz_oxide","DataFormat","Zlib"],"kind":"variant"},"1:5444:3981":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:1404:4487":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7718:3340":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:47227:3992":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:6732:3160":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:50747:4317":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:48531:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9508:3723":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4182:4147":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:21314:31747":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:20275:3957":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:3326:158":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:662:1817":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Done"],"kind":"variant"},"4:36:3155":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7416:3817":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:48096:3483":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2916:3213":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:50787:4319":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:842:4477":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10735:4206":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"0:568:1663":{"crate_id":0,"path":["miniz_oxide","MZResult"],"kind":"typedef"},"1:2827:3889":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:54100:4906":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"0:837:2480":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Adler32Mismatch"],"kind":"variant"},"1:51922:4046":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:49359:4861":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:223:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:49555:3744":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:49851:3730":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:7034:3215":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:50723:4233":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"0:944:1645":{"crate_id":0,"path":["miniz_oxide","MZError","Version"],"kind":"variant"},"0:111:1807":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"0:596:115":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Default"],"kind":"variant"},"1:9563:3716":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:6156:4624":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3220:3195":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:2465:4496":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:46919:3844":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:50100:3720":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8147:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:771:4476":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:9358:3735":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:46321:4136":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3940:4082":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:50218:4215":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:1359:3160":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:46759:4827":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:21042:4261":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8586:3494":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:7719:3339":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"3:0:3116":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:2019:37224":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:4333:3416":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:49551:4412":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4680:34364":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:48341:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:21364:4281":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:48113:3336":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:6449:4638":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:47174:3982":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:49877:3726":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:25197:4080":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:52320:4042":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2922:2809":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:4936:4520":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"4:1426:193":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:53794:4061":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11036:3901":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:58466:3075":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"0:834:2027":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","BadParam"],"kind":"variant"},"1:50743:4231":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2888:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"0:471:1776":{"crate_id":0,"path":["miniz_oxide","inflate","stream"],"kind":"module"},"1:11027:3898":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3183:3193":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:49996:3718":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:49972:4202":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9470:3722":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:39273:3208":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"0:629:222":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Sync"],"kind":"variant"},"4:5619:3828":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:50731:4235":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:6738:4478":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:3350:3483":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"0:310:2394":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress_to_output"],"kind":"function"},"1:8527:3488":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:52076:4067":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46900:4407":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"0:527:1587":{"crate_id":0,"path":["miniz_oxide","inflate","stream","inflate"],"kind":"function"},"1:58479:3086":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:7025:148":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11093:3906":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:4974:4634":{"crate_id":4,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:6926:4298":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:50304:4222":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:768:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:1971:4494":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:20029:33434":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:1760:4343":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:859:2774":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:49725:4200":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"0:964:1651":{"crate_id":0,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:47521:4846":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:1216:4500":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:5808:31057":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"4:215:3203":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:56998:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4659:11738":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"0:884:1608":{"crate_id":0,"path":["miniz_oxide","MZFlush","Finish"],"kind":"variant"},"1:1636:571":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:20008:33439":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"0:375:2528":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF"],"kind":"constant"},"1:21376:4280":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10795:4210":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2811:3881":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4:977":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:667:225":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2752:3853":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:7062:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:54115:4907":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:1301:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:5422:3158":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"4:2906:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8592:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:47280:3996":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:21988:4267":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:3460:4444":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:6405:237":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"5:36:5007":{"crate_id":5,"path":["adler","algo","U32X4"],"kind":"struct"},"1:21095:4264":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:5:1506":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:6984:3985":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:29313:4335":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"0:505:2978":{"crate_id":0,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:21889:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"0:908:1626":{"crate_id":0,"path":["miniz_oxide","MZStatus","StreamEnd"],"kind":"variant"},"1:10846:3735":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:50900:200":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:6763:34930":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:46886:4405":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"0:77:1996":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FILTER_MATCHES"],"kind":"constant"},"0:500:2992":{"crate_id":0,"path":["miniz_oxide","inflate","stream","FullReset"],"kind":"struct"},"1:21225:4094":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"0:377:2557":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_IGNORE_ADLER32"],"kind":"constant"},"0:653:2027":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","BadParam"],"kind":"variant"},"1:0:481":{"crate_id":1,"path":["core"],"kind":"module"},"0:878:222":{"crate_id":0,"path":["miniz_oxide","MZFlush","Sync"],"kind":"variant"},"4:2039:4493":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:49351:4860":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:53544:4037":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"0:689:1788":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","UberCompression"],"kind":"variant"},"0:76:1993":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_RLE_MATCHES"],"kind":"constant"},"1:20691:28800":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:48781:3495":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:4313:3509":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:11042:3902":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3600:3160":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"0:545:2449":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib"],"kind":"function"},"1:50376:3900":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"0:635:1608":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Finish"],"kind":"variant"},"1:2653:3211":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:51677:4867":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:1933:4628":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:52858:4048":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:1185:4499":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:6820:3160":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:3529:3156":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:46950:4298":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6307:3164":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:21185:5116":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:46832:4223":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:2947:4418":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"0:680:1782":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","NoCompression"],"kind":"variant"},"1:38117:3419":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2432:3957":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:49776:3715":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:53732:4041":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:48088:2774":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:50727:4237":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:50591:3917":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:6008:4624":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:2724:4525":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:56946:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:3751:4624":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:49058:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:46768:3839":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:58465:3074":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:20195:3954":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:0:429":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:49025:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:54025:4901":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:5832:3983":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2901:3194":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2723:3189":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:11874:200":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"0:73:1982":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_COMPUTE_ADLER32"],"kind":"constant"},"1:2311:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:46501:4010":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:53856:4026":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:1033:37339":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2697:3412":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:50064:4208":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:58464:3073":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:48774:3493":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3168:3940":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:51697:4868":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:49144:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:9397:3719":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11047:3903":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"0:608:2014":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Fixed"],"kind":"variant"},"1:8594:3497":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"0:5:1586":{"crate_id":0,"path":["miniz_oxide","deflate"],"kind":"module"},"0:373:2516":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_PARSE_ZLIB_HEADER"],"kind":"constant"},"0:686:1786":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestCompression"],"kind":"variant"},"1:2953:3196":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:20403:3957":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:38100:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:49794:3714":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:50735:4236":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2665:3144":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:20686:3961":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:14:2204":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:8854:3650":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:48303:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:20855:33231":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8305:4186":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1643:3679":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:50313:4223":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:1584:4624":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:58474:3081":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:48645:4302":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:52542:4875":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:6814:3160":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:58294:4918":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:29545:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:2935:2774":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:49312:4852":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:2142:572":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:21724:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3952:4083":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2548:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"0:938:1640":{"crate_id":0,"path":["miniz_oxide","MZError","Mem"],"kind":"variant"},"0:0:1675":{"crate_id":0,"path":["miniz_oxide"],"kind":"module"},"1:50556:3914":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:46528:4826":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:1943:4425":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11997:3424":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"0:872:174":{"crate_id":0,"path":["miniz_oxide","MZFlush","None"],"kind":"variant"},"1:50570:3915":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:676:110":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:19974:33233":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:1415:4488":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:48569:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8849:3649":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:51952:4034":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:20027:33438":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:1474:1885":{"crate_id":1,"path":["core","mem"],"kind":"module"},"4:1348:3483":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:5547:4431":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2912:3212":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:20427:3957":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:49886:3729":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:52776:4063":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:47142:4840":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:48172:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:2971:3148":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:58476:3083":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"0:947:182":{"crate_id":0,"path":["miniz_oxide","MZError","Param"],"kind":"variant"},"1:52519:4874":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"0:309:1814":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress"],"kind":"function"},"0:904:1618":{"crate_id":0,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:50711:4229":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:48215:2774":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:20324:3959":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:49007:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:54077:4905":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:46753:4222":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2646:214":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:276:1884":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:21856:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:52982:4040":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:52011:4023":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:47043:3730":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:1919:3198":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"0:911:1628":{"crate_id":0,"path":["miniz_oxide","MZStatus","NeedDict"],"kind":"variant"},"1:53902:4044":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:632:1606":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Full"],"kind":"variant"},"1:2654:3192":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:50604:4307":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2562:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:9109:3957":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:47310:3986":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4304:4154":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:1201:4502":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"0:935:1639":{"crate_id":0,"path":["miniz_oxide","MZError","Data"],"kind":"variant"},"1:2840:3895":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2656:220":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:47503:4843":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:50270:4218":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:46780:3840":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"0:985:1665":{"crate_id":0,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:49814:3725":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"0:928:1614":{"crate_id":0,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:52344:4024":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:49966:4201":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11604:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:51851:4054":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:48146:3337":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:4932:4518":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:58462:3072":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:29517:3146":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2737:3846":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:46494:3941":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:6081:3160":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3152:3832":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:71:1886":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags"],"kind":"module"},"1:49804:3724":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:58480:3087":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:2780:3867":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2474:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:58478:3085":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"0:831:2476":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","FailedCannotMakeProgress"],"kind":"variant"},"1:3987:3187":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:20843:3712":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"0:128:2128":{"crate_id":0,"path":["miniz_oxide","deflate","core","CallbackFunc"],"kind":"struct"},"4:1049:4491":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:47540:4847":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2305:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:0:279":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:50288:4220":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:48788:3496":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7412:3484":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:50766:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2801:3877":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"0:830:2468":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:49092:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:51821:4066":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:1435:4489":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:50739:4230":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3158:3831":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:5358:226":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:3131:3711":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2747:3851":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"0:75:1990":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_NONDETERMINISTIC_PARSING_FLAG"],"kind":"constant"},"1:10076:3733":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"0:875:1600":{"crate_id":0,"path":["miniz_oxide","MZFlush","Partial"],"kind":"variant"},"1:52700:4056":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:2942:4417":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:47114:3976":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:4888:4624":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:51743:4053":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:9591:3717":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:52390:4028":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:5894:4638":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:1825:3151":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:5511:69":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46820:4409":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"0:79:2003":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_RAW_BLOCKS"],"kind":"constant"},"1:51873:4058":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:46863:4404":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:2742:3849":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2758:3856":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:39313:4072":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2239:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:49864:3731":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:50799:4320":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:11742:33610":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:56933:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47512:4844":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5367:3980":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}